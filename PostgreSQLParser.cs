//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.11.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from C:\Users\Andres\Documents\bcS\NppDB\NppDB.PostgreSQL\PostgreSQLParser.g4 by ANTLR 4.11.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419



using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.11.1")]
[System.CLSCompliant(false)]
public partial class PostgreSQLParser : PostgreSQLParserBase {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		Dollar=1, OPEN_PAREN=2, CLOSE_PAREN=3, OPEN_BRACKET=4, CLOSE_BRACKET=5, 
		COMMA=6, SEMI=7, COLON=8, STAR=9, EQUAL=10, DOT=11, PLUS=12, MINUS=13, 
		SLASH=14, CARET=15, LT=16, GT=17, LESS_LESS=18, GREATER_GREATER=19, COLON_EQUALS=20, 
		LESS_EQUALS=21, EQUALS_GREATER=22, GREATER_EQUALS=23, DOT_DOT=24, NOT_EQUALS=25, 
		TYPECAST=26, PERCENT=27, PARAM=28, Operator=29, ALL=30, ANALYSE=31, ANALYZE=32, 
		AND=33, ANY=34, ARRAY=35, AS=36, ASC=37, ASYMMETRIC=38, BOTH=39, CASE=40, 
		CAST=41, CHECK=42, COLLATE=43, COLUMN=44, CONSTRAINT=45, CREATE=46, CURRENT_CATALOG=47, 
		CURRENT_DATE=48, CURRENT_ROLE=49, CURRENT_TIME=50, CURRENT_TIMESTAMP=51, 
		CURRENT_USER=52, DEFAULT=53, DEFERRABLE=54, DESC=55, DISTINCT=56, DO=57, 
		ELSE=58, EXCEPT=59, FALSE_P=60, FETCH=61, FOR=62, FOREIGN=63, FROM=64, 
		GRANT=65, GROUP_P=66, HAVING=67, IN_P=68, INITIALLY=69, INTERSECT=70, 
		INTO=71, LATERAL_P=72, LEADING=73, LIMIT=74, LOCALTIME=75, LOCALTIMESTAMP=76, 
		NOT=77, NULL_P=78, OFFSET=79, ON=80, ONLY=81, OR=82, ORDER=83, PLACING=84, 
		PRIMARY=85, REFERENCES=86, RETURNING=87, SELECT=88, SESSION_USER=89, SOME=90, 
		SYMMETRIC=91, TABLE=92, THEN=93, TO=94, TRAILING=95, TRUE_P=96, UNION=97, 
		UNIQUE=98, USER=99, USING=100, VARIADIC=101, WHEN=102, WHERE=103, WINDOW=104, 
		WITH=105, AUTHORIZATION=106, BINARY=107, COLLATION=108, CONCURRENTLY=109, 
		CROSS=110, CURRENT_SCHEMA=111, FREEZE=112, FULL=113, ILIKE=114, INNER_P=115, 
		IS=116, ISNULL=117, JOIN=118, LEFT=119, LIKE=120, NATURAL=121, NOTNULL=122, 
		OUTER_P=123, OVER=124, OVERLAPS=125, RIGHT=126, SIMILAR=127, VERBOSE=128, 
		ABORT_P=129, ABSOLUTE_P=130, ACCESS=131, ACTION=132, ADD_P=133, ADMIN=134, 
		AFTER=135, AGGREGATE=136, ALSO=137, ALTER=138, ALWAYS=139, ASSERTION=140, 
		ASSIGNMENT=141, AT=142, ATOMIC=143, ATTRIBUTE=144, BACKWARD=145, BEFORE=146, 
		BEGIN_P=147, BY=148, CACHE=149, CALLED=150, CASCADE=151, CASCADED=152, 
		CATALOG=153, CHAIN=154, CHARACTERISTICS=155, CHECKPOINT=156, CLASS=157, 
		CLOSE=158, CLUSTER=159, COMMENT=160, COMMENTS=161, COMMIT=162, COMMITTED=163, 
		CONFIGURATION=164, CONNECTION=165, CONSTRAINTS=166, CONTENT_P=167, CONTINUE_P=168, 
		CONVERSION_P=169, COPY=170, COST=171, CSV=172, CURSOR=173, CYCLE=174, 
		DATA_P=175, DATABASE=176, DAY_P=177, DEALLOCATE=178, DECLARE=179, DEFAULTS=180, 
		DEFERRED=181, DEFINER=182, DELETE_P=183, DELIMITER=184, DELIMITERS=185, 
		DICTIONARY=186, DISABLE_P=187, DISCARD=188, DOCUMENT_P=189, DOMAIN_P=190, 
		DOUBLE_P=191, DROP=192, EACH=193, ENABLE_P=194, ENCODING=195, ENCRYPTED=196, 
		ENUM_P=197, ESCAPE=198, EVENT=199, EXCLUDE=200, EXCLUDING=201, EXCLUSIVE=202, 
		EXECUTE=203, EXPLAIN=204, EXTENSION=205, EXTERNAL=206, FAMILY=207, FIRST_P=208, 
		FOLLOWING=209, FORCE=210, FORWARD=211, FUNCTION=212, FUNCTIONS=213, GLOBAL=214, 
		GRANTED=215, HANDLER=216, HEADER_P=217, HOLD=218, HOUR_P=219, IDENTITY_P=220, 
		IF_P=221, IMMEDIATE=222, IMMUTABLE=223, IMPLICIT_P=224, INCLUDING=225, 
		INCREMENT=226, INDEX=227, INDEXES=228, INHERIT=229, INHERITS=230, INLINE_P=231, 
		INSENSITIVE=232, INSERT=233, INSTEAD=234, INVOKER=235, ISOLATION=236, 
		KEY=237, LABEL=238, LANGUAGE=239, LARGE_P=240, LAST_P=241, LEAKPROOF=242, 
		LEVEL=243, LISTEN=244, LOAD=245, LOCAL=246, LOCATION=247, LOCK_P=248, 
		MAPPING=249, MATCH=250, MATCHED=251, MATERIALIZED=252, MAXVALUE=253, MERGE=254, 
		MINUTE_P=255, MINVALUE=256, MODE=257, MONTH_P=258, MOVE=259, NAME_P=260, 
		NAMES=261, NEXT=262, NO=263, NOTHING=264, NOTIFY=265, NOWAIT=266, NULLS_P=267, 
		OBJECT_P=268, OF=269, OFF=270, OIDS=271, OPERATOR=272, OPTION=273, OPTIONS=274, 
		OWNED=275, OWNER=276, PARSER=277, PARTIAL=278, PARTITION=279, PASSING=280, 
		PASSWORD=281, PLANS=282, PRECEDING=283, PREPARE=284, PREPARED=285, PRESERVE=286, 
		PRIOR=287, PRIVILEGES=288, PROCEDURAL=289, PROCEDURE=290, PROGRAM=291, 
		QUOTE=292, RANGE=293, READ=294, REASSIGN=295, RECHECK=296, RECURSIVE=297, 
		REF=298, REFRESH=299, REINDEX=300, RELATIVE_P=301, RELEASE=302, RENAME=303, 
		REPEATABLE=304, REPLACE=305, REPLICA=306, RESET=307, RESTART=308, RESTRICT=309, 
		RETURNS=310, REVOKE=311, ROLE=312, ROLLBACK=313, ROWS=314, RULE=315, SAVEPOINT=316, 
		SCHEMA=317, SCROLL=318, SEARCH=319, SECOND_P=320, SECURITY=321, SEQUENCE=322, 
		SEQUENCES=323, SERIALIZABLE=324, SERVER=325, SESSION=326, SET=327, SHARE=328, 
		SHOW=329, SIMPLE=330, SNAPSHOT=331, STABLE=332, STANDALONE_P=333, START=334, 
		STATEMENT=335, STATISTICS=336, STDIN=337, STDOUT=338, STORAGE=339, STRICT_P=340, 
		STRIP_P=341, SYSID=342, SYSTEM_P=343, TABLES=344, TABLESPACE=345, TEMP=346, 
		TEMPLATE=347, TEMPORARY=348, TEXT_P=349, TRANSACTION=350, TRIGGER=351, 
		TRUNCATE=352, TRUSTED=353, TYPE_P=354, TYPES_P=355, UNBOUNDED=356, UNCOMMITTED=357, 
		UNENCRYPTED=358, UNKNOWN=359, UNLISTEN=360, UNLOGGED=361, UNTIL=362, UPDATE=363, 
		VACUUM=364, VALID=365, VALIDATE=366, VALIDATOR=367, VARYING=368, VERSION_P=369, 
		VIEW=370, VOLATILE=371, WHITESPACE_P=372, WITHOUT=373, WORK=374, WRAPPER=375, 
		WRITE=376, XML_P=377, YEAR_P=378, YES_P=379, ZONE=380, BETWEEN=381, BIGINT=382, 
		BIT=383, BOOLEAN_P=384, CHAR_P=385, CHARACTER=386, COALESCE=387, DEC=388, 
		DECIMAL_P=389, EXISTS=390, EXTRACT=391, FLOAT_P=392, GREATEST=393, INOUT=394, 
		INT_P=395, INTEGER=396, INTERVAL=397, LEAST=398, NATIONAL=399, NCHAR=400, 
		NONE=401, NULLIF=402, NUMERIC=403, OVERLAY=404, POSITION=405, PRECISION=406, 
		REAL=407, ROW=408, SETOF=409, SMALLINT=410, SUBSTRING=411, TIME=412, TIMESTAMP=413, 
		TREAT=414, TRIM=415, VALUES=416, VARCHAR=417, XMLATTRIBUTES=418, XMLCOMMENT=419, 
		XMLAGG=420, XML_IS_WELL_FORMED=421, XML_IS_WELL_FORMED_DOCUMENT=422, XML_IS_WELL_FORMED_CONTENT=423, 
		XPATH=424, XPATH_EXISTS=425, XMLCONCAT=426, XMLELEMENT=427, XMLEXISTS=428, 
		XMLFOREST=429, XMLPARSE=430, XMLPI=431, XMLROOT=432, XMLSERIALIZE=433, 
		CALL=434, CURRENT_P=435, ATTACH=436, DETACH=437, EXPRESSION=438, GENERATED=439, 
		LOGGED=440, STORED=441, INCLUDE=442, ROUTINE=443, TRANSFORM=444, IMPORT_P=445, 
		POLICY=446, METHOD=447, REFERENCING=448, NEW=449, OLD=450, VALUE_P=451, 
		SUBSCRIPTION=452, PUBLICATION=453, OUT_P=454, END_P=455, ROUTINES=456, 
		SCHEMAS=457, PROCEDURES=458, INPUT_P=459, SUPPORT=460, PARALLEL=461, SQL_P=462, 
		DEPENDS=463, OVERRIDING=464, CONFLICT=465, SKIP_P=466, LOCKED=467, TIES=468, 
		ROLLUP=469, CUBE=470, GROUPING=471, SETS=472, TABLESAMPLE=473, ORDINALITY=474, 
		XMLTABLE=475, COLUMNS=476, XMLNAMESPACES=477, ROWTYPE=478, NORMALIZED=479, 
		WITHIN=480, FILTER=481, GROUPS=482, OTHERS=483, NFC=484, NFD=485, NFKC=486, 
		NFKD=487, UESCAPE=488, VIEWS=489, NORMALIZE=490, DUMP=491, PRINT_STRICT_PARAMS=492, 
		VARIABLE_CONFLICT=493, ERROR=494, USE_VARIABLE=495, USE_COLUMN=496, ALIAS=497, 
		CONSTANT=498, PERFORM=499, GET=500, DIAGNOSTICS=501, STACKED=502, ELSIF=503, 
		WHILE=504, REVERSE=505, FOREACH=506, SLICE=507, EXIT=508, RETURN=509, 
		QUERY=510, RAISE=511, SQLSTATE=512, DEBUG=513, LOG=514, INFO=515, NOTICE=516, 
		WARNING=517, EXCEPTION=518, ASSERT=519, LOOP=520, OPEN=521, ABS=522, CBRT=523, 
		CEIL=524, CEILING=525, DEGREES=526, DIV=527, EXP=528, FACTORIAL=529, FLOOR=530, 
		GCD=531, LCM=532, LN=533, LOG10=534, MIN_SCALE=535, MOD=536, PI=537, POWER=538, 
		RADIANS=539, ROUND=540, SCALE=541, SIGN=542, SQRT=543, TRIM_SCALE=544, 
		TRUNC=545, WIDTH_BUCKET=546, RANDOM=547, SETSEED=548, ACOS=549, ACOSD=550, 
		ASIN=551, ASIND=552, ATAN=553, ATAND=554, ATAN2=555, ATAN2D=556, COS=557, 
		COSD=558, COT=559, COTD=560, SIN=561, SIND=562, TAN=563, TAND=564, SINH=565, 
		COSH=566, TANH=567, ASINH=568, ACOSH=569, ATANH=570, BIT_LENGTH=571, CHAR_LENGTH=572, 
		CHARACTER_LENGTH=573, LOWER=574, OCTET_LENGTH=575, UPPER=576, ASCII=577, 
		BTRIM=578, CHR=579, CONCAT=580, CONCAT_WS=581, FORMAT=582, INITCAP=583, 
		LENGTH=584, LPAD=585, LTRIM=586, MD5=587, PARSE_IDENT=588, PG_CLIENT_ENCODING=589, 
		QUOTE_IDENT=590, QUOTE_LITERAL=591, QUOTE_NULLABLE=592, REGEXP_COUNT=593, 
		REGEXP_INSTR=594, REGEXP_LIKE=595, REGEXP_MATCH=596, REGEXP_MATCHES=597, 
		REGEXP_REPLACE=598, REGEXP_SPLIT_TO_ARRAY=599, REGEXP_SPLIT_TO_TABLE=600, 
		REGEXP_SUBSTR=601, REPEAT=602, RPAD=603, RTRIM=604, SPLIT_PART=605, STARTS_WITH=606, 
		STRING_TO_ARRAY=607, STRING_TO_TABLE=608, STRPOS=609, SUBSTR=610, TO_ASCII=611, 
		TO_HEX=612, TRANSLATE=613, UNISTR=614, AGE=615, CLOCK_TIMESTAMP=616, DATE_BIN=617, 
		DATE_PART=618, DATE_TRUNC=619, ISFINITE=620, JUSTIFY_DAYS=621, JUSTIFY_HOURS=622, 
		JUSTIFY_INTERVAL=623, MAKE_DATE=624, MAKE_INTERVAL=625, MAKE_TIME=626, 
		MAKE_TIMESTAMP=627, MAKE_TIMESTAMPTZ=628, NOW=629, STATEMENT_TIMESTAMP=630, 
		TIMEOFDAY=631, TRANSACTION_TIMESTAMP=632, TO_TIMESTAMP=633, TO_CHAR=634, 
		TO_DATE=635, TO_NUMBER=636, Identifier=637, QuotedIdentifier=638, UnterminatedQuotedIdentifier=639, 
		InvalidQuotedIdentifier=640, InvalidUnterminatedQuotedIdentifier=641, 
		UnicodeQuotedIdentifier=642, UnterminatedUnicodeQuotedIdentifier=643, 
		InvalidUnicodeQuotedIdentifier=644, InvalidUnterminatedUnicodeQuotedIdentifier=645, 
		StringConstant=646, UnterminatedStringConstant=647, UnicodeEscapeStringConstant=648, 
		UnterminatedUnicodeEscapeStringConstant=649, BeginDollarStringConstant=650, 
		BinaryStringConstant=651, UnterminatedBinaryStringConstant=652, InvalidBinaryStringConstant=653, 
		InvalidUnterminatedBinaryStringConstant=654, HexadecimalStringConstant=655, 
		UnterminatedHexadecimalStringConstant=656, InvalidHexadecimalStringConstant=657, 
		InvalidUnterminatedHexadecimalStringConstant=658, Integral=659, NumericFail=660, 
		Numeric=661, PLSQLVARIABLENAME=662, PLSQLIDENTIFIER=663, Whitespace=664, 
		Newline=665, LineComment=666, BlockComment=667, UnterminatedBlockComment=668, 
		MetaCommand=669, EndMetaCommand=670, ErrorCharacter=671, EscapeStringConstant=672, 
		UnterminatedEscapeStringConstant=673, InvalidEscapeStringConstant=674, 
		InvalidUnterminatedEscapeStringConstant=675, AfterEscapeStringConstantMode_NotContinued=676, 
		AfterEscapeStringConstantWithNewlineMode_NotContinued=677, DollarText=678, 
		EndDollarStringConstant=679, AfterEscapeStringConstantWithNewlineMode_Continued=680;
	public const int
		RULE_root = 0, RULE_plsqlroot = 1, RULE_stmtblock = 2, RULE_stmtmulti = 3, 
		RULE_stmt = 4, RULE_plsqlconsolecommand = 5, RULE_callstmt = 6, RULE_createrolestmt = 7, 
		RULE_opt_with = 8, RULE_optrolelist = 9, RULE_alteroptrolelist = 10, RULE_alteroptroleelem = 11, 
		RULE_createoptroleelem = 12, RULE_createuserstmt = 13, RULE_alterrolestmt = 14, 
		RULE_opt_in_database = 15, RULE_alterrolesetstmt = 16, RULE_droprolestmt = 17, 
		RULE_creategroupstmt = 18, RULE_altergroupstmt = 19, RULE_add_drop = 20, 
		RULE_createschemastmt = 21, RULE_optschemaname = 22, RULE_optschemaeltlist = 23, 
		RULE_schema_stmt = 24, RULE_variablesetstmt = 25, RULE_set_rest = 26, 
		RULE_generic_set = 27, RULE_set_rest_more = 28, RULE_var_name = 29, RULE_var_list = 30, 
		RULE_var_value = 31, RULE_iso_level = 32, RULE_opt_boolean_or_string = 33, 
		RULE_zone_value = 34, RULE_opt_encoding = 35, RULE_nonreservedword_or_sconst = 36, 
		RULE_variableresetstmt = 37, RULE_reset_rest = 38, RULE_generic_reset = 39, 
		RULE_setresetclause = 40, RULE_functionsetresetclause = 41, RULE_variableshowstmt = 42, 
		RULE_constraintssetstmt = 43, RULE_constraints_set_list = 44, RULE_constraints_set_mode = 45, 
		RULE_checkpointstmt = 46, RULE_discardstmt = 47, RULE_altertablestmt = 48, 
		RULE_alter_table_cmds = 49, RULE_partition_cmd = 50, RULE_index_partition_cmd = 51, 
		RULE_alter_table_cmd = 52, RULE_alter_column_default = 53, RULE_opt_drop_behavior = 54, 
		RULE_opt_collate_clause = 55, RULE_alter_using = 56, RULE_replica_identity = 57, 
		RULE_reloptions = 58, RULE_opt_reloptions = 59, RULE_reloption_list = 60, 
		RULE_reloption_elem = 61, RULE_alter_identity_column_option_list = 62, 
		RULE_alter_identity_column_option = 63, RULE_partitionboundspec = 64, 
		RULE_hash_partbound_elem = 65, RULE_hash_partbound = 66, RULE_altercompositetypestmt = 67, 
		RULE_alter_type_cmds = 68, RULE_alter_type_cmd = 69, RULE_closeportalstmt = 70, 
		RULE_copystmt = 71, RULE_copy_from = 72, RULE_opt_program = 73, RULE_copy_file_name = 74, 
		RULE_copy_options = 75, RULE_copy_opt_list = 76, RULE_copy_opt_item = 77, 
		RULE_opt_binary = 78, RULE_copy_delimiter = 79, RULE_opt_using = 80, RULE_copy_generic_opt_list = 81, 
		RULE_copy_generic_opt_elem = 82, RULE_copy_generic_opt_arg = 83, RULE_copy_generic_opt_arg_list = 84, 
		RULE_copy_generic_opt_arg_list_item = 85, RULE_createstmt = 86, RULE_opttemp = 87, 
		RULE_opttableelementlist = 88, RULE_opttypedtableelementlist = 89, RULE_tableelementlist = 90, 
		RULE_typedtableelementlist = 91, RULE_tableelement = 92, RULE_typedtableelement = 93, 
		RULE_columnDef = 94, RULE_columnOptions = 95, RULE_colquallist = 96, RULE_colconstraint = 97, 
		RULE_colconstraintelem = 98, RULE_generated_when = 99, RULE_constraintattr = 100, 
		RULE_tablelikeclause = 101, RULE_tablelikeoptionlist = 102, RULE_tablelikeoption = 103, 
		RULE_tableconstraint = 104, RULE_constraintelem = 105, RULE_opt_no_inherit = 106, 
		RULE_opt_column_list = 107, RULE_columnlist = 108, RULE_columnElem = 109, 
		RULE_opt_c_include = 110, RULE_key_match = 111, RULE_exclusionconstraintlist = 112, 
		RULE_exclusionconstraintelem = 113, RULE_exclusionwhereclause = 114, RULE_key_actions = 115, 
		RULE_key_update = 116, RULE_key_delete = 117, RULE_key_action = 118, RULE_optinherit = 119, 
		RULE_optpartitionspec = 120, RULE_partitionspec = 121, RULE_part_params = 122, 
		RULE_part_elem = 123, RULE_table_access_method_clause = 124, RULE_optwith = 125, 
		RULE_oncommitoption = 126, RULE_opttablespace = 127, RULE_optconstablespace = 128, 
		RULE_existingindex = 129, RULE_createstatsstmt = 130, RULE_alterstatsstmt = 131, 
		RULE_createasstmt = 132, RULE_create_as_target = 133, RULE_opt_with_data = 134, 
		RULE_creatematviewstmt = 135, RULE_create_mv_target = 136, RULE_optnolog = 137, 
		RULE_refreshmatviewstmt = 138, RULE_createseqstmt = 139, RULE_alterseqstmt = 140, 
		RULE_optseqoptlist = 141, RULE_optparenthesizedseqoptlist = 142, RULE_seqoptlist = 143, 
		RULE_seqoptelem = 144, RULE_opt_by = 145, RULE_numericonly = 146, RULE_numericonly_list = 147, 
		RULE_createplangstmt = 148, RULE_opt_trusted = 149, RULE_handler_name = 150, 
		RULE_opt_inline_handler = 151, RULE_validator_clause = 152, RULE_opt_validator = 153, 
		RULE_opt_procedural = 154, RULE_createtablespacestmt = 155, RULE_opttablespaceowner = 156, 
		RULE_droptablespacestmt = 157, RULE_createextensionstmt = 158, RULE_create_extension_opt_list = 159, 
		RULE_create_extension_opt_item = 160, RULE_alterextensionstmt = 161, RULE_alter_extension_opt_list = 162, 
		RULE_alter_extension_opt_item = 163, RULE_alterextensioncontentsstmt = 164, 
		RULE_createfdwstmt = 165, RULE_fdw_option = 166, RULE_fdw_options = 167, 
		RULE_opt_fdw_options = 168, RULE_alterfdwstmt = 169, RULE_create_generic_options = 170, 
		RULE_generic_option_list = 171, RULE_alter_generic_options = 172, RULE_alter_generic_option_list = 173, 
		RULE_alter_generic_option_elem = 174, RULE_generic_option_elem = 175, 
		RULE_generic_option_name = 176, RULE_generic_option_arg = 177, RULE_createforeignserverstmt = 178, 
		RULE_opt_type = 179, RULE_foreign_server_version = 180, RULE_opt_foreign_server_version = 181, 
		RULE_alterforeignserverstmt = 182, RULE_createforeigntablestmt = 183, 
		RULE_importforeignschemastmt = 184, RULE_import_qualification_type = 185, 
		RULE_import_qualification = 186, RULE_createusermappingstmt = 187, RULE_auth_ident = 188, 
		RULE_dropusermappingstmt = 189, RULE_alterusermappingstmt = 190, RULE_createpolicystmt = 191, 
		RULE_alterpolicystmt = 192, RULE_rowsecurityoptionalexpr = 193, RULE_rowsecurityoptionalwithcheck = 194, 
		RULE_rowsecuritydefaulttorole = 195, RULE_rowsecurityoptionaltorole = 196, 
		RULE_rowsecuritydefaultpermissive = 197, RULE_rowsecuritydefaultforcmd = 198, 
		RULE_row_security_cmd = 199, RULE_createamstmt = 200, RULE_am_type = 201, 
		RULE_createtrigstmt = 202, RULE_triggeractiontime = 203, RULE_triggerevents = 204, 
		RULE_triggeroneevent = 205, RULE_triggerreferencing = 206, RULE_triggertransitions = 207, 
		RULE_triggertransition = 208, RULE_transitionoldornew = 209, RULE_transitionrowortable = 210, 
		RULE_transitionrelname = 211, RULE_triggerforspec = 212, RULE_triggerforopteach = 213, 
		RULE_triggerfortype = 214, RULE_triggerwhen = 215, RULE_function_or_procedure = 216, 
		RULE_triggerfuncargs = 217, RULE_triggerfuncarg = 218, RULE_optconstrfromtable = 219, 
		RULE_constraintattributespec = 220, RULE_constraintattributeElem = 221, 
		RULE_createeventtrigstmt = 222, RULE_event_trigger_when_list = 223, RULE_event_trigger_when_item = 224, 
		RULE_event_trigger_value_list = 225, RULE_altereventtrigstmt = 226, RULE_enable_trigger = 227, 
		RULE_createassertionstmt = 228, RULE_definestmt = 229, RULE_definition = 230, 
		RULE_def_list = 231, RULE_def_elem = 232, RULE_def_arg = 233, RULE_old_aggr_definition = 234, 
		RULE_old_aggr_list = 235, RULE_old_aggr_elem = 236, RULE_opt_enum_val_list = 237, 
		RULE_enum_val_list = 238, RULE_alterenumstmt = 239, RULE_opt_if_not_exists = 240, 
		RULE_createopclassstmt = 241, RULE_opclass_item_list = 242, RULE_opclass_item = 243, 
		RULE_opt_default = 244, RULE_opt_opfamily = 245, RULE_opclass_purpose = 246, 
		RULE_opt_recheck = 247, RULE_createopfamilystmt = 248, RULE_alteropfamilystmt = 249, 
		RULE_opclass_drop_list = 250, RULE_opclass_drop = 251, RULE_dropopclassstmt = 252, 
		RULE_dropopfamilystmt = 253, RULE_dropownedstmt = 254, RULE_reassignownedstmt = 255, 
		RULE_dropstmt = 256, RULE_object_type_any_name = 257, RULE_object_type_name = 258, 
		RULE_drop_type_name = 259, RULE_object_type_name_on_any_name = 260, RULE_any_name_list = 261, 
		RULE_any_name = 262, RULE_attrs = 263, RULE_type_name_list = 264, RULE_truncatestmt = 265, 
		RULE_opt_restart_seqs = 266, RULE_commentstmt = 267, RULE_comment_text = 268, 
		RULE_seclabelstmt = 269, RULE_opt_provider = 270, RULE_security_label = 271, 
		RULE_fetchstmt = 272, RULE_fetch_args = 273, RULE_from_in = 274, RULE_opt_from_in = 275, 
		RULE_grantstmt = 276, RULE_revokestmt = 277, RULE_privileges = 278, RULE_privilege_list = 279, 
		RULE_privilege = 280, RULE_privilege_target = 281, RULE_grantee_list = 282, 
		RULE_grantee = 283, RULE_opt_grant_grant_option = 284, RULE_grantrolestmt = 285, 
		RULE_revokerolestmt = 286, RULE_opt_grant_admin_option = 287, RULE_opt_granted_by = 288, 
		RULE_alterdefaultprivilegesstmt = 289, RULE_defacloptionlist = 290, RULE_defacloption = 291, 
		RULE_defaclaction = 292, RULE_defacl_privilege_target = 293, RULE_indexstmt = 294, 
		RULE_opt_unique = 295, RULE_opt_concurrently = 296, RULE_opt_index_name = 297, 
		RULE_access_method_clause = 298, RULE_index_params = 299, RULE_index_elem_options = 300, 
		RULE_index_elem = 301, RULE_opt_include = 302, RULE_index_including_params = 303, 
		RULE_opt_collate = 304, RULE_opt_class = 305, RULE_opt_asc_desc = 306, 
		RULE_opt_nulls_order = 307, RULE_createfunctionstmt = 308, RULE_opt_or_replace = 309, 
		RULE_func_args = 310, RULE_func_args_list = 311, RULE_function_with_argtypes_list = 312, 
		RULE_function_with_argtypes = 313, RULE_func_args_with_defaults = 314, 
		RULE_func_args_with_defaults_list = 315, RULE_func_arg = 316, RULE_arg_class = 317, 
		RULE_param_name = 318, RULE_func_return = 319, RULE_func_type = 320, RULE_func_arg_with_default = 321, 
		RULE_aggr_arg = 322, RULE_aggr_args = 323, RULE_aggr_args_list = 324, 
		RULE_aggregate_with_argtypes = 325, RULE_aggregate_with_argtypes_list = 326, 
		RULE_createfunc_opt_list = 327, RULE_common_func_opt_item = 328, RULE_createfunc_opt_item = 329, 
		RULE_func_as = 330, RULE_transform_type_list = 331, RULE_opt_definition = 332, 
		RULE_table_func_column = 333, RULE_table_func_column_list = 334, RULE_alterfunctionstmt = 335, 
		RULE_alterfunc_opt_list = 336, RULE_opt_restrict = 337, RULE_removefuncstmt = 338, 
		RULE_removeaggrstmt = 339, RULE_removeoperstmt = 340, RULE_oper_argtypes = 341, 
		RULE_any_operator = 342, RULE_operator_with_argtypes_list = 343, RULE_operator_with_argtypes = 344, 
		RULE_dostmt = 345, RULE_dostmt_opt_list = 346, RULE_dostmt_opt_item = 347, 
		RULE_createcaststmt = 348, RULE_cast_context = 349, RULE_dropcaststmt = 350, 
		RULE_opt_if_exists = 351, RULE_createtransformstmt = 352, RULE_transform_element_list = 353, 
		RULE_droptransformstmt = 354, RULE_reindexstmt = 355, RULE_reindex_target_type = 356, 
		RULE_reindex_target_multitable = 357, RULE_reindex_option_list = 358, 
		RULE_reindex_option_elem = 359, RULE_altertblspcstmt = 360, RULE_renamestmt = 361, 
		RULE_opt_column = 362, RULE_opt_set_data = 363, RULE_alterobjectdependsstmt = 364, 
		RULE_opt_no = 365, RULE_alterobjectschemastmt = 366, RULE_alteroperatorstmt = 367, 
		RULE_operator_def_list = 368, RULE_operator_def_elem = 369, RULE_operator_def_arg = 370, 
		RULE_altertypestmt = 371, RULE_alterownerstmt = 372, RULE_createpublicationstmt = 373, 
		RULE_opt_publication_for_tables = 374, RULE_publication_for_tables = 375, 
		RULE_alterpublicationstmt = 376, RULE_createsubscriptionstmt = 377, RULE_publication_name_list = 378, 
		RULE_publication_name_item = 379, RULE_altersubscriptionstmt = 380, RULE_dropsubscriptionstmt = 381, 
		RULE_rulestmt = 382, RULE_ruleactionlist = 383, RULE_ruleactionmulti = 384, 
		RULE_ruleactionstmt = 385, RULE_ruleactionstmtOrEmpty = 386, RULE_event = 387, 
		RULE_opt_instead = 388, RULE_notifystmt = 389, RULE_notify_payload = 390, 
		RULE_listenstmt = 391, RULE_unlistenstmt = 392, RULE_transactionstmt = 393, 
		RULE_opt_transaction = 394, RULE_transaction_mode_item = 395, RULE_transaction_mode_list = 396, 
		RULE_transaction_mode_list_or_empty = 397, RULE_opt_transaction_chain = 398, 
		RULE_viewstmt = 399, RULE_opt_check_option = 400, RULE_loadstmt = 401, 
		RULE_createdbstmt = 402, RULE_createdb_opt_list = 403, RULE_createdb_opt_items = 404, 
		RULE_createdb_opt_item = 405, RULE_createdb_opt_name = 406, RULE_opt_equal = 407, 
		RULE_alterdatabasestmt = 408, RULE_alterdatabasesetstmt = 409, RULE_dropdbstmt = 410, 
		RULE_drop_option_list = 411, RULE_drop_option = 412, RULE_altercollationstmt = 413, 
		RULE_altersystemstmt = 414, RULE_createdomainstmt = 415, RULE_alterdomainstmt = 416, 
		RULE_opt_as = 417, RULE_altertsdictionarystmt = 418, RULE_altertsconfigurationstmt = 419, 
		RULE_any_with = 420, RULE_createconversionstmt = 421, RULE_clusterstmt = 422, 
		RULE_cluster_index_specification = 423, RULE_vacuumstmt = 424, RULE_analyzestmt = 425, 
		RULE_vac_analyze_option_list = 426, RULE_analyze_keyword = 427, RULE_vac_analyze_option_elem = 428, 
		RULE_vac_analyze_option_name = 429, RULE_vac_analyze_option_arg = 430, 
		RULE_opt_analyze = 431, RULE_opt_verbose = 432, RULE_opt_full = 433, RULE_opt_freeze = 434, 
		RULE_opt_name_list = 435, RULE_vacuum_relation = 436, RULE_vacuum_relation_list = 437, 
		RULE_opt_vacuum_relation_list = 438, RULE_explainstmt = 439, RULE_explainablestmt = 440, 
		RULE_explain_option_list = 441, RULE_explain_option_elem = 442, RULE_explain_option_name = 443, 
		RULE_explain_option_arg = 444, RULE_preparestmt = 445, RULE_prep_type_clause = 446, 
		RULE_preparablestmt = 447, RULE_executestmt = 448, RULE_execute_param_clause = 449, 
		RULE_deallocatestmt = 450, RULE_insertstmt = 451, RULE_insert_target = 452, 
		RULE_insert_rest = 453, RULE_override_kind = 454, RULE_insert_column_list = 455, 
		RULE_insert_column_item = 456, RULE_opt_on_conflict = 457, RULE_opt_conf_expr = 458, 
		RULE_returning_clause = 459, RULE_mergestmt = 460, RULE_merge_insert_clause = 461, 
		RULE_merge_update_clause = 462, RULE_merge_delete_clause = 463, RULE_deletestmt = 464, 
		RULE_using_clause = 465, RULE_lockstmt = 466, RULE_opt_lock = 467, RULE_lock_type = 468, 
		RULE_opt_nowait = 469, RULE_opt_nowait_or_skip = 470, RULE_updatestmt = 471, 
		RULE_set_clause_list = 472, RULE_set_clause = 473, RULE_set_target = 474, 
		RULE_set_target_list = 475, RULE_declarecursorstmt = 476, RULE_cursor_name = 477, 
		RULE_cursor_options = 478, RULE_opt_hold = 479, RULE_selectstmt = 480, 
		RULE_select_with_parens = 481, RULE_select_no_parens = 482, RULE_select_clause = 483, 
		RULE_simple_select_intersect = 484, RULE_simple_select_pramary = 485, 
		RULE_with_clause = 486, RULE_cte_list = 487, RULE_common_table_expr = 488, 
		RULE_opt_materialized = 489, RULE_opt_with_clause = 490, RULE_into_clause = 491, 
		RULE_opt_strict = 492, RULE_opttempTableName = 493, RULE_opt_table = 494, 
		RULE_all_or_distinct = 495, RULE_distinct_clause = 496, RULE_opt_all_clause = 497, 
		RULE_opt_sort_clause = 498, RULE_sort_clause = 499, RULE_sortby_list = 500, 
		RULE_sortby = 501, RULE_select_limit = 502, RULE_opt_select_limit = 503, 
		RULE_limit_clause = 504, RULE_offset_clause = 505, RULE_select_limit_value = 506, 
		RULE_select_offset_value = 507, RULE_select_fetch_first_value = 508, RULE_i_or_f_const = 509, 
		RULE_row_or_rows = 510, RULE_first_or_next = 511, RULE_group_clause = 512, 
		RULE_group_by_list = 513, RULE_group_by_item = 514, RULE_empty_grouping_set = 515, 
		RULE_rollup_clause = 516, RULE_cube_clause = 517, RULE_grouping_sets_clause = 518, 
		RULE_having_clause = 519, RULE_for_locking_clause = 520, RULE_opt_for_locking_clause = 521, 
		RULE_for_locking_items = 522, RULE_for_locking_item = 523, RULE_for_locking_strength = 524, 
		RULE_locked_rels_list = 525, RULE_values_clause = 526, RULE_from_clause = 527, 
		RULE_from_list = 528, RULE_non_ansi_join = 529, RULE_table_ref = 530, 
		RULE_alias_clause = 531, RULE_opt_alias_clause = 532, RULE_table_alias_clause = 533, 
		RULE_func_alias_clause = 534, RULE_join_type = 535, RULE_join_qual = 536, 
		RULE_relation_expr = 537, RULE_relation_expr_list = 538, RULE_relation_expr_opt_alias = 539, 
		RULE_tablesample_clause = 540, RULE_opt_repeatable_clause = 541, RULE_func_table = 542, 
		RULE_rowsfrom_item = 543, RULE_rowsfrom_list = 544, RULE_opt_col_def_list = 545, 
		RULE_opt_ordinality = 546, RULE_where_clause = 547, RULE_where_or_current_clause = 548, 
		RULE_opttablefuncelementlist = 549, RULE_tablefuncelementlist = 550, RULE_tablefuncelement = 551, 
		RULE_xmltable = 552, RULE_xmltable_column_list = 553, RULE_xmltable_column_el = 554, 
		RULE_xmltable_column_option_list = 555, RULE_xmltable_column_option_el = 556, 
		RULE_xml_namespace_list = 557, RULE_xml_namespace_el = 558, RULE_typename = 559, 
		RULE_opt_array_bounds = 560, RULE_simpletypename = 561, RULE_consttypename = 562, 
		RULE_generictype = 563, RULE_opt_type_modifiers = 564, RULE_numeric = 565, 
		RULE_opt_float = 566, RULE_bit = 567, RULE_constbit = 568, RULE_bitwithlength = 569, 
		RULE_bitwithoutlength = 570, RULE_character = 571, RULE_constcharacter = 572, 
		RULE_character_c = 573, RULE_opt_varying = 574, RULE_constdatetime = 575, 
		RULE_constinterval = 576, RULE_opt_timezone = 577, RULE_opt_interval = 578, 
		RULE_interval_second = 579, RULE_opt_escape = 580, RULE_a_expr = 581, 
		RULE_a_expr_qual = 582, RULE_a_expr_lessless = 583, RULE_a_expr_or = 584, 
		RULE_a_expr_and = 585, RULE_a_expr_between = 586, RULE_a_expr_in = 587, 
		RULE_a_expr_unary_not = 588, RULE_a_expr_isnull = 589, RULE_a_expr_is_not = 590, 
		RULE_a_expr_compare = 591, RULE_a_expr_like = 592, RULE_a_expr_qual_op = 593, 
		RULE_a_expr_unary_qualop = 594, RULE_a_expr_add = 595, RULE_a_expr_mul = 596, 
		RULE_a_expr_caret = 597, RULE_a_expr_unary_sign = 598, RULE_a_expr_at_time_zone = 599, 
		RULE_a_expr_collate = 600, RULE_a_expr_typecast = 601, RULE_b_expr = 602, 
		RULE_c_expr = 603, RULE_plsqlvariablename = 604, RULE_func_application = 605, 
		RULE_func_expr = 606, RULE_func_expr_windowless = 607, RULE_func_expr_common_subexpr = 608, 
		RULE_xml_root_version = 609, RULE_opt_xml_root_standalone = 610, RULE_xml_attributes = 611, 
		RULE_xml_attribute_list = 612, RULE_xml_attribute_el = 613, RULE_document_or_content = 614, 
		RULE_xml_whitespace_option = 615, RULE_xmlexists_argument = 616, RULE_xml_passing_mech = 617, 
		RULE_within_group_clause = 618, RULE_filter_clause = 619, RULE_window_clause = 620, 
		RULE_window_definition_list = 621, RULE_window_definition = 622, RULE_over_clause = 623, 
		RULE_window_specification = 624, RULE_opt_existing_window_name = 625, 
		RULE_opt_partition_clause = 626, RULE_opt_frame_clause = 627, RULE_frame_extent = 628, 
		RULE_frame_bound = 629, RULE_opt_window_exclusion_clause = 630, RULE_row = 631, 
		RULE_explicit_row = 632, RULE_implicit_row = 633, RULE_sub_type = 634, 
		RULE_all_op = 635, RULE_mathop = 636, RULE_qual_op = 637, RULE_qual_all_op = 638, 
		RULE_subquery_Op = 639, RULE_expr_list = 640, RULE_func_arg_list = 641, 
		RULE_func_arg_expr = 642, RULE_type_list = 643, RULE_array_expr = 644, 
		RULE_array_expr_list = 645, RULE_extract_list = 646, RULE_extract_arg = 647, 
		RULE_unicode_normal_form = 648, RULE_overlay_list = 649, RULE_position_list = 650, 
		RULE_substr_list = 651, RULE_trim_list = 652, RULE_in_expr = 653, RULE_case_expr = 654, 
		RULE_when_clause_list = 655, RULE_when_clause = 656, RULE_case_default = 657, 
		RULE_case_arg = 658, RULE_columnref = 659, RULE_indirection_el = 660, 
		RULE_opt_slice_bound = 661, RULE_indirection = 662, RULE_opt_indirection = 663, 
		RULE_opt_target_list = 664, RULE_target_list = 665, RULE_target_el = 666, 
		RULE_qualified_name_list = 667, RULE_qualified_name = 668, RULE_name_list = 669, 
		RULE_name = 670, RULE_attr_name = 671, RULE_file_name = 672, RULE_func_name = 673, 
		RULE_aexprconst = 674, RULE_xconst = 675, RULE_bconst = 676, RULE_fconst = 677, 
		RULE_iconst = 678, RULE_sconst = 679, RULE_anysconst = 680, RULE_opt_uescape = 681, 
		RULE_signediconst = 682, RULE_roleid = 683, RULE_rolespec = 684, RULE_role_list = 685, 
		RULE_colid = 686, RULE_table_alias = 687, RULE_type_function_name = 688, 
		RULE_nonreservedword = 689, RULE_collabel = 690, RULE_identifier = 691, 
		RULE_plsqlidentifier = 692, RULE_unreserved_keyword = 693, RULE_col_name_keyword = 694, 
		RULE_type_func_name_keyword = 695, RULE_reserved_keyword = 696, RULE_builtin_function_name = 697, 
		RULE_pl_function = 698, RULE_comp_options = 699, RULE_comp_option = 700, 
		RULE_sharp = 701, RULE_option_value = 702, RULE_opt_semi = 703, RULE_pl_block = 704, 
		RULE_decl_sect = 705, RULE_decl_start = 706, RULE_decl_stmts = 707, RULE_label_decl = 708, 
		RULE_decl_stmt = 709, RULE_decl_statement = 710, RULE_opt_scrollable = 711, 
		RULE_decl_cursor_query = 712, RULE_decl_cursor_args = 713, RULE_decl_cursor_arglist = 714, 
		RULE_decl_cursor_arg = 715, RULE_decl_is_for = 716, RULE_decl_aliasitem = 717, 
		RULE_decl_varname = 718, RULE_decl_const = 719, RULE_decl_datatype = 720, 
		RULE_decl_collate = 721, RULE_decl_notnull = 722, RULE_decl_defval = 723, 
		RULE_decl_defkey = 724, RULE_assign_operator = 725, RULE_proc_sect = 726, 
		RULE_proc_stmt = 727, RULE_stmt_perform = 728, RULE_stmt_call = 729, RULE_opt_expr_list = 730, 
		RULE_stmt_assign = 731, RULE_stmt_getdiag = 732, RULE_getdiag_area_opt = 733, 
		RULE_getdiag_list = 734, RULE_getdiag_list_item = 735, RULE_getdiag_item = 736, 
		RULE_getdiag_target = 737, RULE_assign_var = 738, RULE_stmt_if = 739, 
		RULE_stmt_elsifs = 740, RULE_stmt_else = 741, RULE_stmt_case = 742, RULE_opt_expr_until_when = 743, 
		RULE_case_when_list = 744, RULE_case_when = 745, RULE_opt_case_else = 746, 
		RULE_stmt_loop = 747, RULE_stmt_while = 748, RULE_stmt_for = 749, RULE_for_control = 750, 
		RULE_opt_for_using_expression = 751, RULE_opt_cursor_parameters = 752, 
		RULE_opt_reverse = 753, RULE_opt_by_expression = 754, RULE_for_variable = 755, 
		RULE_stmt_foreach_a = 756, RULE_foreach_slice = 757, RULE_stmt_exit = 758, 
		RULE_exit_type = 759, RULE_stmt_return = 760, RULE_opt_return_result = 761, 
		RULE_stmt_raise = 762, RULE_opt_stmt_raise_level = 763, RULE_opt_raise_list = 764, 
		RULE_opt_raise_using = 765, RULE_opt_raise_using_elem = 766, RULE_opt_raise_using_elem_list = 767, 
		RULE_stmt_assert = 768, RULE_opt_stmt_assert_message = 769, RULE_loop_body = 770, 
		RULE_stmt_execsql = 771, RULE_stmt_dynexecute = 772, RULE_opt_execute_using = 773, 
		RULE_opt_execute_using_list = 774, RULE_opt_execute_into = 775, RULE_stmt_open = 776, 
		RULE_opt_open_bound_list_item = 777, RULE_opt_open_bound_list = 778, RULE_opt_open_using = 779, 
		RULE_opt_scroll_option = 780, RULE_opt_scroll_option_no = 781, RULE_stmt_fetch = 782, 
		RULE_into_target = 783, RULE_opt_cursor_from = 784, RULE_opt_fetch_direction = 785, 
		RULE_stmt_move = 786, RULE_stmt_close = 787, RULE_stmt_null = 788, RULE_stmt_commit = 789, 
		RULE_stmt_rollback = 790, RULE_plsql_opt_transaction_chain = 791, RULE_stmt_set = 792, 
		RULE_cursor_variable = 793, RULE_exception_sect = 794, RULE_proc_exceptions = 795, 
		RULE_proc_exception = 796, RULE_proc_conditions = 797, RULE_proc_condition = 798, 
		RULE_opt_block_label = 799, RULE_opt_loop_label = 800, RULE_opt_label = 801, 
		RULE_opt_exitcond = 802, RULE_any_identifier = 803, RULE_plsql_unreserved_keyword = 804, 
		RULE_sql_expression = 805, RULE_expr_until_then = 806, RULE_expr_until_semi = 807, 
		RULE_expr_until_rightbracket = 808, RULE_expr_until_loop = 809, RULE_make_execsql_stmt = 810, 
		RULE_opt_returning_clause_into = 811;
	public static readonly string[] ruleNames = {
		"root", "plsqlroot", "stmtblock", "stmtmulti", "stmt", "plsqlconsolecommand", 
		"callstmt", "createrolestmt", "opt_with", "optrolelist", "alteroptrolelist", 
		"alteroptroleelem", "createoptroleelem", "createuserstmt", "alterrolestmt", 
		"opt_in_database", "alterrolesetstmt", "droprolestmt", "creategroupstmt", 
		"altergroupstmt", "add_drop", "createschemastmt", "optschemaname", "optschemaeltlist", 
		"schema_stmt", "variablesetstmt", "set_rest", "generic_set", "set_rest_more", 
		"var_name", "var_list", "var_value", "iso_level", "opt_boolean_or_string", 
		"zone_value", "opt_encoding", "nonreservedword_or_sconst", "variableresetstmt", 
		"reset_rest", "generic_reset", "setresetclause", "functionsetresetclause", 
		"variableshowstmt", "constraintssetstmt", "constraints_set_list", "constraints_set_mode", 
		"checkpointstmt", "discardstmt", "altertablestmt", "alter_table_cmds", 
		"partition_cmd", "index_partition_cmd", "alter_table_cmd", "alter_column_default", 
		"opt_drop_behavior", "opt_collate_clause", "alter_using", "replica_identity", 
		"reloptions", "opt_reloptions", "reloption_list", "reloption_elem", "alter_identity_column_option_list", 
		"alter_identity_column_option", "partitionboundspec", "hash_partbound_elem", 
		"hash_partbound", "altercompositetypestmt", "alter_type_cmds", "alter_type_cmd", 
		"closeportalstmt", "copystmt", "copy_from", "opt_program", "copy_file_name", 
		"copy_options", "copy_opt_list", "copy_opt_item", "opt_binary", "copy_delimiter", 
		"opt_using", "copy_generic_opt_list", "copy_generic_opt_elem", "copy_generic_opt_arg", 
		"copy_generic_opt_arg_list", "copy_generic_opt_arg_list_item", "createstmt", 
		"opttemp", "opttableelementlist", "opttypedtableelementlist", "tableelementlist", 
		"typedtableelementlist", "tableelement", "typedtableelement", "columnDef", 
		"columnOptions", "colquallist", "colconstraint", "colconstraintelem", 
		"generated_when", "constraintattr", "tablelikeclause", "tablelikeoptionlist", 
		"tablelikeoption", "tableconstraint", "constraintelem", "opt_no_inherit", 
		"opt_column_list", "columnlist", "columnElem", "opt_c_include", "key_match", 
		"exclusionconstraintlist", "exclusionconstraintelem", "exclusionwhereclause", 
		"key_actions", "key_update", "key_delete", "key_action", "optinherit", 
		"optpartitionspec", "partitionspec", "part_params", "part_elem", "table_access_method_clause", 
		"optwith", "oncommitoption", "opttablespace", "optconstablespace", "existingindex", 
		"createstatsstmt", "alterstatsstmt", "createasstmt", "create_as_target", 
		"opt_with_data", "creatematviewstmt", "create_mv_target", "optnolog", 
		"refreshmatviewstmt", "createseqstmt", "alterseqstmt", "optseqoptlist", 
		"optparenthesizedseqoptlist", "seqoptlist", "seqoptelem", "opt_by", "numericonly", 
		"numericonly_list", "createplangstmt", "opt_trusted", "handler_name", 
		"opt_inline_handler", "validator_clause", "opt_validator", "opt_procedural", 
		"createtablespacestmt", "opttablespaceowner", "droptablespacestmt", "createextensionstmt", 
		"create_extension_opt_list", "create_extension_opt_item", "alterextensionstmt", 
		"alter_extension_opt_list", "alter_extension_opt_item", "alterextensioncontentsstmt", 
		"createfdwstmt", "fdw_option", "fdw_options", "opt_fdw_options", "alterfdwstmt", 
		"create_generic_options", "generic_option_list", "alter_generic_options", 
		"alter_generic_option_list", "alter_generic_option_elem", "generic_option_elem", 
		"generic_option_name", "generic_option_arg", "createforeignserverstmt", 
		"opt_type", "foreign_server_version", "opt_foreign_server_version", "alterforeignserverstmt", 
		"createforeigntablestmt", "importforeignschemastmt", "import_qualification_type", 
		"import_qualification", "createusermappingstmt", "auth_ident", "dropusermappingstmt", 
		"alterusermappingstmt", "createpolicystmt", "alterpolicystmt", "rowsecurityoptionalexpr", 
		"rowsecurityoptionalwithcheck", "rowsecuritydefaulttorole", "rowsecurityoptionaltorole", 
		"rowsecuritydefaultpermissive", "rowsecuritydefaultforcmd", "row_security_cmd", 
		"createamstmt", "am_type", "createtrigstmt", "triggeractiontime", "triggerevents", 
		"triggeroneevent", "triggerreferencing", "triggertransitions", "triggertransition", 
		"transitionoldornew", "transitionrowortable", "transitionrelname", "triggerforspec", 
		"triggerforopteach", "triggerfortype", "triggerwhen", "function_or_procedure", 
		"triggerfuncargs", "triggerfuncarg", "optconstrfromtable", "constraintattributespec", 
		"constraintattributeElem", "createeventtrigstmt", "event_trigger_when_list", 
		"event_trigger_when_item", "event_trigger_value_list", "altereventtrigstmt", 
		"enable_trigger", "createassertionstmt", "definestmt", "definition", "def_list", 
		"def_elem", "def_arg", "old_aggr_definition", "old_aggr_list", "old_aggr_elem", 
		"opt_enum_val_list", "enum_val_list", "alterenumstmt", "opt_if_not_exists", 
		"createopclassstmt", "opclass_item_list", "opclass_item", "opt_default", 
		"opt_opfamily", "opclass_purpose", "opt_recheck", "createopfamilystmt", 
		"alteropfamilystmt", "opclass_drop_list", "opclass_drop", "dropopclassstmt", 
		"dropopfamilystmt", "dropownedstmt", "reassignownedstmt", "dropstmt", 
		"object_type_any_name", "object_type_name", "drop_type_name", "object_type_name_on_any_name", 
		"any_name_list", "any_name", "attrs", "type_name_list", "truncatestmt", 
		"opt_restart_seqs", "commentstmt", "comment_text", "seclabelstmt", "opt_provider", 
		"security_label", "fetchstmt", "fetch_args", "from_in", "opt_from_in", 
		"grantstmt", "revokestmt", "privileges", "privilege_list", "privilege", 
		"privilege_target", "grantee_list", "grantee", "opt_grant_grant_option", 
		"grantrolestmt", "revokerolestmt", "opt_grant_admin_option", "opt_granted_by", 
		"alterdefaultprivilegesstmt", "defacloptionlist", "defacloption", "defaclaction", 
		"defacl_privilege_target", "indexstmt", "opt_unique", "opt_concurrently", 
		"opt_index_name", "access_method_clause", "index_params", "index_elem_options", 
		"index_elem", "opt_include", "index_including_params", "opt_collate", 
		"opt_class", "opt_asc_desc", "opt_nulls_order", "createfunctionstmt", 
		"opt_or_replace", "func_args", "func_args_list", "function_with_argtypes_list", 
		"function_with_argtypes", "func_args_with_defaults", "func_args_with_defaults_list", 
		"func_arg", "arg_class", "param_name", "func_return", "func_type", "func_arg_with_default", 
		"aggr_arg", "aggr_args", "aggr_args_list", "aggregate_with_argtypes", 
		"aggregate_with_argtypes_list", "createfunc_opt_list", "common_func_opt_item", 
		"createfunc_opt_item", "func_as", "transform_type_list", "opt_definition", 
		"table_func_column", "table_func_column_list", "alterfunctionstmt", "alterfunc_opt_list", 
		"opt_restrict", "removefuncstmt", "removeaggrstmt", "removeoperstmt", 
		"oper_argtypes", "any_operator", "operator_with_argtypes_list", "operator_with_argtypes", 
		"dostmt", "dostmt_opt_list", "dostmt_opt_item", "createcaststmt", "cast_context", 
		"dropcaststmt", "opt_if_exists", "createtransformstmt", "transform_element_list", 
		"droptransformstmt", "reindexstmt", "reindex_target_type", "reindex_target_multitable", 
		"reindex_option_list", "reindex_option_elem", "altertblspcstmt", "renamestmt", 
		"opt_column", "opt_set_data", "alterobjectdependsstmt", "opt_no", "alterobjectschemastmt", 
		"alteroperatorstmt", "operator_def_list", "operator_def_elem", "operator_def_arg", 
		"altertypestmt", "alterownerstmt", "createpublicationstmt", "opt_publication_for_tables", 
		"publication_for_tables", "alterpublicationstmt", "createsubscriptionstmt", 
		"publication_name_list", "publication_name_item", "altersubscriptionstmt", 
		"dropsubscriptionstmt", "rulestmt", "ruleactionlist", "ruleactionmulti", 
		"ruleactionstmt", "ruleactionstmtOrEmpty", "event", "opt_instead", "notifystmt", 
		"notify_payload", "listenstmt", "unlistenstmt", "transactionstmt", "opt_transaction", 
		"transaction_mode_item", "transaction_mode_list", "transaction_mode_list_or_empty", 
		"opt_transaction_chain", "viewstmt", "opt_check_option", "loadstmt", "createdbstmt", 
		"createdb_opt_list", "createdb_opt_items", "createdb_opt_item", "createdb_opt_name", 
		"opt_equal", "alterdatabasestmt", "alterdatabasesetstmt", "dropdbstmt", 
		"drop_option_list", "drop_option", "altercollationstmt", "altersystemstmt", 
		"createdomainstmt", "alterdomainstmt", "opt_as", "altertsdictionarystmt", 
		"altertsconfigurationstmt", "any_with", "createconversionstmt", "clusterstmt", 
		"cluster_index_specification", "vacuumstmt", "analyzestmt", "vac_analyze_option_list", 
		"analyze_keyword", "vac_analyze_option_elem", "vac_analyze_option_name", 
		"vac_analyze_option_arg", "opt_analyze", "opt_verbose", "opt_full", "opt_freeze", 
		"opt_name_list", "vacuum_relation", "vacuum_relation_list", "opt_vacuum_relation_list", 
		"explainstmt", "explainablestmt", "explain_option_list", "explain_option_elem", 
		"explain_option_name", "explain_option_arg", "preparestmt", "prep_type_clause", 
		"preparablestmt", "executestmt", "execute_param_clause", "deallocatestmt", 
		"insertstmt", "insert_target", "insert_rest", "override_kind", "insert_column_list", 
		"insert_column_item", "opt_on_conflict", "opt_conf_expr", "returning_clause", 
		"mergestmt", "merge_insert_clause", "merge_update_clause", "merge_delete_clause", 
		"deletestmt", "using_clause", "lockstmt", "opt_lock", "lock_type", "opt_nowait", 
		"opt_nowait_or_skip", "updatestmt", "set_clause_list", "set_clause", "set_target", 
		"set_target_list", "declarecursorstmt", "cursor_name", "cursor_options", 
		"opt_hold", "selectstmt", "select_with_parens", "select_no_parens", "select_clause", 
		"simple_select_intersect", "simple_select_pramary", "with_clause", "cte_list", 
		"common_table_expr", "opt_materialized", "opt_with_clause", "into_clause", 
		"opt_strict", "opttempTableName", "opt_table", "all_or_distinct", "distinct_clause", 
		"opt_all_clause", "opt_sort_clause", "sort_clause", "sortby_list", "sortby", 
		"select_limit", "opt_select_limit", "limit_clause", "offset_clause", "select_limit_value", 
		"select_offset_value", "select_fetch_first_value", "i_or_f_const", "row_or_rows", 
		"first_or_next", "group_clause", "group_by_list", "group_by_item", "empty_grouping_set", 
		"rollup_clause", "cube_clause", "grouping_sets_clause", "having_clause", 
		"for_locking_clause", "opt_for_locking_clause", "for_locking_items", "for_locking_item", 
		"for_locking_strength", "locked_rels_list", "values_clause", "from_clause", 
		"from_list", "non_ansi_join", "table_ref", "alias_clause", "opt_alias_clause", 
		"table_alias_clause", "func_alias_clause", "join_type", "join_qual", "relation_expr", 
		"relation_expr_list", "relation_expr_opt_alias", "tablesample_clause", 
		"opt_repeatable_clause", "func_table", "rowsfrom_item", "rowsfrom_list", 
		"opt_col_def_list", "opt_ordinality", "where_clause", "where_or_current_clause", 
		"opttablefuncelementlist", "tablefuncelementlist", "tablefuncelement", 
		"xmltable", "xmltable_column_list", "xmltable_column_el", "xmltable_column_option_list", 
		"xmltable_column_option_el", "xml_namespace_list", "xml_namespace_el", 
		"typename", "opt_array_bounds", "simpletypename", "consttypename", "generictype", 
		"opt_type_modifiers", "numeric", "opt_float", "bit", "constbit", "bitwithlength", 
		"bitwithoutlength", "character", "constcharacter", "character_c", "opt_varying", 
		"constdatetime", "constinterval", "opt_timezone", "opt_interval", "interval_second", 
		"opt_escape", "a_expr", "a_expr_qual", "a_expr_lessless", "a_expr_or", 
		"a_expr_and", "a_expr_between", "a_expr_in", "a_expr_unary_not", "a_expr_isnull", 
		"a_expr_is_not", "a_expr_compare", "a_expr_like", "a_expr_qual_op", "a_expr_unary_qualop", 
		"a_expr_add", "a_expr_mul", "a_expr_caret", "a_expr_unary_sign", "a_expr_at_time_zone", 
		"a_expr_collate", "a_expr_typecast", "b_expr", "c_expr", "plsqlvariablename", 
		"func_application", "func_expr", "func_expr_windowless", "func_expr_common_subexpr", 
		"xml_root_version", "opt_xml_root_standalone", "xml_attributes", "xml_attribute_list", 
		"xml_attribute_el", "document_or_content", "xml_whitespace_option", "xmlexists_argument", 
		"xml_passing_mech", "within_group_clause", "filter_clause", "window_clause", 
		"window_definition_list", "window_definition", "over_clause", "window_specification", 
		"opt_existing_window_name", "opt_partition_clause", "opt_frame_clause", 
		"frame_extent", "frame_bound", "opt_window_exclusion_clause", "row", "explicit_row", 
		"implicit_row", "sub_type", "all_op", "mathop", "qual_op", "qual_all_op", 
		"subquery_Op", "expr_list", "func_arg_list", "func_arg_expr", "type_list", 
		"array_expr", "array_expr_list", "extract_list", "extract_arg", "unicode_normal_form", 
		"overlay_list", "position_list", "substr_list", "trim_list", "in_expr", 
		"case_expr", "when_clause_list", "when_clause", "case_default", "case_arg", 
		"columnref", "indirection_el", "opt_slice_bound", "indirection", "opt_indirection", 
		"opt_target_list", "target_list", "target_el", "qualified_name_list", 
		"qualified_name", "name_list", "name", "attr_name", "file_name", "func_name", 
		"aexprconst", "xconst", "bconst", "fconst", "iconst", "sconst", "anysconst", 
		"opt_uescape", "signediconst", "roleid", "rolespec", "role_list", "colid", 
		"table_alias", "type_function_name", "nonreservedword", "collabel", "identifier", 
		"plsqlidentifier", "unreserved_keyword", "col_name_keyword", "type_func_name_keyword", 
		"reserved_keyword", "builtin_function_name", "pl_function", "comp_options", 
		"comp_option", "sharp", "option_value", "opt_semi", "pl_block", "decl_sect", 
		"decl_start", "decl_stmts", "label_decl", "decl_stmt", "decl_statement", 
		"opt_scrollable", "decl_cursor_query", "decl_cursor_args", "decl_cursor_arglist", 
		"decl_cursor_arg", "decl_is_for", "decl_aliasitem", "decl_varname", "decl_const", 
		"decl_datatype", "decl_collate", "decl_notnull", "decl_defval", "decl_defkey", 
		"assign_operator", "proc_sect", "proc_stmt", "stmt_perform", "stmt_call", 
		"opt_expr_list", "stmt_assign", "stmt_getdiag", "getdiag_area_opt", "getdiag_list", 
		"getdiag_list_item", "getdiag_item", "getdiag_target", "assign_var", "stmt_if", 
		"stmt_elsifs", "stmt_else", "stmt_case", "opt_expr_until_when", "case_when_list", 
		"case_when", "opt_case_else", "stmt_loop", "stmt_while", "stmt_for", "for_control", 
		"opt_for_using_expression", "opt_cursor_parameters", "opt_reverse", "opt_by_expression", 
		"for_variable", "stmt_foreach_a", "foreach_slice", "stmt_exit", "exit_type", 
		"stmt_return", "opt_return_result", "stmt_raise", "opt_stmt_raise_level", 
		"opt_raise_list", "opt_raise_using", "opt_raise_using_elem", "opt_raise_using_elem_list", 
		"stmt_assert", "opt_stmt_assert_message", "loop_body", "stmt_execsql", 
		"stmt_dynexecute", "opt_execute_using", "opt_execute_using_list", "opt_execute_into", 
		"stmt_open", "opt_open_bound_list_item", "opt_open_bound_list", "opt_open_using", 
		"opt_scroll_option", "opt_scroll_option_no", "stmt_fetch", "into_target", 
		"opt_cursor_from", "opt_fetch_direction", "stmt_move", "stmt_close", "stmt_null", 
		"stmt_commit", "stmt_rollback", "plsql_opt_transaction_chain", "stmt_set", 
		"cursor_variable", "exception_sect", "proc_exceptions", "proc_exception", 
		"proc_conditions", "proc_condition", "opt_block_label", "opt_loop_label", 
		"opt_label", "opt_exitcond", "any_identifier", "plsql_unreserved_keyword", 
		"sql_expression", "expr_until_then", "expr_until_semi", "expr_until_rightbracket", 
		"expr_until_loop", "make_execsql_stmt", "opt_returning_clause_into"
	};

	private static readonly string[] _LiteralNames = {
		null, "'$'", "'('", "')'", "'['", "']'", "','", "';'", "':'", "'*'", "'='", 
		"'.'", "'+'", "'-'", "'/'", "'^'", "'<'", "'>'", "'<<'", "'>>'", "':='", 
		"'<='", "'=>'", "'>='", "'..'", "'<>'", "'::'", "'%'", null, null, "'ALL'", 
		"'ANALYSE'", "'ANALYZE'", "'AND'", "'ANY'", "'ARRAY'", "'AS'", "'ASC'", 
		"'ASYMMETRIC'", "'BOTH'", "'CASE'", "'CAST'", "'CHECK'", "'COLLATE'", 
		"'COLUMN'", "'CONSTRAINT'", "'CREATE'", "'CURRENT_CATALOG'", "'CURRENT_DATE'", 
		"'CURRENT_ROLE'", "'CURRENT_TIME'", "'CURRENT_TIMESTAMP'", "'CURRENT_USER'", 
		"'DEFAULT'", "'DEFERRABLE'", "'DESC'", "'DISTINCT'", "'DO'", "'ELSE'", 
		"'EXCEPT'", "'FALSE'", "'FETCH'", "'FOR'", "'FOREIGN'", "'FROM'", "'GRANT'", 
		"'GROUP'", "'HAVING'", "'IN'", "'INITIALLY'", "'INTERSECT'", "'INTO'", 
		"'LATERAL'", "'LEADING'", "'LIMIT'", "'LOCALTIME'", "'LOCALTIMESTAMP'", 
		"'NOT'", "'NULL'", "'OFFSET'", "'ON'", "'ONLY'", "'OR'", "'ORDER'", "'PLACING'", 
		"'PRIMARY'", "'REFERENCES'", "'RETURNING'", "'SELECT'", "'SESSION_USER'", 
		"'SOME'", "'SYMMETRIC'", "'TABLE'", "'THEN'", "'TO'", "'TRAILING'", "'TRUE'", 
		"'UNION'", "'UNIQUE'", "'USER'", "'USING'", "'VARIADIC'", "'WHEN'", "'WHERE'", 
		"'WINDOW'", "'WITH'", "'AUTHORIZATION'", "'BINARY'", "'COLLATION'", "'CONCURRENTLY'", 
		"'CROSS'", "'CURRENT_SCHEMA'", "'FREEZE'", "'FULL'", "'ILIKE'", "'INNER'", 
		"'IS'", "'ISNULL'", "'JOIN'", "'LEFT'", "'LIKE'", "'NATURAL'", "'NOTNULL'", 
		"'OUTER'", "'OVER'", "'OVERLAPS'", "'RIGHT'", "'SIMILAR'", "'VERBOSE'", 
		"'ABORT'", "'ABSOLUTE'", "'ACCESS'", "'ACTION'", "'ADD'", "'ADMIN'", "'AFTER'", 
		"'AGGREGATE'", "'ALSO'", "'ALTER'", "'ALWAYS'", "'ASSERTION'", "'ASSIGNMENT'", 
		"'AT'", "'ATOMIC'", "'ATTRIBUTE'", "'BACKWARD'", "'BEFORE'", "'BEGIN'", 
		"'BY'", "'CACHE'", "'CALLED'", "'CASCADE'", "'CASCADED'", "'CATALOG'", 
		"'CHAIN'", "'CHARACTERISTICS'", "'CHECKPOINT'", "'CLASS'", "'CLOSE'", 
		"'CLUSTER'", "'COMMENT'", "'COMMENTS'", "'COMMIT'", "'COMMITTED'", "'CONFIGURATION'", 
		"'CONNECTION'", "'CONSTRAINTS'", "'CONTENT'", "'CONTINUE'", "'CONVERSION'", 
		"'COPY'", "'COST'", "'CSV'", "'CURSOR'", "'CYCLE'", "'DATA'", "'DATABASE'", 
		"'DAY'", "'DEALLOCATE'", "'DECLARE'", "'DEFAULTS'", "'DEFERRED'", "'DEFINER'", 
		"'DELETE'", "'DELIMITER'", "'DELIMITERS'", "'DICTIONARY'", "'DISABLE'", 
		"'DISCARD'", "'DOCUMENT'", "'DOMAIN'", "'DOUBLE'", "'DROP'", "'EACH'", 
		"'ENABLE'", "'ENCODING'", "'ENCRYPTED'", "'ENUM'", "'ESCAPE'", "'EVENT'", 
		"'EXCLUDE'", "'EXCLUDING'", "'EXCLUSIVE'", "'EXECUTE'", "'EXPLAIN'", "'EXTENSION'", 
		"'EXTERNAL'", "'FAMILY'", "'FIRST'", "'FOLLOWING'", "'FORCE'", "'FORWARD'", 
		"'FUNCTION'", "'FUNCTIONS'", "'GLOBAL'", "'GRANTED'", "'HANDLER'", "'HEADER'", 
		"'HOLD'", "'HOUR'", "'IDENTITY'", "'IF'", "'IMMEDIATE'", "'IMMUTABLE'", 
		"'IMPLICIT'", "'INCLUDING'", "'INCREMENT'", "'INDEX'", "'INDEXES'", "'INHERIT'", 
		"'INHERITS'", "'INLINE'", "'INSENSITIVE'", "'INSERT'", "'INSTEAD'", "'INVOKER'", 
		"'ISOLATION'", "'KEY'", "'LABEL'", "'LANGUAGE'", "'LARGE'", "'LAST'", 
		"'LEAKPROOF'", "'LEVEL'", "'LISTEN'", "'LOAD'", "'LOCAL'", "'LOCATION'", 
		"'LOCK'", "'MAPPING'", "'MATCH'", "'MATCHED'", "'MATERIALIZED'", "'MAXVALUE'", 
		"'MERGE'", "'MINUTE'", "'MINVALUE'", "'MODE'", "'MONTH'", "'MOVE'", "'NAME'", 
		"'NAMES'", "'NEXT'", "'NO'", "'NOTHING'", "'NOTIFY'", "'NOWAIT'", "'NULLS'", 
		"'OBJECT'", "'OF'", "'OFF'", "'OIDS'", "'OPERATOR'", "'OPTION'", "'OPTIONS'", 
		"'OWNED'", "'OWNER'", "'PARSER'", "'PARTIAL'", "'PARTITION'", "'PASSING'", 
		"'PASSWORD'", "'PLANS'", "'PRECEDING'", "'PREPARE'", "'PREPARED'", "'PRESERVE'", 
		"'PRIOR'", "'PRIVILEGES'", "'PROCEDURAL'", "'PROCEDURE'", "'PROGRAM'", 
		"'QUOTE'", "'RANGE'", "'READ'", "'REASSIGN'", "'RECHECK'", "'RECURSIVE'", 
		"'REF'", "'REFRESH'", "'REINDEX'", "'RELATIVE'", "'RELEASE'", "'RENAME'", 
		"'REPEATABLE'", "'REPLACE'", "'REPLICA'", "'RESET'", "'RESTART'", "'RESTRICT'", 
		"'RETURNS'", "'REVOKE'", "'ROLE'", "'ROLLBACK'", "'ROWS'", "'RULE'", "'SAVEPOINT'", 
		"'SCHEMA'", "'SCROLL'", "'SEARCH'", "'SECOND'", "'SECURITY'", "'SEQUENCE'", 
		"'SEQUENCES'", "'SERIALIZABLE'", "'SERVER'", "'SESSION'", "'SET'", "'SHARE'", 
		"'SHOW'", "'SIMPLE'", "'SNAPSHOT'", "'STABLE'", "'STANDALONE'", "'START'", 
		"'STATEMENT'", "'STATISTICS'", "'STDIN'", "'STDOUT'", "'STORAGE'", "'STRICT'", 
		"'STRIP'", "'SYSID'", "'SYSTEM'", "'TABLES'", "'TABLESPACE'", "'TEMP'", 
		"'TEMPLATE'", "'TEMPORARY'", "'TEXT'", "'TRANSACTION'", "'TRIGGER'", "'TRUNCATE'", 
		"'TRUSTED'", "'TYPE'", "'TYPES'", "'UNBOUNDED'", "'UNCOMMITTED'", "'UNENCRYPTED'", 
		"'UNKNOWN'", "'UNLISTEN'", "'UNLOGGED'", "'UNTIL'", "'UPDATE'", "'VACUUM'", 
		"'VALID'", "'VALIDATE'", "'VALIDATOR'", "'VARYING'", "'VERSION'", "'VIEW'", 
		"'VOLATILE'", "'WHITESPACE'", "'WITHOUT'", "'WORK'", "'WRAPPER'", "'WRITE'", 
		"'XML'", "'YEAR'", "'YES'", "'ZONE'", "'BETWEEN'", "'BIGINT'", "'BIT'", 
		"'BOOLEAN'", "'CHAR'", "'CHARACTER'", "'COALESCE'", "'DEC'", "'DECIMAL'", 
		"'EXISTS'", "'EXTRACT'", "'FLOAT'", "'GREATEST'", "'INOUT'", "'INT'", 
		"'INTEGER'", "'INTERVAL'", "'LEAST'", "'NATIONAL'", "'NCHAR'", "'NONE'", 
		"'NULLIF'", "'NUMERIC'", "'OVERLAY'", "'POSITION'", "'PRECISION'", "'REAL'", 
		"'ROW'", "'SETOF'", "'SMALLINT'", "'SUBSTRING'", "'TIME'", "'TIMESTAMP'", 
		"'TREAT'", "'TRIM'", "'VALUES'", "'VARCHAR'", "'XMLATTRIBUTES'", "'XMLCOMMENT'", 
		"'XMLAGG'", "'XML_IS_WELL_FORMED'", "'XML_IS_WELL_FORMED_DOCUMENT'", "'XML_IS_WELL_FORMED_CONTENT'", 
		"'XPATH'", "'XPATH_EXISTS'", "'XMLCONCAT'", "'XMLELEMENT'", "'XMLEXISTS'", 
		"'XMLFOREST'", "'XMLPARSE'", "'XMLPI'", "'XMLROOT'", "'XMLSERIALIZE'", 
		"'CALL'", "'CURRENT'", "'ATTACH'", "'DETACH'", "'EXPRESSION'", "'GENERATED'", 
		"'LOGGED'", "'STORED'", "'INCLUDE'", "'ROUTINE'", "'TRANSFORM'", "'IMPORT'", 
		"'POLICY'", "'METHOD'", "'REFERENCING'", "'NEW'", "'OLD'", "'VALUE'", 
		"'SUBSCRIPTION'", "'PUBLICATION'", "'OUT'", "'END'", "'ROUTINES'", "'SCHEMAS'", 
		"'PROCEDURES'", "'INPUT'", "'SUPPORT'", "'PARALLEL'", "'SQL'", "'DEPENDS'", 
		"'OVERRIDING'", "'CONFLICT'", "'SKIP'", "'LOCKED'", "'TIES'", "'ROLLUP'", 
		"'CUBE'", "'GROUPING'", "'SETS'", "'TABLESAMPLE'", "'ORDINALITY'", "'XMLTABLE'", 
		"'COLUMNS'", "'XMLNAMESPACES'", "'ROWTYPE'", "'NORMALIZED'", "'WITHIN'", 
		"'FILTER'", "'GROUPS'", "'OTHERS'", "'NFC'", "'NFD'", "'NFKC'", "'NFKD'", 
		"'UESCAPE'", "'VIEWS'", "'NORMALIZE'", "'DUMP'", "'PRINT_STRICT_PARAMS'", 
		"'VARIABLE_CONFLICT'", "'ERROR'", "'USE_VARIABLE'", "'USE_COLUMN'", "'ALIAS'", 
		"'CONSTANT'", "'PERFORM'", "'GET'", "'DIAGNOSTICS'", "'STACKED'", "'ELSIF'", 
		"'WHILE'", "'REVERSE'", "'FOREACH'", "'SLICE'", "'EXIT'", "'RETURN'", 
		"'QUERY'", "'RAISE'", "'SQLSTATE'", "'DEBUG'", "'LOG'", "'INFO'", "'NOTICE'", 
		"'WARNING'", "'EXCEPTION'", "'ASSERT'", "'LOOP'", "'OPEN'", "'ABS'", "'CBRT'", 
		"'CEIL'", "'CEILING'", "'DEGREES'", "'DIV'", "'EXP'", "'FACTORIAL'", "'FLOOR'", 
		"'GCD'", "'LCM'", "'LN'", "'LOG10'", "'MIN_SCALE'", "'MOD'", "'PI'", "'POWER'", 
		"'RADIANS'", "'ROUND'", "'SCALE'", "'SIGN'", "'SQRT'", "'TRIM_SCALE'", 
		"'TRUNC'", "'WIDTH_BUCKET'", "'RANDOM'", "'SETSEED'", "'ACOS'", "'ACOSD'", 
		"'ASIN'", "'ASIND'", "'ATAN'", "'ATAND'", "'ATAN2'", "'ATAN2D'", "'COS'", 
		"'COSD'", "'COT'", "'COTD'", "'SIN'", "'SIND'", "'TAN'", "'TAND'", "'SINH'", 
		"'COSH'", "'TANH'", "'ASINH'", "'ACOSH'", "'ATANH'", "'BIT_LENGTH'", "'CHAR_LENGTH'", 
		"'CHARACTER_LENGTH'", "'LOWER'", "'OCTET_LENGTH'", "'UPPER'", "'ASCII'", 
		"'BTRIM'", "'CHR'", "'CONCAT'", "'CONCAT_WS'", "'FORMAT'", "'INITCAP'", 
		"'LENGTH'", "'LPAD'", "'LTRIM'", "'MD5'", "'PARSE_IDENT'", "'PG_CLIENT_ENCODING'", 
		"'QUOTE_IDENT'", "'QUOTE_LITERAL'", "'QUOTE_NULLABLE'", "'REGEXP_COUNT'", 
		"'REGEXP_INSTR'", "'REGEXP_LIKE'", "'REGEXP_MATCH'", "'REGEXP_MATCHES'", 
		"'REGEXP_REPLACE'", "'REGEXP_SPLIT_TO_ARRAY'", "'REGEXP_SPLIT_TO_TABLE'", 
		"'REGEXP_SUBSTR'", "'REPEAT'", "'RPAD'", "'RTRIM'", "'SPLIT_PART'", "'STARTS_WITH'", 
		"'STRING_TO_ARRAY'", "'STRING_TO_TABLE'", "'STRPOS'", "'SUBSTR'", "'TO_ASCII'", 
		"'TO_HEX'", "'TRANSLATE'", "'UNISTR'", "'AGE'", "'CLOCK_TIMESTAMP'", "'DATE_BIN'", 
		"'DATE_PART'", "'DATE_TRUNC'", "'ISFINITE'", "'JUSTIFY_DAYS'", "'JUSTIFY_HOURS'", 
		"'JUSTIFY_INTERVAL'", "'MAKE_DATE'", "'MAKE_INTERVAL'", "'MAKE_TIME'", 
		"'MAKE_TIMESTAMP'", "'MAKE_TIMESTAMPTZ'", "'NOW'", "'STATEMENT_TIMESTAMP'", 
		"'TIMEOFDAY'", "'TRANSACTION_TIMESTAMP'", "'TO_TIMESTAMP'", "'TO_CHAR'", 
		"'TO_DATE'", "'TO_NUMBER'", null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, "'\\\\'", null, null, null, null, null, null, null, null, 
		null, "'''"
	};
	private static readonly string[] _SymbolicNames = {
		null, "Dollar", "OPEN_PAREN", "CLOSE_PAREN", "OPEN_BRACKET", "CLOSE_BRACKET", 
		"COMMA", "SEMI", "COLON", "STAR", "EQUAL", "DOT", "PLUS", "MINUS", "SLASH", 
		"CARET", "LT", "GT", "LESS_LESS", "GREATER_GREATER", "COLON_EQUALS", "LESS_EQUALS", 
		"EQUALS_GREATER", "GREATER_EQUALS", "DOT_DOT", "NOT_EQUALS", "TYPECAST", 
		"PERCENT", "PARAM", "Operator", "ALL", "ANALYSE", "ANALYZE", "AND", "ANY", 
		"ARRAY", "AS", "ASC", "ASYMMETRIC", "BOTH", "CASE", "CAST", "CHECK", "COLLATE", 
		"COLUMN", "CONSTRAINT", "CREATE", "CURRENT_CATALOG", "CURRENT_DATE", "CURRENT_ROLE", 
		"CURRENT_TIME", "CURRENT_TIMESTAMP", "CURRENT_USER", "DEFAULT", "DEFERRABLE", 
		"DESC", "DISTINCT", "DO", "ELSE", "EXCEPT", "FALSE_P", "FETCH", "FOR", 
		"FOREIGN", "FROM", "GRANT", "GROUP_P", "HAVING", "IN_P", "INITIALLY", 
		"INTERSECT", "INTO", "LATERAL_P", "LEADING", "LIMIT", "LOCALTIME", "LOCALTIMESTAMP", 
		"NOT", "NULL_P", "OFFSET", "ON", "ONLY", "OR", "ORDER", "PLACING", "PRIMARY", 
		"REFERENCES", "RETURNING", "SELECT", "SESSION_USER", "SOME", "SYMMETRIC", 
		"TABLE", "THEN", "TO", "TRAILING", "TRUE_P", "UNION", "UNIQUE", "USER", 
		"USING", "VARIADIC", "WHEN", "WHERE", "WINDOW", "WITH", "AUTHORIZATION", 
		"BINARY", "COLLATION", "CONCURRENTLY", "CROSS", "CURRENT_SCHEMA", "FREEZE", 
		"FULL", "ILIKE", "INNER_P", "IS", "ISNULL", "JOIN", "LEFT", "LIKE", "NATURAL", 
		"NOTNULL", "OUTER_P", "OVER", "OVERLAPS", "RIGHT", "SIMILAR", "VERBOSE", 
		"ABORT_P", "ABSOLUTE_P", "ACCESS", "ACTION", "ADD_P", "ADMIN", "AFTER", 
		"AGGREGATE", "ALSO", "ALTER", "ALWAYS", "ASSERTION", "ASSIGNMENT", "AT", 
		"ATOMIC", "ATTRIBUTE", "BACKWARD", "BEFORE", "BEGIN_P", "BY", "CACHE", 
		"CALLED", "CASCADE", "CASCADED", "CATALOG", "CHAIN", "CHARACTERISTICS", 
		"CHECKPOINT", "CLASS", "CLOSE", "CLUSTER", "COMMENT", "COMMENTS", "COMMIT", 
		"COMMITTED", "CONFIGURATION", "CONNECTION", "CONSTRAINTS", "CONTENT_P", 
		"CONTINUE_P", "CONVERSION_P", "COPY", "COST", "CSV", "CURSOR", "CYCLE", 
		"DATA_P", "DATABASE", "DAY_P", "DEALLOCATE", "DECLARE", "DEFAULTS", "DEFERRED", 
		"DEFINER", "DELETE_P", "DELIMITER", "DELIMITERS", "DICTIONARY", "DISABLE_P", 
		"DISCARD", "DOCUMENT_P", "DOMAIN_P", "DOUBLE_P", "DROP", "EACH", "ENABLE_P", 
		"ENCODING", "ENCRYPTED", "ENUM_P", "ESCAPE", "EVENT", "EXCLUDE", "EXCLUDING", 
		"EXCLUSIVE", "EXECUTE", "EXPLAIN", "EXTENSION", "EXTERNAL", "FAMILY", 
		"FIRST_P", "FOLLOWING", "FORCE", "FORWARD", "FUNCTION", "FUNCTIONS", "GLOBAL", 
		"GRANTED", "HANDLER", "HEADER_P", "HOLD", "HOUR_P", "IDENTITY_P", "IF_P", 
		"IMMEDIATE", "IMMUTABLE", "IMPLICIT_P", "INCLUDING", "INCREMENT", "INDEX", 
		"INDEXES", "INHERIT", "INHERITS", "INLINE_P", "INSENSITIVE", "INSERT", 
		"INSTEAD", "INVOKER", "ISOLATION", "KEY", "LABEL", "LANGUAGE", "LARGE_P", 
		"LAST_P", "LEAKPROOF", "LEVEL", "LISTEN", "LOAD", "LOCAL", "LOCATION", 
		"LOCK_P", "MAPPING", "MATCH", "MATCHED", "MATERIALIZED", "MAXVALUE", "MERGE", 
		"MINUTE_P", "MINVALUE", "MODE", "MONTH_P", "MOVE", "NAME_P", "NAMES", 
		"NEXT", "NO", "NOTHING", "NOTIFY", "NOWAIT", "NULLS_P", "OBJECT_P", "OF", 
		"OFF", "OIDS", "OPERATOR", "OPTION", "OPTIONS", "OWNED", "OWNER", "PARSER", 
		"PARTIAL", "PARTITION", "PASSING", "PASSWORD", "PLANS", "PRECEDING", "PREPARE", 
		"PREPARED", "PRESERVE", "PRIOR", "PRIVILEGES", "PROCEDURAL", "PROCEDURE", 
		"PROGRAM", "QUOTE", "RANGE", "READ", "REASSIGN", "RECHECK", "RECURSIVE", 
		"REF", "REFRESH", "REINDEX", "RELATIVE_P", "RELEASE", "RENAME", "REPEATABLE", 
		"REPLACE", "REPLICA", "RESET", "RESTART", "RESTRICT", "RETURNS", "REVOKE", 
		"ROLE", "ROLLBACK", "ROWS", "RULE", "SAVEPOINT", "SCHEMA", "SCROLL", "SEARCH", 
		"SECOND_P", "SECURITY", "SEQUENCE", "SEQUENCES", "SERIALIZABLE", "SERVER", 
		"SESSION", "SET", "SHARE", "SHOW", "SIMPLE", "SNAPSHOT", "STABLE", "STANDALONE_P", 
		"START", "STATEMENT", "STATISTICS", "STDIN", "STDOUT", "STORAGE", "STRICT_P", 
		"STRIP_P", "SYSID", "SYSTEM_P", "TABLES", "TABLESPACE", "TEMP", "TEMPLATE", 
		"TEMPORARY", "TEXT_P", "TRANSACTION", "TRIGGER", "TRUNCATE", "TRUSTED", 
		"TYPE_P", "TYPES_P", "UNBOUNDED", "UNCOMMITTED", "UNENCRYPTED", "UNKNOWN", 
		"UNLISTEN", "UNLOGGED", "UNTIL", "UPDATE", "VACUUM", "VALID", "VALIDATE", 
		"VALIDATOR", "VARYING", "VERSION_P", "VIEW", "VOLATILE", "WHITESPACE_P", 
		"WITHOUT", "WORK", "WRAPPER", "WRITE", "XML_P", "YEAR_P", "YES_P", "ZONE", 
		"BETWEEN", "BIGINT", "BIT", "BOOLEAN_P", "CHAR_P", "CHARACTER", "COALESCE", 
		"DEC", "DECIMAL_P", "EXISTS", "EXTRACT", "FLOAT_P", "GREATEST", "INOUT", 
		"INT_P", "INTEGER", "INTERVAL", "LEAST", "NATIONAL", "NCHAR", "NONE", 
		"NULLIF", "NUMERIC", "OVERLAY", "POSITION", "PRECISION", "REAL", "ROW", 
		"SETOF", "SMALLINT", "SUBSTRING", "TIME", "TIMESTAMP", "TREAT", "TRIM", 
		"VALUES", "VARCHAR", "XMLATTRIBUTES", "XMLCOMMENT", "XMLAGG", "XML_IS_WELL_FORMED", 
		"XML_IS_WELL_FORMED_DOCUMENT", "XML_IS_WELL_FORMED_CONTENT", "XPATH", 
		"XPATH_EXISTS", "XMLCONCAT", "XMLELEMENT", "XMLEXISTS", "XMLFOREST", "XMLPARSE", 
		"XMLPI", "XMLROOT", "XMLSERIALIZE", "CALL", "CURRENT_P", "ATTACH", "DETACH", 
		"EXPRESSION", "GENERATED", "LOGGED", "STORED", "INCLUDE", "ROUTINE", "TRANSFORM", 
		"IMPORT_P", "POLICY", "METHOD", "REFERENCING", "NEW", "OLD", "VALUE_P", 
		"SUBSCRIPTION", "PUBLICATION", "OUT_P", "END_P", "ROUTINES", "SCHEMAS", 
		"PROCEDURES", "INPUT_P", "SUPPORT", "PARALLEL", "SQL_P", "DEPENDS", "OVERRIDING", 
		"CONFLICT", "SKIP_P", "LOCKED", "TIES", "ROLLUP", "CUBE", "GROUPING", 
		"SETS", "TABLESAMPLE", "ORDINALITY", "XMLTABLE", "COLUMNS", "XMLNAMESPACES", 
		"ROWTYPE", "NORMALIZED", "WITHIN", "FILTER", "GROUPS", "OTHERS", "NFC", 
		"NFD", "NFKC", "NFKD", "UESCAPE", "VIEWS", "NORMALIZE", "DUMP", "PRINT_STRICT_PARAMS", 
		"VARIABLE_CONFLICT", "ERROR", "USE_VARIABLE", "USE_COLUMN", "ALIAS", "CONSTANT", 
		"PERFORM", "GET", "DIAGNOSTICS", "STACKED", "ELSIF", "WHILE", "REVERSE", 
		"FOREACH", "SLICE", "EXIT", "RETURN", "QUERY", "RAISE", "SQLSTATE", "DEBUG", 
		"LOG", "INFO", "NOTICE", "WARNING", "EXCEPTION", "ASSERT", "LOOP", "OPEN", 
		"ABS", "CBRT", "CEIL", "CEILING", "DEGREES", "DIV", "EXP", "FACTORIAL", 
		"FLOOR", "GCD", "LCM", "LN", "LOG10", "MIN_SCALE", "MOD", "PI", "POWER", 
		"RADIANS", "ROUND", "SCALE", "SIGN", "SQRT", "TRIM_SCALE", "TRUNC", "WIDTH_BUCKET", 
		"RANDOM", "SETSEED", "ACOS", "ACOSD", "ASIN", "ASIND", "ATAN", "ATAND", 
		"ATAN2", "ATAN2D", "COS", "COSD", "COT", "COTD", "SIN", "SIND", "TAN", 
		"TAND", "SINH", "COSH", "TANH", "ASINH", "ACOSH", "ATANH", "BIT_LENGTH", 
		"CHAR_LENGTH", "CHARACTER_LENGTH", "LOWER", "OCTET_LENGTH", "UPPER", "ASCII", 
		"BTRIM", "CHR", "CONCAT", "CONCAT_WS", "FORMAT", "INITCAP", "LENGTH", 
		"LPAD", "LTRIM", "MD5", "PARSE_IDENT", "PG_CLIENT_ENCODING", "QUOTE_IDENT", 
		"QUOTE_LITERAL", "QUOTE_NULLABLE", "REGEXP_COUNT", "REGEXP_INSTR", "REGEXP_LIKE", 
		"REGEXP_MATCH", "REGEXP_MATCHES", "REGEXP_REPLACE", "REGEXP_SPLIT_TO_ARRAY", 
		"REGEXP_SPLIT_TO_TABLE", "REGEXP_SUBSTR", "REPEAT", "RPAD", "RTRIM", "SPLIT_PART", 
		"STARTS_WITH", "STRING_TO_ARRAY", "STRING_TO_TABLE", "STRPOS", "SUBSTR", 
		"TO_ASCII", "TO_HEX", "TRANSLATE", "UNISTR", "AGE", "CLOCK_TIMESTAMP", 
		"DATE_BIN", "DATE_PART", "DATE_TRUNC", "ISFINITE", "JUSTIFY_DAYS", "JUSTIFY_HOURS", 
		"JUSTIFY_INTERVAL", "MAKE_DATE", "MAKE_INTERVAL", "MAKE_TIME", "MAKE_TIMESTAMP", 
		"MAKE_TIMESTAMPTZ", "NOW", "STATEMENT_TIMESTAMP", "TIMEOFDAY", "TRANSACTION_TIMESTAMP", 
		"TO_TIMESTAMP", "TO_CHAR", "TO_DATE", "TO_NUMBER", "Identifier", "QuotedIdentifier", 
		"UnterminatedQuotedIdentifier", "InvalidQuotedIdentifier", "InvalidUnterminatedQuotedIdentifier", 
		"UnicodeQuotedIdentifier", "UnterminatedUnicodeQuotedIdentifier", "InvalidUnicodeQuotedIdentifier", 
		"InvalidUnterminatedUnicodeQuotedIdentifier", "StringConstant", "UnterminatedStringConstant", 
		"UnicodeEscapeStringConstant", "UnterminatedUnicodeEscapeStringConstant", 
		"BeginDollarStringConstant", "BinaryStringConstant", "UnterminatedBinaryStringConstant", 
		"InvalidBinaryStringConstant", "InvalidUnterminatedBinaryStringConstant", 
		"HexadecimalStringConstant", "UnterminatedHexadecimalStringConstant", 
		"InvalidHexadecimalStringConstant", "InvalidUnterminatedHexadecimalStringConstant", 
		"Integral", "NumericFail", "Numeric", "PLSQLVARIABLENAME", "PLSQLIDENTIFIER", 
		"Whitespace", "Newline", "LineComment", "BlockComment", "UnterminatedBlockComment", 
		"MetaCommand", "EndMetaCommand", "ErrorCharacter", "EscapeStringConstant", 
		"UnterminatedEscapeStringConstant", "InvalidEscapeStringConstant", "InvalidUnterminatedEscapeStringConstant", 
		"AfterEscapeStringConstantMode_NotContinued", "AfterEscapeStringConstantWithNewlineMode_NotContinued", 
		"DollarText", "EndDollarStringConstant", "AfterEscapeStringConstantWithNewlineMode_Continued"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "PostgreSQLParser.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static PostgreSQLParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}



		public PostgreSQLParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public PostgreSQLParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class RootContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StmtblockContext stmtblock() {
			return GetRuleContext<StmtblockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(PostgreSQLParser.Eof, 0); }
		public RootContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_root; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterRoot(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitRoot(this);
		}
	}

	[RuleVersion(0)]
	public RootContext root() {
		RootContext _localctx = new RootContext(Context, State);
		EnterRule(_localctx, 0, RULE_root);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1624;
			stmtblock();
			State = 1625;
			Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PlsqlrootContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Pl_functionContext pl_function() {
			return GetRuleContext<Pl_functionContext>(0);
		}
		public PlsqlrootContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_plsqlroot; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterPlsqlroot(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitPlsqlroot(this);
		}
	}

	[RuleVersion(0)]
	public PlsqlrootContext plsqlroot() {
		PlsqlrootContext _localctx = new PlsqlrootContext(Context, State);
		EnterRule(_localctx, 2, RULE_plsqlroot);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1627;
			pl_function();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StmtblockContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StmtmultiContext stmtmulti() {
			return GetRuleContext<StmtmultiContext>(0);
		}
		public StmtblockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stmtblock; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterStmtblock(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitStmtblock(this);
		}
	}

	[RuleVersion(0)]
	public StmtblockContext stmtblock() {
		StmtblockContext _localctx = new StmtblockContext(Context, State);
		EnterRule(_localctx, 4, RULE_stmtblock);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1629;
			stmtmulti();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StmtmultiContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StmtContext[] stmt() {
			return GetRuleContexts<StmtContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StmtContext stmt(int i) {
			return GetRuleContext<StmtContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SEMI() { return GetTokens(PostgreSQLParser.SEMI); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI(int i) {
			return GetToken(PostgreSQLParser.SEMI, i);
		}
		public StmtmultiContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stmtmulti; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterStmtmulti(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitStmtmulti(this);
		}
	}

	[RuleVersion(0)]
	public StmtmultiContext stmtmulti() {
		StmtmultiContext _localctx = new StmtmultiContext(Context, State);
		EnterRule(_localctx, 6, RULE_stmtmulti);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1637;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (((_la) & ~0x3f) == 0 && ((1L << _la) & 2450028572476178436L) != 0 || (((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & 1099654234113L) != 0 || (((_la - 129)) & ~0x3f) == 0 && ((1L << (_la - 129)) & -8627205824675839487L) != 0 || (((_la - 203)) & ~0x3f) == 0 && ((1L << (_la - 203)) & 4686037194794598403L) != 0 || (((_la - 284)) & ~0x3f) == 0 && ((1L << (_la - 284)) & 1170022785714177L) != 0 || (((_la - 352)) & ~0x3f) == 0 && ((1L << (_la - 352)) & 6401L) != 0 || (((_la - 416)) & ~0x3f) == 0 && ((1L << (_la - 416)) & 550292946945L) != 0 || _la==MetaCommand) {
				{
				{
				State = 1631;
				stmt();
				State = 1633;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==SEMI) {
					{
					State = 1632;
					Match(SEMI);
					}
				}

				}
				}
				State = 1639;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AltereventtrigstmtContext altereventtrigstmt() {
			return GetRuleContext<AltereventtrigstmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AltercollationstmtContext altercollationstmt() {
			return GetRuleContext<AltercollationstmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AlterdatabasestmtContext alterdatabasestmt() {
			return GetRuleContext<AlterdatabasestmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AlterdatabasesetstmtContext alterdatabasesetstmt() {
			return GetRuleContext<AlterdatabasesetstmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AlterdefaultprivilegesstmtContext alterdefaultprivilegesstmt() {
			return GetRuleContext<AlterdefaultprivilegesstmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AlterdomainstmtContext alterdomainstmt() {
			return GetRuleContext<AlterdomainstmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AlterenumstmtContext alterenumstmt() {
			return GetRuleContext<AlterenumstmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AlterextensionstmtContext alterextensionstmt() {
			return GetRuleContext<AlterextensionstmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AlterextensioncontentsstmtContext alterextensioncontentsstmt() {
			return GetRuleContext<AlterextensioncontentsstmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AlterfdwstmtContext alterfdwstmt() {
			return GetRuleContext<AlterfdwstmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AlterforeignserverstmtContext alterforeignserverstmt() {
			return GetRuleContext<AlterforeignserverstmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AlterfunctionstmtContext alterfunctionstmt() {
			return GetRuleContext<AlterfunctionstmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AltergroupstmtContext altergroupstmt() {
			return GetRuleContext<AltergroupstmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AlterobjectdependsstmtContext alterobjectdependsstmt() {
			return GetRuleContext<AlterobjectdependsstmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AlterobjectschemastmtContext alterobjectschemastmt() {
			return GetRuleContext<AlterobjectschemastmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AlterownerstmtContext alterownerstmt() {
			return GetRuleContext<AlterownerstmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AlteroperatorstmtContext alteroperatorstmt() {
			return GetRuleContext<AlteroperatorstmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AltertypestmtContext altertypestmt() {
			return GetRuleContext<AltertypestmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AlterpolicystmtContext alterpolicystmt() {
			return GetRuleContext<AlterpolicystmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AlterseqstmtContext alterseqstmt() {
			return GetRuleContext<AlterseqstmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AltersystemstmtContext altersystemstmt() {
			return GetRuleContext<AltersystemstmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AltertablestmtContext altertablestmt() {
			return GetRuleContext<AltertablestmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AltertblspcstmtContext altertblspcstmt() {
			return GetRuleContext<AltertblspcstmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AltercompositetypestmtContext altercompositetypestmt() {
			return GetRuleContext<AltercompositetypestmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AlterpublicationstmtContext alterpublicationstmt() {
			return GetRuleContext<AlterpublicationstmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AlterrolesetstmtContext alterrolesetstmt() {
			return GetRuleContext<AlterrolesetstmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AlterrolestmtContext alterrolestmt() {
			return GetRuleContext<AlterrolestmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AltersubscriptionstmtContext altersubscriptionstmt() {
			return GetRuleContext<AltersubscriptionstmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AlterstatsstmtContext alterstatsstmt() {
			return GetRuleContext<AlterstatsstmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AltertsconfigurationstmtContext altertsconfigurationstmt() {
			return GetRuleContext<AltertsconfigurationstmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AltertsdictionarystmtContext altertsdictionarystmt() {
			return GetRuleContext<AltertsdictionarystmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AlterusermappingstmtContext alterusermappingstmt() {
			return GetRuleContext<AlterusermappingstmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AnalyzestmtContext analyzestmt() {
			return GetRuleContext<AnalyzestmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CallstmtContext callstmt() {
			return GetRuleContext<CallstmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CheckpointstmtContext checkpointstmt() {
			return GetRuleContext<CheckpointstmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CloseportalstmtContext closeportalstmt() {
			return GetRuleContext<CloseportalstmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ClusterstmtContext clusterstmt() {
			return GetRuleContext<ClusterstmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CommentstmtContext commentstmt() {
			return GetRuleContext<CommentstmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ConstraintssetstmtContext constraintssetstmt() {
			return GetRuleContext<ConstraintssetstmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CopystmtContext copystmt() {
			return GetRuleContext<CopystmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CreateamstmtContext createamstmt() {
			return GetRuleContext<CreateamstmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CreateasstmtContext createasstmt() {
			return GetRuleContext<CreateasstmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CreateassertionstmtContext createassertionstmt() {
			return GetRuleContext<CreateassertionstmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CreatecaststmtContext createcaststmt() {
			return GetRuleContext<CreatecaststmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CreateconversionstmtContext createconversionstmt() {
			return GetRuleContext<CreateconversionstmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CreatedomainstmtContext createdomainstmt() {
			return GetRuleContext<CreatedomainstmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CreateextensionstmtContext createextensionstmt() {
			return GetRuleContext<CreateextensionstmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CreatefdwstmtContext createfdwstmt() {
			return GetRuleContext<CreatefdwstmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CreateforeignserverstmtContext createforeignserverstmt() {
			return GetRuleContext<CreateforeignserverstmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CreateforeigntablestmtContext createforeigntablestmt() {
			return GetRuleContext<CreateforeigntablestmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CreatefunctionstmtContext createfunctionstmt() {
			return GetRuleContext<CreatefunctionstmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CreategroupstmtContext creategroupstmt() {
			return GetRuleContext<CreategroupstmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CreatematviewstmtContext creatematviewstmt() {
			return GetRuleContext<CreatematviewstmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CreateopclassstmtContext createopclassstmt() {
			return GetRuleContext<CreateopclassstmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CreateopfamilystmtContext createopfamilystmt() {
			return GetRuleContext<CreateopfamilystmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CreatepublicationstmtContext createpublicationstmt() {
			return GetRuleContext<CreatepublicationstmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AlteropfamilystmtContext alteropfamilystmt() {
			return GetRuleContext<AlteropfamilystmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CreatepolicystmtContext createpolicystmt() {
			return GetRuleContext<CreatepolicystmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CreateplangstmtContext createplangstmt() {
			return GetRuleContext<CreateplangstmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CreateschemastmtContext createschemastmt() {
			return GetRuleContext<CreateschemastmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CreateseqstmtContext createseqstmt() {
			return GetRuleContext<CreateseqstmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CreatestmtContext createstmt() {
			return GetRuleContext<CreatestmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CreatesubscriptionstmtContext createsubscriptionstmt() {
			return GetRuleContext<CreatesubscriptionstmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CreatestatsstmtContext createstatsstmt() {
			return GetRuleContext<CreatestatsstmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CreatetablespacestmtContext createtablespacestmt() {
			return GetRuleContext<CreatetablespacestmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CreatetransformstmtContext createtransformstmt() {
			return GetRuleContext<CreatetransformstmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CreatetrigstmtContext createtrigstmt() {
			return GetRuleContext<CreatetrigstmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CreateeventtrigstmtContext createeventtrigstmt() {
			return GetRuleContext<CreateeventtrigstmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CreaterolestmtContext createrolestmt() {
			return GetRuleContext<CreaterolestmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CreateuserstmtContext createuserstmt() {
			return GetRuleContext<CreateuserstmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CreateusermappingstmtContext createusermappingstmt() {
			return GetRuleContext<CreateusermappingstmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CreatedbstmtContext createdbstmt() {
			return GetRuleContext<CreatedbstmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DeallocatestmtContext deallocatestmt() {
			return GetRuleContext<DeallocatestmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DeclarecursorstmtContext declarecursorstmt() {
			return GetRuleContext<DeclarecursorstmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DefinestmtContext definestmt() {
			return GetRuleContext<DefinestmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DeletestmtContext deletestmt() {
			return GetRuleContext<DeletestmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DiscardstmtContext discardstmt() {
			return GetRuleContext<DiscardstmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DostmtContext dostmt() {
			return GetRuleContext<DostmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DropcaststmtContext dropcaststmt() {
			return GetRuleContext<DropcaststmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DropopclassstmtContext dropopclassstmt() {
			return GetRuleContext<DropopclassstmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DropopfamilystmtContext dropopfamilystmt() {
			return GetRuleContext<DropopfamilystmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DropownedstmtContext dropownedstmt() {
			return GetRuleContext<DropownedstmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DropstmtContext dropstmt() {
			return GetRuleContext<DropstmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DropsubscriptionstmtContext dropsubscriptionstmt() {
			return GetRuleContext<DropsubscriptionstmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DroptablespacestmtContext droptablespacestmt() {
			return GetRuleContext<DroptablespacestmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DroptransformstmtContext droptransformstmt() {
			return GetRuleContext<DroptransformstmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DroprolestmtContext droprolestmt() {
			return GetRuleContext<DroprolestmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DropusermappingstmtContext dropusermappingstmt() {
			return GetRuleContext<DropusermappingstmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DropdbstmtContext dropdbstmt() {
			return GetRuleContext<DropdbstmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExecutestmtContext executestmt() {
			return GetRuleContext<ExecutestmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExplainstmtContext explainstmt() {
			return GetRuleContext<ExplainstmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FetchstmtContext fetchstmt() {
			return GetRuleContext<FetchstmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public GrantstmtContext grantstmt() {
			return GetRuleContext<GrantstmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public GrantrolestmtContext grantrolestmt() {
			return GetRuleContext<GrantrolestmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ImportforeignschemastmtContext importforeignschemastmt() {
			return GetRuleContext<ImportforeignschemastmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IndexstmtContext indexstmt() {
			return GetRuleContext<IndexstmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public InsertstmtContext insertstmt() {
			return GetRuleContext<InsertstmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MergestmtContext mergestmt() {
			return GetRuleContext<MergestmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ListenstmtContext listenstmt() {
			return GetRuleContext<ListenstmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RefreshmatviewstmtContext refreshmatviewstmt() {
			return GetRuleContext<RefreshmatviewstmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LoadstmtContext loadstmt() {
			return GetRuleContext<LoadstmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LockstmtContext lockstmt() {
			return GetRuleContext<LockstmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NotifystmtContext notifystmt() {
			return GetRuleContext<NotifystmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PreparestmtContext preparestmt() {
			return GetRuleContext<PreparestmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ReassignownedstmtContext reassignownedstmt() {
			return GetRuleContext<ReassignownedstmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ReindexstmtContext reindexstmt() {
			return GetRuleContext<ReindexstmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RemoveaggrstmtContext removeaggrstmt() {
			return GetRuleContext<RemoveaggrstmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RemovefuncstmtContext removefuncstmt() {
			return GetRuleContext<RemovefuncstmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RemoveoperstmtContext removeoperstmt() {
			return GetRuleContext<RemoveoperstmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RenamestmtContext renamestmt() {
			return GetRuleContext<RenamestmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RevokestmtContext revokestmt() {
			return GetRuleContext<RevokestmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RevokerolestmtContext revokerolestmt() {
			return GetRuleContext<RevokerolestmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RulestmtContext rulestmt() {
			return GetRuleContext<RulestmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SeclabelstmtContext seclabelstmt() {
			return GetRuleContext<SeclabelstmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SelectstmtContext selectstmt() {
			return GetRuleContext<SelectstmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TransactionstmtContext transactionstmt() {
			return GetRuleContext<TransactionstmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TruncatestmtContext truncatestmt() {
			return GetRuleContext<TruncatestmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UnlistenstmtContext unlistenstmt() {
			return GetRuleContext<UnlistenstmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UpdatestmtContext updatestmt() {
			return GetRuleContext<UpdatestmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public VacuumstmtContext vacuumstmt() {
			return GetRuleContext<VacuumstmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public VariableresetstmtContext variableresetstmt() {
			return GetRuleContext<VariableresetstmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public VariablesetstmtContext variablesetstmt() {
			return GetRuleContext<VariablesetstmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public VariableshowstmtContext variableshowstmt() {
			return GetRuleContext<VariableshowstmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ViewstmtContext viewstmt() {
			return GetRuleContext<ViewstmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PlsqlconsolecommandContext plsqlconsolecommand() {
			return GetRuleContext<PlsqlconsolecommandContext>(0);
		}
		public StmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterStmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitStmt(this);
		}
	}

	[RuleVersion(0)]
	public StmtContext stmt() {
		StmtContext _localctx = new StmtContext(Context, State);
		EnterRule(_localctx, 8, RULE_stmt);
		try {
			State = 1765;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,2,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1640;
				altereventtrigstmt();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1641;
				altercollationstmt();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1642;
				alterdatabasestmt();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1643;
				alterdatabasesetstmt();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 1644;
				alterdefaultprivilegesstmt();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 1645;
				alterdomainstmt();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 1646;
				alterenumstmt();
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 1647;
				alterextensionstmt();
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 1648;
				alterextensioncontentsstmt();
				}
				break;
			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 1649;
				alterfdwstmt();
				}
				break;
			case 11:
				EnterOuterAlt(_localctx, 11);
				{
				State = 1650;
				alterforeignserverstmt();
				}
				break;
			case 12:
				EnterOuterAlt(_localctx, 12);
				{
				State = 1651;
				alterfunctionstmt();
				}
				break;
			case 13:
				EnterOuterAlt(_localctx, 13);
				{
				State = 1652;
				altergroupstmt();
				}
				break;
			case 14:
				EnterOuterAlt(_localctx, 14);
				{
				State = 1653;
				alterobjectdependsstmt();
				}
				break;
			case 15:
				EnterOuterAlt(_localctx, 15);
				{
				State = 1654;
				alterobjectschemastmt();
				}
				break;
			case 16:
				EnterOuterAlt(_localctx, 16);
				{
				State = 1655;
				alterownerstmt();
				}
				break;
			case 17:
				EnterOuterAlt(_localctx, 17);
				{
				State = 1656;
				alteroperatorstmt();
				}
				break;
			case 18:
				EnterOuterAlt(_localctx, 18);
				{
				State = 1657;
				altertypestmt();
				}
				break;
			case 19:
				EnterOuterAlt(_localctx, 19);
				{
				State = 1658;
				alterpolicystmt();
				}
				break;
			case 20:
				EnterOuterAlt(_localctx, 20);
				{
				State = 1659;
				alterseqstmt();
				}
				break;
			case 21:
				EnterOuterAlt(_localctx, 21);
				{
				State = 1660;
				altersystemstmt();
				}
				break;
			case 22:
				EnterOuterAlt(_localctx, 22);
				{
				State = 1661;
				altertablestmt();
				}
				break;
			case 23:
				EnterOuterAlt(_localctx, 23);
				{
				State = 1662;
				altertblspcstmt();
				}
				break;
			case 24:
				EnterOuterAlt(_localctx, 24);
				{
				State = 1663;
				altercompositetypestmt();
				}
				break;
			case 25:
				EnterOuterAlt(_localctx, 25);
				{
				State = 1664;
				alterpublicationstmt();
				}
				break;
			case 26:
				EnterOuterAlt(_localctx, 26);
				{
				State = 1665;
				alterrolesetstmt();
				}
				break;
			case 27:
				EnterOuterAlt(_localctx, 27);
				{
				State = 1666;
				alterrolestmt();
				}
				break;
			case 28:
				EnterOuterAlt(_localctx, 28);
				{
				State = 1667;
				altersubscriptionstmt();
				}
				break;
			case 29:
				EnterOuterAlt(_localctx, 29);
				{
				State = 1668;
				alterstatsstmt();
				}
				break;
			case 30:
				EnterOuterAlt(_localctx, 30);
				{
				State = 1669;
				altertsconfigurationstmt();
				}
				break;
			case 31:
				EnterOuterAlt(_localctx, 31);
				{
				State = 1670;
				altertsdictionarystmt();
				}
				break;
			case 32:
				EnterOuterAlt(_localctx, 32);
				{
				State = 1671;
				alterusermappingstmt();
				}
				break;
			case 33:
				EnterOuterAlt(_localctx, 33);
				{
				State = 1672;
				analyzestmt();
				}
				break;
			case 34:
				EnterOuterAlt(_localctx, 34);
				{
				State = 1673;
				callstmt();
				}
				break;
			case 35:
				EnterOuterAlt(_localctx, 35);
				{
				State = 1674;
				checkpointstmt();
				}
				break;
			case 36:
				EnterOuterAlt(_localctx, 36);
				{
				State = 1675;
				closeportalstmt();
				}
				break;
			case 37:
				EnterOuterAlt(_localctx, 37);
				{
				State = 1676;
				clusterstmt();
				}
				break;
			case 38:
				EnterOuterAlt(_localctx, 38);
				{
				State = 1677;
				commentstmt();
				}
				break;
			case 39:
				EnterOuterAlt(_localctx, 39);
				{
				State = 1678;
				constraintssetstmt();
				}
				break;
			case 40:
				EnterOuterAlt(_localctx, 40);
				{
				State = 1679;
				copystmt();
				}
				break;
			case 41:
				EnterOuterAlt(_localctx, 41);
				{
				State = 1680;
				createamstmt();
				}
				break;
			case 42:
				EnterOuterAlt(_localctx, 42);
				{
				State = 1681;
				createasstmt();
				}
				break;
			case 43:
				EnterOuterAlt(_localctx, 43);
				{
				State = 1682;
				createassertionstmt();
				}
				break;
			case 44:
				EnterOuterAlt(_localctx, 44);
				{
				State = 1683;
				createcaststmt();
				}
				break;
			case 45:
				EnterOuterAlt(_localctx, 45);
				{
				State = 1684;
				createconversionstmt();
				}
				break;
			case 46:
				EnterOuterAlt(_localctx, 46);
				{
				State = 1685;
				createdomainstmt();
				}
				break;
			case 47:
				EnterOuterAlt(_localctx, 47);
				{
				State = 1686;
				createextensionstmt();
				}
				break;
			case 48:
				EnterOuterAlt(_localctx, 48);
				{
				State = 1687;
				createfdwstmt();
				}
				break;
			case 49:
				EnterOuterAlt(_localctx, 49);
				{
				State = 1688;
				createforeignserverstmt();
				}
				break;
			case 50:
				EnterOuterAlt(_localctx, 50);
				{
				State = 1689;
				createforeigntablestmt();
				}
				break;
			case 51:
				EnterOuterAlt(_localctx, 51);
				{
				State = 1690;
				createfunctionstmt();
				}
				break;
			case 52:
				EnterOuterAlt(_localctx, 52);
				{
				State = 1691;
				creategroupstmt();
				}
				break;
			case 53:
				EnterOuterAlt(_localctx, 53);
				{
				State = 1692;
				creatematviewstmt();
				}
				break;
			case 54:
				EnterOuterAlt(_localctx, 54);
				{
				State = 1693;
				createopclassstmt();
				}
				break;
			case 55:
				EnterOuterAlt(_localctx, 55);
				{
				State = 1694;
				createopfamilystmt();
				}
				break;
			case 56:
				EnterOuterAlt(_localctx, 56);
				{
				State = 1695;
				createpublicationstmt();
				}
				break;
			case 57:
				EnterOuterAlt(_localctx, 57);
				{
				State = 1696;
				alteropfamilystmt();
				}
				break;
			case 58:
				EnterOuterAlt(_localctx, 58);
				{
				State = 1697;
				createpolicystmt();
				}
				break;
			case 59:
				EnterOuterAlt(_localctx, 59);
				{
				State = 1698;
				createplangstmt();
				}
				break;
			case 60:
				EnterOuterAlt(_localctx, 60);
				{
				State = 1699;
				createschemastmt();
				}
				break;
			case 61:
				EnterOuterAlt(_localctx, 61);
				{
				State = 1700;
				createseqstmt();
				}
				break;
			case 62:
				EnterOuterAlt(_localctx, 62);
				{
				State = 1701;
				createstmt();
				}
				break;
			case 63:
				EnterOuterAlt(_localctx, 63);
				{
				State = 1702;
				createsubscriptionstmt();
				}
				break;
			case 64:
				EnterOuterAlt(_localctx, 64);
				{
				State = 1703;
				createstatsstmt();
				}
				break;
			case 65:
				EnterOuterAlt(_localctx, 65);
				{
				State = 1704;
				createtablespacestmt();
				}
				break;
			case 66:
				EnterOuterAlt(_localctx, 66);
				{
				State = 1705;
				createtransformstmt();
				}
				break;
			case 67:
				EnterOuterAlt(_localctx, 67);
				{
				State = 1706;
				createtrigstmt();
				}
				break;
			case 68:
				EnterOuterAlt(_localctx, 68);
				{
				State = 1707;
				createeventtrigstmt();
				}
				break;
			case 69:
				EnterOuterAlt(_localctx, 69);
				{
				State = 1708;
				createrolestmt();
				}
				break;
			case 70:
				EnterOuterAlt(_localctx, 70);
				{
				State = 1709;
				createuserstmt();
				}
				break;
			case 71:
				EnterOuterAlt(_localctx, 71);
				{
				State = 1710;
				createusermappingstmt();
				}
				break;
			case 72:
				EnterOuterAlt(_localctx, 72);
				{
				State = 1711;
				createdbstmt();
				}
				break;
			case 73:
				EnterOuterAlt(_localctx, 73);
				{
				State = 1712;
				deallocatestmt();
				}
				break;
			case 74:
				EnterOuterAlt(_localctx, 74);
				{
				State = 1713;
				declarecursorstmt();
				}
				break;
			case 75:
				EnterOuterAlt(_localctx, 75);
				{
				State = 1714;
				definestmt();
				}
				break;
			case 76:
				EnterOuterAlt(_localctx, 76);
				{
				State = 1715;
				deletestmt();
				}
				break;
			case 77:
				EnterOuterAlt(_localctx, 77);
				{
				State = 1716;
				discardstmt();
				}
				break;
			case 78:
				EnterOuterAlt(_localctx, 78);
				{
				State = 1717;
				dostmt();
				}
				break;
			case 79:
				EnterOuterAlt(_localctx, 79);
				{
				State = 1718;
				dropcaststmt();
				}
				break;
			case 80:
				EnterOuterAlt(_localctx, 80);
				{
				State = 1719;
				dropopclassstmt();
				}
				break;
			case 81:
				EnterOuterAlt(_localctx, 81);
				{
				State = 1720;
				dropopfamilystmt();
				}
				break;
			case 82:
				EnterOuterAlt(_localctx, 82);
				{
				State = 1721;
				dropownedstmt();
				}
				break;
			case 83:
				EnterOuterAlt(_localctx, 83);
				{
				State = 1722;
				dropstmt();
				}
				break;
			case 84:
				EnterOuterAlt(_localctx, 84);
				{
				State = 1723;
				dropsubscriptionstmt();
				}
				break;
			case 85:
				EnterOuterAlt(_localctx, 85);
				{
				State = 1724;
				droptablespacestmt();
				}
				break;
			case 86:
				EnterOuterAlt(_localctx, 86);
				{
				State = 1725;
				droptransformstmt();
				}
				break;
			case 87:
				EnterOuterAlt(_localctx, 87);
				{
				State = 1726;
				droprolestmt();
				}
				break;
			case 88:
				EnterOuterAlt(_localctx, 88);
				{
				State = 1727;
				dropusermappingstmt();
				}
				break;
			case 89:
				EnterOuterAlt(_localctx, 89);
				{
				State = 1728;
				dropdbstmt();
				}
				break;
			case 90:
				EnterOuterAlt(_localctx, 90);
				{
				State = 1729;
				executestmt();
				}
				break;
			case 91:
				EnterOuterAlt(_localctx, 91);
				{
				State = 1730;
				explainstmt();
				}
				break;
			case 92:
				EnterOuterAlt(_localctx, 92);
				{
				State = 1731;
				fetchstmt();
				}
				break;
			case 93:
				EnterOuterAlt(_localctx, 93);
				{
				State = 1732;
				grantstmt();
				}
				break;
			case 94:
				EnterOuterAlt(_localctx, 94);
				{
				State = 1733;
				grantrolestmt();
				}
				break;
			case 95:
				EnterOuterAlt(_localctx, 95);
				{
				State = 1734;
				importforeignschemastmt();
				}
				break;
			case 96:
				EnterOuterAlt(_localctx, 96);
				{
				State = 1735;
				indexstmt();
				}
				break;
			case 97:
				EnterOuterAlt(_localctx, 97);
				{
				State = 1736;
				insertstmt();
				}
				break;
			case 98:
				EnterOuterAlt(_localctx, 98);
				{
				State = 1737;
				mergestmt();
				}
				break;
			case 99:
				EnterOuterAlt(_localctx, 99);
				{
				State = 1738;
				listenstmt();
				}
				break;
			case 100:
				EnterOuterAlt(_localctx, 100);
				{
				State = 1739;
				refreshmatviewstmt();
				}
				break;
			case 101:
				EnterOuterAlt(_localctx, 101);
				{
				State = 1740;
				loadstmt();
				}
				break;
			case 102:
				EnterOuterAlt(_localctx, 102);
				{
				State = 1741;
				lockstmt();
				}
				break;
			case 103:
				EnterOuterAlt(_localctx, 103);
				{
				State = 1742;
				notifystmt();
				}
				break;
			case 104:
				EnterOuterAlt(_localctx, 104);
				{
				State = 1743;
				preparestmt();
				}
				break;
			case 105:
				EnterOuterAlt(_localctx, 105);
				{
				State = 1744;
				reassignownedstmt();
				}
				break;
			case 106:
				EnterOuterAlt(_localctx, 106);
				{
				State = 1745;
				reindexstmt();
				}
				break;
			case 107:
				EnterOuterAlt(_localctx, 107);
				{
				State = 1746;
				removeaggrstmt();
				}
				break;
			case 108:
				EnterOuterAlt(_localctx, 108);
				{
				State = 1747;
				removefuncstmt();
				}
				break;
			case 109:
				EnterOuterAlt(_localctx, 109);
				{
				State = 1748;
				removeoperstmt();
				}
				break;
			case 110:
				EnterOuterAlt(_localctx, 110);
				{
				State = 1749;
				renamestmt();
				}
				break;
			case 111:
				EnterOuterAlt(_localctx, 111);
				{
				State = 1750;
				revokestmt();
				}
				break;
			case 112:
				EnterOuterAlt(_localctx, 112);
				{
				State = 1751;
				revokerolestmt();
				}
				break;
			case 113:
				EnterOuterAlt(_localctx, 113);
				{
				State = 1752;
				rulestmt();
				}
				break;
			case 114:
				EnterOuterAlt(_localctx, 114);
				{
				State = 1753;
				seclabelstmt();
				}
				break;
			case 115:
				EnterOuterAlt(_localctx, 115);
				{
				State = 1754;
				selectstmt();
				}
				break;
			case 116:
				EnterOuterAlt(_localctx, 116);
				{
				State = 1755;
				transactionstmt();
				}
				break;
			case 117:
				EnterOuterAlt(_localctx, 117);
				{
				State = 1756;
				truncatestmt();
				}
				break;
			case 118:
				EnterOuterAlt(_localctx, 118);
				{
				State = 1757;
				unlistenstmt();
				}
				break;
			case 119:
				EnterOuterAlt(_localctx, 119);
				{
				State = 1758;
				updatestmt();
				}
				break;
			case 120:
				EnterOuterAlt(_localctx, 120);
				{
				State = 1759;
				vacuumstmt();
				}
				break;
			case 121:
				EnterOuterAlt(_localctx, 121);
				{
				State = 1760;
				variableresetstmt();
				}
				break;
			case 122:
				EnterOuterAlt(_localctx, 122);
				{
				State = 1761;
				variablesetstmt();
				}
				break;
			case 123:
				EnterOuterAlt(_localctx, 123);
				{
				State = 1762;
				variableshowstmt();
				}
				break;
			case 124:
				EnterOuterAlt(_localctx, 124);
				{
				State = 1763;
				viewstmt();
				}
				break;
			case 125:
				EnterOuterAlt(_localctx, 125);
				{
				State = 1764;
				plsqlconsolecommand();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PlsqlconsolecommandContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MetaCommand() { return GetToken(PostgreSQLParser.MetaCommand, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EndMetaCommand() { return GetToken(PostgreSQLParser.EndMetaCommand, 0); }
		public PlsqlconsolecommandContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_plsqlconsolecommand; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterPlsqlconsolecommand(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitPlsqlconsolecommand(this);
		}
	}

	[RuleVersion(0)]
	public PlsqlconsolecommandContext plsqlconsolecommand() {
		PlsqlconsolecommandContext _localctx = new PlsqlconsolecommandContext(Context, State);
		EnterRule(_localctx, 10, RULE_plsqlconsolecommand);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1767;
			Match(MetaCommand);
			State = 1769;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==EndMetaCommand) {
				{
				State = 1768;
				Match(EndMetaCommand);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CallstmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CALL() { return GetToken(PostgreSQLParser.CALL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Func_applicationContext func_application() {
			return GetRuleContext<Func_applicationContext>(0);
		}
		public CallstmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_callstmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterCallstmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitCallstmt(this);
		}
	}

	[RuleVersion(0)]
	public CallstmtContext callstmt() {
		CallstmtContext _localctx = new CallstmtContext(Context, State);
		EnterRule(_localctx, 12, RULE_callstmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1771;
			Match(CALL);
			State = 1772;
			func_application();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CreaterolestmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CREATE() { return GetToken(PostgreSQLParser.CREATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROLE() { return GetToken(PostgreSQLParser.ROLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public RoleidContext roleid() {
			return GetRuleContext<RoleidContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Opt_withContext opt_with() {
			return GetRuleContext<Opt_withContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public OptrolelistContext optrolelist() {
			return GetRuleContext<OptrolelistContext>(0);
		}
		public CreaterolestmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_createrolestmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterCreaterolestmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitCreaterolestmt(this);
		}
	}

	[RuleVersion(0)]
	public CreaterolestmtContext createrolestmt() {
		CreaterolestmtContext _localctx = new CreaterolestmtContext(Context, State);
		EnterRule(_localctx, 14, RULE_createrolestmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1774;
			Match(CREATE);
			State = 1775;
			Match(ROLE);
			State = 1776;
			roleid();
			State = 1777;
			opt_with();
			State = 1778;
			optrolelist();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Opt_withContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WITH() { return GetToken(PostgreSQLParser.WITH, 0); }
		public Opt_withContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_opt_with; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterOpt_with(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitOpt_with(this);
		}
	}

	[RuleVersion(0)]
	public Opt_withContext opt_with() {
		Opt_withContext _localctx = new Opt_withContext(Context, State);
		EnterRule(_localctx, 16, RULE_opt_with);
		try {
			State = 1782;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,4,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1780;
				Match(WITH);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OptrolelistContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public CreateoptroleelemContext[] createoptroleelem() {
			return GetRuleContexts<CreateoptroleelemContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public CreateoptroleelemContext createoptroleelem(int i) {
			return GetRuleContext<CreateoptroleelemContext>(i);
		}
		public OptrolelistContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_optrolelist; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterOptrolelist(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitOptrolelist(this);
		}
	}

	[RuleVersion(0)]
	public OptrolelistContext optrolelist() {
		OptrolelistContext _localctx = new OptrolelistContext(Context, State);
		EnterRule(_localctx, 18, RULE_optrolelist);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1787;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,5,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 1784;
					createoptroleelem();
					}
					} 
				}
				State = 1789;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,5,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AlteroptrolelistContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AlteroptroleelemContext[] alteroptroleelem() {
			return GetRuleContexts<AlteroptroleelemContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AlteroptroleelemContext alteroptroleelem(int i) {
			return GetRuleContext<AlteroptroleelemContext>(i);
		}
		public AlteroptrolelistContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alteroptrolelist; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterAlteroptrolelist(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitAlteroptrolelist(this);
		}
	}

	[RuleVersion(0)]
	public AlteroptrolelistContext alteroptrolelist() {
		AlteroptrolelistContext _localctx = new AlteroptrolelistContext(Context, State);
		EnterRule(_localctx, 20, RULE_alteroptrolelist);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1793;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,6,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 1790;
					alteroptroleelem();
					}
					} 
				}
				State = 1795;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,6,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AlteroptroleelemContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PASSWORD() { return GetToken(PostgreSQLParser.PASSWORD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SconstContext sconst() {
			return GetRuleContext<SconstContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NULL_P() { return GetToken(PostgreSQLParser.NULL_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ENCRYPTED() { return GetToken(PostgreSQLParser.ENCRYPTED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNENCRYPTED() { return GetToken(PostgreSQLParser.UNENCRYPTED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INHERIT() { return GetToken(PostgreSQLParser.INHERIT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONNECTION() { return GetToken(PostgreSQLParser.CONNECTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LIMIT() { return GetToken(PostgreSQLParser.LIMIT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SignediconstContext signediconst() {
			return GetRuleContext<SignediconstContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VALID() { return GetToken(PostgreSQLParser.VALID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNTIL() { return GetToken(PostgreSQLParser.UNTIL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode USER() { return GetToken(PostgreSQLParser.USER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Role_listContext role_list() {
			return GetRuleContext<Role_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public AlteroptroleelemContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alteroptroleelem; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterAlteroptroleelem(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitAlteroptroleelem(this);
		}
	}

	[RuleVersion(0)]
	public AlteroptroleelemContext alteroptroleelem() {
		AlteroptroleelemContext _localctx = new AlteroptroleelemContext(Context, State);
		EnterRule(_localctx, 22, RULE_alteroptroleelem);
		int _la;
		try {
			State = 1814;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case PASSWORD:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1796;
				Match(PASSWORD);
				State = 1799;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case StringConstant:
				case UnicodeEscapeStringConstant:
				case BeginDollarStringConstant:
				case EscapeStringConstant:
					{
					State = 1797;
					sconst();
					}
					break;
				case NULL_P:
					{
					State = 1798;
					Match(NULL_P);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case ENCRYPTED:
			case UNENCRYPTED:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1801;
				_la = TokenStream.LA(1);
				if ( !(_la==ENCRYPTED || _la==UNENCRYPTED) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 1802;
				Match(PASSWORD);
				State = 1803;
				sconst();
				}
				break;
			case INHERIT:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1804;
				Match(INHERIT);
				}
				break;
			case CONNECTION:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1805;
				Match(CONNECTION);
				State = 1806;
				Match(LIMIT);
				State = 1807;
				signediconst();
				}
				break;
			case VALID:
				EnterOuterAlt(_localctx, 5);
				{
				State = 1808;
				Match(VALID);
				State = 1809;
				Match(UNTIL);
				State = 1810;
				sconst();
				}
				break;
			case USER:
				EnterOuterAlt(_localctx, 6);
				{
				State = 1811;
				Match(USER);
				State = 1812;
				role_list();
				}
				break;
			case AND:
			case ARRAY:
			case COLLATE:
			case COLUMN:
			case CONSTRAINT:
			case DEFAULT:
			case DO:
			case FETCH:
			case TABLE:
			case IS:
			case OUTER_P:
			case ABSOLUTE_P:
			case BACKWARD:
			case CHAIN:
			case CLOSE:
			case COMMIT:
			case CONTINUE_P:
			case CURSOR:
			case FIRST_P:
			case FORWARD:
			case INSERT:
			case LAST_P:
			case MOVE:
			case NEXT:
			case NO:
			case OPTION:
			case PRIOR:
			case RELATIVE_P:
			case RESET:
			case ROLLBACK:
			case SCHEMA:
			case SCROLL:
			case SET:
			case TYPE_P:
			case CALL:
			case CURRENT_P:
			case ROWTYPE:
			case DUMP:
			case PRINT_STRICT_PARAMS:
			case VARIABLE_CONFLICT:
			case ERROR:
			case USE_VARIABLE:
			case USE_COLUMN:
			case ALIAS:
			case CONSTANT:
			case PERFORM:
			case GET:
			case DIAGNOSTICS:
			case STACKED:
			case ELSIF:
			case SLICE:
			case EXIT:
			case RETURN:
			case QUERY:
			case RAISE:
			case SQLSTATE:
			case DEBUG:
			case INFO:
			case NOTICE:
			case WARNING:
			case EXCEPTION:
			case ASSERT:
			case OPEN:
			case Identifier:
			case QuotedIdentifier:
			case UnicodeQuotedIdentifier:
			case PLSQLVARIABLENAME:
			case PLSQLIDENTIFIER:
				EnterOuterAlt(_localctx, 7);
				{
				State = 1813;
				identifier();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CreateoptroleelemContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AlteroptroleelemContext alteroptroleelem() {
			return GetRuleContext<AlteroptroleelemContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SYSID() { return GetToken(PostgreSQLParser.SYSID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IconstContext iconst() {
			return GetRuleContext<IconstContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ADMIN() { return GetToken(PostgreSQLParser.ADMIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Role_listContext role_list() {
			return GetRuleContext<Role_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROLE() { return GetToken(PostgreSQLParser.ROLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IN_P() { return GetToken(PostgreSQLParser.IN_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GROUP_P() { return GetToken(PostgreSQLParser.GROUP_P, 0); }
		public CreateoptroleelemContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_createoptroleelem; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterCreateoptroleelem(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitCreateoptroleelem(this);
		}
	}

	[RuleVersion(0)]
	public CreateoptroleelemContext createoptroleelem() {
		CreateoptroleelemContext _localctx = new CreateoptroleelemContext(Context, State);
		EnterRule(_localctx, 24, RULE_createoptroleelem);
		int _la;
		try {
			State = 1826;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case AND:
			case ARRAY:
			case COLLATE:
			case COLUMN:
			case CONSTRAINT:
			case DEFAULT:
			case DO:
			case FETCH:
			case TABLE:
			case USER:
			case IS:
			case OUTER_P:
			case ABSOLUTE_P:
			case BACKWARD:
			case CHAIN:
			case CLOSE:
			case COMMIT:
			case CONNECTION:
			case CONTINUE_P:
			case CURSOR:
			case ENCRYPTED:
			case FIRST_P:
			case FORWARD:
			case INHERIT:
			case INSERT:
			case LAST_P:
			case MOVE:
			case NEXT:
			case NO:
			case OPTION:
			case PASSWORD:
			case PRIOR:
			case RELATIVE_P:
			case RESET:
			case ROLLBACK:
			case SCHEMA:
			case SCROLL:
			case SET:
			case TYPE_P:
			case UNENCRYPTED:
			case VALID:
			case CALL:
			case CURRENT_P:
			case ROWTYPE:
			case DUMP:
			case PRINT_STRICT_PARAMS:
			case VARIABLE_CONFLICT:
			case ERROR:
			case USE_VARIABLE:
			case USE_COLUMN:
			case ALIAS:
			case CONSTANT:
			case PERFORM:
			case GET:
			case DIAGNOSTICS:
			case STACKED:
			case ELSIF:
			case SLICE:
			case EXIT:
			case RETURN:
			case QUERY:
			case RAISE:
			case SQLSTATE:
			case DEBUG:
			case INFO:
			case NOTICE:
			case WARNING:
			case EXCEPTION:
			case ASSERT:
			case OPEN:
			case Identifier:
			case QuotedIdentifier:
			case UnicodeQuotedIdentifier:
			case PLSQLVARIABLENAME:
			case PLSQLIDENTIFIER:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1816;
				alteroptroleelem();
				}
				break;
			case SYSID:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1817;
				Match(SYSID);
				State = 1818;
				iconst();
				}
				break;
			case ADMIN:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1819;
				Match(ADMIN);
				State = 1820;
				role_list();
				}
				break;
			case ROLE:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1821;
				Match(ROLE);
				State = 1822;
				role_list();
				}
				break;
			case IN_P:
				EnterOuterAlt(_localctx, 5);
				{
				State = 1823;
				Match(IN_P);
				State = 1824;
				_la = TokenStream.LA(1);
				if ( !(_la==GROUP_P || _la==ROLE) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 1825;
				role_list();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CreateuserstmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CREATE() { return GetToken(PostgreSQLParser.CREATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode USER() { return GetToken(PostgreSQLParser.USER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public RoleidContext roleid() {
			return GetRuleContext<RoleidContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Opt_withContext opt_with() {
			return GetRuleContext<Opt_withContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public OptrolelistContext optrolelist() {
			return GetRuleContext<OptrolelistContext>(0);
		}
		public CreateuserstmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_createuserstmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterCreateuserstmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitCreateuserstmt(this);
		}
	}

	[RuleVersion(0)]
	public CreateuserstmtContext createuserstmt() {
		CreateuserstmtContext _localctx = new CreateuserstmtContext(Context, State);
		EnterRule(_localctx, 26, RULE_createuserstmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1828;
			Match(CREATE);
			State = 1829;
			Match(USER);
			State = 1830;
			roleid();
			State = 1831;
			opt_with();
			State = 1832;
			optrolelist();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AlterrolestmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALTER() { return GetToken(PostgreSQLParser.ALTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public RolespecContext rolespec() {
			return GetRuleContext<RolespecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Opt_withContext opt_with() {
			return GetRuleContext<Opt_withContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AlteroptrolelistContext alteroptrolelist() {
			return GetRuleContext<AlteroptrolelistContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROLE() { return GetToken(PostgreSQLParser.ROLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode USER() { return GetToken(PostgreSQLParser.USER, 0); }
		public AlterrolestmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alterrolestmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterAlterrolestmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitAlterrolestmt(this);
		}
	}

	[RuleVersion(0)]
	public AlterrolestmtContext alterrolestmt() {
		AlterrolestmtContext _localctx = new AlterrolestmtContext(Context, State);
		EnterRule(_localctx, 28, RULE_alterrolestmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1834;
			Match(ALTER);
			State = 1835;
			_la = TokenStream.LA(1);
			if ( !(_la==USER || _la==ROLE) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 1836;
			rolespec();
			State = 1837;
			opt_with();
			State = 1838;
			alteroptrolelist();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Opt_in_databaseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IN_P() { return GetToken(PostgreSQLParser.IN_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DATABASE() { return GetToken(PostgreSQLParser.DATABASE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		public Opt_in_databaseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_opt_in_database; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterOpt_in_database(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitOpt_in_database(this);
		}
	}

	[RuleVersion(0)]
	public Opt_in_databaseContext opt_in_database() {
		Opt_in_databaseContext _localctx = new Opt_in_databaseContext(Context, State);
		EnterRule(_localctx, 30, RULE_opt_in_database);
		try {
			State = 1844;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case RESET:
			case SET:
				EnterOuterAlt(_localctx, 1);
				{
				}
				break;
			case IN_P:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1841;
				Match(IN_P);
				State = 1842;
				Match(DATABASE);
				State = 1843;
				name();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AlterrolesetstmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALTER() { return GetToken(PostgreSQLParser.ALTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public RolespecContext rolespec() {
			return GetRuleContext<RolespecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Opt_in_databaseContext opt_in_database() {
			return GetRuleContext<Opt_in_databaseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SetresetclauseContext setresetclause() {
			return GetRuleContext<SetresetclauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROLE() { return GetToken(PostgreSQLParser.ROLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode USER() { return GetToken(PostgreSQLParser.USER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALL() { return GetToken(PostgreSQLParser.ALL, 0); }
		public AlterrolesetstmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alterrolesetstmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterAlterrolesetstmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitAlterrolesetstmt(this);
		}
	}

	[RuleVersion(0)]
	public AlterrolesetstmtContext alterrolesetstmt() {
		AlterrolesetstmtContext _localctx = new AlterrolesetstmtContext(Context, State);
		EnterRule(_localctx, 32, RULE_alterrolesetstmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1846;
			Match(ALTER);
			State = 1847;
			_la = TokenStream.LA(1);
			if ( !(_la==USER || _la==ROLE) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 1849;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ALL) {
				{
				State = 1848;
				Match(ALL);
				}
			}

			State = 1851;
			rolespec();
			State = 1852;
			opt_in_database();
			State = 1853;
			setresetclause();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DroprolestmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DROP() { return GetToken(PostgreSQLParser.DROP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Role_listContext role_list() {
			return GetRuleContext<Role_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROLE() { return GetToken(PostgreSQLParser.ROLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode USER() { return GetToken(PostgreSQLParser.USER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GROUP_P() { return GetToken(PostgreSQLParser.GROUP_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF_P() { return GetToken(PostgreSQLParser.IF_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXISTS() { return GetToken(PostgreSQLParser.EXISTS, 0); }
		public DroprolestmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_droprolestmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterDroprolestmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitDroprolestmt(this);
		}
	}

	[RuleVersion(0)]
	public DroprolestmtContext droprolestmt() {
		DroprolestmtContext _localctx = new DroprolestmtContext(Context, State);
		EnterRule(_localctx, 34, RULE_droprolestmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1855;
			Match(DROP);
			State = 1856;
			_la = TokenStream.LA(1);
			if ( !(_la==GROUP_P || _la==USER || _la==ROLE) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 1859;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,12,Context) ) {
			case 1:
				{
				State = 1857;
				Match(IF_P);
				State = 1858;
				Match(EXISTS);
				}
				break;
			}
			State = 1861;
			role_list();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CreategroupstmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CREATE() { return GetToken(PostgreSQLParser.CREATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GROUP_P() { return GetToken(PostgreSQLParser.GROUP_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public RoleidContext roleid() {
			return GetRuleContext<RoleidContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Opt_withContext opt_with() {
			return GetRuleContext<Opt_withContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public OptrolelistContext optrolelist() {
			return GetRuleContext<OptrolelistContext>(0);
		}
		public CreategroupstmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_creategroupstmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterCreategroupstmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitCreategroupstmt(this);
		}
	}

	[RuleVersion(0)]
	public CreategroupstmtContext creategroupstmt() {
		CreategroupstmtContext _localctx = new CreategroupstmtContext(Context, State);
		EnterRule(_localctx, 36, RULE_creategroupstmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1863;
			Match(CREATE);
			State = 1864;
			Match(GROUP_P);
			State = 1865;
			roleid();
			State = 1866;
			opt_with();
			State = 1867;
			optrolelist();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AltergroupstmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALTER() { return GetToken(PostgreSQLParser.ALTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GROUP_P() { return GetToken(PostgreSQLParser.GROUP_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public RolespecContext rolespec() {
			return GetRuleContext<RolespecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Add_dropContext add_drop() {
			return GetRuleContext<Add_dropContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode USER() { return GetToken(PostgreSQLParser.USER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Role_listContext role_list() {
			return GetRuleContext<Role_listContext>(0);
		}
		public AltergroupstmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_altergroupstmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterAltergroupstmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitAltergroupstmt(this);
		}
	}

	[RuleVersion(0)]
	public AltergroupstmtContext altergroupstmt() {
		AltergroupstmtContext _localctx = new AltergroupstmtContext(Context, State);
		EnterRule(_localctx, 38, RULE_altergroupstmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1869;
			Match(ALTER);
			State = 1870;
			Match(GROUP_P);
			State = 1871;
			rolespec();
			State = 1872;
			add_drop();
			State = 1873;
			Match(USER);
			State = 1874;
			role_list();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Add_dropContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ADD_P() { return GetToken(PostgreSQLParser.ADD_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DROP() { return GetToken(PostgreSQLParser.DROP, 0); }
		public Add_dropContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_add_drop; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterAdd_drop(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitAdd_drop(this);
		}
	}

	[RuleVersion(0)]
	public Add_dropContext add_drop() {
		Add_dropContext _localctx = new Add_dropContext(Context, State);
		EnterRule(_localctx, 40, RULE_add_drop);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1876;
			_la = TokenStream.LA(1);
			if ( !(_la==ADD_P || _la==DROP) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CreateschemastmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CREATE() { return GetToken(PostgreSQLParser.CREATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SCHEMA() { return GetToken(PostgreSQLParser.SCHEMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public OptschemaeltlistContext optschemaeltlist() {
			return GetRuleContext<OptschemaeltlistContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public OptschemanameContext optschemaname() {
			return GetRuleContext<OptschemanameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AUTHORIZATION() { return GetToken(PostgreSQLParser.AUTHORIZATION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public RolespecContext rolespec() {
			return GetRuleContext<RolespecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ColidContext colid() {
			return GetRuleContext<ColidContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF_P() { return GetToken(PostgreSQLParser.IF_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT() { return GetToken(PostgreSQLParser.NOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXISTS() { return GetToken(PostgreSQLParser.EXISTS, 0); }
		public CreateschemastmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_createschemastmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterCreateschemastmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitCreateschemastmt(this);
		}
	}

	[RuleVersion(0)]
	public CreateschemastmtContext createschemastmt() {
		CreateschemastmtContext _localctx = new CreateschemastmtContext(Context, State);
		EnterRule(_localctx, 42, RULE_createschemastmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1878;
			Match(CREATE);
			State = 1879;
			Match(SCHEMA);
			State = 1883;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,13,Context) ) {
			case 1:
				{
				State = 1880;
				Match(IF_P);
				State = 1881;
				Match(NOT);
				State = 1882;
				Match(EXISTS);
				}
				break;
			}
			State = 1890;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,14,Context) ) {
			case 1:
				{
				State = 1885;
				optschemaname();
				State = 1886;
				Match(AUTHORIZATION);
				State = 1887;
				rolespec();
				}
				break;
			case 2:
				{
				State = 1889;
				colid();
				}
				break;
			}
			State = 1892;
			optschemaeltlist();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OptschemanameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ColidContext colid() {
			return GetRuleContext<ColidContext>(0);
		}
		public OptschemanameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_optschemaname; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterOptschemaname(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitOptschemaname(this);
		}
	}

	[RuleVersion(0)]
	public OptschemanameContext optschemaname() {
		OptschemanameContext _localctx = new OptschemanameContext(Context, State);
		EnterRule(_localctx, 44, RULE_optschemaname);
		try {
			State = 1896;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case AND:
			case ARRAY:
			case COLLATE:
			case COLUMN:
			case CONSTRAINT:
			case DEFAULT:
			case DO:
			case FETCH:
			case TABLE:
			case IS:
			case LEFT:
			case OUTER_P:
			case OVER:
			case RIGHT:
			case ABORT_P:
			case ABSOLUTE_P:
			case ACCESS:
			case ACTION:
			case ADD_P:
			case ADMIN:
			case AFTER:
			case AGGREGATE:
			case ALSO:
			case ALTER:
			case ALWAYS:
			case ASSERTION:
			case ASSIGNMENT:
			case AT:
			case ATTRIBUTE:
			case BACKWARD:
			case BEFORE:
			case BEGIN_P:
			case BY:
			case CACHE:
			case CALLED:
			case CASCADE:
			case CASCADED:
			case CATALOG:
			case CHAIN:
			case CHARACTERISTICS:
			case CHECKPOINT:
			case CLASS:
			case CLOSE:
			case CLUSTER:
			case COMMENT:
			case COMMENTS:
			case COMMIT:
			case COMMITTED:
			case CONFIGURATION:
			case CONNECTION:
			case CONSTRAINTS:
			case CONTENT_P:
			case CONTINUE_P:
			case CONVERSION_P:
			case COPY:
			case COST:
			case CSV:
			case CURSOR:
			case CYCLE:
			case DATA_P:
			case DATABASE:
			case DAY_P:
			case DEALLOCATE:
			case DECLARE:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE_P:
			case DELIMITER:
			case DELIMITERS:
			case DICTIONARY:
			case DISABLE_P:
			case DISCARD:
			case DOCUMENT_P:
			case DOMAIN_P:
			case DOUBLE_P:
			case DROP:
			case EACH:
			case ENABLE_P:
			case ENCODING:
			case ENCRYPTED:
			case ENUM_P:
			case ESCAPE:
			case EVENT:
			case EXCLUDE:
			case EXCLUDING:
			case EXCLUSIVE:
			case EXECUTE:
			case EXPLAIN:
			case EXTENSION:
			case EXTERNAL:
			case FAMILY:
			case FIRST_P:
			case FOLLOWING:
			case FORCE:
			case FORWARD:
			case FUNCTION:
			case FUNCTIONS:
			case GLOBAL:
			case GRANTED:
			case HANDLER:
			case HEADER_P:
			case HOLD:
			case HOUR_P:
			case IDENTITY_P:
			case IF_P:
			case IMMEDIATE:
			case IMMUTABLE:
			case IMPLICIT_P:
			case INCLUDING:
			case INCREMENT:
			case INDEX:
			case INDEXES:
			case INHERIT:
			case INHERITS:
			case INLINE_P:
			case INSENSITIVE:
			case INSERT:
			case INSTEAD:
			case INVOKER:
			case ISOLATION:
			case KEY:
			case LABEL:
			case LANGUAGE:
			case LARGE_P:
			case LAST_P:
			case LEAKPROOF:
			case LEVEL:
			case LISTEN:
			case LOAD:
			case LOCAL:
			case LOCATION:
			case LOCK_P:
			case MAPPING:
			case MATCH:
			case MATERIALIZED:
			case MAXVALUE:
			case MINUTE_P:
			case MINVALUE:
			case MODE:
			case MONTH_P:
			case MOVE:
			case NAME_P:
			case NAMES:
			case NEXT:
			case NO:
			case NOTHING:
			case NOTIFY:
			case NOWAIT:
			case NULLS_P:
			case OBJECT_P:
			case OF:
			case OFF:
			case OIDS:
			case OPERATOR:
			case OPTION:
			case OPTIONS:
			case OWNED:
			case OWNER:
			case PARSER:
			case PARTIAL:
			case PARTITION:
			case PASSING:
			case PASSWORD:
			case PLANS:
			case PRECEDING:
			case PREPARE:
			case PREPARED:
			case PRESERVE:
			case PRIOR:
			case PRIVILEGES:
			case PROCEDURAL:
			case PROCEDURE:
			case PROGRAM:
			case QUOTE:
			case RANGE:
			case READ:
			case REASSIGN:
			case RECHECK:
			case RECURSIVE:
			case REF:
			case REFRESH:
			case REINDEX:
			case RELATIVE_P:
			case RELEASE:
			case RENAME:
			case REPEATABLE:
			case REPLACE:
			case REPLICA:
			case RESET:
			case RESTART:
			case RESTRICT:
			case RETURNS:
			case REVOKE:
			case ROLE:
			case ROLLBACK:
			case ROWS:
			case RULE:
			case SAVEPOINT:
			case SCHEMA:
			case SCROLL:
			case SEARCH:
			case SECOND_P:
			case SECURITY:
			case SEQUENCE:
			case SEQUENCES:
			case SERIALIZABLE:
			case SERVER:
			case SESSION:
			case SET:
			case SHARE:
			case SHOW:
			case SIMPLE:
			case SNAPSHOT:
			case STABLE:
			case STANDALONE_P:
			case START:
			case STATEMENT:
			case STATISTICS:
			case STDIN:
			case STDOUT:
			case STORAGE:
			case STRICT_P:
			case STRIP_P:
			case SYSID:
			case SYSTEM_P:
			case TABLES:
			case TABLESPACE:
			case TEMP:
			case TEMPLATE:
			case TEMPORARY:
			case TEXT_P:
			case TRANSACTION:
			case TRIGGER:
			case TRUNCATE:
			case TRUSTED:
			case TYPE_P:
			case TYPES_P:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNENCRYPTED:
			case UNKNOWN:
			case UNLISTEN:
			case UNLOGGED:
			case UNTIL:
			case UPDATE:
			case VACUUM:
			case VALID:
			case VALIDATE:
			case VALIDATOR:
			case VARYING:
			case VERSION_P:
			case VIEW:
			case VOLATILE:
			case WHITESPACE_P:
			case WITHOUT:
			case WORK:
			case WRAPPER:
			case WRITE:
			case XML_P:
			case YEAR_P:
			case YES_P:
			case ZONE:
			case BETWEEN:
			case BIGINT:
			case BIT:
			case BOOLEAN_P:
			case CHAR_P:
			case CHARACTER:
			case COALESCE:
			case DEC:
			case DECIMAL_P:
			case EXISTS:
			case EXTRACT:
			case FLOAT_P:
			case GREATEST:
			case INOUT:
			case INT_P:
			case INTEGER:
			case INTERVAL:
			case LEAST:
			case NATIONAL:
			case NCHAR:
			case NONE:
			case NULLIF:
			case NUMERIC:
			case OVERLAY:
			case POSITION:
			case PRECISION:
			case REAL:
			case ROW:
			case SETOF:
			case SMALLINT:
			case SUBSTRING:
			case TIME:
			case TIMESTAMP:
			case TREAT:
			case TRIM:
			case VALUES:
			case VARCHAR:
			case XMLATTRIBUTES:
			case XMLCOMMENT:
			case XMLAGG:
			case XML_IS_WELL_FORMED:
			case XML_IS_WELL_FORMED_DOCUMENT:
			case XML_IS_WELL_FORMED_CONTENT:
			case XPATH:
			case XPATH_EXISTS:
			case XMLCONCAT:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLPARSE:
			case XMLPI:
			case XMLROOT:
			case XMLSERIALIZE:
			case CALL:
			case CURRENT_P:
			case ATTACH:
			case DETACH:
			case EXPRESSION:
			case GENERATED:
			case LOGGED:
			case STORED:
			case INCLUDE:
			case ROUTINE:
			case TRANSFORM:
			case IMPORT_P:
			case POLICY:
			case METHOD:
			case REFERENCING:
			case NEW:
			case OLD:
			case VALUE_P:
			case SUBSCRIPTION:
			case PUBLICATION:
			case OUT_P:
			case ROUTINES:
			case SCHEMAS:
			case PROCEDURES:
			case INPUT_P:
			case SUPPORT:
			case PARALLEL:
			case SQL_P:
			case DEPENDS:
			case OVERRIDING:
			case CONFLICT:
			case SKIP_P:
			case LOCKED:
			case TIES:
			case ROLLUP:
			case CUBE:
			case GROUPING:
			case SETS:
			case ORDINALITY:
			case XMLTABLE:
			case COLUMNS:
			case XMLNAMESPACES:
			case ROWTYPE:
			case NORMALIZED:
			case WITHIN:
			case FILTER:
			case GROUPS:
			case OTHERS:
			case NFC:
			case NFD:
			case NFKC:
			case NFKD:
			case UESCAPE:
			case VIEWS:
			case NORMALIZE:
			case DUMP:
			case PRINT_STRICT_PARAMS:
			case VARIABLE_CONFLICT:
			case ERROR:
			case USE_VARIABLE:
			case USE_COLUMN:
			case ALIAS:
			case CONSTANT:
			case PERFORM:
			case GET:
			case DIAGNOSTICS:
			case STACKED:
			case ELSIF:
			case REVERSE:
			case SLICE:
			case EXIT:
			case RETURN:
			case QUERY:
			case RAISE:
			case SQLSTATE:
			case DEBUG:
			case LOG:
			case INFO:
			case NOTICE:
			case WARNING:
			case EXCEPTION:
			case ASSERT:
			case OPEN:
			case ABS:
			case CBRT:
			case CEIL:
			case CEILING:
			case DEGREES:
			case DIV:
			case EXP:
			case FACTORIAL:
			case FLOOR:
			case GCD:
			case LCM:
			case LN:
			case LOG10:
			case MIN_SCALE:
			case MOD:
			case PI:
			case POWER:
			case RADIANS:
			case ROUND:
			case SCALE:
			case SIGN:
			case SQRT:
			case TRIM_SCALE:
			case TRUNC:
			case WIDTH_BUCKET:
			case RANDOM:
			case SETSEED:
			case ACOS:
			case ACOSD:
			case ASIN:
			case ASIND:
			case ATAN:
			case ATAND:
			case ATAN2:
			case ATAN2D:
			case COS:
			case COSD:
			case COT:
			case COTD:
			case SIN:
			case SIND:
			case TAN:
			case TAND:
			case SINH:
			case COSH:
			case TANH:
			case ASINH:
			case ACOSH:
			case ATANH:
			case BIT_LENGTH:
			case CHAR_LENGTH:
			case CHARACTER_LENGTH:
			case LOWER:
			case OCTET_LENGTH:
			case UPPER:
			case ASCII:
			case BTRIM:
			case CHR:
			case CONCAT:
			case CONCAT_WS:
			case FORMAT:
			case INITCAP:
			case LENGTH:
			case LPAD:
			case LTRIM:
			case MD5:
			case PARSE_IDENT:
			case PG_CLIENT_ENCODING:
			case QUOTE_IDENT:
			case QUOTE_LITERAL:
			case QUOTE_NULLABLE:
			case REGEXP_COUNT:
			case REGEXP_INSTR:
			case REGEXP_LIKE:
			case REGEXP_MATCH:
			case REGEXP_MATCHES:
			case REGEXP_REPLACE:
			case REGEXP_SPLIT_TO_ARRAY:
			case REGEXP_SPLIT_TO_TABLE:
			case REGEXP_SUBSTR:
			case REPEAT:
			case RPAD:
			case RTRIM:
			case SPLIT_PART:
			case STARTS_WITH:
			case STRING_TO_ARRAY:
			case STRING_TO_TABLE:
			case STRPOS:
			case SUBSTR:
			case TO_ASCII:
			case TO_HEX:
			case TRANSLATE:
			case UNISTR:
			case AGE:
			case CLOCK_TIMESTAMP:
			case DATE_BIN:
			case DATE_PART:
			case DATE_TRUNC:
			case ISFINITE:
			case JUSTIFY_DAYS:
			case JUSTIFY_HOURS:
			case JUSTIFY_INTERVAL:
			case MAKE_DATE:
			case MAKE_INTERVAL:
			case MAKE_TIME:
			case MAKE_TIMESTAMP:
			case MAKE_TIMESTAMPTZ:
			case NOW:
			case STATEMENT_TIMESTAMP:
			case TIMEOFDAY:
			case TRANSACTION_TIMESTAMP:
			case TO_TIMESTAMP:
			case TO_CHAR:
			case TO_DATE:
			case TO_NUMBER:
			case Identifier:
			case QuotedIdentifier:
			case UnicodeQuotedIdentifier:
			case PLSQLVARIABLENAME:
			case PLSQLIDENTIFIER:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1894;
				colid();
				}
				break;
			case AUTHORIZATION:
				EnterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OptschemaeltlistContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Schema_stmtContext[] schema_stmt() {
			return GetRuleContexts<Schema_stmtContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Schema_stmtContext schema_stmt(int i) {
			return GetRuleContext<Schema_stmtContext>(i);
		}
		public OptschemaeltlistContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_optschemaeltlist; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterOptschemaeltlist(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitOptschemaeltlist(this);
		}
	}

	[RuleVersion(0)]
	public OptschemaeltlistContext optschemaeltlist() {
		OptschemaeltlistContext _localctx = new OptschemaeltlistContext(Context, State);
		EnterRule(_localctx, 46, RULE_optschemaeltlist);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1901;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,16,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 1898;
					schema_stmt();
					}
					} 
				}
				State = 1903;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,16,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Schema_stmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public CreatestmtContext createstmt() {
			return GetRuleContext<CreatestmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IndexstmtContext indexstmt() {
			return GetRuleContext<IndexstmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CreateseqstmtContext createseqstmt() {
			return GetRuleContext<CreateseqstmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CreatetrigstmtContext createtrigstmt() {
			return GetRuleContext<CreatetrigstmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public GrantstmtContext grantstmt() {
			return GetRuleContext<GrantstmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ViewstmtContext viewstmt() {
			return GetRuleContext<ViewstmtContext>(0);
		}
		public Schema_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_schema_stmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterSchema_stmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitSchema_stmt(this);
		}
	}

	[RuleVersion(0)]
	public Schema_stmtContext schema_stmt() {
		Schema_stmtContext _localctx = new Schema_stmtContext(Context, State);
		EnterRule(_localctx, 48, RULE_schema_stmt);
		try {
			State = 1910;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,17,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1904;
				createstmt();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1905;
				indexstmt();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1906;
				createseqstmt();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1907;
				createtrigstmt();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 1908;
				grantstmt();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 1909;
				viewstmt();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariablesetstmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SET() { return GetToken(PostgreSQLParser.SET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Set_restContext set_rest() {
			return GetRuleContext<Set_restContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOCAL() { return GetToken(PostgreSQLParser.LOCAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SESSION() { return GetToken(PostgreSQLParser.SESSION, 0); }
		public VariablesetstmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variablesetstmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterVariablesetstmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitVariablesetstmt(this);
		}
	}

	[RuleVersion(0)]
	public VariablesetstmtContext variablesetstmt() {
		VariablesetstmtContext _localctx = new VariablesetstmtContext(Context, State);
		EnterRule(_localctx, 50, RULE_variablesetstmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1912;
			Match(SET);
			State = 1914;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,18,Context) ) {
			case 1:
				{
				State = 1913;
				_la = TokenStream.LA(1);
				if ( !(_la==LOCAL || _la==SESSION) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			}
			State = 1916;
			set_rest();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Set_restContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRANSACTION() { return GetToken(PostgreSQLParser.TRANSACTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Transaction_mode_listContext transaction_mode_list() {
			return GetRuleContext<Transaction_mode_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SESSION() { return GetToken(PostgreSQLParser.SESSION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHARACTERISTICS() { return GetToken(PostgreSQLParser.CHARACTERISTICS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS() { return GetToken(PostgreSQLParser.AS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Set_rest_moreContext set_rest_more() {
			return GetRuleContext<Set_rest_moreContext>(0);
		}
		public Set_restContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_set_rest; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterSet_rest(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitSet_rest(this);
		}
	}

	[RuleVersion(0)]
	public Set_restContext set_rest() {
		Set_restContext _localctx = new Set_restContext(Context, State);
		EnterRule(_localctx, 52, RULE_set_rest);
		try {
			State = 1926;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,19,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1918;
				Match(TRANSACTION);
				State = 1919;
				transaction_mode_list();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1920;
				Match(SESSION);
				State = 1921;
				Match(CHARACTERISTICS);
				State = 1922;
				Match(AS);
				State = 1923;
				Match(TRANSACTION);
				State = 1924;
				transaction_mode_list();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1925;
				set_rest_more();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Generic_setContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Var_nameContext var_name() {
			return GetRuleContext<Var_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Var_listContext var_list() {
			return GetRuleContext<Var_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TO() { return GetToken(PostgreSQLParser.TO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL() { return GetToken(PostgreSQLParser.EQUAL, 0); }
		public Generic_setContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_generic_set; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterGeneric_set(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitGeneric_set(this);
		}
	}

	[RuleVersion(0)]
	public Generic_setContext generic_set() {
		Generic_setContext _localctx = new Generic_setContext(Context, State);
		EnterRule(_localctx, 54, RULE_generic_set);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1928;
			var_name();
			State = 1929;
			_la = TokenStream.LA(1);
			if ( !(_la==EQUAL || _la==TO) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 1930;
			var_list();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Set_rest_moreContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Generic_setContext generic_set() {
			return GetRuleContext<Generic_setContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Var_nameContext var_name() {
			return GetRuleContext<Var_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FROM() { return GetToken(PostgreSQLParser.FROM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CURRENT_P() { return GetToken(PostgreSQLParser.CURRENT_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TIME() { return GetToken(PostgreSQLParser.TIME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ZONE() { return GetToken(PostgreSQLParser.ZONE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Zone_valueContext zone_value() {
			return GetRuleContext<Zone_valueContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CATALOG() { return GetToken(PostgreSQLParser.CATALOG, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SconstContext sconst() {
			return GetRuleContext<SconstContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SCHEMA() { return GetToken(PostgreSQLParser.SCHEMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NAMES() { return GetToken(PostgreSQLParser.NAMES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Opt_encodingContext opt_encoding() {
			return GetRuleContext<Opt_encodingContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROLE() { return GetToken(PostgreSQLParser.ROLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Nonreservedword_or_sconstContext nonreservedword_or_sconst() {
			return GetRuleContext<Nonreservedword_or_sconstContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SESSION() { return GetToken(PostgreSQLParser.SESSION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AUTHORIZATION() { return GetToken(PostgreSQLParser.AUTHORIZATION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode XML_P() { return GetToken(PostgreSQLParser.XML_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPTION() { return GetToken(PostgreSQLParser.OPTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Document_or_contentContext document_or_content() {
			return GetRuleContext<Document_or_contentContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRANSACTION() { return GetToken(PostgreSQLParser.TRANSACTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SNAPSHOT() { return GetToken(PostgreSQLParser.SNAPSHOT, 0); }
		public Set_rest_moreContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_set_rest_more; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterSet_rest_more(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitSet_rest_more(this);
		}
	}

	[RuleVersion(0)]
	public Set_rest_moreContext set_rest_more() {
		Set_rest_moreContext _localctx = new Set_rest_moreContext(Context, State);
		EnterRule(_localctx, 56, RULE_set_rest_more);
		try {
			State = 1957;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,20,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1932;
				generic_set();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1933;
				var_name();
				State = 1934;
				Match(FROM);
				State = 1935;
				Match(CURRENT_P);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1937;
				Match(TIME);
				State = 1938;
				Match(ZONE);
				State = 1939;
				zone_value();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1940;
				Match(CATALOG);
				State = 1941;
				sconst();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 1942;
				Match(SCHEMA);
				State = 1943;
				sconst();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 1944;
				Match(NAMES);
				State = 1945;
				opt_encoding();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 1946;
				Match(ROLE);
				State = 1947;
				nonreservedword_or_sconst();
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 1948;
				Match(SESSION);
				State = 1949;
				Match(AUTHORIZATION);
				State = 1950;
				nonreservedword_or_sconst();
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 1951;
				Match(XML_P);
				State = 1952;
				Match(OPTION);
				State = 1953;
				document_or_content();
				}
				break;
			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 1954;
				Match(TRANSACTION);
				State = 1955;
				Match(SNAPSHOT);
				State = 1956;
				sconst();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Var_nameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ColidContext[] colid() {
			return GetRuleContexts<ColidContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ColidContext colid(int i) {
			return GetRuleContext<ColidContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] DOT() { return GetTokens(PostgreSQLParser.DOT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT(int i) {
			return GetToken(PostgreSQLParser.DOT, i);
		}
		public Var_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_var_name; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterVar_name(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitVar_name(this);
		}
	}

	[RuleVersion(0)]
	public Var_nameContext var_name() {
		Var_nameContext _localctx = new Var_nameContext(Context, State);
		EnterRule(_localctx, 58, RULE_var_name);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1959;
			colid();
			State = 1964;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==DOT) {
				{
				{
				State = 1960;
				Match(DOT);
				State = 1961;
				colid();
				}
				}
				State = 1966;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Var_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Var_valueContext[] var_value() {
			return GetRuleContexts<Var_valueContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Var_valueContext var_value(int i) {
			return GetRuleContext<Var_valueContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(PostgreSQLParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(PostgreSQLParser.COMMA, i);
		}
		public Var_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_var_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterVar_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitVar_list(this);
		}
	}

	[RuleVersion(0)]
	public Var_listContext var_list() {
		Var_listContext _localctx = new Var_listContext(Context, State);
		EnterRule(_localctx, 60, RULE_var_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1967;
			var_value();
			State = 1972;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 1968;
				Match(COMMA);
				State = 1969;
				var_value();
				}
				}
				State = 1974;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Var_valueContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Opt_boolean_or_stringContext opt_boolean_or_string() {
			return GetRuleContext<Opt_boolean_or_stringContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NumericonlyContext numericonly() {
			return GetRuleContext<NumericonlyContext>(0);
		}
		public Var_valueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_var_value; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterVar_value(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitVar_value(this);
		}
	}

	[RuleVersion(0)]
	public Var_valueContext var_value() {
		Var_valueContext _localctx = new Var_valueContext(Context, State);
		EnterRule(_localctx, 62, RULE_var_value);
		try {
			State = 1977;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case AND:
			case ARRAY:
			case COLLATE:
			case COLUMN:
			case CONSTRAINT:
			case DEFAULT:
			case DO:
			case FALSE_P:
			case FETCH:
			case ON:
			case TABLE:
			case TRUE_P:
			case AUTHORIZATION:
			case BINARY:
			case COLLATION:
			case CONCURRENTLY:
			case CROSS:
			case CURRENT_SCHEMA:
			case FREEZE:
			case FULL:
			case ILIKE:
			case INNER_P:
			case IS:
			case ISNULL:
			case JOIN:
			case LIKE:
			case NATURAL:
			case NOTNULL:
			case OUTER_P:
			case OVER:
			case OVERLAPS:
			case SIMILAR:
			case VERBOSE:
			case ABORT_P:
			case ABSOLUTE_P:
			case ACCESS:
			case ACTION:
			case ADD_P:
			case ADMIN:
			case AFTER:
			case AGGREGATE:
			case ALSO:
			case ALTER:
			case ALWAYS:
			case ASSERTION:
			case ASSIGNMENT:
			case AT:
			case ATTRIBUTE:
			case BACKWARD:
			case BEFORE:
			case BEGIN_P:
			case BY:
			case CACHE:
			case CALLED:
			case CASCADE:
			case CASCADED:
			case CATALOG:
			case CHAIN:
			case CHARACTERISTICS:
			case CHECKPOINT:
			case CLASS:
			case CLOSE:
			case CLUSTER:
			case COMMENT:
			case COMMENTS:
			case COMMIT:
			case COMMITTED:
			case CONFIGURATION:
			case CONNECTION:
			case CONSTRAINTS:
			case CONTENT_P:
			case CONTINUE_P:
			case CONVERSION_P:
			case COPY:
			case COST:
			case CSV:
			case CURSOR:
			case CYCLE:
			case DATA_P:
			case DATABASE:
			case DAY_P:
			case DEALLOCATE:
			case DECLARE:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE_P:
			case DELIMITER:
			case DELIMITERS:
			case DICTIONARY:
			case DISABLE_P:
			case DISCARD:
			case DOCUMENT_P:
			case DOMAIN_P:
			case DOUBLE_P:
			case DROP:
			case EACH:
			case ENABLE_P:
			case ENCODING:
			case ENCRYPTED:
			case ENUM_P:
			case ESCAPE:
			case EVENT:
			case EXCLUDE:
			case EXCLUDING:
			case EXCLUSIVE:
			case EXECUTE:
			case EXPLAIN:
			case EXTENSION:
			case EXTERNAL:
			case FAMILY:
			case FIRST_P:
			case FOLLOWING:
			case FORCE:
			case FORWARD:
			case FUNCTION:
			case FUNCTIONS:
			case GLOBAL:
			case GRANTED:
			case HANDLER:
			case HEADER_P:
			case HOLD:
			case HOUR_P:
			case IDENTITY_P:
			case IF_P:
			case IMMEDIATE:
			case IMMUTABLE:
			case IMPLICIT_P:
			case INCLUDING:
			case INCREMENT:
			case INDEX:
			case INDEXES:
			case INHERIT:
			case INHERITS:
			case INLINE_P:
			case INSENSITIVE:
			case INSERT:
			case INSTEAD:
			case INVOKER:
			case ISOLATION:
			case KEY:
			case LABEL:
			case LANGUAGE:
			case LARGE_P:
			case LAST_P:
			case LEAKPROOF:
			case LEVEL:
			case LISTEN:
			case LOAD:
			case LOCAL:
			case LOCATION:
			case LOCK_P:
			case MAPPING:
			case MATCH:
			case MATERIALIZED:
			case MAXVALUE:
			case MINUTE_P:
			case MINVALUE:
			case MODE:
			case MONTH_P:
			case MOVE:
			case NAME_P:
			case NAMES:
			case NEXT:
			case NO:
			case NOTHING:
			case NOTIFY:
			case NOWAIT:
			case NULLS_P:
			case OBJECT_P:
			case OF:
			case OFF:
			case OIDS:
			case OPERATOR:
			case OPTION:
			case OPTIONS:
			case OWNED:
			case OWNER:
			case PARSER:
			case PARTIAL:
			case PARTITION:
			case PASSING:
			case PASSWORD:
			case PLANS:
			case PRECEDING:
			case PREPARE:
			case PREPARED:
			case PRESERVE:
			case PRIOR:
			case PRIVILEGES:
			case PROCEDURAL:
			case PROCEDURE:
			case PROGRAM:
			case QUOTE:
			case RANGE:
			case READ:
			case REASSIGN:
			case RECHECK:
			case RECURSIVE:
			case REF:
			case REFRESH:
			case REINDEX:
			case RELATIVE_P:
			case RELEASE:
			case RENAME:
			case REPEATABLE:
			case REPLACE:
			case REPLICA:
			case RESET:
			case RESTART:
			case RESTRICT:
			case RETURNS:
			case REVOKE:
			case ROLE:
			case ROLLBACK:
			case ROWS:
			case RULE:
			case SAVEPOINT:
			case SCHEMA:
			case SCROLL:
			case SEARCH:
			case SECOND_P:
			case SECURITY:
			case SEQUENCE:
			case SEQUENCES:
			case SERIALIZABLE:
			case SERVER:
			case SESSION:
			case SET:
			case SHARE:
			case SHOW:
			case SIMPLE:
			case SNAPSHOT:
			case STABLE:
			case STANDALONE_P:
			case START:
			case STATEMENT:
			case STATISTICS:
			case STDIN:
			case STDOUT:
			case STORAGE:
			case STRICT_P:
			case STRIP_P:
			case SYSID:
			case SYSTEM_P:
			case TABLES:
			case TABLESPACE:
			case TEMP:
			case TEMPLATE:
			case TEMPORARY:
			case TEXT_P:
			case TRANSACTION:
			case TRIGGER:
			case TRUNCATE:
			case TRUSTED:
			case TYPE_P:
			case TYPES_P:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNENCRYPTED:
			case UNKNOWN:
			case UNLISTEN:
			case UNLOGGED:
			case UNTIL:
			case UPDATE:
			case VACUUM:
			case VALID:
			case VALIDATE:
			case VALIDATOR:
			case VARYING:
			case VERSION_P:
			case VIEW:
			case VOLATILE:
			case WHITESPACE_P:
			case WITHOUT:
			case WORK:
			case WRAPPER:
			case WRITE:
			case XML_P:
			case YEAR_P:
			case YES_P:
			case ZONE:
			case BETWEEN:
			case BIGINT:
			case BIT:
			case BOOLEAN_P:
			case CHAR_P:
			case CHARACTER:
			case COALESCE:
			case DEC:
			case DECIMAL_P:
			case EXISTS:
			case EXTRACT:
			case FLOAT_P:
			case GREATEST:
			case INOUT:
			case INT_P:
			case INTEGER:
			case INTERVAL:
			case LEAST:
			case NATIONAL:
			case NCHAR:
			case NONE:
			case NULLIF:
			case NUMERIC:
			case OVERLAY:
			case POSITION:
			case PRECISION:
			case REAL:
			case ROW:
			case SETOF:
			case SMALLINT:
			case SUBSTRING:
			case TIME:
			case TIMESTAMP:
			case TREAT:
			case TRIM:
			case VALUES:
			case VARCHAR:
			case XMLATTRIBUTES:
			case XMLCOMMENT:
			case XMLAGG:
			case XML_IS_WELL_FORMED:
			case XML_IS_WELL_FORMED_DOCUMENT:
			case XML_IS_WELL_FORMED_CONTENT:
			case XPATH:
			case XPATH_EXISTS:
			case XMLCONCAT:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLPARSE:
			case XMLPI:
			case XMLROOT:
			case XMLSERIALIZE:
			case CALL:
			case CURRENT_P:
			case ATTACH:
			case DETACH:
			case EXPRESSION:
			case GENERATED:
			case LOGGED:
			case STORED:
			case INCLUDE:
			case ROUTINE:
			case TRANSFORM:
			case IMPORT_P:
			case POLICY:
			case METHOD:
			case REFERENCING:
			case NEW:
			case OLD:
			case VALUE_P:
			case SUBSCRIPTION:
			case PUBLICATION:
			case OUT_P:
			case ROUTINES:
			case SCHEMAS:
			case PROCEDURES:
			case INPUT_P:
			case SUPPORT:
			case PARALLEL:
			case SQL_P:
			case DEPENDS:
			case OVERRIDING:
			case CONFLICT:
			case SKIP_P:
			case LOCKED:
			case TIES:
			case ROLLUP:
			case CUBE:
			case GROUPING:
			case SETS:
			case TABLESAMPLE:
			case ORDINALITY:
			case XMLTABLE:
			case COLUMNS:
			case XMLNAMESPACES:
			case ROWTYPE:
			case NORMALIZED:
			case WITHIN:
			case FILTER:
			case GROUPS:
			case OTHERS:
			case NFC:
			case NFD:
			case NFKC:
			case NFKD:
			case UESCAPE:
			case VIEWS:
			case NORMALIZE:
			case DUMP:
			case PRINT_STRICT_PARAMS:
			case VARIABLE_CONFLICT:
			case ERROR:
			case USE_VARIABLE:
			case USE_COLUMN:
			case ALIAS:
			case CONSTANT:
			case PERFORM:
			case GET:
			case DIAGNOSTICS:
			case STACKED:
			case ELSIF:
			case REVERSE:
			case SLICE:
			case EXIT:
			case RETURN:
			case QUERY:
			case RAISE:
			case SQLSTATE:
			case DEBUG:
			case LOG:
			case INFO:
			case NOTICE:
			case WARNING:
			case EXCEPTION:
			case ASSERT:
			case OPEN:
			case ABS:
			case CBRT:
			case CEIL:
			case CEILING:
			case DEGREES:
			case DIV:
			case EXP:
			case FACTORIAL:
			case FLOOR:
			case GCD:
			case LCM:
			case LN:
			case LOG10:
			case MIN_SCALE:
			case MOD:
			case PI:
			case POWER:
			case RADIANS:
			case ROUND:
			case SCALE:
			case SIGN:
			case SQRT:
			case TRIM_SCALE:
			case TRUNC:
			case WIDTH_BUCKET:
			case RANDOM:
			case SETSEED:
			case ACOS:
			case ACOSD:
			case ASIN:
			case ASIND:
			case ATAN:
			case ATAND:
			case ATAN2:
			case ATAN2D:
			case COS:
			case COSD:
			case COT:
			case COTD:
			case SIN:
			case SIND:
			case TAN:
			case TAND:
			case SINH:
			case COSH:
			case TANH:
			case ASINH:
			case ACOSH:
			case ATANH:
			case BIT_LENGTH:
			case CHAR_LENGTH:
			case CHARACTER_LENGTH:
			case LOWER:
			case OCTET_LENGTH:
			case UPPER:
			case ASCII:
			case BTRIM:
			case CHR:
			case CONCAT:
			case CONCAT_WS:
			case FORMAT:
			case INITCAP:
			case LENGTH:
			case LPAD:
			case LTRIM:
			case MD5:
			case PARSE_IDENT:
			case PG_CLIENT_ENCODING:
			case QUOTE_IDENT:
			case QUOTE_LITERAL:
			case QUOTE_NULLABLE:
			case REGEXP_COUNT:
			case REGEXP_INSTR:
			case REGEXP_LIKE:
			case REGEXP_MATCH:
			case REGEXP_MATCHES:
			case REGEXP_REPLACE:
			case REGEXP_SPLIT_TO_ARRAY:
			case REGEXP_SPLIT_TO_TABLE:
			case REGEXP_SUBSTR:
			case REPEAT:
			case RPAD:
			case RTRIM:
			case SPLIT_PART:
			case STARTS_WITH:
			case STRING_TO_ARRAY:
			case STRING_TO_TABLE:
			case STRPOS:
			case SUBSTR:
			case TO_ASCII:
			case TO_HEX:
			case TRANSLATE:
			case UNISTR:
			case AGE:
			case CLOCK_TIMESTAMP:
			case DATE_BIN:
			case DATE_PART:
			case DATE_TRUNC:
			case ISFINITE:
			case JUSTIFY_DAYS:
			case JUSTIFY_HOURS:
			case JUSTIFY_INTERVAL:
			case MAKE_DATE:
			case MAKE_INTERVAL:
			case MAKE_TIME:
			case MAKE_TIMESTAMP:
			case MAKE_TIMESTAMPTZ:
			case NOW:
			case STATEMENT_TIMESTAMP:
			case TIMEOFDAY:
			case TRANSACTION_TIMESTAMP:
			case TO_TIMESTAMP:
			case TO_CHAR:
			case TO_DATE:
			case TO_NUMBER:
			case Identifier:
			case QuotedIdentifier:
			case UnicodeQuotedIdentifier:
			case StringConstant:
			case UnicodeEscapeStringConstant:
			case BeginDollarStringConstant:
			case PLSQLVARIABLENAME:
			case PLSQLIDENTIFIER:
			case EscapeStringConstant:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1975;
				opt_boolean_or_string();
				}
				break;
			case PLUS:
			case MINUS:
			case Integral:
			case Numeric:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1976;
				numericonly();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Iso_levelContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode READ() { return GetToken(PostgreSQLParser.READ, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNCOMMITTED() { return GetToken(PostgreSQLParser.UNCOMMITTED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMITTED() { return GetToken(PostgreSQLParser.COMMITTED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REPEATABLE() { return GetToken(PostgreSQLParser.REPEATABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SERIALIZABLE() { return GetToken(PostgreSQLParser.SERIALIZABLE, 0); }
		public Iso_levelContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_iso_level; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterIso_level(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitIso_level(this);
		}
	}

	[RuleVersion(0)]
	public Iso_levelContext iso_level() {
		Iso_levelContext _localctx = new Iso_levelContext(Context, State);
		EnterRule(_localctx, 64, RULE_iso_level);
		int _la;
		try {
			State = 1984;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case READ:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1979;
				Match(READ);
				State = 1980;
				_la = TokenStream.LA(1);
				if ( !(_la==COMMITTED || _la==UNCOMMITTED) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			case REPEATABLE:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1981;
				Match(REPEATABLE);
				State = 1982;
				Match(READ);
				}
				break;
			case SERIALIZABLE:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1983;
				Match(SERIALIZABLE);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Opt_boolean_or_stringContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRUE_P() { return GetToken(PostgreSQLParser.TRUE_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FALSE_P() { return GetToken(PostgreSQLParser.FALSE_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ON() { return GetToken(PostgreSQLParser.ON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Nonreservedword_or_sconstContext nonreservedword_or_sconst() {
			return GetRuleContext<Nonreservedword_or_sconstContext>(0);
		}
		public Opt_boolean_or_stringContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_opt_boolean_or_string; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterOpt_boolean_or_string(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitOpt_boolean_or_string(this);
		}
	}

	[RuleVersion(0)]
	public Opt_boolean_or_stringContext opt_boolean_or_string() {
		Opt_boolean_or_stringContext _localctx = new Opt_boolean_or_stringContext(Context, State);
		EnterRule(_localctx, 66, RULE_opt_boolean_or_string);
		try {
			State = 1990;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case TRUE_P:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1986;
				Match(TRUE_P);
				}
				break;
			case FALSE_P:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1987;
				Match(FALSE_P);
				}
				break;
			case ON:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1988;
				Match(ON);
				}
				break;
			case AND:
			case ARRAY:
			case COLLATE:
			case COLUMN:
			case CONSTRAINT:
			case DEFAULT:
			case DO:
			case FETCH:
			case TABLE:
			case AUTHORIZATION:
			case BINARY:
			case COLLATION:
			case CONCURRENTLY:
			case CROSS:
			case CURRENT_SCHEMA:
			case FREEZE:
			case FULL:
			case ILIKE:
			case INNER_P:
			case IS:
			case ISNULL:
			case JOIN:
			case LIKE:
			case NATURAL:
			case NOTNULL:
			case OUTER_P:
			case OVER:
			case OVERLAPS:
			case SIMILAR:
			case VERBOSE:
			case ABORT_P:
			case ABSOLUTE_P:
			case ACCESS:
			case ACTION:
			case ADD_P:
			case ADMIN:
			case AFTER:
			case AGGREGATE:
			case ALSO:
			case ALTER:
			case ALWAYS:
			case ASSERTION:
			case ASSIGNMENT:
			case AT:
			case ATTRIBUTE:
			case BACKWARD:
			case BEFORE:
			case BEGIN_P:
			case BY:
			case CACHE:
			case CALLED:
			case CASCADE:
			case CASCADED:
			case CATALOG:
			case CHAIN:
			case CHARACTERISTICS:
			case CHECKPOINT:
			case CLASS:
			case CLOSE:
			case CLUSTER:
			case COMMENT:
			case COMMENTS:
			case COMMIT:
			case COMMITTED:
			case CONFIGURATION:
			case CONNECTION:
			case CONSTRAINTS:
			case CONTENT_P:
			case CONTINUE_P:
			case CONVERSION_P:
			case COPY:
			case COST:
			case CSV:
			case CURSOR:
			case CYCLE:
			case DATA_P:
			case DATABASE:
			case DAY_P:
			case DEALLOCATE:
			case DECLARE:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE_P:
			case DELIMITER:
			case DELIMITERS:
			case DICTIONARY:
			case DISABLE_P:
			case DISCARD:
			case DOCUMENT_P:
			case DOMAIN_P:
			case DOUBLE_P:
			case DROP:
			case EACH:
			case ENABLE_P:
			case ENCODING:
			case ENCRYPTED:
			case ENUM_P:
			case ESCAPE:
			case EVENT:
			case EXCLUDE:
			case EXCLUDING:
			case EXCLUSIVE:
			case EXECUTE:
			case EXPLAIN:
			case EXTENSION:
			case EXTERNAL:
			case FAMILY:
			case FIRST_P:
			case FOLLOWING:
			case FORCE:
			case FORWARD:
			case FUNCTION:
			case FUNCTIONS:
			case GLOBAL:
			case GRANTED:
			case HANDLER:
			case HEADER_P:
			case HOLD:
			case HOUR_P:
			case IDENTITY_P:
			case IF_P:
			case IMMEDIATE:
			case IMMUTABLE:
			case IMPLICIT_P:
			case INCLUDING:
			case INCREMENT:
			case INDEX:
			case INDEXES:
			case INHERIT:
			case INHERITS:
			case INLINE_P:
			case INSENSITIVE:
			case INSERT:
			case INSTEAD:
			case INVOKER:
			case ISOLATION:
			case KEY:
			case LABEL:
			case LANGUAGE:
			case LARGE_P:
			case LAST_P:
			case LEAKPROOF:
			case LEVEL:
			case LISTEN:
			case LOAD:
			case LOCAL:
			case LOCATION:
			case LOCK_P:
			case MAPPING:
			case MATCH:
			case MATERIALIZED:
			case MAXVALUE:
			case MINUTE_P:
			case MINVALUE:
			case MODE:
			case MONTH_P:
			case MOVE:
			case NAME_P:
			case NAMES:
			case NEXT:
			case NO:
			case NOTHING:
			case NOTIFY:
			case NOWAIT:
			case NULLS_P:
			case OBJECT_P:
			case OF:
			case OFF:
			case OIDS:
			case OPERATOR:
			case OPTION:
			case OPTIONS:
			case OWNED:
			case OWNER:
			case PARSER:
			case PARTIAL:
			case PARTITION:
			case PASSING:
			case PASSWORD:
			case PLANS:
			case PRECEDING:
			case PREPARE:
			case PREPARED:
			case PRESERVE:
			case PRIOR:
			case PRIVILEGES:
			case PROCEDURAL:
			case PROCEDURE:
			case PROGRAM:
			case QUOTE:
			case RANGE:
			case READ:
			case REASSIGN:
			case RECHECK:
			case RECURSIVE:
			case REF:
			case REFRESH:
			case REINDEX:
			case RELATIVE_P:
			case RELEASE:
			case RENAME:
			case REPEATABLE:
			case REPLACE:
			case REPLICA:
			case RESET:
			case RESTART:
			case RESTRICT:
			case RETURNS:
			case REVOKE:
			case ROLE:
			case ROLLBACK:
			case ROWS:
			case RULE:
			case SAVEPOINT:
			case SCHEMA:
			case SCROLL:
			case SEARCH:
			case SECOND_P:
			case SECURITY:
			case SEQUENCE:
			case SEQUENCES:
			case SERIALIZABLE:
			case SERVER:
			case SESSION:
			case SET:
			case SHARE:
			case SHOW:
			case SIMPLE:
			case SNAPSHOT:
			case STABLE:
			case STANDALONE_P:
			case START:
			case STATEMENT:
			case STATISTICS:
			case STDIN:
			case STDOUT:
			case STORAGE:
			case STRICT_P:
			case STRIP_P:
			case SYSID:
			case SYSTEM_P:
			case TABLES:
			case TABLESPACE:
			case TEMP:
			case TEMPLATE:
			case TEMPORARY:
			case TEXT_P:
			case TRANSACTION:
			case TRIGGER:
			case TRUNCATE:
			case TRUSTED:
			case TYPE_P:
			case TYPES_P:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNENCRYPTED:
			case UNKNOWN:
			case UNLISTEN:
			case UNLOGGED:
			case UNTIL:
			case UPDATE:
			case VACUUM:
			case VALID:
			case VALIDATE:
			case VALIDATOR:
			case VARYING:
			case VERSION_P:
			case VIEW:
			case VOLATILE:
			case WHITESPACE_P:
			case WITHOUT:
			case WORK:
			case WRAPPER:
			case WRITE:
			case XML_P:
			case YEAR_P:
			case YES_P:
			case ZONE:
			case BETWEEN:
			case BIGINT:
			case BIT:
			case BOOLEAN_P:
			case CHAR_P:
			case CHARACTER:
			case COALESCE:
			case DEC:
			case DECIMAL_P:
			case EXISTS:
			case EXTRACT:
			case FLOAT_P:
			case GREATEST:
			case INOUT:
			case INT_P:
			case INTEGER:
			case INTERVAL:
			case LEAST:
			case NATIONAL:
			case NCHAR:
			case NONE:
			case NULLIF:
			case NUMERIC:
			case OVERLAY:
			case POSITION:
			case PRECISION:
			case REAL:
			case ROW:
			case SETOF:
			case SMALLINT:
			case SUBSTRING:
			case TIME:
			case TIMESTAMP:
			case TREAT:
			case TRIM:
			case VALUES:
			case VARCHAR:
			case XMLATTRIBUTES:
			case XMLCOMMENT:
			case XMLAGG:
			case XML_IS_WELL_FORMED:
			case XML_IS_WELL_FORMED_DOCUMENT:
			case XML_IS_WELL_FORMED_CONTENT:
			case XPATH:
			case XPATH_EXISTS:
			case XMLCONCAT:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLPARSE:
			case XMLPI:
			case XMLROOT:
			case XMLSERIALIZE:
			case CALL:
			case CURRENT_P:
			case ATTACH:
			case DETACH:
			case EXPRESSION:
			case GENERATED:
			case LOGGED:
			case STORED:
			case INCLUDE:
			case ROUTINE:
			case TRANSFORM:
			case IMPORT_P:
			case POLICY:
			case METHOD:
			case REFERENCING:
			case NEW:
			case OLD:
			case VALUE_P:
			case SUBSCRIPTION:
			case PUBLICATION:
			case OUT_P:
			case ROUTINES:
			case SCHEMAS:
			case PROCEDURES:
			case INPUT_P:
			case SUPPORT:
			case PARALLEL:
			case SQL_P:
			case DEPENDS:
			case OVERRIDING:
			case CONFLICT:
			case SKIP_P:
			case LOCKED:
			case TIES:
			case ROLLUP:
			case CUBE:
			case GROUPING:
			case SETS:
			case TABLESAMPLE:
			case ORDINALITY:
			case XMLTABLE:
			case COLUMNS:
			case XMLNAMESPACES:
			case ROWTYPE:
			case NORMALIZED:
			case WITHIN:
			case FILTER:
			case GROUPS:
			case OTHERS:
			case NFC:
			case NFD:
			case NFKC:
			case NFKD:
			case UESCAPE:
			case VIEWS:
			case NORMALIZE:
			case DUMP:
			case PRINT_STRICT_PARAMS:
			case VARIABLE_CONFLICT:
			case ERROR:
			case USE_VARIABLE:
			case USE_COLUMN:
			case ALIAS:
			case CONSTANT:
			case PERFORM:
			case GET:
			case DIAGNOSTICS:
			case STACKED:
			case ELSIF:
			case REVERSE:
			case SLICE:
			case EXIT:
			case RETURN:
			case QUERY:
			case RAISE:
			case SQLSTATE:
			case DEBUG:
			case LOG:
			case INFO:
			case NOTICE:
			case WARNING:
			case EXCEPTION:
			case ASSERT:
			case OPEN:
			case ABS:
			case CBRT:
			case CEIL:
			case CEILING:
			case DEGREES:
			case DIV:
			case EXP:
			case FACTORIAL:
			case FLOOR:
			case GCD:
			case LCM:
			case LN:
			case LOG10:
			case MIN_SCALE:
			case MOD:
			case PI:
			case POWER:
			case RADIANS:
			case ROUND:
			case SCALE:
			case SIGN:
			case SQRT:
			case TRIM_SCALE:
			case TRUNC:
			case WIDTH_BUCKET:
			case RANDOM:
			case SETSEED:
			case ACOS:
			case ACOSD:
			case ASIN:
			case ASIND:
			case ATAN:
			case ATAND:
			case ATAN2:
			case ATAN2D:
			case COS:
			case COSD:
			case COT:
			case COTD:
			case SIN:
			case SIND:
			case TAN:
			case TAND:
			case SINH:
			case COSH:
			case TANH:
			case ASINH:
			case ACOSH:
			case ATANH:
			case BIT_LENGTH:
			case CHAR_LENGTH:
			case CHARACTER_LENGTH:
			case LOWER:
			case OCTET_LENGTH:
			case UPPER:
			case ASCII:
			case BTRIM:
			case CHR:
			case CONCAT:
			case CONCAT_WS:
			case FORMAT:
			case INITCAP:
			case LENGTH:
			case LPAD:
			case LTRIM:
			case MD5:
			case PARSE_IDENT:
			case PG_CLIENT_ENCODING:
			case QUOTE_IDENT:
			case QUOTE_LITERAL:
			case QUOTE_NULLABLE:
			case REGEXP_COUNT:
			case REGEXP_INSTR:
			case REGEXP_LIKE:
			case REGEXP_MATCH:
			case REGEXP_MATCHES:
			case REGEXP_REPLACE:
			case REGEXP_SPLIT_TO_ARRAY:
			case REGEXP_SPLIT_TO_TABLE:
			case REGEXP_SUBSTR:
			case REPEAT:
			case RPAD:
			case RTRIM:
			case SPLIT_PART:
			case STARTS_WITH:
			case STRING_TO_ARRAY:
			case STRING_TO_TABLE:
			case STRPOS:
			case SUBSTR:
			case TO_ASCII:
			case TO_HEX:
			case TRANSLATE:
			case UNISTR:
			case AGE:
			case CLOCK_TIMESTAMP:
			case DATE_BIN:
			case DATE_PART:
			case DATE_TRUNC:
			case ISFINITE:
			case JUSTIFY_DAYS:
			case JUSTIFY_HOURS:
			case JUSTIFY_INTERVAL:
			case MAKE_DATE:
			case MAKE_INTERVAL:
			case MAKE_TIME:
			case MAKE_TIMESTAMP:
			case MAKE_TIMESTAMPTZ:
			case NOW:
			case STATEMENT_TIMESTAMP:
			case TIMEOFDAY:
			case TRANSACTION_TIMESTAMP:
			case TO_TIMESTAMP:
			case TO_CHAR:
			case TO_DATE:
			case TO_NUMBER:
			case Identifier:
			case QuotedIdentifier:
			case UnicodeQuotedIdentifier:
			case StringConstant:
			case UnicodeEscapeStringConstant:
			case BeginDollarStringConstant:
			case PLSQLVARIABLENAME:
			case PLSQLIDENTIFIER:
			case EscapeStringConstant:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1989;
				nonreservedword_or_sconst();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Zone_valueContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SconstContext sconst() {
			return GetRuleContext<SconstContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ConstintervalContext constinterval() {
			return GetRuleContext<ConstintervalContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Opt_intervalContext opt_interval() {
			return GetRuleContext<Opt_intervalContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAREN() { return GetToken(PostgreSQLParser.OPEN_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IconstContext iconst() {
			return GetRuleContext<IconstContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAREN() { return GetToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NumericonlyContext numericonly() {
			return GetRuleContext<NumericonlyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFAULT() { return GetToken(PostgreSQLParser.DEFAULT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOCAL() { return GetToken(PostgreSQLParser.LOCAL, 0); }
		public Zone_valueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_zone_value; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterZone_value(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitZone_value(this);
		}
	}

	[RuleVersion(0)]
	public Zone_valueContext zone_value() {
		Zone_valueContext _localctx = new Zone_valueContext(Context, State);
		EnterRule(_localctx, 68, RULE_zone_value);
		try {
			State = 2007;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,26,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1992;
				sconst();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1993;
				identifier();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1994;
				constinterval();
				State = 1995;
				sconst();
				State = 1996;
				opt_interval();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1998;
				constinterval();
				State = 1999;
				Match(OPEN_PAREN);
				State = 2000;
				iconst();
				State = 2001;
				Match(CLOSE_PAREN);
				State = 2002;
				sconst();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 2004;
				numericonly();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 2005;
				Match(DEFAULT);
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 2006;
				Match(LOCAL);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Opt_encodingContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SconstContext sconst() {
			return GetRuleContext<SconstContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFAULT() { return GetToken(PostgreSQLParser.DEFAULT, 0); }
		public Opt_encodingContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_opt_encoding; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterOpt_encoding(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitOpt_encoding(this);
		}
	}

	[RuleVersion(0)]
	public Opt_encodingContext opt_encoding() {
		Opt_encodingContext _localctx = new Opt_encodingContext(Context, State);
		EnterRule(_localctx, 70, RULE_opt_encoding);
		try {
			State = 2012;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case StringConstant:
			case UnicodeEscapeStringConstant:
			case BeginDollarStringConstant:
			case EscapeStringConstant:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2009;
				sconst();
				}
				break;
			case DEFAULT:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2010;
				Match(DEFAULT);
				}
				break;
			case Eof:
			case OPEN_PAREN:
			case SEMI:
			case ANALYSE:
			case ANALYZE:
			case AS:
			case CREATE:
			case DO:
			case FETCH:
			case GRANT:
			case INTO:
			case NOT:
			case SELECT:
			case TABLE:
			case WINDOW:
			case WITH:
			case ABORT_P:
			case ALTER:
			case BEGIN_P:
			case CALLED:
			case CHECKPOINT:
			case CLOSE:
			case CLUSTER:
			case COMMENT:
			case COMMIT:
			case COPY:
			case COST:
			case DEALLOCATE:
			case DECLARE:
			case DELETE_P:
			case DISCARD:
			case DROP:
			case EXECUTE:
			case EXPLAIN:
			case EXTERNAL:
			case IMMUTABLE:
			case INSERT:
			case LANGUAGE:
			case LEAKPROOF:
			case LISTEN:
			case LOAD:
			case LOCK_P:
			case MERGE:
			case MOVE:
			case NOTIFY:
			case PREPARE:
			case REASSIGN:
			case REFRESH:
			case REINDEX:
			case RELEASE:
			case RESET:
			case RESTRICT:
			case RETURNS:
			case REVOKE:
			case ROLLBACK:
			case ROWS:
			case SAVEPOINT:
			case SECURITY:
			case SET:
			case SHOW:
			case STABLE:
			case START:
			case STRICT_P:
			case TRUNCATE:
			case UNLISTEN:
			case UPDATE:
			case VACUUM:
			case VOLATILE:
			case VALUES:
			case CALL:
			case TRANSFORM:
			case IMPORT_P:
			case END_P:
			case SUPPORT:
			case PARALLEL:
			case MetaCommand:
				EnterOuterAlt(_localctx, 3);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Nonreservedword_or_sconstContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NonreservedwordContext nonreservedword() {
			return GetRuleContext<NonreservedwordContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SconstContext sconst() {
			return GetRuleContext<SconstContext>(0);
		}
		public Nonreservedword_or_sconstContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_nonreservedword_or_sconst; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterNonreservedword_or_sconst(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitNonreservedword_or_sconst(this);
		}
	}

	[RuleVersion(0)]
	public Nonreservedword_or_sconstContext nonreservedword_or_sconst() {
		Nonreservedword_or_sconstContext _localctx = new Nonreservedword_or_sconstContext(Context, State);
		EnterRule(_localctx, 72, RULE_nonreservedword_or_sconst);
		try {
			State = 2016;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case AND:
			case ARRAY:
			case COLLATE:
			case COLUMN:
			case CONSTRAINT:
			case DEFAULT:
			case DO:
			case FETCH:
			case TABLE:
			case AUTHORIZATION:
			case BINARY:
			case COLLATION:
			case CONCURRENTLY:
			case CROSS:
			case CURRENT_SCHEMA:
			case FREEZE:
			case FULL:
			case ILIKE:
			case INNER_P:
			case IS:
			case ISNULL:
			case JOIN:
			case LIKE:
			case NATURAL:
			case NOTNULL:
			case OUTER_P:
			case OVER:
			case OVERLAPS:
			case SIMILAR:
			case VERBOSE:
			case ABORT_P:
			case ABSOLUTE_P:
			case ACCESS:
			case ACTION:
			case ADD_P:
			case ADMIN:
			case AFTER:
			case AGGREGATE:
			case ALSO:
			case ALTER:
			case ALWAYS:
			case ASSERTION:
			case ASSIGNMENT:
			case AT:
			case ATTRIBUTE:
			case BACKWARD:
			case BEFORE:
			case BEGIN_P:
			case BY:
			case CACHE:
			case CALLED:
			case CASCADE:
			case CASCADED:
			case CATALOG:
			case CHAIN:
			case CHARACTERISTICS:
			case CHECKPOINT:
			case CLASS:
			case CLOSE:
			case CLUSTER:
			case COMMENT:
			case COMMENTS:
			case COMMIT:
			case COMMITTED:
			case CONFIGURATION:
			case CONNECTION:
			case CONSTRAINTS:
			case CONTENT_P:
			case CONTINUE_P:
			case CONVERSION_P:
			case COPY:
			case COST:
			case CSV:
			case CURSOR:
			case CYCLE:
			case DATA_P:
			case DATABASE:
			case DAY_P:
			case DEALLOCATE:
			case DECLARE:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE_P:
			case DELIMITER:
			case DELIMITERS:
			case DICTIONARY:
			case DISABLE_P:
			case DISCARD:
			case DOCUMENT_P:
			case DOMAIN_P:
			case DOUBLE_P:
			case DROP:
			case EACH:
			case ENABLE_P:
			case ENCODING:
			case ENCRYPTED:
			case ENUM_P:
			case ESCAPE:
			case EVENT:
			case EXCLUDE:
			case EXCLUDING:
			case EXCLUSIVE:
			case EXECUTE:
			case EXPLAIN:
			case EXTENSION:
			case EXTERNAL:
			case FAMILY:
			case FIRST_P:
			case FOLLOWING:
			case FORCE:
			case FORWARD:
			case FUNCTION:
			case FUNCTIONS:
			case GLOBAL:
			case GRANTED:
			case HANDLER:
			case HEADER_P:
			case HOLD:
			case HOUR_P:
			case IDENTITY_P:
			case IF_P:
			case IMMEDIATE:
			case IMMUTABLE:
			case IMPLICIT_P:
			case INCLUDING:
			case INCREMENT:
			case INDEX:
			case INDEXES:
			case INHERIT:
			case INHERITS:
			case INLINE_P:
			case INSENSITIVE:
			case INSERT:
			case INSTEAD:
			case INVOKER:
			case ISOLATION:
			case KEY:
			case LABEL:
			case LANGUAGE:
			case LARGE_P:
			case LAST_P:
			case LEAKPROOF:
			case LEVEL:
			case LISTEN:
			case LOAD:
			case LOCAL:
			case LOCATION:
			case LOCK_P:
			case MAPPING:
			case MATCH:
			case MATERIALIZED:
			case MAXVALUE:
			case MINUTE_P:
			case MINVALUE:
			case MODE:
			case MONTH_P:
			case MOVE:
			case NAME_P:
			case NAMES:
			case NEXT:
			case NO:
			case NOTHING:
			case NOTIFY:
			case NOWAIT:
			case NULLS_P:
			case OBJECT_P:
			case OF:
			case OFF:
			case OIDS:
			case OPERATOR:
			case OPTION:
			case OPTIONS:
			case OWNED:
			case OWNER:
			case PARSER:
			case PARTIAL:
			case PARTITION:
			case PASSING:
			case PASSWORD:
			case PLANS:
			case PRECEDING:
			case PREPARE:
			case PREPARED:
			case PRESERVE:
			case PRIOR:
			case PRIVILEGES:
			case PROCEDURAL:
			case PROCEDURE:
			case PROGRAM:
			case QUOTE:
			case RANGE:
			case READ:
			case REASSIGN:
			case RECHECK:
			case RECURSIVE:
			case REF:
			case REFRESH:
			case REINDEX:
			case RELATIVE_P:
			case RELEASE:
			case RENAME:
			case REPEATABLE:
			case REPLACE:
			case REPLICA:
			case RESET:
			case RESTART:
			case RESTRICT:
			case RETURNS:
			case REVOKE:
			case ROLE:
			case ROLLBACK:
			case ROWS:
			case RULE:
			case SAVEPOINT:
			case SCHEMA:
			case SCROLL:
			case SEARCH:
			case SECOND_P:
			case SECURITY:
			case SEQUENCE:
			case SEQUENCES:
			case SERIALIZABLE:
			case SERVER:
			case SESSION:
			case SET:
			case SHARE:
			case SHOW:
			case SIMPLE:
			case SNAPSHOT:
			case STABLE:
			case STANDALONE_P:
			case START:
			case STATEMENT:
			case STATISTICS:
			case STDIN:
			case STDOUT:
			case STORAGE:
			case STRICT_P:
			case STRIP_P:
			case SYSID:
			case SYSTEM_P:
			case TABLES:
			case TABLESPACE:
			case TEMP:
			case TEMPLATE:
			case TEMPORARY:
			case TEXT_P:
			case TRANSACTION:
			case TRIGGER:
			case TRUNCATE:
			case TRUSTED:
			case TYPE_P:
			case TYPES_P:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNENCRYPTED:
			case UNKNOWN:
			case UNLISTEN:
			case UNLOGGED:
			case UNTIL:
			case UPDATE:
			case VACUUM:
			case VALID:
			case VALIDATE:
			case VALIDATOR:
			case VARYING:
			case VERSION_P:
			case VIEW:
			case VOLATILE:
			case WHITESPACE_P:
			case WITHOUT:
			case WORK:
			case WRAPPER:
			case WRITE:
			case XML_P:
			case YEAR_P:
			case YES_P:
			case ZONE:
			case BETWEEN:
			case BIGINT:
			case BIT:
			case BOOLEAN_P:
			case CHAR_P:
			case CHARACTER:
			case COALESCE:
			case DEC:
			case DECIMAL_P:
			case EXISTS:
			case EXTRACT:
			case FLOAT_P:
			case GREATEST:
			case INOUT:
			case INT_P:
			case INTEGER:
			case INTERVAL:
			case LEAST:
			case NATIONAL:
			case NCHAR:
			case NONE:
			case NULLIF:
			case NUMERIC:
			case OVERLAY:
			case POSITION:
			case PRECISION:
			case REAL:
			case ROW:
			case SETOF:
			case SMALLINT:
			case SUBSTRING:
			case TIME:
			case TIMESTAMP:
			case TREAT:
			case TRIM:
			case VALUES:
			case VARCHAR:
			case XMLATTRIBUTES:
			case XMLCOMMENT:
			case XMLAGG:
			case XML_IS_WELL_FORMED:
			case XML_IS_WELL_FORMED_DOCUMENT:
			case XML_IS_WELL_FORMED_CONTENT:
			case XPATH:
			case XPATH_EXISTS:
			case XMLCONCAT:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLPARSE:
			case XMLPI:
			case XMLROOT:
			case XMLSERIALIZE:
			case CALL:
			case CURRENT_P:
			case ATTACH:
			case DETACH:
			case EXPRESSION:
			case GENERATED:
			case LOGGED:
			case STORED:
			case INCLUDE:
			case ROUTINE:
			case TRANSFORM:
			case IMPORT_P:
			case POLICY:
			case METHOD:
			case REFERENCING:
			case NEW:
			case OLD:
			case VALUE_P:
			case SUBSCRIPTION:
			case PUBLICATION:
			case OUT_P:
			case ROUTINES:
			case SCHEMAS:
			case PROCEDURES:
			case INPUT_P:
			case SUPPORT:
			case PARALLEL:
			case SQL_P:
			case DEPENDS:
			case OVERRIDING:
			case CONFLICT:
			case SKIP_P:
			case LOCKED:
			case TIES:
			case ROLLUP:
			case CUBE:
			case GROUPING:
			case SETS:
			case TABLESAMPLE:
			case ORDINALITY:
			case XMLTABLE:
			case COLUMNS:
			case XMLNAMESPACES:
			case ROWTYPE:
			case NORMALIZED:
			case WITHIN:
			case FILTER:
			case GROUPS:
			case OTHERS:
			case NFC:
			case NFD:
			case NFKC:
			case NFKD:
			case UESCAPE:
			case VIEWS:
			case NORMALIZE:
			case DUMP:
			case PRINT_STRICT_PARAMS:
			case VARIABLE_CONFLICT:
			case ERROR:
			case USE_VARIABLE:
			case USE_COLUMN:
			case ALIAS:
			case CONSTANT:
			case PERFORM:
			case GET:
			case DIAGNOSTICS:
			case STACKED:
			case ELSIF:
			case REVERSE:
			case SLICE:
			case EXIT:
			case RETURN:
			case QUERY:
			case RAISE:
			case SQLSTATE:
			case DEBUG:
			case LOG:
			case INFO:
			case NOTICE:
			case WARNING:
			case EXCEPTION:
			case ASSERT:
			case OPEN:
			case ABS:
			case CBRT:
			case CEIL:
			case CEILING:
			case DEGREES:
			case DIV:
			case EXP:
			case FACTORIAL:
			case FLOOR:
			case GCD:
			case LCM:
			case LN:
			case LOG10:
			case MIN_SCALE:
			case MOD:
			case PI:
			case POWER:
			case RADIANS:
			case ROUND:
			case SCALE:
			case SIGN:
			case SQRT:
			case TRIM_SCALE:
			case TRUNC:
			case WIDTH_BUCKET:
			case RANDOM:
			case SETSEED:
			case ACOS:
			case ACOSD:
			case ASIN:
			case ASIND:
			case ATAN:
			case ATAND:
			case ATAN2:
			case ATAN2D:
			case COS:
			case COSD:
			case COT:
			case COTD:
			case SIN:
			case SIND:
			case TAN:
			case TAND:
			case SINH:
			case COSH:
			case TANH:
			case ASINH:
			case ACOSH:
			case ATANH:
			case BIT_LENGTH:
			case CHAR_LENGTH:
			case CHARACTER_LENGTH:
			case LOWER:
			case OCTET_LENGTH:
			case UPPER:
			case ASCII:
			case BTRIM:
			case CHR:
			case CONCAT:
			case CONCAT_WS:
			case FORMAT:
			case INITCAP:
			case LENGTH:
			case LPAD:
			case LTRIM:
			case MD5:
			case PARSE_IDENT:
			case PG_CLIENT_ENCODING:
			case QUOTE_IDENT:
			case QUOTE_LITERAL:
			case QUOTE_NULLABLE:
			case REGEXP_COUNT:
			case REGEXP_INSTR:
			case REGEXP_LIKE:
			case REGEXP_MATCH:
			case REGEXP_MATCHES:
			case REGEXP_REPLACE:
			case REGEXP_SPLIT_TO_ARRAY:
			case REGEXP_SPLIT_TO_TABLE:
			case REGEXP_SUBSTR:
			case REPEAT:
			case RPAD:
			case RTRIM:
			case SPLIT_PART:
			case STARTS_WITH:
			case STRING_TO_ARRAY:
			case STRING_TO_TABLE:
			case STRPOS:
			case SUBSTR:
			case TO_ASCII:
			case TO_HEX:
			case TRANSLATE:
			case UNISTR:
			case AGE:
			case CLOCK_TIMESTAMP:
			case DATE_BIN:
			case DATE_PART:
			case DATE_TRUNC:
			case ISFINITE:
			case JUSTIFY_DAYS:
			case JUSTIFY_HOURS:
			case JUSTIFY_INTERVAL:
			case MAKE_DATE:
			case MAKE_INTERVAL:
			case MAKE_TIME:
			case MAKE_TIMESTAMP:
			case MAKE_TIMESTAMPTZ:
			case NOW:
			case STATEMENT_TIMESTAMP:
			case TIMEOFDAY:
			case TRANSACTION_TIMESTAMP:
			case TO_TIMESTAMP:
			case TO_CHAR:
			case TO_DATE:
			case TO_NUMBER:
			case Identifier:
			case QuotedIdentifier:
			case UnicodeQuotedIdentifier:
			case PLSQLVARIABLENAME:
			case PLSQLIDENTIFIER:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2014;
				nonreservedword();
				}
				break;
			case StringConstant:
			case UnicodeEscapeStringConstant:
			case BeginDollarStringConstant:
			case EscapeStringConstant:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2015;
				sconst();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariableresetstmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RESET() { return GetToken(PostgreSQLParser.RESET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Reset_restContext reset_rest() {
			return GetRuleContext<Reset_restContext>(0);
		}
		public VariableresetstmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variableresetstmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterVariableresetstmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitVariableresetstmt(this);
		}
	}

	[RuleVersion(0)]
	public VariableresetstmtContext variableresetstmt() {
		VariableresetstmtContext _localctx = new VariableresetstmtContext(Context, State);
		EnterRule(_localctx, 74, RULE_variableresetstmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2018;
			Match(RESET);
			State = 2019;
			reset_rest();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Reset_restContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Generic_resetContext generic_reset() {
			return GetRuleContext<Generic_resetContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TIME() { return GetToken(PostgreSQLParser.TIME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ZONE() { return GetToken(PostgreSQLParser.ZONE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRANSACTION() { return GetToken(PostgreSQLParser.TRANSACTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ISOLATION() { return GetToken(PostgreSQLParser.ISOLATION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEVEL() { return GetToken(PostgreSQLParser.LEVEL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SESSION() { return GetToken(PostgreSQLParser.SESSION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AUTHORIZATION() { return GetToken(PostgreSQLParser.AUTHORIZATION, 0); }
		public Reset_restContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_reset_rest; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterReset_rest(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitReset_rest(this);
		}
	}

	[RuleVersion(0)]
	public Reset_restContext reset_rest() {
		Reset_restContext _localctx = new Reset_restContext(Context, State);
		EnterRule(_localctx, 76, RULE_reset_rest);
		try {
			State = 2029;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,29,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2021;
				generic_reset();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2022;
				Match(TIME);
				State = 2023;
				Match(ZONE);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 2024;
				Match(TRANSACTION);
				State = 2025;
				Match(ISOLATION);
				State = 2026;
				Match(LEVEL);
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 2027;
				Match(SESSION);
				State = 2028;
				Match(AUTHORIZATION);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Generic_resetContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Var_nameContext var_name() {
			return GetRuleContext<Var_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALL() { return GetToken(PostgreSQLParser.ALL, 0); }
		public Generic_resetContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_generic_reset; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterGeneric_reset(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitGeneric_reset(this);
		}
	}

	[RuleVersion(0)]
	public Generic_resetContext generic_reset() {
		Generic_resetContext _localctx = new Generic_resetContext(Context, State);
		EnterRule(_localctx, 78, RULE_generic_reset);
		try {
			State = 2033;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case AND:
			case ARRAY:
			case COLLATE:
			case COLUMN:
			case CONSTRAINT:
			case DEFAULT:
			case DO:
			case FETCH:
			case TABLE:
			case IS:
			case LEFT:
			case OUTER_P:
			case OVER:
			case RIGHT:
			case ABORT_P:
			case ABSOLUTE_P:
			case ACCESS:
			case ACTION:
			case ADD_P:
			case ADMIN:
			case AFTER:
			case AGGREGATE:
			case ALSO:
			case ALTER:
			case ALWAYS:
			case ASSERTION:
			case ASSIGNMENT:
			case AT:
			case ATTRIBUTE:
			case BACKWARD:
			case BEFORE:
			case BEGIN_P:
			case BY:
			case CACHE:
			case CALLED:
			case CASCADE:
			case CASCADED:
			case CATALOG:
			case CHAIN:
			case CHARACTERISTICS:
			case CHECKPOINT:
			case CLASS:
			case CLOSE:
			case CLUSTER:
			case COMMENT:
			case COMMENTS:
			case COMMIT:
			case COMMITTED:
			case CONFIGURATION:
			case CONNECTION:
			case CONSTRAINTS:
			case CONTENT_P:
			case CONTINUE_P:
			case CONVERSION_P:
			case COPY:
			case COST:
			case CSV:
			case CURSOR:
			case CYCLE:
			case DATA_P:
			case DATABASE:
			case DAY_P:
			case DEALLOCATE:
			case DECLARE:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE_P:
			case DELIMITER:
			case DELIMITERS:
			case DICTIONARY:
			case DISABLE_P:
			case DISCARD:
			case DOCUMENT_P:
			case DOMAIN_P:
			case DOUBLE_P:
			case DROP:
			case EACH:
			case ENABLE_P:
			case ENCODING:
			case ENCRYPTED:
			case ENUM_P:
			case ESCAPE:
			case EVENT:
			case EXCLUDE:
			case EXCLUDING:
			case EXCLUSIVE:
			case EXECUTE:
			case EXPLAIN:
			case EXTENSION:
			case EXTERNAL:
			case FAMILY:
			case FIRST_P:
			case FOLLOWING:
			case FORCE:
			case FORWARD:
			case FUNCTION:
			case FUNCTIONS:
			case GLOBAL:
			case GRANTED:
			case HANDLER:
			case HEADER_P:
			case HOLD:
			case HOUR_P:
			case IDENTITY_P:
			case IF_P:
			case IMMEDIATE:
			case IMMUTABLE:
			case IMPLICIT_P:
			case INCLUDING:
			case INCREMENT:
			case INDEX:
			case INDEXES:
			case INHERIT:
			case INHERITS:
			case INLINE_P:
			case INSENSITIVE:
			case INSERT:
			case INSTEAD:
			case INVOKER:
			case ISOLATION:
			case KEY:
			case LABEL:
			case LANGUAGE:
			case LARGE_P:
			case LAST_P:
			case LEAKPROOF:
			case LEVEL:
			case LISTEN:
			case LOAD:
			case LOCAL:
			case LOCATION:
			case LOCK_P:
			case MAPPING:
			case MATCH:
			case MATERIALIZED:
			case MAXVALUE:
			case MINUTE_P:
			case MINVALUE:
			case MODE:
			case MONTH_P:
			case MOVE:
			case NAME_P:
			case NAMES:
			case NEXT:
			case NO:
			case NOTHING:
			case NOTIFY:
			case NOWAIT:
			case NULLS_P:
			case OBJECT_P:
			case OF:
			case OFF:
			case OIDS:
			case OPERATOR:
			case OPTION:
			case OPTIONS:
			case OWNED:
			case OWNER:
			case PARSER:
			case PARTIAL:
			case PARTITION:
			case PASSING:
			case PASSWORD:
			case PLANS:
			case PRECEDING:
			case PREPARE:
			case PREPARED:
			case PRESERVE:
			case PRIOR:
			case PRIVILEGES:
			case PROCEDURAL:
			case PROCEDURE:
			case PROGRAM:
			case QUOTE:
			case RANGE:
			case READ:
			case REASSIGN:
			case RECHECK:
			case RECURSIVE:
			case REF:
			case REFRESH:
			case REINDEX:
			case RELATIVE_P:
			case RELEASE:
			case RENAME:
			case REPEATABLE:
			case REPLACE:
			case REPLICA:
			case RESET:
			case RESTART:
			case RESTRICT:
			case RETURNS:
			case REVOKE:
			case ROLE:
			case ROLLBACK:
			case ROWS:
			case RULE:
			case SAVEPOINT:
			case SCHEMA:
			case SCROLL:
			case SEARCH:
			case SECOND_P:
			case SECURITY:
			case SEQUENCE:
			case SEQUENCES:
			case SERIALIZABLE:
			case SERVER:
			case SESSION:
			case SET:
			case SHARE:
			case SHOW:
			case SIMPLE:
			case SNAPSHOT:
			case STABLE:
			case STANDALONE_P:
			case START:
			case STATEMENT:
			case STATISTICS:
			case STDIN:
			case STDOUT:
			case STORAGE:
			case STRICT_P:
			case STRIP_P:
			case SYSID:
			case SYSTEM_P:
			case TABLES:
			case TABLESPACE:
			case TEMP:
			case TEMPLATE:
			case TEMPORARY:
			case TEXT_P:
			case TRANSACTION:
			case TRIGGER:
			case TRUNCATE:
			case TRUSTED:
			case TYPE_P:
			case TYPES_P:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNENCRYPTED:
			case UNKNOWN:
			case UNLISTEN:
			case UNLOGGED:
			case UNTIL:
			case UPDATE:
			case VACUUM:
			case VALID:
			case VALIDATE:
			case VALIDATOR:
			case VARYING:
			case VERSION_P:
			case VIEW:
			case VOLATILE:
			case WHITESPACE_P:
			case WITHOUT:
			case WORK:
			case WRAPPER:
			case WRITE:
			case XML_P:
			case YEAR_P:
			case YES_P:
			case ZONE:
			case BETWEEN:
			case BIGINT:
			case BIT:
			case BOOLEAN_P:
			case CHAR_P:
			case CHARACTER:
			case COALESCE:
			case DEC:
			case DECIMAL_P:
			case EXISTS:
			case EXTRACT:
			case FLOAT_P:
			case GREATEST:
			case INOUT:
			case INT_P:
			case INTEGER:
			case INTERVAL:
			case LEAST:
			case NATIONAL:
			case NCHAR:
			case NONE:
			case NULLIF:
			case NUMERIC:
			case OVERLAY:
			case POSITION:
			case PRECISION:
			case REAL:
			case ROW:
			case SETOF:
			case SMALLINT:
			case SUBSTRING:
			case TIME:
			case TIMESTAMP:
			case TREAT:
			case TRIM:
			case VALUES:
			case VARCHAR:
			case XMLATTRIBUTES:
			case XMLCOMMENT:
			case XMLAGG:
			case XML_IS_WELL_FORMED:
			case XML_IS_WELL_FORMED_DOCUMENT:
			case XML_IS_WELL_FORMED_CONTENT:
			case XPATH:
			case XPATH_EXISTS:
			case XMLCONCAT:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLPARSE:
			case XMLPI:
			case XMLROOT:
			case XMLSERIALIZE:
			case CALL:
			case CURRENT_P:
			case ATTACH:
			case DETACH:
			case EXPRESSION:
			case GENERATED:
			case LOGGED:
			case STORED:
			case INCLUDE:
			case ROUTINE:
			case TRANSFORM:
			case IMPORT_P:
			case POLICY:
			case METHOD:
			case REFERENCING:
			case NEW:
			case OLD:
			case VALUE_P:
			case SUBSCRIPTION:
			case PUBLICATION:
			case OUT_P:
			case ROUTINES:
			case SCHEMAS:
			case PROCEDURES:
			case INPUT_P:
			case SUPPORT:
			case PARALLEL:
			case SQL_P:
			case DEPENDS:
			case OVERRIDING:
			case CONFLICT:
			case SKIP_P:
			case LOCKED:
			case TIES:
			case ROLLUP:
			case CUBE:
			case GROUPING:
			case SETS:
			case ORDINALITY:
			case XMLTABLE:
			case COLUMNS:
			case XMLNAMESPACES:
			case ROWTYPE:
			case NORMALIZED:
			case WITHIN:
			case FILTER:
			case GROUPS:
			case OTHERS:
			case NFC:
			case NFD:
			case NFKC:
			case NFKD:
			case UESCAPE:
			case VIEWS:
			case NORMALIZE:
			case DUMP:
			case PRINT_STRICT_PARAMS:
			case VARIABLE_CONFLICT:
			case ERROR:
			case USE_VARIABLE:
			case USE_COLUMN:
			case ALIAS:
			case CONSTANT:
			case PERFORM:
			case GET:
			case DIAGNOSTICS:
			case STACKED:
			case ELSIF:
			case REVERSE:
			case SLICE:
			case EXIT:
			case RETURN:
			case QUERY:
			case RAISE:
			case SQLSTATE:
			case DEBUG:
			case LOG:
			case INFO:
			case NOTICE:
			case WARNING:
			case EXCEPTION:
			case ASSERT:
			case OPEN:
			case ABS:
			case CBRT:
			case CEIL:
			case CEILING:
			case DEGREES:
			case DIV:
			case EXP:
			case FACTORIAL:
			case FLOOR:
			case GCD:
			case LCM:
			case LN:
			case LOG10:
			case MIN_SCALE:
			case MOD:
			case PI:
			case POWER:
			case RADIANS:
			case ROUND:
			case SCALE:
			case SIGN:
			case SQRT:
			case TRIM_SCALE:
			case TRUNC:
			case WIDTH_BUCKET:
			case RANDOM:
			case SETSEED:
			case ACOS:
			case ACOSD:
			case ASIN:
			case ASIND:
			case ATAN:
			case ATAND:
			case ATAN2:
			case ATAN2D:
			case COS:
			case COSD:
			case COT:
			case COTD:
			case SIN:
			case SIND:
			case TAN:
			case TAND:
			case SINH:
			case COSH:
			case TANH:
			case ASINH:
			case ACOSH:
			case ATANH:
			case BIT_LENGTH:
			case CHAR_LENGTH:
			case CHARACTER_LENGTH:
			case LOWER:
			case OCTET_LENGTH:
			case UPPER:
			case ASCII:
			case BTRIM:
			case CHR:
			case CONCAT:
			case CONCAT_WS:
			case FORMAT:
			case INITCAP:
			case LENGTH:
			case LPAD:
			case LTRIM:
			case MD5:
			case PARSE_IDENT:
			case PG_CLIENT_ENCODING:
			case QUOTE_IDENT:
			case QUOTE_LITERAL:
			case QUOTE_NULLABLE:
			case REGEXP_COUNT:
			case REGEXP_INSTR:
			case REGEXP_LIKE:
			case REGEXP_MATCH:
			case REGEXP_MATCHES:
			case REGEXP_REPLACE:
			case REGEXP_SPLIT_TO_ARRAY:
			case REGEXP_SPLIT_TO_TABLE:
			case REGEXP_SUBSTR:
			case REPEAT:
			case RPAD:
			case RTRIM:
			case SPLIT_PART:
			case STARTS_WITH:
			case STRING_TO_ARRAY:
			case STRING_TO_TABLE:
			case STRPOS:
			case SUBSTR:
			case TO_ASCII:
			case TO_HEX:
			case TRANSLATE:
			case UNISTR:
			case AGE:
			case CLOCK_TIMESTAMP:
			case DATE_BIN:
			case DATE_PART:
			case DATE_TRUNC:
			case ISFINITE:
			case JUSTIFY_DAYS:
			case JUSTIFY_HOURS:
			case JUSTIFY_INTERVAL:
			case MAKE_DATE:
			case MAKE_INTERVAL:
			case MAKE_TIME:
			case MAKE_TIMESTAMP:
			case MAKE_TIMESTAMPTZ:
			case NOW:
			case STATEMENT_TIMESTAMP:
			case TIMEOFDAY:
			case TRANSACTION_TIMESTAMP:
			case TO_TIMESTAMP:
			case TO_CHAR:
			case TO_DATE:
			case TO_NUMBER:
			case Identifier:
			case QuotedIdentifier:
			case UnicodeQuotedIdentifier:
			case PLSQLVARIABLENAME:
			case PLSQLIDENTIFIER:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2031;
				var_name();
				}
				break;
			case ALL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2032;
				Match(ALL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SetresetclauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SET() { return GetToken(PostgreSQLParser.SET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Set_restContext set_rest() {
			return GetRuleContext<Set_restContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public VariableresetstmtContext variableresetstmt() {
			return GetRuleContext<VariableresetstmtContext>(0);
		}
		public SetresetclauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_setresetclause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterSetresetclause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitSetresetclause(this);
		}
	}

	[RuleVersion(0)]
	public SetresetclauseContext setresetclause() {
		SetresetclauseContext _localctx = new SetresetclauseContext(Context, State);
		EnterRule(_localctx, 80, RULE_setresetclause);
		try {
			State = 2038;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case SET:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2035;
				Match(SET);
				State = 2036;
				set_rest();
				}
				break;
			case RESET:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2037;
				variableresetstmt();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionsetresetclauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SET() { return GetToken(PostgreSQLParser.SET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Set_rest_moreContext set_rest_more() {
			return GetRuleContext<Set_rest_moreContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public VariableresetstmtContext variableresetstmt() {
			return GetRuleContext<VariableresetstmtContext>(0);
		}
		public FunctionsetresetclauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionsetresetclause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterFunctionsetresetclause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitFunctionsetresetclause(this);
		}
	}

	[RuleVersion(0)]
	public FunctionsetresetclauseContext functionsetresetclause() {
		FunctionsetresetclauseContext _localctx = new FunctionsetresetclauseContext(Context, State);
		EnterRule(_localctx, 82, RULE_functionsetresetclause);
		try {
			State = 2043;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case SET:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2040;
				Match(SET);
				State = 2041;
				set_rest_more();
				}
				break;
			case RESET:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2042;
				variableresetstmt();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariableshowstmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SHOW() { return GetToken(PostgreSQLParser.SHOW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Var_nameContext var_name() {
			return GetRuleContext<Var_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TIME() { return GetToken(PostgreSQLParser.TIME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ZONE() { return GetToken(PostgreSQLParser.ZONE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRANSACTION() { return GetToken(PostgreSQLParser.TRANSACTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ISOLATION() { return GetToken(PostgreSQLParser.ISOLATION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEVEL() { return GetToken(PostgreSQLParser.LEVEL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SESSION() { return GetToken(PostgreSQLParser.SESSION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AUTHORIZATION() { return GetToken(PostgreSQLParser.AUTHORIZATION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALL() { return GetToken(PostgreSQLParser.ALL, 0); }
		public VariableshowstmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variableshowstmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterVariableshowstmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitVariableshowstmt(this);
		}
	}

	[RuleVersion(0)]
	public VariableshowstmtContext variableshowstmt() {
		VariableshowstmtContext _localctx = new VariableshowstmtContext(Context, State);
		EnterRule(_localctx, 84, RULE_variableshowstmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2045;
			Match(SHOW);
			State = 2055;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,33,Context) ) {
			case 1:
				{
				State = 2046;
				var_name();
				}
				break;
			case 2:
				{
				State = 2047;
				Match(TIME);
				State = 2048;
				Match(ZONE);
				}
				break;
			case 3:
				{
				State = 2049;
				Match(TRANSACTION);
				State = 2050;
				Match(ISOLATION);
				State = 2051;
				Match(LEVEL);
				}
				break;
			case 4:
				{
				State = 2052;
				Match(SESSION);
				State = 2053;
				Match(AUTHORIZATION);
				}
				break;
			case 5:
				{
				State = 2054;
				Match(ALL);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConstraintssetstmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SET() { return GetToken(PostgreSQLParser.SET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONSTRAINTS() { return GetToken(PostgreSQLParser.CONSTRAINTS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Constraints_set_listContext constraints_set_list() {
			return GetRuleContext<Constraints_set_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Constraints_set_modeContext constraints_set_mode() {
			return GetRuleContext<Constraints_set_modeContext>(0);
		}
		public ConstraintssetstmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constraintssetstmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterConstraintssetstmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitConstraintssetstmt(this);
		}
	}

	[RuleVersion(0)]
	public ConstraintssetstmtContext constraintssetstmt() {
		ConstraintssetstmtContext _localctx = new ConstraintssetstmtContext(Context, State);
		EnterRule(_localctx, 86, RULE_constraintssetstmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2057;
			Match(SET);
			State = 2058;
			Match(CONSTRAINTS);
			State = 2059;
			constraints_set_list();
			State = 2060;
			constraints_set_mode();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Constraints_set_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALL() { return GetToken(PostgreSQLParser.ALL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Qualified_name_listContext qualified_name_list() {
			return GetRuleContext<Qualified_name_listContext>(0);
		}
		public Constraints_set_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constraints_set_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterConstraints_set_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitConstraints_set_list(this);
		}
	}

	[RuleVersion(0)]
	public Constraints_set_listContext constraints_set_list() {
		Constraints_set_listContext _localctx = new Constraints_set_listContext(Context, State);
		EnterRule(_localctx, 88, RULE_constraints_set_list);
		try {
			State = 2064;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ALL:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2062;
				Match(ALL);
				}
				break;
			case AND:
			case ARRAY:
			case COLLATE:
			case COLUMN:
			case CONSTRAINT:
			case DEFAULT:
			case DO:
			case FETCH:
			case TABLE:
			case IS:
			case LEFT:
			case OUTER_P:
			case OVER:
			case RIGHT:
			case ABORT_P:
			case ABSOLUTE_P:
			case ACCESS:
			case ACTION:
			case ADD_P:
			case ADMIN:
			case AFTER:
			case AGGREGATE:
			case ALSO:
			case ALTER:
			case ALWAYS:
			case ASSERTION:
			case ASSIGNMENT:
			case AT:
			case ATTRIBUTE:
			case BACKWARD:
			case BEFORE:
			case BEGIN_P:
			case BY:
			case CACHE:
			case CALLED:
			case CASCADE:
			case CASCADED:
			case CATALOG:
			case CHAIN:
			case CHARACTERISTICS:
			case CHECKPOINT:
			case CLASS:
			case CLOSE:
			case CLUSTER:
			case COMMENT:
			case COMMENTS:
			case COMMIT:
			case COMMITTED:
			case CONFIGURATION:
			case CONNECTION:
			case CONSTRAINTS:
			case CONTENT_P:
			case CONTINUE_P:
			case CONVERSION_P:
			case COPY:
			case COST:
			case CSV:
			case CURSOR:
			case CYCLE:
			case DATA_P:
			case DATABASE:
			case DAY_P:
			case DEALLOCATE:
			case DECLARE:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE_P:
			case DELIMITER:
			case DELIMITERS:
			case DICTIONARY:
			case DISABLE_P:
			case DISCARD:
			case DOCUMENT_P:
			case DOMAIN_P:
			case DOUBLE_P:
			case DROP:
			case EACH:
			case ENABLE_P:
			case ENCODING:
			case ENCRYPTED:
			case ENUM_P:
			case ESCAPE:
			case EVENT:
			case EXCLUDE:
			case EXCLUDING:
			case EXCLUSIVE:
			case EXECUTE:
			case EXPLAIN:
			case EXTENSION:
			case EXTERNAL:
			case FAMILY:
			case FIRST_P:
			case FOLLOWING:
			case FORCE:
			case FORWARD:
			case FUNCTION:
			case FUNCTIONS:
			case GLOBAL:
			case GRANTED:
			case HANDLER:
			case HEADER_P:
			case HOLD:
			case HOUR_P:
			case IDENTITY_P:
			case IF_P:
			case IMMEDIATE:
			case IMMUTABLE:
			case IMPLICIT_P:
			case INCLUDING:
			case INCREMENT:
			case INDEX:
			case INDEXES:
			case INHERIT:
			case INHERITS:
			case INLINE_P:
			case INSENSITIVE:
			case INSERT:
			case INSTEAD:
			case INVOKER:
			case ISOLATION:
			case KEY:
			case LABEL:
			case LANGUAGE:
			case LARGE_P:
			case LAST_P:
			case LEAKPROOF:
			case LEVEL:
			case LISTEN:
			case LOAD:
			case LOCAL:
			case LOCATION:
			case LOCK_P:
			case MAPPING:
			case MATCH:
			case MATERIALIZED:
			case MAXVALUE:
			case MINUTE_P:
			case MINVALUE:
			case MODE:
			case MONTH_P:
			case MOVE:
			case NAME_P:
			case NAMES:
			case NEXT:
			case NO:
			case NOTHING:
			case NOTIFY:
			case NOWAIT:
			case NULLS_P:
			case OBJECT_P:
			case OF:
			case OFF:
			case OIDS:
			case OPERATOR:
			case OPTION:
			case OPTIONS:
			case OWNED:
			case OWNER:
			case PARSER:
			case PARTIAL:
			case PARTITION:
			case PASSING:
			case PASSWORD:
			case PLANS:
			case PRECEDING:
			case PREPARE:
			case PREPARED:
			case PRESERVE:
			case PRIOR:
			case PRIVILEGES:
			case PROCEDURAL:
			case PROCEDURE:
			case PROGRAM:
			case QUOTE:
			case RANGE:
			case READ:
			case REASSIGN:
			case RECHECK:
			case RECURSIVE:
			case REF:
			case REFRESH:
			case REINDEX:
			case RELATIVE_P:
			case RELEASE:
			case RENAME:
			case REPEATABLE:
			case REPLACE:
			case REPLICA:
			case RESET:
			case RESTART:
			case RESTRICT:
			case RETURNS:
			case REVOKE:
			case ROLE:
			case ROLLBACK:
			case ROWS:
			case RULE:
			case SAVEPOINT:
			case SCHEMA:
			case SCROLL:
			case SEARCH:
			case SECOND_P:
			case SECURITY:
			case SEQUENCE:
			case SEQUENCES:
			case SERIALIZABLE:
			case SERVER:
			case SESSION:
			case SET:
			case SHARE:
			case SHOW:
			case SIMPLE:
			case SNAPSHOT:
			case STABLE:
			case STANDALONE_P:
			case START:
			case STATEMENT:
			case STATISTICS:
			case STDIN:
			case STDOUT:
			case STORAGE:
			case STRICT_P:
			case STRIP_P:
			case SYSID:
			case SYSTEM_P:
			case TABLES:
			case TABLESPACE:
			case TEMP:
			case TEMPLATE:
			case TEMPORARY:
			case TEXT_P:
			case TRANSACTION:
			case TRIGGER:
			case TRUNCATE:
			case TRUSTED:
			case TYPE_P:
			case TYPES_P:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNENCRYPTED:
			case UNKNOWN:
			case UNLISTEN:
			case UNLOGGED:
			case UNTIL:
			case UPDATE:
			case VACUUM:
			case VALID:
			case VALIDATE:
			case VALIDATOR:
			case VARYING:
			case VERSION_P:
			case VIEW:
			case VOLATILE:
			case WHITESPACE_P:
			case WITHOUT:
			case WORK:
			case WRAPPER:
			case WRITE:
			case XML_P:
			case YEAR_P:
			case YES_P:
			case ZONE:
			case BETWEEN:
			case BIGINT:
			case BIT:
			case BOOLEAN_P:
			case CHAR_P:
			case CHARACTER:
			case COALESCE:
			case DEC:
			case DECIMAL_P:
			case EXISTS:
			case EXTRACT:
			case FLOAT_P:
			case GREATEST:
			case INOUT:
			case INT_P:
			case INTEGER:
			case INTERVAL:
			case LEAST:
			case NATIONAL:
			case NCHAR:
			case NONE:
			case NULLIF:
			case NUMERIC:
			case OVERLAY:
			case POSITION:
			case PRECISION:
			case REAL:
			case ROW:
			case SETOF:
			case SMALLINT:
			case SUBSTRING:
			case TIME:
			case TIMESTAMP:
			case TREAT:
			case TRIM:
			case VALUES:
			case VARCHAR:
			case XMLATTRIBUTES:
			case XMLCOMMENT:
			case XMLAGG:
			case XML_IS_WELL_FORMED:
			case XML_IS_WELL_FORMED_DOCUMENT:
			case XML_IS_WELL_FORMED_CONTENT:
			case XPATH:
			case XPATH_EXISTS:
			case XMLCONCAT:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLPARSE:
			case XMLPI:
			case XMLROOT:
			case XMLSERIALIZE:
			case CALL:
			case CURRENT_P:
			case ATTACH:
			case DETACH:
			case EXPRESSION:
			case GENERATED:
			case LOGGED:
			case STORED:
			case INCLUDE:
			case ROUTINE:
			case TRANSFORM:
			case IMPORT_P:
			case POLICY:
			case METHOD:
			case REFERENCING:
			case NEW:
			case OLD:
			case VALUE_P:
			case SUBSCRIPTION:
			case PUBLICATION:
			case OUT_P:
			case ROUTINES:
			case SCHEMAS:
			case PROCEDURES:
			case INPUT_P:
			case SUPPORT:
			case PARALLEL:
			case SQL_P:
			case DEPENDS:
			case OVERRIDING:
			case CONFLICT:
			case SKIP_P:
			case LOCKED:
			case TIES:
			case ROLLUP:
			case CUBE:
			case GROUPING:
			case SETS:
			case ORDINALITY:
			case XMLTABLE:
			case COLUMNS:
			case XMLNAMESPACES:
			case ROWTYPE:
			case NORMALIZED:
			case WITHIN:
			case FILTER:
			case GROUPS:
			case OTHERS:
			case NFC:
			case NFD:
			case NFKC:
			case NFKD:
			case UESCAPE:
			case VIEWS:
			case NORMALIZE:
			case DUMP:
			case PRINT_STRICT_PARAMS:
			case VARIABLE_CONFLICT:
			case ERROR:
			case USE_VARIABLE:
			case USE_COLUMN:
			case ALIAS:
			case CONSTANT:
			case PERFORM:
			case GET:
			case DIAGNOSTICS:
			case STACKED:
			case ELSIF:
			case REVERSE:
			case SLICE:
			case EXIT:
			case RETURN:
			case QUERY:
			case RAISE:
			case SQLSTATE:
			case DEBUG:
			case LOG:
			case INFO:
			case NOTICE:
			case WARNING:
			case EXCEPTION:
			case ASSERT:
			case OPEN:
			case ABS:
			case CBRT:
			case CEIL:
			case CEILING:
			case DEGREES:
			case DIV:
			case EXP:
			case FACTORIAL:
			case FLOOR:
			case GCD:
			case LCM:
			case LN:
			case LOG10:
			case MIN_SCALE:
			case MOD:
			case PI:
			case POWER:
			case RADIANS:
			case ROUND:
			case SCALE:
			case SIGN:
			case SQRT:
			case TRIM_SCALE:
			case TRUNC:
			case WIDTH_BUCKET:
			case RANDOM:
			case SETSEED:
			case ACOS:
			case ACOSD:
			case ASIN:
			case ASIND:
			case ATAN:
			case ATAND:
			case ATAN2:
			case ATAN2D:
			case COS:
			case COSD:
			case COT:
			case COTD:
			case SIN:
			case SIND:
			case TAN:
			case TAND:
			case SINH:
			case COSH:
			case TANH:
			case ASINH:
			case ACOSH:
			case ATANH:
			case BIT_LENGTH:
			case CHAR_LENGTH:
			case CHARACTER_LENGTH:
			case LOWER:
			case OCTET_LENGTH:
			case UPPER:
			case ASCII:
			case BTRIM:
			case CHR:
			case CONCAT:
			case CONCAT_WS:
			case FORMAT:
			case INITCAP:
			case LENGTH:
			case LPAD:
			case LTRIM:
			case MD5:
			case PARSE_IDENT:
			case PG_CLIENT_ENCODING:
			case QUOTE_IDENT:
			case QUOTE_LITERAL:
			case QUOTE_NULLABLE:
			case REGEXP_COUNT:
			case REGEXP_INSTR:
			case REGEXP_LIKE:
			case REGEXP_MATCH:
			case REGEXP_MATCHES:
			case REGEXP_REPLACE:
			case REGEXP_SPLIT_TO_ARRAY:
			case REGEXP_SPLIT_TO_TABLE:
			case REGEXP_SUBSTR:
			case REPEAT:
			case RPAD:
			case RTRIM:
			case SPLIT_PART:
			case STARTS_WITH:
			case STRING_TO_ARRAY:
			case STRING_TO_TABLE:
			case STRPOS:
			case SUBSTR:
			case TO_ASCII:
			case TO_HEX:
			case TRANSLATE:
			case UNISTR:
			case AGE:
			case CLOCK_TIMESTAMP:
			case DATE_BIN:
			case DATE_PART:
			case DATE_TRUNC:
			case ISFINITE:
			case JUSTIFY_DAYS:
			case JUSTIFY_HOURS:
			case JUSTIFY_INTERVAL:
			case MAKE_DATE:
			case MAKE_INTERVAL:
			case MAKE_TIME:
			case MAKE_TIMESTAMP:
			case MAKE_TIMESTAMPTZ:
			case NOW:
			case STATEMENT_TIMESTAMP:
			case TIMEOFDAY:
			case TRANSACTION_TIMESTAMP:
			case TO_TIMESTAMP:
			case TO_CHAR:
			case TO_DATE:
			case TO_NUMBER:
			case Identifier:
			case QuotedIdentifier:
			case UnicodeQuotedIdentifier:
			case PLSQLVARIABLENAME:
			case PLSQLIDENTIFIER:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2063;
				qualified_name_list();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Constraints_set_modeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFERRED() { return GetToken(PostgreSQLParser.DEFERRED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IMMEDIATE() { return GetToken(PostgreSQLParser.IMMEDIATE, 0); }
		public Constraints_set_modeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constraints_set_mode; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterConstraints_set_mode(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitConstraints_set_mode(this);
		}
	}

	[RuleVersion(0)]
	public Constraints_set_modeContext constraints_set_mode() {
		Constraints_set_modeContext _localctx = new Constraints_set_modeContext(Context, State);
		EnterRule(_localctx, 90, RULE_constraints_set_mode);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2066;
			_la = TokenStream.LA(1);
			if ( !(_la==DEFERRED || _la==IMMEDIATE) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CheckpointstmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHECKPOINT() { return GetToken(PostgreSQLParser.CHECKPOINT, 0); }
		public CheckpointstmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_checkpointstmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterCheckpointstmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitCheckpointstmt(this);
		}
	}

	[RuleVersion(0)]
	public CheckpointstmtContext checkpointstmt() {
		CheckpointstmtContext _localctx = new CheckpointstmtContext(Context, State);
		EnterRule(_localctx, 92, RULE_checkpointstmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2068;
			Match(CHECKPOINT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DiscardstmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DISCARD() { return GetToken(PostgreSQLParser.DISCARD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALL() { return GetToken(PostgreSQLParser.ALL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TEMP() { return GetToken(PostgreSQLParser.TEMP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TEMPORARY() { return GetToken(PostgreSQLParser.TEMPORARY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLANS() { return GetToken(PostgreSQLParser.PLANS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEQUENCES() { return GetToken(PostgreSQLParser.SEQUENCES, 0); }
		public DiscardstmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_discardstmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterDiscardstmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitDiscardstmt(this);
		}
	}

	[RuleVersion(0)]
	public DiscardstmtContext discardstmt() {
		DiscardstmtContext _localctx = new DiscardstmtContext(Context, State);
		EnterRule(_localctx, 94, RULE_discardstmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2070;
			Match(DISCARD);
			State = 2071;
			_la = TokenStream.LA(1);
			if ( !(_la==ALL || _la==PLANS || _la==SEQUENCES || _la==TEMP || _la==TEMPORARY) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AltertablestmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALTER() { return GetToken(PostgreSQLParser.ALTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLE() { return GetToken(PostgreSQLParser.TABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Relation_exprContext relation_expr() {
			return GetRuleContext<Relation_exprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Alter_table_cmdsContext alter_table_cmds() {
			return GetRuleContext<Alter_table_cmdsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Partition_cmdContext partition_cmd() {
			return GetRuleContext<Partition_cmdContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF_P() { return GetToken(PostgreSQLParser.IF_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXISTS() { return GetToken(PostgreSQLParser.EXISTS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALL() { return GetToken(PostgreSQLParser.ALL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IN_P() { return GetToken(PostgreSQLParser.IN_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] TABLESPACE() { return GetTokens(PostgreSQLParser.TABLESPACE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLESPACE(int i) {
			return GetToken(PostgreSQLParser.TABLESPACE, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NameContext[] name() {
			return GetRuleContexts<NameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public NameContext name(int i) {
			return GetRuleContext<NameContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SET() { return GetToken(PostgreSQLParser.SET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Opt_nowaitContext opt_nowait() {
			return GetRuleContext<Opt_nowaitContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OWNED() { return GetToken(PostgreSQLParser.OWNED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BY() { return GetToken(PostgreSQLParser.BY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Role_listContext role_list() {
			return GetRuleContext<Role_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INDEX() { return GetToken(PostgreSQLParser.INDEX, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Qualified_nameContext qualified_name() {
			return GetRuleContext<Qualified_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Index_partition_cmdContext index_partition_cmd() {
			return GetRuleContext<Index_partition_cmdContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEQUENCE() { return GetToken(PostgreSQLParser.SEQUENCE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VIEW() { return GetToken(PostgreSQLParser.VIEW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MATERIALIZED() { return GetToken(PostgreSQLParser.MATERIALIZED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOREIGN() { return GetToken(PostgreSQLParser.FOREIGN, 0); }
		public AltertablestmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_altertablestmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterAltertablestmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitAltertablestmt(this);
		}
	}

	[RuleVersion(0)]
	public AltertablestmtContext altertablestmt() {
		AltertablestmtContext _localctx = new AltertablestmtContext(Context, State);
		EnterRule(_localctx, 96, RULE_altertablestmt);
		int _la;
		try {
			State = 2182;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,46,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2073;
				Match(ALTER);
				State = 2074;
				Match(TABLE);
				State = 2077;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,35,Context) ) {
				case 1:
					{
					State = 2075;
					Match(IF_P);
					State = 2076;
					Match(EXISTS);
					}
					break;
				}
				State = 2079;
				relation_expr();
				State = 2082;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case NOT:
				case ADD_P:
				case ALTER:
				case CLUSTER:
				case DISABLE_P:
				case DROP:
				case ENABLE_P:
				case FORCE:
				case INHERIT:
				case NO:
				case OF:
				case OPTIONS:
				case OWNER:
				case REPLICA:
				case RESET:
				case SET:
				case VALIDATE:
					{
					State = 2080;
					alter_table_cmds();
					}
					break;
				case ATTACH:
				case DETACH:
					{
					State = 2081;
					partition_cmd();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2084;
				Match(ALTER);
				State = 2085;
				Match(TABLE);
				State = 2086;
				Match(ALL);
				State = 2087;
				Match(IN_P);
				State = 2088;
				Match(TABLESPACE);
				State = 2089;
				name();
				State = 2093;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==OWNED) {
					{
					State = 2090;
					Match(OWNED);
					State = 2091;
					Match(BY);
					State = 2092;
					role_list();
					}
				}

				State = 2095;
				Match(SET);
				State = 2096;
				Match(TABLESPACE);
				State = 2097;
				name();
				State = 2098;
				opt_nowait();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 2100;
				Match(ALTER);
				State = 2101;
				Match(INDEX);
				State = 2104;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,38,Context) ) {
				case 1:
					{
					State = 2102;
					Match(IF_P);
					State = 2103;
					Match(EXISTS);
					}
					break;
				}
				State = 2106;
				qualified_name();
				State = 2109;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case NOT:
				case ADD_P:
				case ALTER:
				case CLUSTER:
				case DISABLE_P:
				case DROP:
				case ENABLE_P:
				case FORCE:
				case INHERIT:
				case NO:
				case OF:
				case OPTIONS:
				case OWNER:
				case REPLICA:
				case RESET:
				case SET:
				case VALIDATE:
					{
					State = 2107;
					alter_table_cmds();
					}
					break;
				case ATTACH:
					{
					State = 2108;
					index_partition_cmd();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 2111;
				Match(ALTER);
				State = 2112;
				Match(INDEX);
				State = 2113;
				Match(ALL);
				State = 2114;
				Match(IN_P);
				State = 2115;
				Match(TABLESPACE);
				State = 2116;
				name();
				State = 2120;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==OWNED) {
					{
					State = 2117;
					Match(OWNED);
					State = 2118;
					Match(BY);
					State = 2119;
					role_list();
					}
				}

				State = 2122;
				Match(SET);
				State = 2123;
				Match(TABLESPACE);
				State = 2124;
				name();
				State = 2125;
				opt_nowait();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 2127;
				Match(ALTER);
				State = 2128;
				Match(SEQUENCE);
				State = 2131;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,41,Context) ) {
				case 1:
					{
					State = 2129;
					Match(IF_P);
					State = 2130;
					Match(EXISTS);
					}
					break;
				}
				State = 2133;
				qualified_name();
				State = 2134;
				alter_table_cmds();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 2136;
				Match(ALTER);
				State = 2137;
				Match(VIEW);
				State = 2140;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,42,Context) ) {
				case 1:
					{
					State = 2138;
					Match(IF_P);
					State = 2139;
					Match(EXISTS);
					}
					break;
				}
				State = 2142;
				qualified_name();
				State = 2143;
				alter_table_cmds();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 2145;
				Match(ALTER);
				State = 2146;
				Match(MATERIALIZED);
				State = 2147;
				Match(VIEW);
				State = 2150;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,43,Context) ) {
				case 1:
					{
					State = 2148;
					Match(IF_P);
					State = 2149;
					Match(EXISTS);
					}
					break;
				}
				State = 2152;
				qualified_name();
				State = 2153;
				alter_table_cmds();
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 2155;
				Match(ALTER);
				State = 2156;
				Match(MATERIALIZED);
				State = 2157;
				Match(VIEW);
				State = 2158;
				Match(ALL);
				State = 2159;
				Match(IN_P);
				State = 2160;
				Match(TABLESPACE);
				State = 2161;
				name();
				State = 2165;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==OWNED) {
					{
					State = 2162;
					Match(OWNED);
					State = 2163;
					Match(BY);
					State = 2164;
					role_list();
					}
				}

				State = 2167;
				Match(SET);
				State = 2168;
				Match(TABLESPACE);
				State = 2169;
				name();
				State = 2170;
				opt_nowait();
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 2172;
				Match(ALTER);
				State = 2173;
				Match(FOREIGN);
				State = 2174;
				Match(TABLE);
				State = 2177;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,45,Context) ) {
				case 1:
					{
					State = 2175;
					Match(IF_P);
					State = 2176;
					Match(EXISTS);
					}
					break;
				}
				State = 2179;
				relation_expr();
				State = 2180;
				alter_table_cmds();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_table_cmdsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Alter_table_cmdContext[] alter_table_cmd() {
			return GetRuleContexts<Alter_table_cmdContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Alter_table_cmdContext alter_table_cmd(int i) {
			return GetRuleContext<Alter_table_cmdContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(PostgreSQLParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(PostgreSQLParser.COMMA, i);
		}
		public Alter_table_cmdsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_table_cmds; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterAlter_table_cmds(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitAlter_table_cmds(this);
		}
	}

	[RuleVersion(0)]
	public Alter_table_cmdsContext alter_table_cmds() {
		Alter_table_cmdsContext _localctx = new Alter_table_cmdsContext(Context, State);
		EnterRule(_localctx, 98, RULE_alter_table_cmds);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2184;
			alter_table_cmd();
			State = 2189;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 2185;
				Match(COMMA);
				State = 2186;
				alter_table_cmd();
				}
				}
				State = 2191;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Partition_cmdContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ATTACH() { return GetToken(PostgreSQLParser.ATTACH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARTITION() { return GetToken(PostgreSQLParser.PARTITION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Qualified_nameContext qualified_name() {
			return GetRuleContext<Qualified_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PartitionboundspecContext partitionboundspec() {
			return GetRuleContext<PartitionboundspecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DETACH() { return GetToken(PostgreSQLParser.DETACH, 0); }
		public Partition_cmdContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_partition_cmd; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterPartition_cmd(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitPartition_cmd(this);
		}
	}

	[RuleVersion(0)]
	public Partition_cmdContext partition_cmd() {
		Partition_cmdContext _localctx = new Partition_cmdContext(Context, State);
		EnterRule(_localctx, 100, RULE_partition_cmd);
		try {
			State = 2200;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ATTACH:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2192;
				Match(ATTACH);
				State = 2193;
				Match(PARTITION);
				State = 2194;
				qualified_name();
				State = 2195;
				partitionboundspec();
				}
				break;
			case DETACH:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2197;
				Match(DETACH);
				State = 2198;
				Match(PARTITION);
				State = 2199;
				qualified_name();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Index_partition_cmdContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ATTACH() { return GetToken(PostgreSQLParser.ATTACH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARTITION() { return GetToken(PostgreSQLParser.PARTITION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Qualified_nameContext qualified_name() {
			return GetRuleContext<Qualified_nameContext>(0);
		}
		public Index_partition_cmdContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_index_partition_cmd; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterIndex_partition_cmd(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitIndex_partition_cmd(this);
		}
	}

	[RuleVersion(0)]
	public Index_partition_cmdContext index_partition_cmd() {
		Index_partition_cmdContext _localctx = new Index_partition_cmdContext(Context, State);
		EnterRule(_localctx, 102, RULE_index_partition_cmd);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2202;
			Match(ATTACH);
			State = 2203;
			Match(PARTITION);
			State = 2204;
			qualified_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_table_cmdContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ADD_P() { return GetToken(PostgreSQLParser.ADD_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ColumnDefContext columnDef() {
			return GetRuleContext<ColumnDefContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF_P() { return GetToken(PostgreSQLParser.IF_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT() { return GetToken(PostgreSQLParser.NOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXISTS() { return GetToken(PostgreSQLParser.EXISTS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLUMN() { return GetToken(PostgreSQLParser.COLUMN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALTER() { return GetToken(PostgreSQLParser.ALTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Opt_columnContext opt_column() {
			return GetRuleContext<Opt_columnContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ColidContext[] colid() {
			return GetRuleContexts<ColidContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ColidContext colid(int i) {
			return GetRuleContext<ColidContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Alter_column_defaultContext alter_column_default() {
			return GetRuleContext<Alter_column_defaultContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DROP() { return GetToken(PostgreSQLParser.DROP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NULL_P() { return GetToken(PostgreSQLParser.NULL_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SET() { return GetToken(PostgreSQLParser.SET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXPRESSION() { return GetToken(PostgreSQLParser.EXPRESSION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STATISTICS() { return GetToken(PostgreSQLParser.STATISTICS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SignediconstContext signediconst() {
			return GetRuleContext<SignediconstContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IconstContext iconst() {
			return GetRuleContext<IconstContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ReloptionsContext reloptions() {
			return GetRuleContext<ReloptionsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RESET() { return GetToken(PostgreSQLParser.RESET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STORAGE() { return GetToken(PostgreSQLParser.STORAGE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GENERATED() { return GetToken(PostgreSQLParser.GENERATED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Generated_whenContext generated_when() {
			return GetRuleContext<Generated_whenContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS() { return GetToken(PostgreSQLParser.AS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTITY_P() { return GetToken(PostgreSQLParser.IDENTITY_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public OptparenthesizedseqoptlistContext optparenthesizedseqoptlist() {
			return GetRuleContext<OptparenthesizedseqoptlistContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Alter_identity_column_option_listContext alter_identity_column_option_list() {
			return GetRuleContext<Alter_identity_column_option_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Opt_drop_behaviorContext opt_drop_behavior() {
			return GetRuleContext<Opt_drop_behaviorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Opt_set_dataContext opt_set_data() {
			return GetRuleContext<Opt_set_dataContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TYPE_P() { return GetToken(PostgreSQLParser.TYPE_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypenameContext typename() {
			return GetRuleContext<TypenameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Opt_collate_clauseContext opt_collate_clause() {
			return GetRuleContext<Opt_collate_clauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Alter_usingContext alter_using() {
			return GetRuleContext<Alter_usingContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Alter_generic_optionsContext alter_generic_options() {
			return GetRuleContext<Alter_generic_optionsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TableconstraintContext tableconstraint() {
			return GetRuleContext<TableconstraintContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONSTRAINT() { return GetToken(PostgreSQLParser.CONSTRAINT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ConstraintattributespecContext constraintattributespec() {
			return GetRuleContext<ConstraintattributespecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VALIDATE() { return GetToken(PostgreSQLParser.VALIDATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WITHOUT() { return GetToken(PostgreSQLParser.WITHOUT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OIDS() { return GetToken(PostgreSQLParser.OIDS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLUSTER() { return GetToken(PostgreSQLParser.CLUSTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ON() { return GetToken(PostgreSQLParser.ON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOGGED() { return GetToken(PostgreSQLParser.LOGGED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNLOGGED() { return GetToken(PostgreSQLParser.UNLOGGED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ENABLE_P() { return GetToken(PostgreSQLParser.ENABLE_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRIGGER() { return GetToken(PostgreSQLParser.TRIGGER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALWAYS() { return GetToken(PostgreSQLParser.ALWAYS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REPLICA() { return GetToken(PostgreSQLParser.REPLICA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALL() { return GetToken(PostgreSQLParser.ALL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode USER() { return GetToken(PostgreSQLParser.USER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DISABLE_P() { return GetToken(PostgreSQLParser.DISABLE_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RULE() { return GetToken(PostgreSQLParser.RULE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INHERIT() { return GetToken(PostgreSQLParser.INHERIT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Qualified_nameContext qualified_name() {
			return GetRuleContext<Qualified_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NO() { return GetToken(PostgreSQLParser.NO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OF() { return GetToken(PostgreSQLParser.OF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Any_nameContext any_name() {
			return GetRuleContext<Any_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OWNER() { return GetToken(PostgreSQLParser.OWNER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TO() { return GetToken(PostgreSQLParser.TO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public RolespecContext rolespec() {
			return GetRuleContext<RolespecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLESPACE() { return GetToken(PostgreSQLParser.TABLESPACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Replica_identityContext replica_identity() {
			return GetRuleContext<Replica_identityContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROW() { return GetToken(PostgreSQLParser.ROW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEVEL() { return GetToken(PostgreSQLParser.LEVEL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SECURITY() { return GetToken(PostgreSQLParser.SECURITY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FORCE() { return GetToken(PostgreSQLParser.FORCE, 0); }
		public Alter_table_cmdContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_table_cmd; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterAlter_table_cmd(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitAlter_table_cmd(this);
		}
	}

	[RuleVersion(0)]
	public Alter_table_cmdContext alter_table_cmd() {
		Alter_table_cmdContext _localctx = new Alter_table_cmdContext(Context, State);
		EnterRule(_localctx, 104, RULE_alter_table_cmd);
		try {
			State = 2458;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,49,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2206;
				Match(ADD_P);
				State = 2207;
				columnDef();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2208;
				Match(ADD_P);
				State = 2209;
				Match(IF_P);
				State = 2210;
				Match(NOT);
				State = 2211;
				Match(EXISTS);
				State = 2212;
				columnDef();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 2213;
				Match(ADD_P);
				State = 2214;
				Match(COLUMN);
				State = 2215;
				columnDef();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 2216;
				Match(ADD_P);
				State = 2217;
				Match(COLUMN);
				State = 2218;
				Match(IF_P);
				State = 2219;
				Match(NOT);
				State = 2220;
				Match(EXISTS);
				State = 2221;
				columnDef();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 2222;
				Match(ALTER);
				State = 2223;
				opt_column();
				State = 2224;
				colid();
				State = 2225;
				alter_column_default();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 2227;
				Match(ALTER);
				State = 2228;
				opt_column();
				State = 2229;
				colid();
				State = 2230;
				Match(DROP);
				State = 2231;
				Match(NOT);
				State = 2232;
				Match(NULL_P);
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 2234;
				Match(ALTER);
				State = 2235;
				opt_column();
				State = 2236;
				colid();
				State = 2237;
				Match(SET);
				State = 2238;
				Match(NOT);
				State = 2239;
				Match(NULL_P);
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 2241;
				Match(ALTER);
				State = 2242;
				opt_column();
				State = 2243;
				colid();
				State = 2244;
				Match(DROP);
				State = 2245;
				Match(EXPRESSION);
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 2247;
				Match(ALTER);
				State = 2248;
				opt_column();
				State = 2249;
				colid();
				State = 2250;
				Match(DROP);
				State = 2251;
				Match(EXPRESSION);
				State = 2252;
				Match(IF_P);
				State = 2253;
				Match(EXISTS);
				}
				break;
			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 2255;
				Match(ALTER);
				State = 2256;
				opt_column();
				State = 2257;
				colid();
				State = 2258;
				Match(SET);
				State = 2259;
				Match(STATISTICS);
				State = 2260;
				signediconst();
				}
				break;
			case 11:
				EnterOuterAlt(_localctx, 11);
				{
				State = 2262;
				Match(ALTER);
				State = 2263;
				opt_column();
				State = 2264;
				iconst();
				State = 2265;
				Match(SET);
				State = 2266;
				Match(STATISTICS);
				State = 2267;
				signediconst();
				}
				break;
			case 12:
				EnterOuterAlt(_localctx, 12);
				{
				State = 2269;
				Match(ALTER);
				State = 2270;
				opt_column();
				State = 2271;
				colid();
				State = 2272;
				Match(SET);
				State = 2273;
				reloptions();
				}
				break;
			case 13:
				EnterOuterAlt(_localctx, 13);
				{
				State = 2275;
				Match(ALTER);
				State = 2276;
				opt_column();
				State = 2277;
				colid();
				State = 2278;
				Match(RESET);
				State = 2279;
				reloptions();
				}
				break;
			case 14:
				EnterOuterAlt(_localctx, 14);
				{
				State = 2281;
				Match(ALTER);
				State = 2282;
				opt_column();
				State = 2283;
				colid();
				State = 2284;
				Match(SET);
				State = 2285;
				Match(STORAGE);
				State = 2286;
				colid();
				}
				break;
			case 15:
				EnterOuterAlt(_localctx, 15);
				{
				State = 2288;
				Match(ALTER);
				State = 2289;
				opt_column();
				State = 2290;
				colid();
				State = 2291;
				Match(ADD_P);
				State = 2292;
				Match(GENERATED);
				State = 2293;
				generated_when();
				State = 2294;
				Match(AS);
				State = 2295;
				Match(IDENTITY_P);
				State = 2296;
				optparenthesizedseqoptlist();
				}
				break;
			case 16:
				EnterOuterAlt(_localctx, 16);
				{
				State = 2298;
				Match(ALTER);
				State = 2299;
				opt_column();
				State = 2300;
				colid();
				State = 2301;
				alter_identity_column_option_list();
				}
				break;
			case 17:
				EnterOuterAlt(_localctx, 17);
				{
				State = 2303;
				Match(ALTER);
				State = 2304;
				opt_column();
				State = 2305;
				colid();
				State = 2306;
				Match(DROP);
				State = 2307;
				Match(IDENTITY_P);
				}
				break;
			case 18:
				EnterOuterAlt(_localctx, 18);
				{
				State = 2309;
				Match(ALTER);
				State = 2310;
				opt_column();
				State = 2311;
				colid();
				State = 2312;
				Match(DROP);
				State = 2313;
				Match(IDENTITY_P);
				State = 2314;
				Match(IF_P);
				State = 2315;
				Match(EXISTS);
				}
				break;
			case 19:
				EnterOuterAlt(_localctx, 19);
				{
				State = 2317;
				Match(DROP);
				State = 2318;
				opt_column();
				State = 2319;
				Match(IF_P);
				State = 2320;
				Match(EXISTS);
				State = 2321;
				colid();
				State = 2322;
				opt_drop_behavior();
				}
				break;
			case 20:
				EnterOuterAlt(_localctx, 20);
				{
				State = 2324;
				Match(DROP);
				State = 2325;
				opt_column();
				State = 2326;
				colid();
				State = 2327;
				opt_drop_behavior();
				}
				break;
			case 21:
				EnterOuterAlt(_localctx, 21);
				{
				State = 2329;
				Match(ALTER);
				State = 2330;
				opt_column();
				State = 2331;
				colid();
				State = 2332;
				opt_set_data();
				State = 2333;
				Match(TYPE_P);
				State = 2334;
				typename();
				State = 2335;
				opt_collate_clause();
				State = 2336;
				alter_using();
				}
				break;
			case 22:
				EnterOuterAlt(_localctx, 22);
				{
				State = 2338;
				Match(ALTER);
				State = 2339;
				opt_column();
				State = 2340;
				colid();
				State = 2341;
				alter_generic_options();
				}
				break;
			case 23:
				EnterOuterAlt(_localctx, 23);
				{
				State = 2343;
				Match(ADD_P);
				State = 2344;
				tableconstraint();
				}
				break;
			case 24:
				EnterOuterAlt(_localctx, 24);
				{
				State = 2345;
				Match(ALTER);
				State = 2346;
				Match(CONSTRAINT);
				State = 2347;
				name();
				State = 2348;
				constraintattributespec();
				}
				break;
			case 25:
				EnterOuterAlt(_localctx, 25);
				{
				State = 2350;
				Match(VALIDATE);
				State = 2351;
				Match(CONSTRAINT);
				State = 2352;
				name();
				}
				break;
			case 26:
				EnterOuterAlt(_localctx, 26);
				{
				State = 2353;
				Match(DROP);
				State = 2354;
				Match(CONSTRAINT);
				State = 2355;
				Match(IF_P);
				State = 2356;
				Match(EXISTS);
				State = 2357;
				name();
				State = 2358;
				opt_drop_behavior();
				}
				break;
			case 27:
				EnterOuterAlt(_localctx, 27);
				{
				State = 2360;
				Match(DROP);
				State = 2361;
				Match(CONSTRAINT);
				State = 2362;
				name();
				State = 2363;
				opt_drop_behavior();
				}
				break;
			case 28:
				EnterOuterAlt(_localctx, 28);
				{
				State = 2365;
				Match(SET);
				State = 2366;
				Match(WITHOUT);
				State = 2367;
				Match(OIDS);
				}
				break;
			case 29:
				EnterOuterAlt(_localctx, 29);
				{
				State = 2368;
				Match(CLUSTER);
				State = 2369;
				Match(ON);
				State = 2370;
				name();
				}
				break;
			case 30:
				EnterOuterAlt(_localctx, 30);
				{
				State = 2371;
				Match(SET);
				State = 2372;
				Match(WITHOUT);
				State = 2373;
				Match(CLUSTER);
				}
				break;
			case 31:
				EnterOuterAlt(_localctx, 31);
				{
				State = 2374;
				Match(SET);
				State = 2375;
				Match(LOGGED);
				}
				break;
			case 32:
				EnterOuterAlt(_localctx, 32);
				{
				State = 2376;
				Match(SET);
				State = 2377;
				Match(UNLOGGED);
				}
				break;
			case 33:
				EnterOuterAlt(_localctx, 33);
				{
				State = 2378;
				Match(ENABLE_P);
				State = 2379;
				Match(TRIGGER);
				State = 2380;
				name();
				}
				break;
			case 34:
				EnterOuterAlt(_localctx, 34);
				{
				State = 2381;
				Match(ENABLE_P);
				State = 2382;
				Match(ALWAYS);
				State = 2383;
				Match(TRIGGER);
				State = 2384;
				name();
				}
				break;
			case 35:
				EnterOuterAlt(_localctx, 35);
				{
				State = 2385;
				Match(ENABLE_P);
				State = 2386;
				Match(REPLICA);
				State = 2387;
				Match(TRIGGER);
				State = 2388;
				name();
				}
				break;
			case 36:
				EnterOuterAlt(_localctx, 36);
				{
				State = 2389;
				Match(ENABLE_P);
				State = 2390;
				Match(TRIGGER);
				State = 2391;
				Match(ALL);
				}
				break;
			case 37:
				EnterOuterAlt(_localctx, 37);
				{
				State = 2392;
				Match(ENABLE_P);
				State = 2393;
				Match(TRIGGER);
				State = 2394;
				Match(USER);
				}
				break;
			case 38:
				EnterOuterAlt(_localctx, 38);
				{
				State = 2395;
				Match(DISABLE_P);
				State = 2396;
				Match(TRIGGER);
				State = 2397;
				name();
				}
				break;
			case 39:
				EnterOuterAlt(_localctx, 39);
				{
				State = 2398;
				Match(DISABLE_P);
				State = 2399;
				Match(TRIGGER);
				State = 2400;
				Match(ALL);
				}
				break;
			case 40:
				EnterOuterAlt(_localctx, 40);
				{
				State = 2401;
				Match(DISABLE_P);
				State = 2402;
				Match(TRIGGER);
				State = 2403;
				Match(USER);
				}
				break;
			case 41:
				EnterOuterAlt(_localctx, 41);
				{
				State = 2404;
				Match(ENABLE_P);
				State = 2405;
				Match(RULE);
				State = 2406;
				name();
				}
				break;
			case 42:
				EnterOuterAlt(_localctx, 42);
				{
				State = 2407;
				Match(ENABLE_P);
				State = 2408;
				Match(ALWAYS);
				State = 2409;
				Match(RULE);
				State = 2410;
				name();
				}
				break;
			case 43:
				EnterOuterAlt(_localctx, 43);
				{
				State = 2411;
				Match(ENABLE_P);
				State = 2412;
				Match(REPLICA);
				State = 2413;
				Match(RULE);
				State = 2414;
				name();
				}
				break;
			case 44:
				EnterOuterAlt(_localctx, 44);
				{
				State = 2415;
				Match(DISABLE_P);
				State = 2416;
				Match(RULE);
				State = 2417;
				name();
				}
				break;
			case 45:
				EnterOuterAlt(_localctx, 45);
				{
				State = 2418;
				Match(INHERIT);
				State = 2419;
				qualified_name();
				}
				break;
			case 46:
				EnterOuterAlt(_localctx, 46);
				{
				State = 2420;
				Match(NO);
				State = 2421;
				Match(INHERIT);
				State = 2422;
				qualified_name();
				}
				break;
			case 47:
				EnterOuterAlt(_localctx, 47);
				{
				State = 2423;
				Match(OF);
				State = 2424;
				any_name();
				}
				break;
			case 48:
				EnterOuterAlt(_localctx, 48);
				{
				State = 2425;
				Match(NOT);
				State = 2426;
				Match(OF);
				}
				break;
			case 49:
				EnterOuterAlt(_localctx, 49);
				{
				State = 2427;
				Match(OWNER);
				State = 2428;
				Match(TO);
				State = 2429;
				rolespec();
				}
				break;
			case 50:
				EnterOuterAlt(_localctx, 50);
				{
				State = 2430;
				Match(SET);
				State = 2431;
				Match(TABLESPACE);
				State = 2432;
				name();
				}
				break;
			case 51:
				EnterOuterAlt(_localctx, 51);
				{
				State = 2433;
				Match(SET);
				State = 2434;
				reloptions();
				}
				break;
			case 52:
				EnterOuterAlt(_localctx, 52);
				{
				State = 2435;
				Match(RESET);
				State = 2436;
				reloptions();
				}
				break;
			case 53:
				EnterOuterAlt(_localctx, 53);
				{
				State = 2437;
				Match(REPLICA);
				State = 2438;
				Match(IDENTITY_P);
				State = 2439;
				replica_identity();
				}
				break;
			case 54:
				EnterOuterAlt(_localctx, 54);
				{
				State = 2440;
				Match(ENABLE_P);
				State = 2441;
				Match(ROW);
				State = 2442;
				Match(LEVEL);
				State = 2443;
				Match(SECURITY);
				}
				break;
			case 55:
				EnterOuterAlt(_localctx, 55);
				{
				State = 2444;
				Match(DISABLE_P);
				State = 2445;
				Match(ROW);
				State = 2446;
				Match(LEVEL);
				State = 2447;
				Match(SECURITY);
				}
				break;
			case 56:
				EnterOuterAlt(_localctx, 56);
				{
				State = 2448;
				Match(FORCE);
				State = 2449;
				Match(ROW);
				State = 2450;
				Match(LEVEL);
				State = 2451;
				Match(SECURITY);
				}
				break;
			case 57:
				EnterOuterAlt(_localctx, 57);
				{
				State = 2452;
				Match(NO);
				State = 2453;
				Match(FORCE);
				State = 2454;
				Match(ROW);
				State = 2455;
				Match(LEVEL);
				State = 2456;
				Match(SECURITY);
				}
				break;
			case 58:
				EnterOuterAlt(_localctx, 58);
				{
				State = 2457;
				alter_generic_options();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_column_defaultContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SET() { return GetToken(PostgreSQLParser.SET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFAULT() { return GetToken(PostgreSQLParser.DEFAULT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public A_exprContext a_expr() {
			return GetRuleContext<A_exprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DROP() { return GetToken(PostgreSQLParser.DROP, 0); }
		public Alter_column_defaultContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_column_default; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterAlter_column_default(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitAlter_column_default(this);
		}
	}

	[RuleVersion(0)]
	public Alter_column_defaultContext alter_column_default() {
		Alter_column_defaultContext _localctx = new Alter_column_defaultContext(Context, State);
		EnterRule(_localctx, 106, RULE_alter_column_default);
		try {
			State = 2465;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case SET:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2460;
				Match(SET);
				State = 2461;
				Match(DEFAULT);
				State = 2462;
				a_expr();
				}
				break;
			case DROP:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2463;
				Match(DROP);
				State = 2464;
				Match(DEFAULT);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Opt_drop_behaviorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CASCADE() { return GetToken(PostgreSQLParser.CASCADE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RESTRICT() { return GetToken(PostgreSQLParser.RESTRICT, 0); }
		public Opt_drop_behaviorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_opt_drop_behavior; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterOpt_drop_behavior(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitOpt_drop_behavior(this);
		}
	}

	[RuleVersion(0)]
	public Opt_drop_behaviorContext opt_drop_behavior() {
		Opt_drop_behaviorContext _localctx = new Opt_drop_behaviorContext(Context, State);
		EnterRule(_localctx, 108, RULE_opt_drop_behavior);
		try {
			State = 2470;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case CASCADE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2467;
				Match(CASCADE);
				}
				break;
			case RESTRICT:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2468;
				Match(RESTRICT);
				}
				break;
			case Eof:
			case OPEN_PAREN:
			case COMMA:
			case SEMI:
			case ANALYSE:
			case ANALYZE:
			case CREATE:
			case DO:
			case FETCH:
			case GRANT:
			case INTO:
			case SELECT:
			case TABLE:
			case WITH:
			case ABORT_P:
			case ALTER:
			case BEGIN_P:
			case CHECKPOINT:
			case CLOSE:
			case CLUSTER:
			case COMMENT:
			case COMMIT:
			case COPY:
			case DEALLOCATE:
			case DECLARE:
			case DELETE_P:
			case DISCARD:
			case DROP:
			case EXECUTE:
			case EXPLAIN:
			case INSERT:
			case LISTEN:
			case LOAD:
			case LOCK_P:
			case MERGE:
			case MOVE:
			case NOTIFY:
			case PREPARE:
			case REASSIGN:
			case REFRESH:
			case REINDEX:
			case RELEASE:
			case RESET:
			case REVOKE:
			case ROLLBACK:
			case SAVEPOINT:
			case SECURITY:
			case SET:
			case SHOW:
			case START:
			case TRUNCATE:
			case UNLISTEN:
			case UPDATE:
			case VACUUM:
			case VALUES:
			case CALL:
			case IMPORT_P:
			case END_P:
			case MetaCommand:
				EnterOuterAlt(_localctx, 3);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Opt_collate_clauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLLATE() { return GetToken(PostgreSQLParser.COLLATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Any_nameContext any_name() {
			return GetRuleContext<Any_nameContext>(0);
		}
		public Opt_collate_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_opt_collate_clause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterOpt_collate_clause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitOpt_collate_clause(this);
		}
	}

	[RuleVersion(0)]
	public Opt_collate_clauseContext opt_collate_clause() {
		Opt_collate_clauseContext _localctx = new Opt_collate_clauseContext(Context, State);
		EnterRule(_localctx, 110, RULE_opt_collate_clause);
		try {
			State = 2475;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case COLLATE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2472;
				Match(COLLATE);
				State = 2473;
				any_name();
				}
				break;
			case Eof:
			case OPEN_PAREN:
			case CLOSE_PAREN:
			case COMMA:
			case SEMI:
			case ANALYSE:
			case ANALYZE:
			case CREATE:
			case DO:
			case FETCH:
			case GRANT:
			case INTO:
			case SELECT:
			case TABLE:
			case USING:
			case WITH:
			case ABORT_P:
			case ALTER:
			case BEGIN_P:
			case CASCADE:
			case CHECKPOINT:
			case CLOSE:
			case CLUSTER:
			case COMMENT:
			case COMMIT:
			case COPY:
			case DEALLOCATE:
			case DECLARE:
			case DELETE_P:
			case DISCARD:
			case DROP:
			case EXECUTE:
			case EXPLAIN:
			case INSERT:
			case LISTEN:
			case LOAD:
			case LOCK_P:
			case MERGE:
			case MOVE:
			case NOTIFY:
			case PREPARE:
			case REASSIGN:
			case REFRESH:
			case REINDEX:
			case RELEASE:
			case RESET:
			case RESTRICT:
			case REVOKE:
			case ROLLBACK:
			case SAVEPOINT:
			case SECURITY:
			case SET:
			case SHOW:
			case START:
			case TRUNCATE:
			case UNLISTEN:
			case UPDATE:
			case VACUUM:
			case VALUES:
			case CALL:
			case IMPORT_P:
			case END_P:
			case MetaCommand:
				EnterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_usingContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode USING() { return GetToken(PostgreSQLParser.USING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public A_exprContext a_expr() {
			return GetRuleContext<A_exprContext>(0);
		}
		public Alter_usingContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_using; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterAlter_using(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitAlter_using(this);
		}
	}

	[RuleVersion(0)]
	public Alter_usingContext alter_using() {
		Alter_usingContext _localctx = new Alter_usingContext(Context, State);
		EnterRule(_localctx, 112, RULE_alter_using);
		try {
			State = 2480;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case USING:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2477;
				Match(USING);
				State = 2478;
				a_expr();
				}
				break;
			case Eof:
			case OPEN_PAREN:
			case COMMA:
			case SEMI:
			case ANALYSE:
			case ANALYZE:
			case CREATE:
			case DO:
			case FETCH:
			case GRANT:
			case INTO:
			case SELECT:
			case TABLE:
			case WITH:
			case ABORT_P:
			case ALTER:
			case BEGIN_P:
			case CHECKPOINT:
			case CLOSE:
			case CLUSTER:
			case COMMENT:
			case COMMIT:
			case COPY:
			case DEALLOCATE:
			case DECLARE:
			case DELETE_P:
			case DISCARD:
			case DROP:
			case EXECUTE:
			case EXPLAIN:
			case INSERT:
			case LISTEN:
			case LOAD:
			case LOCK_P:
			case MERGE:
			case MOVE:
			case NOTIFY:
			case PREPARE:
			case REASSIGN:
			case REFRESH:
			case REINDEX:
			case RELEASE:
			case RESET:
			case REVOKE:
			case ROLLBACK:
			case SAVEPOINT:
			case SECURITY:
			case SET:
			case SHOW:
			case START:
			case TRUNCATE:
			case UNLISTEN:
			case UPDATE:
			case VACUUM:
			case VALUES:
			case CALL:
			case IMPORT_P:
			case END_P:
			case MetaCommand:
				EnterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Replica_identityContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOTHING() { return GetToken(PostgreSQLParser.NOTHING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FULL() { return GetToken(PostgreSQLParser.FULL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFAULT() { return GetToken(PostgreSQLParser.DEFAULT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode USING() { return GetToken(PostgreSQLParser.USING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INDEX() { return GetToken(PostgreSQLParser.INDEX, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		public Replica_identityContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_replica_identity; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterReplica_identity(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitReplica_identity(this);
		}
	}

	[RuleVersion(0)]
	public Replica_identityContext replica_identity() {
		Replica_identityContext _localctx = new Replica_identityContext(Context, State);
		EnterRule(_localctx, 114, RULE_replica_identity);
		try {
			State = 2488;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case NOTHING:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2482;
				Match(NOTHING);
				}
				break;
			case FULL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2483;
				Match(FULL);
				}
				break;
			case DEFAULT:
				EnterOuterAlt(_localctx, 3);
				{
				State = 2484;
				Match(DEFAULT);
				}
				break;
			case USING:
				EnterOuterAlt(_localctx, 4);
				{
				State = 2485;
				Match(USING);
				State = 2486;
				Match(INDEX);
				State = 2487;
				name();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReloptionsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAREN() { return GetToken(PostgreSQLParser.OPEN_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Reloption_listContext reloption_list() {
			return GetRuleContext<Reloption_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAREN() { return GetToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public ReloptionsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_reloptions; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterReloptions(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitReloptions(this);
		}
	}

	[RuleVersion(0)]
	public ReloptionsContext reloptions() {
		ReloptionsContext _localctx = new ReloptionsContext(Context, State);
		EnterRule(_localctx, 116, RULE_reloptions);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2490;
			Match(OPEN_PAREN);
			State = 2491;
			reloption_list();
			State = 2492;
			Match(CLOSE_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Opt_reloptionsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WITH() { return GetToken(PostgreSQLParser.WITH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ReloptionsContext reloptions() {
			return GetRuleContext<ReloptionsContext>(0);
		}
		public Opt_reloptionsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_opt_reloptions; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterOpt_reloptions(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitOpt_reloptions(this);
		}
	}

	[RuleVersion(0)]
	public Opt_reloptionsContext opt_reloptions() {
		Opt_reloptionsContext _localctx = new Opt_reloptionsContext(Context, State);
		EnterRule(_localctx, 118, RULE_opt_reloptions);
		try {
			State = 2497;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,55,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2494;
				Match(WITH);
				State = 2495;
				reloptions();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Reloption_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Reloption_elemContext[] reloption_elem() {
			return GetRuleContexts<Reloption_elemContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Reloption_elemContext reloption_elem(int i) {
			return GetRuleContext<Reloption_elemContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(PostgreSQLParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(PostgreSQLParser.COMMA, i);
		}
		public Reloption_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_reloption_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterReloption_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitReloption_list(this);
		}
	}

	[RuleVersion(0)]
	public Reloption_listContext reloption_list() {
		Reloption_listContext _localctx = new Reloption_listContext(Context, State);
		EnterRule(_localctx, 120, RULE_reloption_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2499;
			reloption_elem();
			State = 2504;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 2500;
				Match(COMMA);
				State = 2501;
				reloption_elem();
				}
				}
				State = 2506;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Reloption_elemContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public CollabelContext[] collabel() {
			return GetRuleContexts<CollabelContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public CollabelContext collabel(int i) {
			return GetRuleContext<CollabelContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL() { return GetToken(PostgreSQLParser.EQUAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Def_argContext def_arg() {
			return GetRuleContext<Def_argContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT() { return GetToken(PostgreSQLParser.DOT, 0); }
		public Reloption_elemContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_reloption_elem; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterReloption_elem(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitReloption_elem(this);
		}
	}

	[RuleVersion(0)]
	public Reloption_elemContext reloption_elem() {
		Reloption_elemContext _localctx = new Reloption_elemContext(Context, State);
		EnterRule(_localctx, 122, RULE_reloption_elem);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2507;
			collabel();
			State = 2516;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case EQUAL:
				{
				State = 2508;
				Match(EQUAL);
				State = 2509;
				def_arg();
				}
				break;
			case DOT:
				{
				State = 2510;
				Match(DOT);
				State = 2511;
				collabel();
				State = 2514;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==EQUAL) {
					{
					State = 2512;
					Match(EQUAL);
					State = 2513;
					def_arg();
					}
				}

				}
				break;
			case CLOSE_PAREN:
			case COMMA:
				break;
			default:
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_identity_column_option_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Alter_identity_column_optionContext[] alter_identity_column_option() {
			return GetRuleContexts<Alter_identity_column_optionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Alter_identity_column_optionContext alter_identity_column_option(int i) {
			return GetRuleContext<Alter_identity_column_optionContext>(i);
		}
		public Alter_identity_column_option_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_identity_column_option_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterAlter_identity_column_option_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitAlter_identity_column_option_list(this);
		}
	}

	[RuleVersion(0)]
	public Alter_identity_column_option_listContext alter_identity_column_option_list() {
		Alter_identity_column_option_listContext _localctx = new Alter_identity_column_option_listContext(Context, State);
		EnterRule(_localctx, 124, RULE_alter_identity_column_option_list);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 2519;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 2518;
					alter_identity_column_option();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 2521;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,59,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_identity_column_optionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RESTART() { return GetToken(PostgreSQLParser.RESTART, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Opt_withContext opt_with() {
			return GetRuleContext<Opt_withContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NumericonlyContext numericonly() {
			return GetRuleContext<NumericonlyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SET() { return GetToken(PostgreSQLParser.SET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SeqoptelemContext seqoptelem() {
			return GetRuleContext<SeqoptelemContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GENERATED() { return GetToken(PostgreSQLParser.GENERATED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Generated_whenContext generated_when() {
			return GetRuleContext<Generated_whenContext>(0);
		}
		public Alter_identity_column_optionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_identity_column_option; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterAlter_identity_column_option(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitAlter_identity_column_option(this);
		}
	}

	[RuleVersion(0)]
	public Alter_identity_column_optionContext alter_identity_column_option() {
		Alter_identity_column_optionContext _localctx = new Alter_identity_column_optionContext(Context, State);
		EnterRule(_localctx, 126, RULE_alter_identity_column_option);
		try {
			State = 2535;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case RESTART:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2523;
				Match(RESTART);
				State = 2527;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,60,Context) ) {
				case 1:
					{
					State = 2524;
					opt_with();
					State = 2525;
					numericonly();
					}
					break;
				}
				}
				break;
			case SET:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2529;
				Match(SET);
				State = 2533;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case AS:
				case CACHE:
				case CYCLE:
				case INCREMENT:
				case MAXVALUE:
				case MINVALUE:
				case NO:
				case OWNED:
				case RESTART:
				case SEQUENCE:
				case START:
					{
					State = 2530;
					seqoptelem();
					}
					break;
				case GENERATED:
					{
					State = 2531;
					Match(GENERATED);
					State = 2532;
					generated_when();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PartitionboundspecContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOR() { return GetToken(PostgreSQLParser.FOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VALUES() { return GetToken(PostgreSQLParser.VALUES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WITH() { return GetToken(PostgreSQLParser.WITH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] OPEN_PAREN() { return GetTokens(PostgreSQLParser.OPEN_PAREN); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAREN(int i) {
			return GetToken(PostgreSQLParser.OPEN_PAREN, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Hash_partboundContext hash_partbound() {
			return GetRuleContext<Hash_partboundContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] CLOSE_PAREN() { return GetTokens(PostgreSQLParser.CLOSE_PAREN); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAREN(int i) {
			return GetToken(PostgreSQLParser.CLOSE_PAREN, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IN_P() { return GetToken(PostgreSQLParser.IN_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Expr_listContext[] expr_list() {
			return GetRuleContexts<Expr_listContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Expr_listContext expr_list(int i) {
			return GetRuleContext<Expr_listContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FROM() { return GetToken(PostgreSQLParser.FROM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TO() { return GetToken(PostgreSQLParser.TO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFAULT() { return GetToken(PostgreSQLParser.DEFAULT, 0); }
		public PartitionboundspecContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_partitionboundspec; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterPartitionboundspec(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitPartitionboundspec(this);
		}
	}

	[RuleVersion(0)]
	public PartitionboundspecContext partitionboundspec() {
		PartitionboundspecContext _localctx = new PartitionboundspecContext(Context, State);
		EnterRule(_localctx, 128, RULE_partitionboundspec);
		try {
			State = 2563;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,63,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2537;
				Match(FOR);
				State = 2538;
				Match(VALUES);
				State = 2539;
				Match(WITH);
				State = 2540;
				Match(OPEN_PAREN);
				State = 2541;
				hash_partbound();
				State = 2542;
				Match(CLOSE_PAREN);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2544;
				Match(FOR);
				State = 2545;
				Match(VALUES);
				State = 2546;
				Match(IN_P);
				State = 2547;
				Match(OPEN_PAREN);
				State = 2548;
				expr_list();
				State = 2549;
				Match(CLOSE_PAREN);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 2551;
				Match(FOR);
				State = 2552;
				Match(VALUES);
				State = 2553;
				Match(FROM);
				State = 2554;
				Match(OPEN_PAREN);
				State = 2555;
				expr_list();
				State = 2556;
				Match(CLOSE_PAREN);
				State = 2557;
				Match(TO);
				State = 2558;
				Match(OPEN_PAREN);
				State = 2559;
				expr_list();
				State = 2560;
				Match(CLOSE_PAREN);
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 2562;
				Match(DEFAULT);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Hash_partbound_elemContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NonreservedwordContext nonreservedword() {
			return GetRuleContext<NonreservedwordContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IconstContext iconst() {
			return GetRuleContext<IconstContext>(0);
		}
		public Hash_partbound_elemContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_hash_partbound_elem; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterHash_partbound_elem(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitHash_partbound_elem(this);
		}
	}

	[RuleVersion(0)]
	public Hash_partbound_elemContext hash_partbound_elem() {
		Hash_partbound_elemContext _localctx = new Hash_partbound_elemContext(Context, State);
		EnterRule(_localctx, 130, RULE_hash_partbound_elem);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2565;
			nonreservedword();
			State = 2566;
			iconst();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Hash_partboundContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Hash_partbound_elemContext[] hash_partbound_elem() {
			return GetRuleContexts<Hash_partbound_elemContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Hash_partbound_elemContext hash_partbound_elem(int i) {
			return GetRuleContext<Hash_partbound_elemContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(PostgreSQLParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(PostgreSQLParser.COMMA, i);
		}
		public Hash_partboundContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_hash_partbound; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterHash_partbound(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitHash_partbound(this);
		}
	}

	[RuleVersion(0)]
	public Hash_partboundContext hash_partbound() {
		Hash_partboundContext _localctx = new Hash_partboundContext(Context, State);
		EnterRule(_localctx, 132, RULE_hash_partbound);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2568;
			hash_partbound_elem();
			State = 2573;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 2569;
				Match(COMMA);
				State = 2570;
				hash_partbound_elem();
				}
				}
				State = 2575;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AltercompositetypestmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALTER() { return GetToken(PostgreSQLParser.ALTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TYPE_P() { return GetToken(PostgreSQLParser.TYPE_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Any_nameContext any_name() {
			return GetRuleContext<Any_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Alter_type_cmdsContext alter_type_cmds() {
			return GetRuleContext<Alter_type_cmdsContext>(0);
		}
		public AltercompositetypestmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_altercompositetypestmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterAltercompositetypestmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitAltercompositetypestmt(this);
		}
	}

	[RuleVersion(0)]
	public AltercompositetypestmtContext altercompositetypestmt() {
		AltercompositetypestmtContext _localctx = new AltercompositetypestmtContext(Context, State);
		EnterRule(_localctx, 134, RULE_altercompositetypestmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2576;
			Match(ALTER);
			State = 2577;
			Match(TYPE_P);
			State = 2578;
			any_name();
			State = 2579;
			alter_type_cmds();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_type_cmdsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Alter_type_cmdContext[] alter_type_cmd() {
			return GetRuleContexts<Alter_type_cmdContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Alter_type_cmdContext alter_type_cmd(int i) {
			return GetRuleContext<Alter_type_cmdContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(PostgreSQLParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(PostgreSQLParser.COMMA, i);
		}
		public Alter_type_cmdsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_type_cmds; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterAlter_type_cmds(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitAlter_type_cmds(this);
		}
	}

	[RuleVersion(0)]
	public Alter_type_cmdsContext alter_type_cmds() {
		Alter_type_cmdsContext _localctx = new Alter_type_cmdsContext(Context, State);
		EnterRule(_localctx, 136, RULE_alter_type_cmds);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2581;
			alter_type_cmd();
			State = 2586;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 2582;
				Match(COMMA);
				State = 2583;
				alter_type_cmd();
				}
				}
				State = 2588;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_type_cmdContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ADD_P() { return GetToken(PostgreSQLParser.ADD_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ATTRIBUTE() { return GetToken(PostgreSQLParser.ATTRIBUTE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TablefuncelementContext tablefuncelement() {
			return GetRuleContext<TablefuncelementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Opt_drop_behaviorContext opt_drop_behavior() {
			return GetRuleContext<Opt_drop_behaviorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DROP() { return GetToken(PostgreSQLParser.DROP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ColidContext colid() {
			return GetRuleContext<ColidContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF_P() { return GetToken(PostgreSQLParser.IF_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXISTS() { return GetToken(PostgreSQLParser.EXISTS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALTER() { return GetToken(PostgreSQLParser.ALTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Opt_set_dataContext opt_set_data() {
			return GetRuleContext<Opt_set_dataContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TYPE_P() { return GetToken(PostgreSQLParser.TYPE_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypenameContext typename() {
			return GetRuleContext<TypenameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Opt_collate_clauseContext opt_collate_clause() {
			return GetRuleContext<Opt_collate_clauseContext>(0);
		}
		public Alter_type_cmdContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_type_cmd; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterAlter_type_cmd(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitAlter_type_cmd(this);
		}
	}

	[RuleVersion(0)]
	public Alter_type_cmdContext alter_type_cmd() {
		Alter_type_cmdContext _localctx = new Alter_type_cmdContext(Context, State);
		EnterRule(_localctx, 138, RULE_alter_type_cmd);
		try {
			State = 2612;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ADD_P:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2589;
				Match(ADD_P);
				State = 2590;
				Match(ATTRIBUTE);
				State = 2591;
				tablefuncelement();
				State = 2592;
				opt_drop_behavior();
				}
				break;
			case DROP:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2594;
				Match(DROP);
				State = 2595;
				Match(ATTRIBUTE);
				State = 2598;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,66,Context) ) {
				case 1:
					{
					State = 2596;
					Match(IF_P);
					State = 2597;
					Match(EXISTS);
					}
					break;
				}
				State = 2600;
				colid();
				State = 2601;
				opt_drop_behavior();
				}
				break;
			case ALTER:
				EnterOuterAlt(_localctx, 3);
				{
				State = 2603;
				Match(ALTER);
				State = 2604;
				Match(ATTRIBUTE);
				State = 2605;
				colid();
				State = 2606;
				opt_set_data();
				State = 2607;
				Match(TYPE_P);
				State = 2608;
				typename();
				State = 2609;
				opt_collate_clause();
				State = 2610;
				opt_drop_behavior();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CloseportalstmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE() { return GetToken(PostgreSQLParser.CLOSE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Cursor_nameContext cursor_name() {
			return GetRuleContext<Cursor_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALL() { return GetToken(PostgreSQLParser.ALL, 0); }
		public CloseportalstmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_closeportalstmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterCloseportalstmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitCloseportalstmt(this);
		}
	}

	[RuleVersion(0)]
	public CloseportalstmtContext closeportalstmt() {
		CloseportalstmtContext _localctx = new CloseportalstmtContext(Context, State);
		EnterRule(_localctx, 140, RULE_closeportalstmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2614;
			Match(CLOSE);
			State = 2617;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case AND:
			case ARRAY:
			case COLLATE:
			case COLUMN:
			case CONSTRAINT:
			case DEFAULT:
			case DO:
			case FETCH:
			case TABLE:
			case IS:
			case LEFT:
			case OUTER_P:
			case OVER:
			case RIGHT:
			case ABORT_P:
			case ABSOLUTE_P:
			case ACCESS:
			case ACTION:
			case ADD_P:
			case ADMIN:
			case AFTER:
			case AGGREGATE:
			case ALSO:
			case ALTER:
			case ALWAYS:
			case ASSERTION:
			case ASSIGNMENT:
			case AT:
			case ATTRIBUTE:
			case BACKWARD:
			case BEFORE:
			case BEGIN_P:
			case BY:
			case CACHE:
			case CALLED:
			case CASCADE:
			case CASCADED:
			case CATALOG:
			case CHAIN:
			case CHARACTERISTICS:
			case CHECKPOINT:
			case CLASS:
			case CLOSE:
			case CLUSTER:
			case COMMENT:
			case COMMENTS:
			case COMMIT:
			case COMMITTED:
			case CONFIGURATION:
			case CONNECTION:
			case CONSTRAINTS:
			case CONTENT_P:
			case CONTINUE_P:
			case CONVERSION_P:
			case COPY:
			case COST:
			case CSV:
			case CURSOR:
			case CYCLE:
			case DATA_P:
			case DATABASE:
			case DAY_P:
			case DEALLOCATE:
			case DECLARE:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE_P:
			case DELIMITER:
			case DELIMITERS:
			case DICTIONARY:
			case DISABLE_P:
			case DISCARD:
			case DOCUMENT_P:
			case DOMAIN_P:
			case DOUBLE_P:
			case DROP:
			case EACH:
			case ENABLE_P:
			case ENCODING:
			case ENCRYPTED:
			case ENUM_P:
			case ESCAPE:
			case EVENT:
			case EXCLUDE:
			case EXCLUDING:
			case EXCLUSIVE:
			case EXECUTE:
			case EXPLAIN:
			case EXTENSION:
			case EXTERNAL:
			case FAMILY:
			case FIRST_P:
			case FOLLOWING:
			case FORCE:
			case FORWARD:
			case FUNCTION:
			case FUNCTIONS:
			case GLOBAL:
			case GRANTED:
			case HANDLER:
			case HEADER_P:
			case HOLD:
			case HOUR_P:
			case IDENTITY_P:
			case IF_P:
			case IMMEDIATE:
			case IMMUTABLE:
			case IMPLICIT_P:
			case INCLUDING:
			case INCREMENT:
			case INDEX:
			case INDEXES:
			case INHERIT:
			case INHERITS:
			case INLINE_P:
			case INSENSITIVE:
			case INSERT:
			case INSTEAD:
			case INVOKER:
			case ISOLATION:
			case KEY:
			case LABEL:
			case LANGUAGE:
			case LARGE_P:
			case LAST_P:
			case LEAKPROOF:
			case LEVEL:
			case LISTEN:
			case LOAD:
			case LOCAL:
			case LOCATION:
			case LOCK_P:
			case MAPPING:
			case MATCH:
			case MATERIALIZED:
			case MAXVALUE:
			case MINUTE_P:
			case MINVALUE:
			case MODE:
			case MONTH_P:
			case MOVE:
			case NAME_P:
			case NAMES:
			case NEXT:
			case NO:
			case NOTHING:
			case NOTIFY:
			case NOWAIT:
			case NULLS_P:
			case OBJECT_P:
			case OF:
			case OFF:
			case OIDS:
			case OPERATOR:
			case OPTION:
			case OPTIONS:
			case OWNED:
			case OWNER:
			case PARSER:
			case PARTIAL:
			case PARTITION:
			case PASSING:
			case PASSWORD:
			case PLANS:
			case PRECEDING:
			case PREPARE:
			case PREPARED:
			case PRESERVE:
			case PRIOR:
			case PRIVILEGES:
			case PROCEDURAL:
			case PROCEDURE:
			case PROGRAM:
			case QUOTE:
			case RANGE:
			case READ:
			case REASSIGN:
			case RECHECK:
			case RECURSIVE:
			case REF:
			case REFRESH:
			case REINDEX:
			case RELATIVE_P:
			case RELEASE:
			case RENAME:
			case REPEATABLE:
			case REPLACE:
			case REPLICA:
			case RESET:
			case RESTART:
			case RESTRICT:
			case RETURNS:
			case REVOKE:
			case ROLE:
			case ROLLBACK:
			case ROWS:
			case RULE:
			case SAVEPOINT:
			case SCHEMA:
			case SCROLL:
			case SEARCH:
			case SECOND_P:
			case SECURITY:
			case SEQUENCE:
			case SEQUENCES:
			case SERIALIZABLE:
			case SERVER:
			case SESSION:
			case SET:
			case SHARE:
			case SHOW:
			case SIMPLE:
			case SNAPSHOT:
			case STABLE:
			case STANDALONE_P:
			case START:
			case STATEMENT:
			case STATISTICS:
			case STDIN:
			case STDOUT:
			case STORAGE:
			case STRICT_P:
			case STRIP_P:
			case SYSID:
			case SYSTEM_P:
			case TABLES:
			case TABLESPACE:
			case TEMP:
			case TEMPLATE:
			case TEMPORARY:
			case TEXT_P:
			case TRANSACTION:
			case TRIGGER:
			case TRUNCATE:
			case TRUSTED:
			case TYPE_P:
			case TYPES_P:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNENCRYPTED:
			case UNKNOWN:
			case UNLISTEN:
			case UNLOGGED:
			case UNTIL:
			case UPDATE:
			case VACUUM:
			case VALID:
			case VALIDATE:
			case VALIDATOR:
			case VARYING:
			case VERSION_P:
			case VIEW:
			case VOLATILE:
			case WHITESPACE_P:
			case WITHOUT:
			case WORK:
			case WRAPPER:
			case WRITE:
			case XML_P:
			case YEAR_P:
			case YES_P:
			case ZONE:
			case BETWEEN:
			case BIGINT:
			case BIT:
			case BOOLEAN_P:
			case CHAR_P:
			case CHARACTER:
			case COALESCE:
			case DEC:
			case DECIMAL_P:
			case EXISTS:
			case EXTRACT:
			case FLOAT_P:
			case GREATEST:
			case INOUT:
			case INT_P:
			case INTEGER:
			case INTERVAL:
			case LEAST:
			case NATIONAL:
			case NCHAR:
			case NONE:
			case NULLIF:
			case NUMERIC:
			case OVERLAY:
			case POSITION:
			case PRECISION:
			case REAL:
			case ROW:
			case SETOF:
			case SMALLINT:
			case SUBSTRING:
			case TIME:
			case TIMESTAMP:
			case TREAT:
			case TRIM:
			case VALUES:
			case VARCHAR:
			case XMLATTRIBUTES:
			case XMLCOMMENT:
			case XMLAGG:
			case XML_IS_WELL_FORMED:
			case XML_IS_WELL_FORMED_DOCUMENT:
			case XML_IS_WELL_FORMED_CONTENT:
			case XPATH:
			case XPATH_EXISTS:
			case XMLCONCAT:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLPARSE:
			case XMLPI:
			case XMLROOT:
			case XMLSERIALIZE:
			case CALL:
			case CURRENT_P:
			case ATTACH:
			case DETACH:
			case EXPRESSION:
			case GENERATED:
			case LOGGED:
			case STORED:
			case INCLUDE:
			case ROUTINE:
			case TRANSFORM:
			case IMPORT_P:
			case POLICY:
			case METHOD:
			case REFERENCING:
			case NEW:
			case OLD:
			case VALUE_P:
			case SUBSCRIPTION:
			case PUBLICATION:
			case OUT_P:
			case ROUTINES:
			case SCHEMAS:
			case PROCEDURES:
			case INPUT_P:
			case SUPPORT:
			case PARALLEL:
			case SQL_P:
			case DEPENDS:
			case OVERRIDING:
			case CONFLICT:
			case SKIP_P:
			case LOCKED:
			case TIES:
			case ROLLUP:
			case CUBE:
			case GROUPING:
			case SETS:
			case ORDINALITY:
			case XMLTABLE:
			case COLUMNS:
			case XMLNAMESPACES:
			case ROWTYPE:
			case NORMALIZED:
			case WITHIN:
			case FILTER:
			case GROUPS:
			case OTHERS:
			case NFC:
			case NFD:
			case NFKC:
			case NFKD:
			case UESCAPE:
			case VIEWS:
			case NORMALIZE:
			case DUMP:
			case PRINT_STRICT_PARAMS:
			case VARIABLE_CONFLICT:
			case ERROR:
			case USE_VARIABLE:
			case USE_COLUMN:
			case ALIAS:
			case CONSTANT:
			case PERFORM:
			case GET:
			case DIAGNOSTICS:
			case STACKED:
			case ELSIF:
			case REVERSE:
			case SLICE:
			case EXIT:
			case RETURN:
			case QUERY:
			case RAISE:
			case SQLSTATE:
			case DEBUG:
			case LOG:
			case INFO:
			case NOTICE:
			case WARNING:
			case EXCEPTION:
			case ASSERT:
			case OPEN:
			case ABS:
			case CBRT:
			case CEIL:
			case CEILING:
			case DEGREES:
			case DIV:
			case EXP:
			case FACTORIAL:
			case FLOOR:
			case GCD:
			case LCM:
			case LN:
			case LOG10:
			case MIN_SCALE:
			case MOD:
			case PI:
			case POWER:
			case RADIANS:
			case ROUND:
			case SCALE:
			case SIGN:
			case SQRT:
			case TRIM_SCALE:
			case TRUNC:
			case WIDTH_BUCKET:
			case RANDOM:
			case SETSEED:
			case ACOS:
			case ACOSD:
			case ASIN:
			case ASIND:
			case ATAN:
			case ATAND:
			case ATAN2:
			case ATAN2D:
			case COS:
			case COSD:
			case COT:
			case COTD:
			case SIN:
			case SIND:
			case TAN:
			case TAND:
			case SINH:
			case COSH:
			case TANH:
			case ASINH:
			case ACOSH:
			case ATANH:
			case BIT_LENGTH:
			case CHAR_LENGTH:
			case CHARACTER_LENGTH:
			case LOWER:
			case OCTET_LENGTH:
			case UPPER:
			case ASCII:
			case BTRIM:
			case CHR:
			case CONCAT:
			case CONCAT_WS:
			case FORMAT:
			case INITCAP:
			case LENGTH:
			case LPAD:
			case LTRIM:
			case MD5:
			case PARSE_IDENT:
			case PG_CLIENT_ENCODING:
			case QUOTE_IDENT:
			case QUOTE_LITERAL:
			case QUOTE_NULLABLE:
			case REGEXP_COUNT:
			case REGEXP_INSTR:
			case REGEXP_LIKE:
			case REGEXP_MATCH:
			case REGEXP_MATCHES:
			case REGEXP_REPLACE:
			case REGEXP_SPLIT_TO_ARRAY:
			case REGEXP_SPLIT_TO_TABLE:
			case REGEXP_SUBSTR:
			case REPEAT:
			case RPAD:
			case RTRIM:
			case SPLIT_PART:
			case STARTS_WITH:
			case STRING_TO_ARRAY:
			case STRING_TO_TABLE:
			case STRPOS:
			case SUBSTR:
			case TO_ASCII:
			case TO_HEX:
			case TRANSLATE:
			case UNISTR:
			case AGE:
			case CLOCK_TIMESTAMP:
			case DATE_BIN:
			case DATE_PART:
			case DATE_TRUNC:
			case ISFINITE:
			case JUSTIFY_DAYS:
			case JUSTIFY_HOURS:
			case JUSTIFY_INTERVAL:
			case MAKE_DATE:
			case MAKE_INTERVAL:
			case MAKE_TIME:
			case MAKE_TIMESTAMP:
			case MAKE_TIMESTAMPTZ:
			case NOW:
			case STATEMENT_TIMESTAMP:
			case TIMEOFDAY:
			case TRANSACTION_TIMESTAMP:
			case TO_TIMESTAMP:
			case TO_CHAR:
			case TO_DATE:
			case TO_NUMBER:
			case Identifier:
			case QuotedIdentifier:
			case UnicodeQuotedIdentifier:
			case PLSQLVARIABLENAME:
			case PLSQLIDENTIFIER:
				{
				State = 2615;
				cursor_name();
				}
				break;
			case ALL:
				{
				State = 2616;
				Match(ALL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CopystmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COPY() { return GetToken(PostgreSQLParser.COPY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Opt_binaryContext opt_binary() {
			return GetRuleContext<Opt_binaryContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Qualified_nameContext qualified_name() {
			return GetRuleContext<Qualified_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Opt_column_listContext opt_column_list() {
			return GetRuleContext<Opt_column_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Copy_fromContext copy_from() {
			return GetRuleContext<Copy_fromContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Opt_programContext opt_program() {
			return GetRuleContext<Opt_programContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Copy_file_nameContext copy_file_name() {
			return GetRuleContext<Copy_file_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Copy_delimiterContext copy_delimiter() {
			return GetRuleContext<Copy_delimiterContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Opt_withContext opt_with() {
			return GetRuleContext<Opt_withContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Copy_optionsContext copy_options() {
			return GetRuleContext<Copy_optionsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Where_clauseContext where_clause() {
			return GetRuleContext<Where_clauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAREN() { return GetToken(PostgreSQLParser.OPEN_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public PreparablestmtContext preparablestmt() {
			return GetRuleContext<PreparablestmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAREN() { return GetToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TO() { return GetToken(PostgreSQLParser.TO, 0); }
		public CopystmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_copystmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterCopystmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitCopystmt(this);
		}
	}

	[RuleVersion(0)]
	public CopystmtContext copystmt() {
		CopystmtContext _localctx = new CopystmtContext(Context, State);
		EnterRule(_localctx, 142, RULE_copystmt);
		try {
			State = 2641;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,69,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2619;
				Match(COPY);
				State = 2620;
				opt_binary();
				State = 2621;
				qualified_name();
				State = 2622;
				opt_column_list();
				State = 2623;
				copy_from();
				State = 2624;
				opt_program();
				State = 2625;
				copy_file_name();
				State = 2626;
				copy_delimiter();
				State = 2627;
				opt_with();
				State = 2628;
				copy_options();
				State = 2629;
				where_clause();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2631;
				Match(COPY);
				State = 2632;
				Match(OPEN_PAREN);
				State = 2633;
				preparablestmt();
				State = 2634;
				Match(CLOSE_PAREN);
				State = 2635;
				Match(TO);
				State = 2636;
				opt_program();
				State = 2637;
				copy_file_name();
				State = 2638;
				opt_with();
				State = 2639;
				copy_options();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Copy_fromContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FROM() { return GetToken(PostgreSQLParser.FROM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TO() { return GetToken(PostgreSQLParser.TO, 0); }
		public Copy_fromContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_copy_from; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterCopy_from(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitCopy_from(this);
		}
	}

	[RuleVersion(0)]
	public Copy_fromContext copy_from() {
		Copy_fromContext _localctx = new Copy_fromContext(Context, State);
		EnterRule(_localctx, 144, RULE_copy_from);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2643;
			_la = TokenStream.LA(1);
			if ( !(_la==FROM || _la==TO) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Opt_programContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PROGRAM() { return GetToken(PostgreSQLParser.PROGRAM, 0); }
		public Opt_programContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_opt_program; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterOpt_program(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitOpt_program(this);
		}
	}

	[RuleVersion(0)]
	public Opt_programContext opt_program() {
		Opt_programContext _localctx = new Opt_programContext(Context, State);
		EnterRule(_localctx, 146, RULE_opt_program);
		try {
			State = 2647;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case PROGRAM:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2645;
				Match(PROGRAM);
				}
				break;
			case STDIN:
			case STDOUT:
			case StringConstant:
			case UnicodeEscapeStringConstant:
			case BeginDollarStringConstant:
			case EscapeStringConstant:
				EnterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Copy_file_nameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SconstContext sconst() {
			return GetRuleContext<SconstContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STDIN() { return GetToken(PostgreSQLParser.STDIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STDOUT() { return GetToken(PostgreSQLParser.STDOUT, 0); }
		public Copy_file_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_copy_file_name; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterCopy_file_name(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitCopy_file_name(this);
		}
	}

	[RuleVersion(0)]
	public Copy_file_nameContext copy_file_name() {
		Copy_file_nameContext _localctx = new Copy_file_nameContext(Context, State);
		EnterRule(_localctx, 148, RULE_copy_file_name);
		try {
			State = 2652;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case StringConstant:
			case UnicodeEscapeStringConstant:
			case BeginDollarStringConstant:
			case EscapeStringConstant:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2649;
				sconst();
				}
				break;
			case STDIN:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2650;
				Match(STDIN);
				}
				break;
			case STDOUT:
				EnterOuterAlt(_localctx, 3);
				{
				State = 2651;
				Match(STDOUT);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Copy_optionsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Copy_opt_listContext copy_opt_list() {
			return GetRuleContext<Copy_opt_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAREN() { return GetToken(PostgreSQLParser.OPEN_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Copy_generic_opt_listContext copy_generic_opt_list() {
			return GetRuleContext<Copy_generic_opt_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAREN() { return GetToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public Copy_optionsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_copy_options; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterCopy_options(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitCopy_options(this);
		}
	}

	[RuleVersion(0)]
	public Copy_optionsContext copy_options() {
		Copy_optionsContext _localctx = new Copy_optionsContext(Context, State);
		EnterRule(_localctx, 150, RULE_copy_options);
		try {
			State = 2659;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,72,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2654;
				copy_opt_list();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2655;
				Match(OPEN_PAREN);
				State = 2656;
				copy_generic_opt_list();
				State = 2657;
				Match(CLOSE_PAREN);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Copy_opt_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Copy_opt_itemContext[] copy_opt_item() {
			return GetRuleContexts<Copy_opt_itemContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Copy_opt_itemContext copy_opt_item(int i) {
			return GetRuleContext<Copy_opt_itemContext>(i);
		}
		public Copy_opt_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_copy_opt_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterCopy_opt_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitCopy_opt_list(this);
		}
	}

	[RuleVersion(0)]
	public Copy_opt_listContext copy_opt_list() {
		Copy_opt_listContext _localctx = new Copy_opt_listContext(Context, State);
		EnterRule(_localctx, 152, RULE_copy_opt_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2664;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la - 78)) & ~0x3f) == 0 && ((1L << (_la - 78)) & 17716740097L) != 0 || (((_la - 172)) & ~0x3f) == 0 && ((1L << (_la - 172)) & 35459325497345L) != 0 || _la==QUOTE) {
				{
				{
				State = 2661;
				copy_opt_item();
				}
				}
				State = 2666;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Copy_opt_itemContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BINARY() { return GetToken(PostgreSQLParser.BINARY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FREEZE() { return GetToken(PostgreSQLParser.FREEZE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DELIMITER() { return GetToken(PostgreSQLParser.DELIMITER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Opt_asContext opt_as() {
			return GetRuleContext<Opt_asContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SconstContext sconst() {
			return GetRuleContext<SconstContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NULL_P() { return GetToken(PostgreSQLParser.NULL_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CSV() { return GetToken(PostgreSQLParser.CSV, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HEADER_P() { return GetToken(PostgreSQLParser.HEADER_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode QUOTE() { return GetToken(PostgreSQLParser.QUOTE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ESCAPE() { return GetToken(PostgreSQLParser.ESCAPE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FORCE() { return GetToken(PostgreSQLParser.FORCE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ColumnlistContext columnlist() {
			return GetRuleContext<ColumnlistContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STAR() { return GetToken(PostgreSQLParser.STAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT() { return GetToken(PostgreSQLParser.NOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ENCODING() { return GetToken(PostgreSQLParser.ENCODING, 0); }
		public Copy_opt_itemContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_copy_opt_item; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterCopy_opt_item(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitCopy_opt_item(this);
		}
	}

	[RuleVersion(0)]
	public Copy_opt_itemContext copy_opt_item() {
		Copy_opt_itemContext _localctx = new Copy_opt_itemContext(Context, State);
		EnterRule(_localctx, 154, RULE_copy_opt_item);
		try {
			State = 2702;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,74,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2667;
				Match(BINARY);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2668;
				Match(FREEZE);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 2669;
				Match(DELIMITER);
				State = 2670;
				opt_as();
				State = 2671;
				sconst();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 2673;
				Match(NULL_P);
				State = 2674;
				opt_as();
				State = 2675;
				sconst();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 2677;
				Match(CSV);
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 2678;
				Match(HEADER_P);
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 2679;
				Match(QUOTE);
				State = 2680;
				opt_as();
				State = 2681;
				sconst();
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 2683;
				Match(ESCAPE);
				State = 2684;
				opt_as();
				State = 2685;
				sconst();
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 2687;
				Match(FORCE);
				State = 2688;
				Match(QUOTE);
				State = 2689;
				columnlist();
				}
				break;
			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 2690;
				Match(FORCE);
				State = 2691;
				Match(QUOTE);
				State = 2692;
				Match(STAR);
				}
				break;
			case 11:
				EnterOuterAlt(_localctx, 11);
				{
				State = 2693;
				Match(FORCE);
				State = 2694;
				Match(NOT);
				State = 2695;
				Match(NULL_P);
				State = 2696;
				columnlist();
				}
				break;
			case 12:
				EnterOuterAlt(_localctx, 12);
				{
				State = 2697;
				Match(FORCE);
				State = 2698;
				Match(NULL_P);
				State = 2699;
				columnlist();
				}
				break;
			case 13:
				EnterOuterAlt(_localctx, 13);
				{
				State = 2700;
				Match(ENCODING);
				State = 2701;
				sconst();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Opt_binaryContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BINARY() { return GetToken(PostgreSQLParser.BINARY, 0); }
		public Opt_binaryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_opt_binary; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterOpt_binary(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitOpt_binary(this);
		}
	}

	[RuleVersion(0)]
	public Opt_binaryContext opt_binary() {
		Opt_binaryContext _localctx = new Opt_binaryContext(Context, State);
		EnterRule(_localctx, 156, RULE_opt_binary);
		try {
			State = 2706;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case BINARY:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2704;
				Match(BINARY);
				}
				break;
			case AND:
			case ARRAY:
			case COLLATE:
			case COLUMN:
			case CONSTRAINT:
			case DEFAULT:
			case DO:
			case FETCH:
			case TABLE:
			case IS:
			case LEFT:
			case OUTER_P:
			case OVER:
			case RIGHT:
			case ABORT_P:
			case ABSOLUTE_P:
			case ACCESS:
			case ACTION:
			case ADD_P:
			case ADMIN:
			case AFTER:
			case AGGREGATE:
			case ALSO:
			case ALTER:
			case ALWAYS:
			case ASSERTION:
			case ASSIGNMENT:
			case AT:
			case ATTRIBUTE:
			case BACKWARD:
			case BEFORE:
			case BEGIN_P:
			case BY:
			case CACHE:
			case CALLED:
			case CASCADE:
			case CASCADED:
			case CATALOG:
			case CHAIN:
			case CHARACTERISTICS:
			case CHECKPOINT:
			case CLASS:
			case CLOSE:
			case CLUSTER:
			case COMMENT:
			case COMMENTS:
			case COMMIT:
			case COMMITTED:
			case CONFIGURATION:
			case CONNECTION:
			case CONSTRAINTS:
			case CONTENT_P:
			case CONTINUE_P:
			case CONVERSION_P:
			case COPY:
			case COST:
			case CSV:
			case CURSOR:
			case CYCLE:
			case DATA_P:
			case DATABASE:
			case DAY_P:
			case DEALLOCATE:
			case DECLARE:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE_P:
			case DELIMITER:
			case DELIMITERS:
			case DICTIONARY:
			case DISABLE_P:
			case DISCARD:
			case DOCUMENT_P:
			case DOMAIN_P:
			case DOUBLE_P:
			case DROP:
			case EACH:
			case ENABLE_P:
			case ENCODING:
			case ENCRYPTED:
			case ENUM_P:
			case ESCAPE:
			case EVENT:
			case EXCLUDE:
			case EXCLUDING:
			case EXCLUSIVE:
			case EXECUTE:
			case EXPLAIN:
			case EXTENSION:
			case EXTERNAL:
			case FAMILY:
			case FIRST_P:
			case FOLLOWING:
			case FORCE:
			case FORWARD:
			case FUNCTION:
			case FUNCTIONS:
			case GLOBAL:
			case GRANTED:
			case HANDLER:
			case HEADER_P:
			case HOLD:
			case HOUR_P:
			case IDENTITY_P:
			case IF_P:
			case IMMEDIATE:
			case IMMUTABLE:
			case IMPLICIT_P:
			case INCLUDING:
			case INCREMENT:
			case INDEX:
			case INDEXES:
			case INHERIT:
			case INHERITS:
			case INLINE_P:
			case INSENSITIVE:
			case INSERT:
			case INSTEAD:
			case INVOKER:
			case ISOLATION:
			case KEY:
			case LABEL:
			case LANGUAGE:
			case LARGE_P:
			case LAST_P:
			case LEAKPROOF:
			case LEVEL:
			case LISTEN:
			case LOAD:
			case LOCAL:
			case LOCATION:
			case LOCK_P:
			case MAPPING:
			case MATCH:
			case MATERIALIZED:
			case MAXVALUE:
			case MINUTE_P:
			case MINVALUE:
			case MODE:
			case MONTH_P:
			case MOVE:
			case NAME_P:
			case NAMES:
			case NEXT:
			case NO:
			case NOTHING:
			case NOTIFY:
			case NOWAIT:
			case NULLS_P:
			case OBJECT_P:
			case OF:
			case OFF:
			case OIDS:
			case OPERATOR:
			case OPTION:
			case OPTIONS:
			case OWNED:
			case OWNER:
			case PARSER:
			case PARTIAL:
			case PARTITION:
			case PASSING:
			case PASSWORD:
			case PLANS:
			case PRECEDING:
			case PREPARE:
			case PREPARED:
			case PRESERVE:
			case PRIOR:
			case PRIVILEGES:
			case PROCEDURAL:
			case PROCEDURE:
			case PROGRAM:
			case QUOTE:
			case RANGE:
			case READ:
			case REASSIGN:
			case RECHECK:
			case RECURSIVE:
			case REF:
			case REFRESH:
			case REINDEX:
			case RELATIVE_P:
			case RELEASE:
			case RENAME:
			case REPEATABLE:
			case REPLACE:
			case REPLICA:
			case RESET:
			case RESTART:
			case RESTRICT:
			case RETURNS:
			case REVOKE:
			case ROLE:
			case ROLLBACK:
			case ROWS:
			case RULE:
			case SAVEPOINT:
			case SCHEMA:
			case SCROLL:
			case SEARCH:
			case SECOND_P:
			case SECURITY:
			case SEQUENCE:
			case SEQUENCES:
			case SERIALIZABLE:
			case SERVER:
			case SESSION:
			case SET:
			case SHARE:
			case SHOW:
			case SIMPLE:
			case SNAPSHOT:
			case STABLE:
			case STANDALONE_P:
			case START:
			case STATEMENT:
			case STATISTICS:
			case STDIN:
			case STDOUT:
			case STORAGE:
			case STRICT_P:
			case STRIP_P:
			case SYSID:
			case SYSTEM_P:
			case TABLES:
			case TABLESPACE:
			case TEMP:
			case TEMPLATE:
			case TEMPORARY:
			case TEXT_P:
			case TRANSACTION:
			case TRIGGER:
			case TRUNCATE:
			case TRUSTED:
			case TYPE_P:
			case TYPES_P:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNENCRYPTED:
			case UNKNOWN:
			case UNLISTEN:
			case UNLOGGED:
			case UNTIL:
			case UPDATE:
			case VACUUM:
			case VALID:
			case VALIDATE:
			case VALIDATOR:
			case VARYING:
			case VERSION_P:
			case VIEW:
			case VOLATILE:
			case WHITESPACE_P:
			case WITHOUT:
			case WORK:
			case WRAPPER:
			case WRITE:
			case XML_P:
			case YEAR_P:
			case YES_P:
			case ZONE:
			case BETWEEN:
			case BIGINT:
			case BIT:
			case BOOLEAN_P:
			case CHAR_P:
			case CHARACTER:
			case COALESCE:
			case DEC:
			case DECIMAL_P:
			case EXISTS:
			case EXTRACT:
			case FLOAT_P:
			case GREATEST:
			case INOUT:
			case INT_P:
			case INTEGER:
			case INTERVAL:
			case LEAST:
			case NATIONAL:
			case NCHAR:
			case NONE:
			case NULLIF:
			case NUMERIC:
			case OVERLAY:
			case POSITION:
			case PRECISION:
			case REAL:
			case ROW:
			case SETOF:
			case SMALLINT:
			case SUBSTRING:
			case TIME:
			case TIMESTAMP:
			case TREAT:
			case TRIM:
			case VALUES:
			case VARCHAR:
			case XMLATTRIBUTES:
			case XMLCOMMENT:
			case XMLAGG:
			case XML_IS_WELL_FORMED:
			case XML_IS_WELL_FORMED_DOCUMENT:
			case XML_IS_WELL_FORMED_CONTENT:
			case XPATH:
			case XPATH_EXISTS:
			case XMLCONCAT:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLPARSE:
			case XMLPI:
			case XMLROOT:
			case XMLSERIALIZE:
			case CALL:
			case CURRENT_P:
			case ATTACH:
			case DETACH:
			case EXPRESSION:
			case GENERATED:
			case LOGGED:
			case STORED:
			case INCLUDE:
			case ROUTINE:
			case TRANSFORM:
			case IMPORT_P:
			case POLICY:
			case METHOD:
			case REFERENCING:
			case NEW:
			case OLD:
			case VALUE_P:
			case SUBSCRIPTION:
			case PUBLICATION:
			case OUT_P:
			case ROUTINES:
			case SCHEMAS:
			case PROCEDURES:
			case INPUT_P:
			case SUPPORT:
			case PARALLEL:
			case SQL_P:
			case DEPENDS:
			case OVERRIDING:
			case CONFLICT:
			case SKIP_P:
			case LOCKED:
			case TIES:
			case ROLLUP:
			case CUBE:
			case GROUPING:
			case SETS:
			case ORDINALITY:
			case XMLTABLE:
			case COLUMNS:
			case XMLNAMESPACES:
			case ROWTYPE:
			case NORMALIZED:
			case WITHIN:
			case FILTER:
			case GROUPS:
			case OTHERS:
			case NFC:
			case NFD:
			case NFKC:
			case NFKD:
			case UESCAPE:
			case VIEWS:
			case NORMALIZE:
			case DUMP:
			case PRINT_STRICT_PARAMS:
			case VARIABLE_CONFLICT:
			case ERROR:
			case USE_VARIABLE:
			case USE_COLUMN:
			case ALIAS:
			case CONSTANT:
			case PERFORM:
			case GET:
			case DIAGNOSTICS:
			case STACKED:
			case ELSIF:
			case REVERSE:
			case SLICE:
			case EXIT:
			case RETURN:
			case QUERY:
			case RAISE:
			case SQLSTATE:
			case DEBUG:
			case LOG:
			case INFO:
			case NOTICE:
			case WARNING:
			case EXCEPTION:
			case ASSERT:
			case OPEN:
			case ABS:
			case CBRT:
			case CEIL:
			case CEILING:
			case DEGREES:
			case DIV:
			case EXP:
			case FACTORIAL:
			case FLOOR:
			case GCD:
			case LCM:
			case LN:
			case LOG10:
			case MIN_SCALE:
			case MOD:
			case PI:
			case POWER:
			case RADIANS:
			case ROUND:
			case SCALE:
			case SIGN:
			case SQRT:
			case TRIM_SCALE:
			case TRUNC:
			case WIDTH_BUCKET:
			case RANDOM:
			case SETSEED:
			case ACOS:
			case ACOSD:
			case ASIN:
			case ASIND:
			case ATAN:
			case ATAND:
			case ATAN2:
			case ATAN2D:
			case COS:
			case COSD:
			case COT:
			case COTD:
			case SIN:
			case SIND:
			case TAN:
			case TAND:
			case SINH:
			case COSH:
			case TANH:
			case ASINH:
			case ACOSH:
			case ATANH:
			case BIT_LENGTH:
			case CHAR_LENGTH:
			case CHARACTER_LENGTH:
			case LOWER:
			case OCTET_LENGTH:
			case UPPER:
			case ASCII:
			case BTRIM:
			case CHR:
			case CONCAT:
			case CONCAT_WS:
			case FORMAT:
			case INITCAP:
			case LENGTH:
			case LPAD:
			case LTRIM:
			case MD5:
			case PARSE_IDENT:
			case PG_CLIENT_ENCODING:
			case QUOTE_IDENT:
			case QUOTE_LITERAL:
			case QUOTE_NULLABLE:
			case REGEXP_COUNT:
			case REGEXP_INSTR:
			case REGEXP_LIKE:
			case REGEXP_MATCH:
			case REGEXP_MATCHES:
			case REGEXP_REPLACE:
			case REGEXP_SPLIT_TO_ARRAY:
			case REGEXP_SPLIT_TO_TABLE:
			case REGEXP_SUBSTR:
			case REPEAT:
			case RPAD:
			case RTRIM:
			case SPLIT_PART:
			case STARTS_WITH:
			case STRING_TO_ARRAY:
			case STRING_TO_TABLE:
			case STRPOS:
			case SUBSTR:
			case TO_ASCII:
			case TO_HEX:
			case TRANSLATE:
			case UNISTR:
			case AGE:
			case CLOCK_TIMESTAMP:
			case DATE_BIN:
			case DATE_PART:
			case DATE_TRUNC:
			case ISFINITE:
			case JUSTIFY_DAYS:
			case JUSTIFY_HOURS:
			case JUSTIFY_INTERVAL:
			case MAKE_DATE:
			case MAKE_INTERVAL:
			case MAKE_TIME:
			case MAKE_TIMESTAMP:
			case MAKE_TIMESTAMPTZ:
			case NOW:
			case STATEMENT_TIMESTAMP:
			case TIMEOFDAY:
			case TRANSACTION_TIMESTAMP:
			case TO_TIMESTAMP:
			case TO_CHAR:
			case TO_DATE:
			case TO_NUMBER:
			case Identifier:
			case QuotedIdentifier:
			case UnicodeQuotedIdentifier:
			case PLSQLVARIABLENAME:
			case PLSQLIDENTIFIER:
				EnterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Copy_delimiterContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Opt_usingContext opt_using() {
			return GetRuleContext<Opt_usingContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DELIMITERS() { return GetToken(PostgreSQLParser.DELIMITERS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SconstContext sconst() {
			return GetRuleContext<SconstContext>(0);
		}
		public Copy_delimiterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_copy_delimiter; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterCopy_delimiter(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitCopy_delimiter(this);
		}
	}

	[RuleVersion(0)]
	public Copy_delimiterContext copy_delimiter() {
		Copy_delimiterContext _localctx = new Copy_delimiterContext(Context, State);
		EnterRule(_localctx, 158, RULE_copy_delimiter);
		try {
			State = 2713;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case USING:
			case DELIMITERS:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2708;
				opt_using();
				State = 2709;
				Match(DELIMITERS);
				State = 2710;
				sconst();
				}
				break;
			case Eof:
			case OPEN_PAREN:
			case SEMI:
			case ANALYSE:
			case ANALYZE:
			case CREATE:
			case DO:
			case FETCH:
			case GRANT:
			case INTO:
			case NULL_P:
			case SELECT:
			case TABLE:
			case WHERE:
			case WITH:
			case BINARY:
			case FREEZE:
			case ABORT_P:
			case ALTER:
			case BEGIN_P:
			case CHECKPOINT:
			case CLOSE:
			case CLUSTER:
			case COMMENT:
			case COMMIT:
			case COPY:
			case CSV:
			case DEALLOCATE:
			case DECLARE:
			case DELETE_P:
			case DELIMITER:
			case DISCARD:
			case DROP:
			case ENCODING:
			case ESCAPE:
			case EXECUTE:
			case EXPLAIN:
			case FORCE:
			case HEADER_P:
			case INSERT:
			case LISTEN:
			case LOAD:
			case LOCK_P:
			case MERGE:
			case MOVE:
			case NOTIFY:
			case PREPARE:
			case QUOTE:
			case REASSIGN:
			case REFRESH:
			case REINDEX:
			case RELEASE:
			case RESET:
			case REVOKE:
			case ROLLBACK:
			case SAVEPOINT:
			case SECURITY:
			case SET:
			case SHOW:
			case START:
			case TRUNCATE:
			case UNLISTEN:
			case UPDATE:
			case VACUUM:
			case VALUES:
			case CALL:
			case IMPORT_P:
			case END_P:
			case MetaCommand:
				EnterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Opt_usingContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode USING() { return GetToken(PostgreSQLParser.USING, 0); }
		public Opt_usingContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_opt_using; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterOpt_using(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitOpt_using(this);
		}
	}

	[RuleVersion(0)]
	public Opt_usingContext opt_using() {
		Opt_usingContext _localctx = new Opt_usingContext(Context, State);
		EnterRule(_localctx, 160, RULE_opt_using);
		try {
			State = 2717;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case USING:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2715;
				Match(USING);
				}
				break;
			case DELIMITERS:
				EnterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Copy_generic_opt_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Copy_generic_opt_elemContext[] copy_generic_opt_elem() {
			return GetRuleContexts<Copy_generic_opt_elemContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Copy_generic_opt_elemContext copy_generic_opt_elem(int i) {
			return GetRuleContext<Copy_generic_opt_elemContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(PostgreSQLParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(PostgreSQLParser.COMMA, i);
		}
		public Copy_generic_opt_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_copy_generic_opt_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterCopy_generic_opt_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitCopy_generic_opt_list(this);
		}
	}

	[RuleVersion(0)]
	public Copy_generic_opt_listContext copy_generic_opt_list() {
		Copy_generic_opt_listContext _localctx = new Copy_generic_opt_listContext(Context, State);
		EnterRule(_localctx, 162, RULE_copy_generic_opt_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2719;
			copy_generic_opt_elem();
			State = 2724;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 2720;
				Match(COMMA);
				State = 2721;
				copy_generic_opt_elem();
				}
				}
				State = 2726;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Copy_generic_opt_elemContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public CollabelContext collabel() {
			return GetRuleContext<CollabelContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Copy_generic_opt_argContext copy_generic_opt_arg() {
			return GetRuleContext<Copy_generic_opt_argContext>(0);
		}
		public Copy_generic_opt_elemContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_copy_generic_opt_elem; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterCopy_generic_opt_elem(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitCopy_generic_opt_elem(this);
		}
	}

	[RuleVersion(0)]
	public Copy_generic_opt_elemContext copy_generic_opt_elem() {
		Copy_generic_opt_elemContext _localctx = new Copy_generic_opt_elemContext(Context, State);
		EnterRule(_localctx, 164, RULE_copy_generic_opt_elem);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2727;
			collabel();
			State = 2728;
			copy_generic_opt_arg();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Copy_generic_opt_argContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Opt_boolean_or_stringContext opt_boolean_or_string() {
			return GetRuleContext<Opt_boolean_or_stringContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NumericonlyContext numericonly() {
			return GetRuleContext<NumericonlyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STAR() { return GetToken(PostgreSQLParser.STAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAREN() { return GetToken(PostgreSQLParser.OPEN_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Copy_generic_opt_arg_listContext copy_generic_opt_arg_list() {
			return GetRuleContext<Copy_generic_opt_arg_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAREN() { return GetToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public Copy_generic_opt_argContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_copy_generic_opt_arg; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterCopy_generic_opt_arg(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitCopy_generic_opt_arg(this);
		}
	}

	[RuleVersion(0)]
	public Copy_generic_opt_argContext copy_generic_opt_arg() {
		Copy_generic_opt_argContext _localctx = new Copy_generic_opt_argContext(Context, State);
		EnterRule(_localctx, 166, RULE_copy_generic_opt_arg);
		try {
			State = 2738;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case AND:
			case ARRAY:
			case COLLATE:
			case COLUMN:
			case CONSTRAINT:
			case DEFAULT:
			case DO:
			case FALSE_P:
			case FETCH:
			case ON:
			case TABLE:
			case TRUE_P:
			case AUTHORIZATION:
			case BINARY:
			case COLLATION:
			case CONCURRENTLY:
			case CROSS:
			case CURRENT_SCHEMA:
			case FREEZE:
			case FULL:
			case ILIKE:
			case INNER_P:
			case IS:
			case ISNULL:
			case JOIN:
			case LIKE:
			case NATURAL:
			case NOTNULL:
			case OUTER_P:
			case OVER:
			case OVERLAPS:
			case SIMILAR:
			case VERBOSE:
			case ABORT_P:
			case ABSOLUTE_P:
			case ACCESS:
			case ACTION:
			case ADD_P:
			case ADMIN:
			case AFTER:
			case AGGREGATE:
			case ALSO:
			case ALTER:
			case ALWAYS:
			case ASSERTION:
			case ASSIGNMENT:
			case AT:
			case ATTRIBUTE:
			case BACKWARD:
			case BEFORE:
			case BEGIN_P:
			case BY:
			case CACHE:
			case CALLED:
			case CASCADE:
			case CASCADED:
			case CATALOG:
			case CHAIN:
			case CHARACTERISTICS:
			case CHECKPOINT:
			case CLASS:
			case CLOSE:
			case CLUSTER:
			case COMMENT:
			case COMMENTS:
			case COMMIT:
			case COMMITTED:
			case CONFIGURATION:
			case CONNECTION:
			case CONSTRAINTS:
			case CONTENT_P:
			case CONTINUE_P:
			case CONVERSION_P:
			case COPY:
			case COST:
			case CSV:
			case CURSOR:
			case CYCLE:
			case DATA_P:
			case DATABASE:
			case DAY_P:
			case DEALLOCATE:
			case DECLARE:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE_P:
			case DELIMITER:
			case DELIMITERS:
			case DICTIONARY:
			case DISABLE_P:
			case DISCARD:
			case DOCUMENT_P:
			case DOMAIN_P:
			case DOUBLE_P:
			case DROP:
			case EACH:
			case ENABLE_P:
			case ENCODING:
			case ENCRYPTED:
			case ENUM_P:
			case ESCAPE:
			case EVENT:
			case EXCLUDE:
			case EXCLUDING:
			case EXCLUSIVE:
			case EXECUTE:
			case EXPLAIN:
			case EXTENSION:
			case EXTERNAL:
			case FAMILY:
			case FIRST_P:
			case FOLLOWING:
			case FORCE:
			case FORWARD:
			case FUNCTION:
			case FUNCTIONS:
			case GLOBAL:
			case GRANTED:
			case HANDLER:
			case HEADER_P:
			case HOLD:
			case HOUR_P:
			case IDENTITY_P:
			case IF_P:
			case IMMEDIATE:
			case IMMUTABLE:
			case IMPLICIT_P:
			case INCLUDING:
			case INCREMENT:
			case INDEX:
			case INDEXES:
			case INHERIT:
			case INHERITS:
			case INLINE_P:
			case INSENSITIVE:
			case INSERT:
			case INSTEAD:
			case INVOKER:
			case ISOLATION:
			case KEY:
			case LABEL:
			case LANGUAGE:
			case LARGE_P:
			case LAST_P:
			case LEAKPROOF:
			case LEVEL:
			case LISTEN:
			case LOAD:
			case LOCAL:
			case LOCATION:
			case LOCK_P:
			case MAPPING:
			case MATCH:
			case MATERIALIZED:
			case MAXVALUE:
			case MINUTE_P:
			case MINVALUE:
			case MODE:
			case MONTH_P:
			case MOVE:
			case NAME_P:
			case NAMES:
			case NEXT:
			case NO:
			case NOTHING:
			case NOTIFY:
			case NOWAIT:
			case NULLS_P:
			case OBJECT_P:
			case OF:
			case OFF:
			case OIDS:
			case OPERATOR:
			case OPTION:
			case OPTIONS:
			case OWNED:
			case OWNER:
			case PARSER:
			case PARTIAL:
			case PARTITION:
			case PASSING:
			case PASSWORD:
			case PLANS:
			case PRECEDING:
			case PREPARE:
			case PREPARED:
			case PRESERVE:
			case PRIOR:
			case PRIVILEGES:
			case PROCEDURAL:
			case PROCEDURE:
			case PROGRAM:
			case QUOTE:
			case RANGE:
			case READ:
			case REASSIGN:
			case RECHECK:
			case RECURSIVE:
			case REF:
			case REFRESH:
			case REINDEX:
			case RELATIVE_P:
			case RELEASE:
			case RENAME:
			case REPEATABLE:
			case REPLACE:
			case REPLICA:
			case RESET:
			case RESTART:
			case RESTRICT:
			case RETURNS:
			case REVOKE:
			case ROLE:
			case ROLLBACK:
			case ROWS:
			case RULE:
			case SAVEPOINT:
			case SCHEMA:
			case SCROLL:
			case SEARCH:
			case SECOND_P:
			case SECURITY:
			case SEQUENCE:
			case SEQUENCES:
			case SERIALIZABLE:
			case SERVER:
			case SESSION:
			case SET:
			case SHARE:
			case SHOW:
			case SIMPLE:
			case SNAPSHOT:
			case STABLE:
			case STANDALONE_P:
			case START:
			case STATEMENT:
			case STATISTICS:
			case STDIN:
			case STDOUT:
			case STORAGE:
			case STRICT_P:
			case STRIP_P:
			case SYSID:
			case SYSTEM_P:
			case TABLES:
			case TABLESPACE:
			case TEMP:
			case TEMPLATE:
			case TEMPORARY:
			case TEXT_P:
			case TRANSACTION:
			case TRIGGER:
			case TRUNCATE:
			case TRUSTED:
			case TYPE_P:
			case TYPES_P:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNENCRYPTED:
			case UNKNOWN:
			case UNLISTEN:
			case UNLOGGED:
			case UNTIL:
			case UPDATE:
			case VACUUM:
			case VALID:
			case VALIDATE:
			case VALIDATOR:
			case VARYING:
			case VERSION_P:
			case VIEW:
			case VOLATILE:
			case WHITESPACE_P:
			case WITHOUT:
			case WORK:
			case WRAPPER:
			case WRITE:
			case XML_P:
			case YEAR_P:
			case YES_P:
			case ZONE:
			case BETWEEN:
			case BIGINT:
			case BIT:
			case BOOLEAN_P:
			case CHAR_P:
			case CHARACTER:
			case COALESCE:
			case DEC:
			case DECIMAL_P:
			case EXISTS:
			case EXTRACT:
			case FLOAT_P:
			case GREATEST:
			case INOUT:
			case INT_P:
			case INTEGER:
			case INTERVAL:
			case LEAST:
			case NATIONAL:
			case NCHAR:
			case NONE:
			case NULLIF:
			case NUMERIC:
			case OVERLAY:
			case POSITION:
			case PRECISION:
			case REAL:
			case ROW:
			case SETOF:
			case SMALLINT:
			case SUBSTRING:
			case TIME:
			case TIMESTAMP:
			case TREAT:
			case TRIM:
			case VALUES:
			case VARCHAR:
			case XMLATTRIBUTES:
			case XMLCOMMENT:
			case XMLAGG:
			case XML_IS_WELL_FORMED:
			case XML_IS_WELL_FORMED_DOCUMENT:
			case XML_IS_WELL_FORMED_CONTENT:
			case XPATH:
			case XPATH_EXISTS:
			case XMLCONCAT:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLPARSE:
			case XMLPI:
			case XMLROOT:
			case XMLSERIALIZE:
			case CALL:
			case CURRENT_P:
			case ATTACH:
			case DETACH:
			case EXPRESSION:
			case GENERATED:
			case LOGGED:
			case STORED:
			case INCLUDE:
			case ROUTINE:
			case TRANSFORM:
			case IMPORT_P:
			case POLICY:
			case METHOD:
			case REFERENCING:
			case NEW:
			case OLD:
			case VALUE_P:
			case SUBSCRIPTION:
			case PUBLICATION:
			case OUT_P:
			case ROUTINES:
			case SCHEMAS:
			case PROCEDURES:
			case INPUT_P:
			case SUPPORT:
			case PARALLEL:
			case SQL_P:
			case DEPENDS:
			case OVERRIDING:
			case CONFLICT:
			case SKIP_P:
			case LOCKED:
			case TIES:
			case ROLLUP:
			case CUBE:
			case GROUPING:
			case SETS:
			case TABLESAMPLE:
			case ORDINALITY:
			case XMLTABLE:
			case COLUMNS:
			case XMLNAMESPACES:
			case ROWTYPE:
			case NORMALIZED:
			case WITHIN:
			case FILTER:
			case GROUPS:
			case OTHERS:
			case NFC:
			case NFD:
			case NFKC:
			case NFKD:
			case UESCAPE:
			case VIEWS:
			case NORMALIZE:
			case DUMP:
			case PRINT_STRICT_PARAMS:
			case VARIABLE_CONFLICT:
			case ERROR:
			case USE_VARIABLE:
			case USE_COLUMN:
			case ALIAS:
			case CONSTANT:
			case PERFORM:
			case GET:
			case DIAGNOSTICS:
			case STACKED:
			case ELSIF:
			case REVERSE:
			case SLICE:
			case EXIT:
			case RETURN:
			case QUERY:
			case RAISE:
			case SQLSTATE:
			case DEBUG:
			case LOG:
			case INFO:
			case NOTICE:
			case WARNING:
			case EXCEPTION:
			case ASSERT:
			case OPEN:
			case ABS:
			case CBRT:
			case CEIL:
			case CEILING:
			case DEGREES:
			case DIV:
			case EXP:
			case FACTORIAL:
			case FLOOR:
			case GCD:
			case LCM:
			case LN:
			case LOG10:
			case MIN_SCALE:
			case MOD:
			case PI:
			case POWER:
			case RADIANS:
			case ROUND:
			case SCALE:
			case SIGN:
			case SQRT:
			case TRIM_SCALE:
			case TRUNC:
			case WIDTH_BUCKET:
			case RANDOM:
			case SETSEED:
			case ACOS:
			case ACOSD:
			case ASIN:
			case ASIND:
			case ATAN:
			case ATAND:
			case ATAN2:
			case ATAN2D:
			case COS:
			case COSD:
			case COT:
			case COTD:
			case SIN:
			case SIND:
			case TAN:
			case TAND:
			case SINH:
			case COSH:
			case TANH:
			case ASINH:
			case ACOSH:
			case ATANH:
			case BIT_LENGTH:
			case CHAR_LENGTH:
			case CHARACTER_LENGTH:
			case LOWER:
			case OCTET_LENGTH:
			case UPPER:
			case ASCII:
			case BTRIM:
			case CHR:
			case CONCAT:
			case CONCAT_WS:
			case FORMAT:
			case INITCAP:
			case LENGTH:
			case LPAD:
			case LTRIM:
			case MD5:
			case PARSE_IDENT:
			case PG_CLIENT_ENCODING:
			case QUOTE_IDENT:
			case QUOTE_LITERAL:
			case QUOTE_NULLABLE:
			case REGEXP_COUNT:
			case REGEXP_INSTR:
			case REGEXP_LIKE:
			case REGEXP_MATCH:
			case REGEXP_MATCHES:
			case REGEXP_REPLACE:
			case REGEXP_SPLIT_TO_ARRAY:
			case REGEXP_SPLIT_TO_TABLE:
			case REGEXP_SUBSTR:
			case REPEAT:
			case RPAD:
			case RTRIM:
			case SPLIT_PART:
			case STARTS_WITH:
			case STRING_TO_ARRAY:
			case STRING_TO_TABLE:
			case STRPOS:
			case SUBSTR:
			case TO_ASCII:
			case TO_HEX:
			case TRANSLATE:
			case UNISTR:
			case AGE:
			case CLOCK_TIMESTAMP:
			case DATE_BIN:
			case DATE_PART:
			case DATE_TRUNC:
			case ISFINITE:
			case JUSTIFY_DAYS:
			case JUSTIFY_HOURS:
			case JUSTIFY_INTERVAL:
			case MAKE_DATE:
			case MAKE_INTERVAL:
			case MAKE_TIME:
			case MAKE_TIMESTAMP:
			case MAKE_TIMESTAMPTZ:
			case NOW:
			case STATEMENT_TIMESTAMP:
			case TIMEOFDAY:
			case TRANSACTION_TIMESTAMP:
			case TO_TIMESTAMP:
			case TO_CHAR:
			case TO_DATE:
			case TO_NUMBER:
			case Identifier:
			case QuotedIdentifier:
			case UnicodeQuotedIdentifier:
			case StringConstant:
			case UnicodeEscapeStringConstant:
			case BeginDollarStringConstant:
			case PLSQLVARIABLENAME:
			case PLSQLIDENTIFIER:
			case EscapeStringConstant:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2730;
				opt_boolean_or_string();
				}
				break;
			case PLUS:
			case MINUS:
			case Integral:
			case Numeric:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2731;
				numericonly();
				}
				break;
			case STAR:
				EnterOuterAlt(_localctx, 3);
				{
				State = 2732;
				Match(STAR);
				}
				break;
			case OPEN_PAREN:
				EnterOuterAlt(_localctx, 4);
				{
				State = 2733;
				Match(OPEN_PAREN);
				State = 2734;
				copy_generic_opt_arg_list();
				State = 2735;
				Match(CLOSE_PAREN);
				}
				break;
			case CLOSE_PAREN:
			case COMMA:
				EnterOuterAlt(_localctx, 5);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Copy_generic_opt_arg_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Copy_generic_opt_arg_list_itemContext[] copy_generic_opt_arg_list_item() {
			return GetRuleContexts<Copy_generic_opt_arg_list_itemContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Copy_generic_opt_arg_list_itemContext copy_generic_opt_arg_list_item(int i) {
			return GetRuleContext<Copy_generic_opt_arg_list_itemContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(PostgreSQLParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(PostgreSQLParser.COMMA, i);
		}
		public Copy_generic_opt_arg_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_copy_generic_opt_arg_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterCopy_generic_opt_arg_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitCopy_generic_opt_arg_list(this);
		}
	}

	[RuleVersion(0)]
	public Copy_generic_opt_arg_listContext copy_generic_opt_arg_list() {
		Copy_generic_opt_arg_listContext _localctx = new Copy_generic_opt_arg_listContext(Context, State);
		EnterRule(_localctx, 168, RULE_copy_generic_opt_arg_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2740;
			copy_generic_opt_arg_list_item();
			State = 2745;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 2741;
				Match(COMMA);
				State = 2742;
				copy_generic_opt_arg_list_item();
				}
				}
				State = 2747;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Copy_generic_opt_arg_list_itemContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Opt_boolean_or_stringContext opt_boolean_or_string() {
			return GetRuleContext<Opt_boolean_or_stringContext>(0);
		}
		public Copy_generic_opt_arg_list_itemContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_copy_generic_opt_arg_list_item; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterCopy_generic_opt_arg_list_item(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitCopy_generic_opt_arg_list_item(this);
		}
	}

	[RuleVersion(0)]
	public Copy_generic_opt_arg_list_itemContext copy_generic_opt_arg_list_item() {
		Copy_generic_opt_arg_list_itemContext _localctx = new Copy_generic_opt_arg_list_itemContext(Context, State);
		EnterRule(_localctx, 170, RULE_copy_generic_opt_arg_list_item);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2748;
			opt_boolean_or_string();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CreatestmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CREATE() { return GetToken(PostgreSQLParser.CREATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public OpttempContext opttemp() {
			return GetRuleContext<OpttempContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLE() { return GetToken(PostgreSQLParser.TABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Qualified_nameContext[] qualified_name() {
			return GetRuleContexts<Qualified_nameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Qualified_nameContext qualified_name(int i) {
			return GetRuleContext<Qualified_nameContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAREN() { return GetToken(PostgreSQLParser.OPEN_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public OpttableelementlistContext opttableelementlist() {
			return GetRuleContext<OpttableelementlistContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAREN() { return GetToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public OptinheritContext optinherit() {
			return GetRuleContext<OptinheritContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public OptpartitionspecContext optpartitionspec() {
			return GetRuleContext<OptpartitionspecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Table_access_method_clauseContext table_access_method_clause() {
			return GetRuleContext<Table_access_method_clauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public OptwithContext optwith() {
			return GetRuleContext<OptwithContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public OncommitoptionContext oncommitoption() {
			return GetRuleContext<OncommitoptionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public OpttablespaceContext opttablespace() {
			return GetRuleContext<OpttablespaceContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OF() { return GetToken(PostgreSQLParser.OF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Any_nameContext any_name() {
			return GetRuleContext<Any_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public OpttypedtableelementlistContext opttypedtableelementlist() {
			return GetRuleContext<OpttypedtableelementlistContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARTITION() { return GetToken(PostgreSQLParser.PARTITION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public PartitionboundspecContext partitionboundspec() {
			return GetRuleContext<PartitionboundspecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF_P() { return GetToken(PostgreSQLParser.IF_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT() { return GetToken(PostgreSQLParser.NOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXISTS() { return GetToken(PostgreSQLParser.EXISTS, 0); }
		public CreatestmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_createstmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterCreatestmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitCreatestmt(this);
		}
	}

	[RuleVersion(0)]
	public CreatestmtContext createstmt() {
		CreatestmtContext _localctx = new CreatestmtContext(Context, State);
		EnterRule(_localctx, 172, RULE_createstmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2750;
			Match(CREATE);
			State = 2751;
			opttemp();
			State = 2752;
			Match(TABLE);
			State = 2756;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,81,Context) ) {
			case 1:
				{
				State = 2753;
				Match(IF_P);
				State = 2754;
				Match(NOT);
				State = 2755;
				Match(EXISTS);
				}
				break;
			}
			State = 2758;
			qualified_name();
			State = 2789;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case OPEN_PAREN:
				{
				State = 2759;
				Match(OPEN_PAREN);
				State = 2760;
				opttableelementlist();
				State = 2761;
				Match(CLOSE_PAREN);
				State = 2762;
				optinherit();
				State = 2763;
				optpartitionspec();
				State = 2764;
				table_access_method_clause();
				State = 2765;
				optwith();
				State = 2766;
				oncommitoption();
				State = 2767;
				opttablespace();
				}
				break;
			case OF:
				{
				State = 2769;
				Match(OF);
				State = 2770;
				any_name();
				State = 2771;
				opttypedtableelementlist();
				State = 2772;
				optpartitionspec();
				State = 2773;
				table_access_method_clause();
				State = 2774;
				optwith();
				State = 2775;
				oncommitoption();
				State = 2776;
				opttablespace();
				}
				break;
			case PARTITION:
				{
				State = 2778;
				Match(PARTITION);
				State = 2779;
				Match(OF);
				State = 2780;
				qualified_name();
				State = 2781;
				opttypedtableelementlist();
				State = 2782;
				partitionboundspec();
				State = 2783;
				optpartitionspec();
				State = 2784;
				table_access_method_clause();
				State = 2785;
				optwith();
				State = 2786;
				oncommitoption();
				State = 2787;
				opttablespace();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OpttempContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TEMPORARY() { return GetToken(PostgreSQLParser.TEMPORARY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TEMP() { return GetToken(PostgreSQLParser.TEMP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOCAL() { return GetToken(PostgreSQLParser.LOCAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GLOBAL() { return GetToken(PostgreSQLParser.GLOBAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNLOGGED() { return GetToken(PostgreSQLParser.UNLOGGED, 0); }
		public OpttempContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_opttemp; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterOpttemp(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitOpttemp(this);
		}
	}

	[RuleVersion(0)]
	public OpttempContext opttemp() {
		OpttempContext _localctx = new OpttempContext(Context, State);
		EnterRule(_localctx, 174, RULE_opttemp);
		int _la;
		try {
			State = 2799;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case TEMPORARY:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2791;
				Match(TEMPORARY);
				}
				break;
			case TEMP:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2792;
				Match(TEMP);
				}
				break;
			case LOCAL:
				EnterOuterAlt(_localctx, 3);
				{
				State = 2793;
				Match(LOCAL);
				State = 2794;
				_la = TokenStream.LA(1);
				if ( !(_la==TEMP || _la==TEMPORARY) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			case GLOBAL:
				EnterOuterAlt(_localctx, 4);
				{
				State = 2795;
				Match(GLOBAL);
				State = 2796;
				_la = TokenStream.LA(1);
				if ( !(_la==TEMP || _la==TEMPORARY) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			case UNLOGGED:
				EnterOuterAlt(_localctx, 5);
				{
				State = 2797;
				Match(UNLOGGED);
				}
				break;
			case TABLE:
			case RECURSIVE:
			case SEQUENCE:
			case VIEW:
				EnterOuterAlt(_localctx, 6);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OpttableelementlistContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TableelementlistContext tableelementlist() {
			return GetRuleContext<TableelementlistContext>(0);
		}
		public OpttableelementlistContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_opttableelementlist; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterOpttableelementlist(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitOpttableelementlist(this);
		}
	}

	[RuleVersion(0)]
	public OpttableelementlistContext opttableelementlist() {
		OpttableelementlistContext _localctx = new OpttableelementlistContext(Context, State);
		EnterRule(_localctx, 176, RULE_opttableelementlist);
		try {
			State = 2803;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case AND:
			case ARRAY:
			case CHECK:
			case COLLATE:
			case COLUMN:
			case CONSTRAINT:
			case DEFAULT:
			case DO:
			case FETCH:
			case FOREIGN:
			case PRIMARY:
			case TABLE:
			case UNIQUE:
			case IS:
			case LEFT:
			case LIKE:
			case OUTER_P:
			case OVER:
			case RIGHT:
			case ABORT_P:
			case ABSOLUTE_P:
			case ACCESS:
			case ACTION:
			case ADD_P:
			case ADMIN:
			case AFTER:
			case AGGREGATE:
			case ALSO:
			case ALTER:
			case ALWAYS:
			case ASSERTION:
			case ASSIGNMENT:
			case AT:
			case ATTRIBUTE:
			case BACKWARD:
			case BEFORE:
			case BEGIN_P:
			case BY:
			case CACHE:
			case CALLED:
			case CASCADE:
			case CASCADED:
			case CATALOG:
			case CHAIN:
			case CHARACTERISTICS:
			case CHECKPOINT:
			case CLASS:
			case CLOSE:
			case CLUSTER:
			case COMMENT:
			case COMMENTS:
			case COMMIT:
			case COMMITTED:
			case CONFIGURATION:
			case CONNECTION:
			case CONSTRAINTS:
			case CONTENT_P:
			case CONTINUE_P:
			case CONVERSION_P:
			case COPY:
			case COST:
			case CSV:
			case CURSOR:
			case CYCLE:
			case DATA_P:
			case DATABASE:
			case DAY_P:
			case DEALLOCATE:
			case DECLARE:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE_P:
			case DELIMITER:
			case DELIMITERS:
			case DICTIONARY:
			case DISABLE_P:
			case DISCARD:
			case DOCUMENT_P:
			case DOMAIN_P:
			case DOUBLE_P:
			case DROP:
			case EACH:
			case ENABLE_P:
			case ENCODING:
			case ENCRYPTED:
			case ENUM_P:
			case ESCAPE:
			case EVENT:
			case EXCLUDE:
			case EXCLUDING:
			case EXCLUSIVE:
			case EXECUTE:
			case EXPLAIN:
			case EXTENSION:
			case EXTERNAL:
			case FAMILY:
			case FIRST_P:
			case FOLLOWING:
			case FORCE:
			case FORWARD:
			case FUNCTION:
			case FUNCTIONS:
			case GLOBAL:
			case GRANTED:
			case HANDLER:
			case HEADER_P:
			case HOLD:
			case HOUR_P:
			case IDENTITY_P:
			case IF_P:
			case IMMEDIATE:
			case IMMUTABLE:
			case IMPLICIT_P:
			case INCLUDING:
			case INCREMENT:
			case INDEX:
			case INDEXES:
			case INHERIT:
			case INHERITS:
			case INLINE_P:
			case INSENSITIVE:
			case INSERT:
			case INSTEAD:
			case INVOKER:
			case ISOLATION:
			case KEY:
			case LABEL:
			case LANGUAGE:
			case LARGE_P:
			case LAST_P:
			case LEAKPROOF:
			case LEVEL:
			case LISTEN:
			case LOAD:
			case LOCAL:
			case LOCATION:
			case LOCK_P:
			case MAPPING:
			case MATCH:
			case MATERIALIZED:
			case MAXVALUE:
			case MINUTE_P:
			case MINVALUE:
			case MODE:
			case MONTH_P:
			case MOVE:
			case NAME_P:
			case NAMES:
			case NEXT:
			case NO:
			case NOTHING:
			case NOTIFY:
			case NOWAIT:
			case NULLS_P:
			case OBJECT_P:
			case OF:
			case OFF:
			case OIDS:
			case OPERATOR:
			case OPTION:
			case OPTIONS:
			case OWNED:
			case OWNER:
			case PARSER:
			case PARTIAL:
			case PARTITION:
			case PASSING:
			case PASSWORD:
			case PLANS:
			case PRECEDING:
			case PREPARE:
			case PREPARED:
			case PRESERVE:
			case PRIOR:
			case PRIVILEGES:
			case PROCEDURAL:
			case PROCEDURE:
			case PROGRAM:
			case QUOTE:
			case RANGE:
			case READ:
			case REASSIGN:
			case RECHECK:
			case RECURSIVE:
			case REF:
			case REFRESH:
			case REINDEX:
			case RELATIVE_P:
			case RELEASE:
			case RENAME:
			case REPEATABLE:
			case REPLACE:
			case REPLICA:
			case RESET:
			case RESTART:
			case RESTRICT:
			case RETURNS:
			case REVOKE:
			case ROLE:
			case ROLLBACK:
			case ROWS:
			case RULE:
			case SAVEPOINT:
			case SCHEMA:
			case SCROLL:
			case SEARCH:
			case SECOND_P:
			case SECURITY:
			case SEQUENCE:
			case SEQUENCES:
			case SERIALIZABLE:
			case SERVER:
			case SESSION:
			case SET:
			case SHARE:
			case SHOW:
			case SIMPLE:
			case SNAPSHOT:
			case STABLE:
			case STANDALONE_P:
			case START:
			case STATEMENT:
			case STATISTICS:
			case STDIN:
			case STDOUT:
			case STORAGE:
			case STRICT_P:
			case STRIP_P:
			case SYSID:
			case SYSTEM_P:
			case TABLES:
			case TABLESPACE:
			case TEMP:
			case TEMPLATE:
			case TEMPORARY:
			case TEXT_P:
			case TRANSACTION:
			case TRIGGER:
			case TRUNCATE:
			case TRUSTED:
			case TYPE_P:
			case TYPES_P:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNENCRYPTED:
			case UNKNOWN:
			case UNLISTEN:
			case UNLOGGED:
			case UNTIL:
			case UPDATE:
			case VACUUM:
			case VALID:
			case VALIDATE:
			case VALIDATOR:
			case VARYING:
			case VERSION_P:
			case VIEW:
			case VOLATILE:
			case WHITESPACE_P:
			case WITHOUT:
			case WORK:
			case WRAPPER:
			case WRITE:
			case XML_P:
			case YEAR_P:
			case YES_P:
			case ZONE:
			case BETWEEN:
			case BIGINT:
			case BIT:
			case BOOLEAN_P:
			case CHAR_P:
			case CHARACTER:
			case COALESCE:
			case DEC:
			case DECIMAL_P:
			case EXISTS:
			case EXTRACT:
			case FLOAT_P:
			case GREATEST:
			case INOUT:
			case INT_P:
			case INTEGER:
			case INTERVAL:
			case LEAST:
			case NATIONAL:
			case NCHAR:
			case NONE:
			case NULLIF:
			case NUMERIC:
			case OVERLAY:
			case POSITION:
			case PRECISION:
			case REAL:
			case ROW:
			case SETOF:
			case SMALLINT:
			case SUBSTRING:
			case TIME:
			case TIMESTAMP:
			case TREAT:
			case TRIM:
			case VALUES:
			case VARCHAR:
			case XMLATTRIBUTES:
			case XMLCOMMENT:
			case XMLAGG:
			case XML_IS_WELL_FORMED:
			case XML_IS_WELL_FORMED_DOCUMENT:
			case XML_IS_WELL_FORMED_CONTENT:
			case XPATH:
			case XPATH_EXISTS:
			case XMLCONCAT:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLPARSE:
			case XMLPI:
			case XMLROOT:
			case XMLSERIALIZE:
			case CALL:
			case CURRENT_P:
			case ATTACH:
			case DETACH:
			case EXPRESSION:
			case GENERATED:
			case LOGGED:
			case STORED:
			case INCLUDE:
			case ROUTINE:
			case TRANSFORM:
			case IMPORT_P:
			case POLICY:
			case METHOD:
			case REFERENCING:
			case NEW:
			case OLD:
			case VALUE_P:
			case SUBSCRIPTION:
			case PUBLICATION:
			case OUT_P:
			case ROUTINES:
			case SCHEMAS:
			case PROCEDURES:
			case INPUT_P:
			case SUPPORT:
			case PARALLEL:
			case SQL_P:
			case DEPENDS:
			case OVERRIDING:
			case CONFLICT:
			case SKIP_P:
			case LOCKED:
			case TIES:
			case ROLLUP:
			case CUBE:
			case GROUPING:
			case SETS:
			case ORDINALITY:
			case XMLTABLE:
			case COLUMNS:
			case XMLNAMESPACES:
			case ROWTYPE:
			case NORMALIZED:
			case WITHIN:
			case FILTER:
			case GROUPS:
			case OTHERS:
			case NFC:
			case NFD:
			case NFKC:
			case NFKD:
			case UESCAPE:
			case VIEWS:
			case NORMALIZE:
			case DUMP:
			case PRINT_STRICT_PARAMS:
			case VARIABLE_CONFLICT:
			case ERROR:
			case USE_VARIABLE:
			case USE_COLUMN:
			case ALIAS:
			case CONSTANT:
			case PERFORM:
			case GET:
			case DIAGNOSTICS:
			case STACKED:
			case ELSIF:
			case REVERSE:
			case SLICE:
			case EXIT:
			case RETURN:
			case QUERY:
			case RAISE:
			case SQLSTATE:
			case DEBUG:
			case LOG:
			case INFO:
			case NOTICE:
			case WARNING:
			case EXCEPTION:
			case ASSERT:
			case OPEN:
			case ABS:
			case CBRT:
			case CEIL:
			case CEILING:
			case DEGREES:
			case DIV:
			case EXP:
			case FACTORIAL:
			case FLOOR:
			case GCD:
			case LCM:
			case LN:
			case LOG10:
			case MIN_SCALE:
			case MOD:
			case PI:
			case POWER:
			case RADIANS:
			case ROUND:
			case SCALE:
			case SIGN:
			case SQRT:
			case TRIM_SCALE:
			case TRUNC:
			case WIDTH_BUCKET:
			case RANDOM:
			case SETSEED:
			case ACOS:
			case ACOSD:
			case ASIN:
			case ASIND:
			case ATAN:
			case ATAND:
			case ATAN2:
			case ATAN2D:
			case COS:
			case COSD:
			case COT:
			case COTD:
			case SIN:
			case SIND:
			case TAN:
			case TAND:
			case SINH:
			case COSH:
			case TANH:
			case ASINH:
			case ACOSH:
			case ATANH:
			case BIT_LENGTH:
			case CHAR_LENGTH:
			case CHARACTER_LENGTH:
			case LOWER:
			case OCTET_LENGTH:
			case UPPER:
			case ASCII:
			case BTRIM:
			case CHR:
			case CONCAT:
			case CONCAT_WS:
			case FORMAT:
			case INITCAP:
			case LENGTH:
			case LPAD:
			case LTRIM:
			case MD5:
			case PARSE_IDENT:
			case PG_CLIENT_ENCODING:
			case QUOTE_IDENT:
			case QUOTE_LITERAL:
			case QUOTE_NULLABLE:
			case REGEXP_COUNT:
			case REGEXP_INSTR:
			case REGEXP_LIKE:
			case REGEXP_MATCH:
			case REGEXP_MATCHES:
			case REGEXP_REPLACE:
			case REGEXP_SPLIT_TO_ARRAY:
			case REGEXP_SPLIT_TO_TABLE:
			case REGEXP_SUBSTR:
			case REPEAT:
			case RPAD:
			case RTRIM:
			case SPLIT_PART:
			case STARTS_WITH:
			case STRING_TO_ARRAY:
			case STRING_TO_TABLE:
			case STRPOS:
			case SUBSTR:
			case TO_ASCII:
			case TO_HEX:
			case TRANSLATE:
			case UNISTR:
			case AGE:
			case CLOCK_TIMESTAMP:
			case DATE_BIN:
			case DATE_PART:
			case DATE_TRUNC:
			case ISFINITE:
			case JUSTIFY_DAYS:
			case JUSTIFY_HOURS:
			case JUSTIFY_INTERVAL:
			case MAKE_DATE:
			case MAKE_INTERVAL:
			case MAKE_TIME:
			case MAKE_TIMESTAMP:
			case MAKE_TIMESTAMPTZ:
			case NOW:
			case STATEMENT_TIMESTAMP:
			case TIMEOFDAY:
			case TRANSACTION_TIMESTAMP:
			case TO_TIMESTAMP:
			case TO_CHAR:
			case TO_DATE:
			case TO_NUMBER:
			case Identifier:
			case QuotedIdentifier:
			case UnicodeQuotedIdentifier:
			case PLSQLVARIABLENAME:
			case PLSQLIDENTIFIER:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2801;
				tableelementlist();
				}
				break;
			case CLOSE_PAREN:
				EnterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OpttypedtableelementlistContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAREN() { return GetToken(PostgreSQLParser.OPEN_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypedtableelementlistContext typedtableelementlist() {
			return GetRuleContext<TypedtableelementlistContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAREN() { return GetToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public OpttypedtableelementlistContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_opttypedtableelementlist; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterOpttypedtableelementlist(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitOpttypedtableelementlist(this);
		}
	}

	[RuleVersion(0)]
	public OpttypedtableelementlistContext opttypedtableelementlist() {
		OpttypedtableelementlistContext _localctx = new OpttypedtableelementlistContext(Context, State);
		EnterRule(_localctx, 178, RULE_opttypedtableelementlist);
		try {
			State = 2810;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,85,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2805;
				Match(OPEN_PAREN);
				State = 2806;
				typedtableelementlist();
				State = 2807;
				Match(CLOSE_PAREN);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TableelementlistContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TableelementContext[] tableelement() {
			return GetRuleContexts<TableelementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TableelementContext tableelement(int i) {
			return GetRuleContext<TableelementContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(PostgreSQLParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(PostgreSQLParser.COMMA, i);
		}
		public TableelementlistContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tableelementlist; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterTableelementlist(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitTableelementlist(this);
		}
	}

	[RuleVersion(0)]
	public TableelementlistContext tableelementlist() {
		TableelementlistContext _localctx = new TableelementlistContext(Context, State);
		EnterRule(_localctx, 180, RULE_tableelementlist);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2812;
			tableelement();
			State = 2817;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 2813;
				Match(COMMA);
				State = 2814;
				tableelement();
				}
				}
				State = 2819;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypedtableelementlistContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypedtableelementContext[] typedtableelement() {
			return GetRuleContexts<TypedtableelementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypedtableelementContext typedtableelement(int i) {
			return GetRuleContext<TypedtableelementContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(PostgreSQLParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(PostgreSQLParser.COMMA, i);
		}
		public TypedtableelementlistContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typedtableelementlist; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterTypedtableelementlist(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitTypedtableelementlist(this);
		}
	}

	[RuleVersion(0)]
	public TypedtableelementlistContext typedtableelementlist() {
		TypedtableelementlistContext _localctx = new TypedtableelementlistContext(Context, State);
		EnterRule(_localctx, 182, RULE_typedtableelementlist);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2820;
			typedtableelement();
			State = 2825;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 2821;
				Match(COMMA);
				State = 2822;
				typedtableelement();
				}
				}
				State = 2827;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TableelementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TableconstraintContext tableconstraint() {
			return GetRuleContext<TableconstraintContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TablelikeclauseContext tablelikeclause() {
			return GetRuleContext<TablelikeclauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ColumnDefContext columnDef() {
			return GetRuleContext<ColumnDefContext>(0);
		}
		public TableelementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tableelement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterTableelement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitTableelement(this);
		}
	}

	[RuleVersion(0)]
	public TableelementContext tableelement() {
		TableelementContext _localctx = new TableelementContext(Context, State);
		EnterRule(_localctx, 184, RULE_tableelement);
		try {
			State = 2831;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,88,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2828;
				tableconstraint();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2829;
				tablelikeclause();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 2830;
				columnDef();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypedtableelementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ColumnOptionsContext columnOptions() {
			return GetRuleContext<ColumnOptionsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TableconstraintContext tableconstraint() {
			return GetRuleContext<TableconstraintContext>(0);
		}
		public TypedtableelementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typedtableelement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterTypedtableelement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitTypedtableelement(this);
		}
	}

	[RuleVersion(0)]
	public TypedtableelementContext typedtableelement() {
		TypedtableelementContext _localctx = new TypedtableelementContext(Context, State);
		EnterRule(_localctx, 186, RULE_typedtableelement);
		try {
			State = 2835;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,89,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2833;
				columnOptions();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2834;
				tableconstraint();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ColumnDefContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ColidContext colid() {
			return GetRuleContext<ColidContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypenameContext typename() {
			return GetRuleContext<TypenameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Create_generic_optionsContext create_generic_options() {
			return GetRuleContext<Create_generic_optionsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ColquallistContext colquallist() {
			return GetRuleContext<ColquallistContext>(0);
		}
		public ColumnDefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_columnDef; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterColumnDef(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitColumnDef(this);
		}
	}

	[RuleVersion(0)]
	public ColumnDefContext columnDef() {
		ColumnDefContext _localctx = new ColumnDefContext(Context, State);
		EnterRule(_localctx, 188, RULE_columnDef);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2837;
			colid();
			State = 2838;
			typename();
			State = 2839;
			create_generic_options();
			State = 2840;
			colquallist();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ColumnOptionsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ColidContext colid() {
			return GetRuleContext<ColidContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ColquallistContext colquallist() {
			return GetRuleContext<ColquallistContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WITH() { return GetToken(PostgreSQLParser.WITH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPTIONS() { return GetToken(PostgreSQLParser.OPTIONS, 0); }
		public ColumnOptionsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_columnOptions; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterColumnOptions(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitColumnOptions(this);
		}
	}

	[RuleVersion(0)]
	public ColumnOptionsContext columnOptions() {
		ColumnOptionsContext _localctx = new ColumnOptionsContext(Context, State);
		EnterRule(_localctx, 190, RULE_columnOptions);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2842;
			colid();
			State = 2845;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WITH) {
				{
				State = 2843;
				Match(WITH);
				State = 2844;
				Match(OPTIONS);
				}
			}

			State = 2847;
			colquallist();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ColquallistContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ColconstraintContext[] colconstraint() {
			return GetRuleContexts<ColconstraintContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ColconstraintContext colconstraint(int i) {
			return GetRuleContext<ColconstraintContext>(i);
		}
		public ColquallistContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_colquallist; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterColquallist(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitColquallist(this);
		}
	}

	[RuleVersion(0)]
	public ColquallistContext colquallist() {
		ColquallistContext _localctx = new ColquallistContext(Context, State);
		EnterRule(_localctx, 192, RULE_colquallist);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2852;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la - 42)) & ~0x3f) == 0 && ((1L << (_la - 42)) & 72084085530433547L) != 0 || _la==GENERATED) {
				{
				{
				State = 2849;
				colconstraint();
				}
				}
				State = 2854;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ColconstraintContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONSTRAINT() { return GetToken(PostgreSQLParser.CONSTRAINT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ColconstraintelemContext colconstraintelem() {
			return GetRuleContext<ColconstraintelemContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ConstraintattrContext constraintattr() {
			return GetRuleContext<ConstraintattrContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLLATE() { return GetToken(PostgreSQLParser.COLLATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Any_nameContext any_name() {
			return GetRuleContext<Any_nameContext>(0);
		}
		public ColconstraintContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_colconstraint; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterColconstraint(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitColconstraint(this);
		}
	}

	[RuleVersion(0)]
	public ColconstraintContext colconstraint() {
		ColconstraintContext _localctx = new ColconstraintContext(Context, State);
		EnterRule(_localctx, 194, RULE_colconstraint);
		try {
			State = 2863;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,92,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2855;
				Match(CONSTRAINT);
				State = 2856;
				name();
				State = 2857;
				colconstraintelem();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2859;
				colconstraintelem();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 2860;
				constraintattr();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 2861;
				Match(COLLATE);
				State = 2862;
				any_name();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ColconstraintelemContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT() { return GetToken(PostgreSQLParser.NOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NULL_P() { return GetToken(PostgreSQLParser.NULL_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNIQUE() { return GetToken(PostgreSQLParser.UNIQUE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Opt_definitionContext opt_definition() {
			return GetRuleContext<Opt_definitionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public OptconstablespaceContext optconstablespace() {
			return GetRuleContext<OptconstablespaceContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PRIMARY() { return GetToken(PostgreSQLParser.PRIMARY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEY() { return GetToken(PostgreSQLParser.KEY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHECK() { return GetToken(PostgreSQLParser.CHECK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAREN() { return GetToken(PostgreSQLParser.OPEN_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public A_exprContext a_expr() {
			return GetRuleContext<A_exprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAREN() { return GetToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Opt_no_inheritContext opt_no_inherit() {
			return GetRuleContext<Opt_no_inheritContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFAULT() { return GetToken(PostgreSQLParser.DEFAULT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public B_exprContext b_expr() {
			return GetRuleContext<B_exprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GENERATED() { return GetToken(PostgreSQLParser.GENERATED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Generated_whenContext generated_when() {
			return GetRuleContext<Generated_whenContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS() { return GetToken(PostgreSQLParser.AS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTITY_P() { return GetToken(PostgreSQLParser.IDENTITY_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public OptparenthesizedseqoptlistContext optparenthesizedseqoptlist() {
			return GetRuleContext<OptparenthesizedseqoptlistContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STORED() { return GetToken(PostgreSQLParser.STORED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REFERENCES() { return GetToken(PostgreSQLParser.REFERENCES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Qualified_nameContext qualified_name() {
			return GetRuleContext<Qualified_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Opt_column_listContext opt_column_list() {
			return GetRuleContext<Opt_column_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Key_matchContext key_match() {
			return GetRuleContext<Key_matchContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Key_actionsContext key_actions() {
			return GetRuleContext<Key_actionsContext>(0);
		}
		public ColconstraintelemContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_colconstraintelem; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterColconstraintelem(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitColconstraintelem(this);
		}
	}

	[RuleVersion(0)]
	public ColconstraintelemContext colconstraintelem() {
		ColconstraintelemContext _localctx = new ColconstraintelemContext(Context, State);
		EnterRule(_localctx, 196, RULE_colconstraintelem);
		try {
			State = 2903;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case NOT:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2865;
				Match(NOT);
				State = 2866;
				Match(NULL_P);
				}
				break;
			case NULL_P:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2867;
				Match(NULL_P);
				}
				break;
			case UNIQUE:
				EnterOuterAlt(_localctx, 3);
				{
				State = 2868;
				Match(UNIQUE);
				State = 2869;
				opt_definition();
				State = 2870;
				optconstablespace();
				}
				break;
			case PRIMARY:
				EnterOuterAlt(_localctx, 4);
				{
				State = 2872;
				Match(PRIMARY);
				State = 2873;
				Match(KEY);
				State = 2874;
				opt_definition();
				State = 2875;
				optconstablespace();
				}
				break;
			case CHECK:
				EnterOuterAlt(_localctx, 5);
				{
				State = 2877;
				Match(CHECK);
				State = 2878;
				Match(OPEN_PAREN);
				State = 2879;
				a_expr();
				State = 2880;
				Match(CLOSE_PAREN);
				State = 2881;
				opt_no_inherit();
				}
				break;
			case DEFAULT:
				EnterOuterAlt(_localctx, 6);
				{
				State = 2883;
				Match(DEFAULT);
				State = 2884;
				b_expr(0);
				}
				break;
			case GENERATED:
				EnterOuterAlt(_localctx, 7);
				{
				State = 2885;
				Match(GENERATED);
				State = 2886;
				generated_when();
				State = 2887;
				Match(AS);
				State = 2895;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case IDENTITY_P:
					{
					State = 2888;
					Match(IDENTITY_P);
					State = 2889;
					optparenthesizedseqoptlist();
					}
					break;
				case OPEN_PAREN:
					{
					State = 2890;
					Match(OPEN_PAREN);
					State = 2891;
					a_expr();
					State = 2892;
					Match(CLOSE_PAREN);
					State = 2893;
					Match(STORED);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case REFERENCES:
				EnterOuterAlt(_localctx, 8);
				{
				State = 2897;
				Match(REFERENCES);
				State = 2898;
				qualified_name();
				State = 2899;
				opt_column_list();
				State = 2900;
				key_match();
				State = 2901;
				key_actions();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Generated_whenContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALWAYS() { return GetToken(PostgreSQLParser.ALWAYS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BY() { return GetToken(PostgreSQLParser.BY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFAULT() { return GetToken(PostgreSQLParser.DEFAULT, 0); }
		public Generated_whenContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_generated_when; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterGenerated_when(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitGenerated_when(this);
		}
	}

	[RuleVersion(0)]
	public Generated_whenContext generated_when() {
		Generated_whenContext _localctx = new Generated_whenContext(Context, State);
		EnterRule(_localctx, 198, RULE_generated_when);
		try {
			State = 2908;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ALWAYS:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2905;
				Match(ALWAYS);
				}
				break;
			case BY:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2906;
				Match(BY);
				State = 2907;
				Match(DEFAULT);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConstraintattrContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFERRABLE() { return GetToken(PostgreSQLParser.DEFERRABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT() { return GetToken(PostgreSQLParser.NOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INITIALLY() { return GetToken(PostgreSQLParser.INITIALLY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFERRED() { return GetToken(PostgreSQLParser.DEFERRED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IMMEDIATE() { return GetToken(PostgreSQLParser.IMMEDIATE, 0); }
		public ConstraintattrContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constraintattr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterConstraintattr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitConstraintattr(this);
		}
	}

	[RuleVersion(0)]
	public ConstraintattrContext constraintattr() {
		ConstraintattrContext _localctx = new ConstraintattrContext(Context, State);
		EnterRule(_localctx, 200, RULE_constraintattr);
		int _la;
		try {
			State = 2915;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case DEFERRABLE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2910;
				Match(DEFERRABLE);
				}
				break;
			case NOT:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2911;
				Match(NOT);
				State = 2912;
				Match(DEFERRABLE);
				}
				break;
			case INITIALLY:
				EnterOuterAlt(_localctx, 3);
				{
				State = 2913;
				Match(INITIALLY);
				State = 2914;
				_la = TokenStream.LA(1);
				if ( !(_la==DEFERRED || _la==IMMEDIATE) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TablelikeclauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LIKE() { return GetToken(PostgreSQLParser.LIKE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Qualified_nameContext qualified_name() {
			return GetRuleContext<Qualified_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TablelikeoptionlistContext tablelikeoptionlist() {
			return GetRuleContext<TablelikeoptionlistContext>(0);
		}
		public TablelikeclauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tablelikeclause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterTablelikeclause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitTablelikeclause(this);
		}
	}

	[RuleVersion(0)]
	public TablelikeclauseContext tablelikeclause() {
		TablelikeclauseContext _localctx = new TablelikeclauseContext(Context, State);
		EnterRule(_localctx, 202, RULE_tablelikeclause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2917;
			Match(LIKE);
			State = 2918;
			qualified_name();
			State = 2919;
			tablelikeoptionlist();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TablelikeoptionlistContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TablelikeoptionContext[] tablelikeoption() {
			return GetRuleContexts<TablelikeoptionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TablelikeoptionContext tablelikeoption(int i) {
			return GetRuleContext<TablelikeoptionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] INCLUDING() { return GetTokens(PostgreSQLParser.INCLUDING); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INCLUDING(int i) {
			return GetToken(PostgreSQLParser.INCLUDING, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] EXCLUDING() { return GetTokens(PostgreSQLParser.EXCLUDING); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXCLUDING(int i) {
			return GetToken(PostgreSQLParser.EXCLUDING, i);
		}
		public TablelikeoptionlistContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tablelikeoptionlist; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterTablelikeoptionlist(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitTablelikeoptionlist(this);
		}
	}

	[RuleVersion(0)]
	public TablelikeoptionlistContext tablelikeoptionlist() {
		TablelikeoptionlistContext _localctx = new TablelikeoptionlistContext(Context, State);
		EnterRule(_localctx, 204, RULE_tablelikeoptionlist);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2925;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==EXCLUDING || _la==INCLUDING) {
				{
				{
				State = 2921;
				_la = TokenStream.LA(1);
				if ( !(_la==EXCLUDING || _la==INCLUDING) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 2922;
				tablelikeoption();
				}
				}
				State = 2927;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TablelikeoptionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMENTS() { return GetToken(PostgreSQLParser.COMMENTS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONSTRAINTS() { return GetToken(PostgreSQLParser.CONSTRAINTS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFAULTS() { return GetToken(PostgreSQLParser.DEFAULTS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTITY_P() { return GetToken(PostgreSQLParser.IDENTITY_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GENERATED() { return GetToken(PostgreSQLParser.GENERATED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INDEXES() { return GetToken(PostgreSQLParser.INDEXES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STATISTICS() { return GetToken(PostgreSQLParser.STATISTICS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STORAGE() { return GetToken(PostgreSQLParser.STORAGE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALL() { return GetToken(PostgreSQLParser.ALL, 0); }
		public TablelikeoptionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tablelikeoption; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterTablelikeoption(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitTablelikeoption(this);
		}
	}

	[RuleVersion(0)]
	public TablelikeoptionContext tablelikeoption() {
		TablelikeoptionContext _localctx = new TablelikeoptionContext(Context, State);
		EnterRule(_localctx, 206, RULE_tablelikeoption);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2928;
			_la = TokenStream.LA(1);
			if ( !(_la==ALL || (((_la - 161)) & ~0x3f) == 0 && ((1L << (_la - 161)) & 576460752303947809L) != 0 || _la==INDEXES || _la==STATISTICS || _la==STORAGE || _la==GENERATED) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TableconstraintContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONSTRAINT() { return GetToken(PostgreSQLParser.CONSTRAINT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ConstraintelemContext constraintelem() {
			return GetRuleContext<ConstraintelemContext>(0);
		}
		public TableconstraintContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tableconstraint; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterTableconstraint(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitTableconstraint(this);
		}
	}

	[RuleVersion(0)]
	public TableconstraintContext tableconstraint() {
		TableconstraintContext _localctx = new TableconstraintContext(Context, State);
		EnterRule(_localctx, 208, RULE_tableconstraint);
		try {
			State = 2935;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case CONSTRAINT:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2930;
				Match(CONSTRAINT);
				State = 2931;
				name();
				State = 2932;
				constraintelem();
				}
				break;
			case CHECK:
			case FOREIGN:
			case PRIMARY:
			case UNIQUE:
			case EXCLUDE:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2934;
				constraintelem();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConstraintelemContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHECK() { return GetToken(PostgreSQLParser.CHECK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAREN() { return GetToken(PostgreSQLParser.OPEN_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public A_exprContext a_expr() {
			return GetRuleContext<A_exprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAREN() { return GetToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ConstraintattributespecContext constraintattributespec() {
			return GetRuleContext<ConstraintattributespecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNIQUE() { return GetToken(PostgreSQLParser.UNIQUE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ColumnlistContext columnlist() {
			return GetRuleContext<ColumnlistContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Opt_c_includeContext opt_c_include() {
			return GetRuleContext<Opt_c_includeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Opt_definitionContext opt_definition() {
			return GetRuleContext<Opt_definitionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public OptconstablespaceContext optconstablespace() {
			return GetRuleContext<OptconstablespaceContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExistingindexContext existingindex() {
			return GetRuleContext<ExistingindexContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PRIMARY() { return GetToken(PostgreSQLParser.PRIMARY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEY() { return GetToken(PostgreSQLParser.KEY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXCLUDE() { return GetToken(PostgreSQLParser.EXCLUDE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Access_method_clauseContext access_method_clause() {
			return GetRuleContext<Access_method_clauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExclusionconstraintlistContext exclusionconstraintlist() {
			return GetRuleContext<ExclusionconstraintlistContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExclusionwhereclauseContext exclusionwhereclause() {
			return GetRuleContext<ExclusionwhereclauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOREIGN() { return GetToken(PostgreSQLParser.FOREIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REFERENCES() { return GetToken(PostgreSQLParser.REFERENCES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Qualified_nameContext qualified_name() {
			return GetRuleContext<Qualified_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Opt_column_listContext opt_column_list() {
			return GetRuleContext<Opt_column_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Key_matchContext key_match() {
			return GetRuleContext<Key_matchContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Key_actionsContext key_actions() {
			return GetRuleContext<Key_actionsContext>(0);
		}
		public ConstraintelemContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constraintelem; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterConstraintelem(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitConstraintelem(this);
		}
	}

	[RuleVersion(0)]
	public ConstraintelemContext constraintelem() {
		ConstraintelemContext _localctx = new ConstraintelemContext(Context, State);
		EnterRule(_localctx, 210, RULE_constraintelem);
		try {
			State = 2995;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case CHECK:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2937;
				Match(CHECK);
				State = 2938;
				Match(OPEN_PAREN);
				State = 2939;
				a_expr();
				State = 2940;
				Match(CLOSE_PAREN);
				State = 2941;
				constraintattributespec();
				}
				break;
			case UNIQUE:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2943;
				Match(UNIQUE);
				State = 2955;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case OPEN_PAREN:
					{
					State = 2944;
					Match(OPEN_PAREN);
					State = 2945;
					columnlist();
					State = 2946;
					Match(CLOSE_PAREN);
					State = 2947;
					opt_c_include();
					State = 2948;
					opt_definition();
					State = 2949;
					optconstablespace();
					State = 2950;
					constraintattributespec();
					}
					break;
				case USING:
					{
					State = 2952;
					existingindex();
					State = 2953;
					constraintattributespec();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case PRIMARY:
				EnterOuterAlt(_localctx, 3);
				{
				State = 2957;
				Match(PRIMARY);
				State = 2958;
				Match(KEY);
				State = 2970;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case OPEN_PAREN:
					{
					State = 2959;
					Match(OPEN_PAREN);
					State = 2960;
					columnlist();
					State = 2961;
					Match(CLOSE_PAREN);
					State = 2962;
					opt_c_include();
					State = 2963;
					opt_definition();
					State = 2964;
					optconstablespace();
					State = 2965;
					constraintattributespec();
					}
					break;
				case USING:
					{
					State = 2967;
					existingindex();
					State = 2968;
					constraintattributespec();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case EXCLUDE:
				EnterOuterAlt(_localctx, 4);
				{
				State = 2972;
				Match(EXCLUDE);
				State = 2973;
				access_method_clause();
				State = 2974;
				Match(OPEN_PAREN);
				State = 2975;
				exclusionconstraintlist();
				State = 2976;
				Match(CLOSE_PAREN);
				State = 2977;
				opt_c_include();
				State = 2978;
				opt_definition();
				State = 2979;
				optconstablespace();
				State = 2980;
				exclusionwhereclause();
				State = 2981;
				constraintattributespec();
				}
				break;
			case FOREIGN:
				EnterOuterAlt(_localctx, 5);
				{
				State = 2983;
				Match(FOREIGN);
				State = 2984;
				Match(KEY);
				State = 2985;
				Match(OPEN_PAREN);
				State = 2986;
				columnlist();
				State = 2987;
				Match(CLOSE_PAREN);
				State = 2988;
				Match(REFERENCES);
				State = 2989;
				qualified_name();
				State = 2990;
				opt_column_list();
				State = 2991;
				key_match();
				State = 2992;
				key_actions();
				State = 2993;
				constraintattributespec();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Opt_no_inheritContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NO() { return GetToken(PostgreSQLParser.NO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INHERIT() { return GetToken(PostgreSQLParser.INHERIT, 0); }
		public Opt_no_inheritContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_opt_no_inherit; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterOpt_no_inherit(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitOpt_no_inherit(this);
		}
	}

	[RuleVersion(0)]
	public Opt_no_inheritContext opt_no_inherit() {
		Opt_no_inheritContext _localctx = new Opt_no_inheritContext(Context, State);
		EnterRule(_localctx, 212, RULE_opt_no_inherit);
		try {
			State = 3000;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case NO:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2997;
				Match(NO);
				State = 2998;
				Match(INHERIT);
				}
				break;
			case Eof:
			case OPEN_PAREN:
			case CLOSE_PAREN:
			case COMMA:
			case SEMI:
			case ANALYSE:
			case ANALYZE:
			case CHECK:
			case COLLATE:
			case CONSTRAINT:
			case CREATE:
			case DEFAULT:
			case DEFERRABLE:
			case DO:
			case FETCH:
			case GRANT:
			case INITIALLY:
			case INTO:
			case NOT:
			case NULL_P:
			case PRIMARY:
			case REFERENCES:
			case SELECT:
			case TABLE:
			case UNIQUE:
			case WITH:
			case ABORT_P:
			case ALTER:
			case BEGIN_P:
			case CHECKPOINT:
			case CLOSE:
			case CLUSTER:
			case COMMENT:
			case COMMIT:
			case COPY:
			case DEALLOCATE:
			case DECLARE:
			case DELETE_P:
			case DISCARD:
			case DROP:
			case EXECUTE:
			case EXPLAIN:
			case INSERT:
			case LISTEN:
			case LOAD:
			case LOCK_P:
			case MERGE:
			case MOVE:
			case NOTIFY:
			case PREPARE:
			case REASSIGN:
			case REFRESH:
			case REINDEX:
			case RELEASE:
			case RESET:
			case REVOKE:
			case ROLLBACK:
			case SAVEPOINT:
			case SECURITY:
			case SET:
			case SHOW:
			case START:
			case TRUNCATE:
			case UNLISTEN:
			case UPDATE:
			case VACUUM:
			case VALUES:
			case CALL:
			case GENERATED:
			case IMPORT_P:
			case END_P:
			case MetaCommand:
				EnterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Opt_column_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAREN() { return GetToken(PostgreSQLParser.OPEN_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ColumnlistContext columnlist() {
			return GetRuleContext<ColumnlistContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAREN() { return GetToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public Opt_column_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_opt_column_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterOpt_column_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitOpt_column_list(this);
		}
	}

	[RuleVersion(0)]
	public Opt_column_listContext opt_column_list() {
		Opt_column_listContext _localctx = new Opt_column_listContext(Context, State);
		EnterRule(_localctx, 214, RULE_opt_column_list);
		try {
			State = 3007;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,103,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3002;
				Match(OPEN_PAREN);
				State = 3003;
				columnlist();
				State = 3004;
				Match(CLOSE_PAREN);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ColumnlistContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ColumnElemContext[] columnElem() {
			return GetRuleContexts<ColumnElemContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ColumnElemContext columnElem(int i) {
			return GetRuleContext<ColumnElemContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(PostgreSQLParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(PostgreSQLParser.COMMA, i);
		}
		public ColumnlistContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_columnlist; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterColumnlist(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitColumnlist(this);
		}
	}

	[RuleVersion(0)]
	public ColumnlistContext columnlist() {
		ColumnlistContext _localctx = new ColumnlistContext(Context, State);
		EnterRule(_localctx, 216, RULE_columnlist);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3009;
			columnElem();
			State = 3014;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 3010;
				Match(COMMA);
				State = 3011;
				columnElem();
				}
				}
				State = 3016;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ColumnElemContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ColidContext colid() {
			return GetRuleContext<ColidContext>(0);
		}
		public ColumnElemContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_columnElem; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterColumnElem(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitColumnElem(this);
		}
	}

	[RuleVersion(0)]
	public ColumnElemContext columnElem() {
		ColumnElemContext _localctx = new ColumnElemContext(Context, State);
		EnterRule(_localctx, 218, RULE_columnElem);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3017;
			colid();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Opt_c_includeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INCLUDE() { return GetToken(PostgreSQLParser.INCLUDE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAREN() { return GetToken(PostgreSQLParser.OPEN_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ColumnlistContext columnlist() {
			return GetRuleContext<ColumnlistContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAREN() { return GetToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public Opt_c_includeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_opt_c_include; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterOpt_c_include(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitOpt_c_include(this);
		}
	}

	[RuleVersion(0)]
	public Opt_c_includeContext opt_c_include() {
		Opt_c_includeContext _localctx = new Opt_c_includeContext(Context, State);
		EnterRule(_localctx, 220, RULE_opt_c_include);
		try {
			State = 3025;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case INCLUDE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3019;
				Match(INCLUDE);
				State = 3020;
				Match(OPEN_PAREN);
				State = 3021;
				columnlist();
				State = 3022;
				Match(CLOSE_PAREN);
				}
				break;
			case Eof:
			case OPEN_PAREN:
			case CLOSE_PAREN:
			case COMMA:
			case SEMI:
			case ANALYSE:
			case ANALYZE:
			case CREATE:
			case DEFERRABLE:
			case DO:
			case FETCH:
			case GRANT:
			case INITIALLY:
			case INTO:
			case NOT:
			case SELECT:
			case TABLE:
			case USING:
			case WHERE:
			case WITH:
			case ABORT_P:
			case ALTER:
			case BEGIN_P:
			case CHECKPOINT:
			case CLOSE:
			case CLUSTER:
			case COMMENT:
			case COMMIT:
			case COPY:
			case DEALLOCATE:
			case DECLARE:
			case DELETE_P:
			case DISCARD:
			case DROP:
			case EXECUTE:
			case EXPLAIN:
			case INSERT:
			case LISTEN:
			case LOAD:
			case LOCK_P:
			case MERGE:
			case MOVE:
			case NO:
			case NOTIFY:
			case PREPARE:
			case REASSIGN:
			case REFRESH:
			case REINDEX:
			case RELEASE:
			case RESET:
			case REVOKE:
			case ROLLBACK:
			case SAVEPOINT:
			case SECURITY:
			case SET:
			case SHOW:
			case START:
			case TRUNCATE:
			case UNLISTEN:
			case UPDATE:
			case VACUUM:
			case VALUES:
			case CALL:
			case IMPORT_P:
			case END_P:
			case MetaCommand:
				EnterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Key_matchContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MATCH() { return GetToken(PostgreSQLParser.MATCH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FULL() { return GetToken(PostgreSQLParser.FULL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARTIAL() { return GetToken(PostgreSQLParser.PARTIAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SIMPLE() { return GetToken(PostgreSQLParser.SIMPLE, 0); }
		public Key_matchContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_key_match; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterKey_match(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitKey_match(this);
		}
	}

	[RuleVersion(0)]
	public Key_matchContext key_match() {
		Key_matchContext _localctx = new Key_matchContext(Context, State);
		EnterRule(_localctx, 222, RULE_key_match);
		int _la;
		try {
			State = 3030;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case MATCH:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3027;
				Match(MATCH);
				State = 3028;
				_la = TokenStream.LA(1);
				if ( !(_la==FULL || _la==PARTIAL || _la==SIMPLE) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			case Eof:
			case OPEN_PAREN:
			case CLOSE_PAREN:
			case COMMA:
			case SEMI:
			case ANALYSE:
			case ANALYZE:
			case CHECK:
			case COLLATE:
			case CONSTRAINT:
			case CREATE:
			case DEFAULT:
			case DEFERRABLE:
			case DO:
			case FETCH:
			case GRANT:
			case INITIALLY:
			case INTO:
			case NOT:
			case NULL_P:
			case ON:
			case PRIMARY:
			case REFERENCES:
			case SELECT:
			case TABLE:
			case UNIQUE:
			case WITH:
			case ABORT_P:
			case ALTER:
			case BEGIN_P:
			case CHECKPOINT:
			case CLOSE:
			case CLUSTER:
			case COMMENT:
			case COMMIT:
			case COPY:
			case DEALLOCATE:
			case DECLARE:
			case DELETE_P:
			case DISCARD:
			case DROP:
			case EXECUTE:
			case EXPLAIN:
			case INSERT:
			case LISTEN:
			case LOAD:
			case LOCK_P:
			case MERGE:
			case MOVE:
			case NO:
			case NOTIFY:
			case PREPARE:
			case REASSIGN:
			case REFRESH:
			case REINDEX:
			case RELEASE:
			case RESET:
			case REVOKE:
			case ROLLBACK:
			case SAVEPOINT:
			case SECURITY:
			case SET:
			case SHOW:
			case START:
			case TRUNCATE:
			case UNLISTEN:
			case UPDATE:
			case VACUUM:
			case VALUES:
			case CALL:
			case GENERATED:
			case IMPORT_P:
			case END_P:
			case MetaCommand:
				EnterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExclusionconstraintlistContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExclusionconstraintelemContext[] exclusionconstraintelem() {
			return GetRuleContexts<ExclusionconstraintelemContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExclusionconstraintelemContext exclusionconstraintelem(int i) {
			return GetRuleContext<ExclusionconstraintelemContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(PostgreSQLParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(PostgreSQLParser.COMMA, i);
		}
		public ExclusionconstraintlistContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_exclusionconstraintlist; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterExclusionconstraintlist(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitExclusionconstraintlist(this);
		}
	}

	[RuleVersion(0)]
	public ExclusionconstraintlistContext exclusionconstraintlist() {
		ExclusionconstraintlistContext _localctx = new ExclusionconstraintlistContext(Context, State);
		EnterRule(_localctx, 224, RULE_exclusionconstraintlist);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3032;
			exclusionconstraintelem();
			State = 3037;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 3033;
				Match(COMMA);
				State = 3034;
				exclusionconstraintelem();
				}
				}
				State = 3039;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExclusionconstraintelemContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Index_elemContext index_elem() {
			return GetRuleContext<Index_elemContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WITH() { return GetToken(PostgreSQLParser.WITH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Any_operatorContext any_operator() {
			return GetRuleContext<Any_operatorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPERATOR() { return GetToken(PostgreSQLParser.OPERATOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAREN() { return GetToken(PostgreSQLParser.OPEN_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAREN() { return GetToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public ExclusionconstraintelemContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_exclusionconstraintelem; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterExclusionconstraintelem(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitExclusionconstraintelem(this);
		}
	}

	[RuleVersion(0)]
	public ExclusionconstraintelemContext exclusionconstraintelem() {
		ExclusionconstraintelemContext _localctx = new ExclusionconstraintelemContext(Context, State);
		EnterRule(_localctx, 226, RULE_exclusionconstraintelem);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3040;
			index_elem();
			State = 3041;
			Match(WITH);
			State = 3048;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,108,Context) ) {
			case 1:
				{
				State = 3042;
				any_operator();
				}
				break;
			case 2:
				{
				State = 3043;
				Match(OPERATOR);
				State = 3044;
				Match(OPEN_PAREN);
				State = 3045;
				any_operator();
				State = 3046;
				Match(CLOSE_PAREN);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExclusionwhereclauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WHERE() { return GetToken(PostgreSQLParser.WHERE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAREN() { return GetToken(PostgreSQLParser.OPEN_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public A_exprContext a_expr() {
			return GetRuleContext<A_exprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAREN() { return GetToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public ExclusionwhereclauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_exclusionwhereclause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterExclusionwhereclause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitExclusionwhereclause(this);
		}
	}

	[RuleVersion(0)]
	public ExclusionwhereclauseContext exclusionwhereclause() {
		ExclusionwhereclauseContext _localctx = new ExclusionwhereclauseContext(Context, State);
		EnterRule(_localctx, 228, RULE_exclusionwhereclause);
		try {
			State = 3056;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case WHERE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3050;
				Match(WHERE);
				State = 3051;
				Match(OPEN_PAREN);
				State = 3052;
				a_expr();
				State = 3053;
				Match(CLOSE_PAREN);
				}
				break;
			case Eof:
			case OPEN_PAREN:
			case CLOSE_PAREN:
			case COMMA:
			case SEMI:
			case ANALYSE:
			case ANALYZE:
			case CREATE:
			case DEFERRABLE:
			case DO:
			case FETCH:
			case GRANT:
			case INITIALLY:
			case INTO:
			case NOT:
			case SELECT:
			case TABLE:
			case WITH:
			case ABORT_P:
			case ALTER:
			case BEGIN_P:
			case CHECKPOINT:
			case CLOSE:
			case CLUSTER:
			case COMMENT:
			case COMMIT:
			case COPY:
			case DEALLOCATE:
			case DECLARE:
			case DELETE_P:
			case DISCARD:
			case DROP:
			case EXECUTE:
			case EXPLAIN:
			case INSERT:
			case LISTEN:
			case LOAD:
			case LOCK_P:
			case MERGE:
			case MOVE:
			case NO:
			case NOTIFY:
			case PREPARE:
			case REASSIGN:
			case REFRESH:
			case REINDEX:
			case RELEASE:
			case RESET:
			case REVOKE:
			case ROLLBACK:
			case SAVEPOINT:
			case SECURITY:
			case SET:
			case SHOW:
			case START:
			case TRUNCATE:
			case UNLISTEN:
			case UPDATE:
			case VACUUM:
			case VALUES:
			case CALL:
			case IMPORT_P:
			case END_P:
			case MetaCommand:
				EnterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Key_actionsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Key_updateContext key_update() {
			return GetRuleContext<Key_updateContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Key_deleteContext key_delete() {
			return GetRuleContext<Key_deleteContext>(0);
		}
		public Key_actionsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_key_actions; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterKey_actions(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitKey_actions(this);
		}
	}

	[RuleVersion(0)]
	public Key_actionsContext key_actions() {
		Key_actionsContext _localctx = new Key_actionsContext(Context, State);
		EnterRule(_localctx, 230, RULE_key_actions);
		try {
			State = 3067;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,110,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3058;
				key_update();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 3059;
				key_delete();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 3060;
				key_update();
				State = 3061;
				key_delete();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 3063;
				key_delete();
				State = 3064;
				key_update();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Key_updateContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ON() { return GetToken(PostgreSQLParser.ON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UPDATE() { return GetToken(PostgreSQLParser.UPDATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Key_actionContext key_action() {
			return GetRuleContext<Key_actionContext>(0);
		}
		public Key_updateContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_key_update; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterKey_update(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitKey_update(this);
		}
	}

	[RuleVersion(0)]
	public Key_updateContext key_update() {
		Key_updateContext _localctx = new Key_updateContext(Context, State);
		EnterRule(_localctx, 232, RULE_key_update);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3069;
			Match(ON);
			State = 3070;
			Match(UPDATE);
			State = 3071;
			key_action();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Key_deleteContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ON() { return GetToken(PostgreSQLParser.ON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DELETE_P() { return GetToken(PostgreSQLParser.DELETE_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Key_actionContext key_action() {
			return GetRuleContext<Key_actionContext>(0);
		}
		public Key_deleteContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_key_delete; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterKey_delete(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitKey_delete(this);
		}
	}

	[RuleVersion(0)]
	public Key_deleteContext key_delete() {
		Key_deleteContext _localctx = new Key_deleteContext(Context, State);
		EnterRule(_localctx, 234, RULE_key_delete);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3073;
			Match(ON);
			State = 3074;
			Match(DELETE_P);
			State = 3075;
			key_action();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Key_actionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NO() { return GetToken(PostgreSQLParser.NO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ACTION() { return GetToken(PostgreSQLParser.ACTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RESTRICT() { return GetToken(PostgreSQLParser.RESTRICT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CASCADE() { return GetToken(PostgreSQLParser.CASCADE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SET() { return GetToken(PostgreSQLParser.SET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NULL_P() { return GetToken(PostgreSQLParser.NULL_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFAULT() { return GetToken(PostgreSQLParser.DEFAULT, 0); }
		public Key_actionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_key_action; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterKey_action(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitKey_action(this);
		}
	}

	[RuleVersion(0)]
	public Key_actionContext key_action() {
		Key_actionContext _localctx = new Key_actionContext(Context, State);
		EnterRule(_localctx, 236, RULE_key_action);
		int _la;
		try {
			State = 3083;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case NO:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3077;
				Match(NO);
				State = 3078;
				Match(ACTION);
				}
				break;
			case RESTRICT:
				EnterOuterAlt(_localctx, 2);
				{
				State = 3079;
				Match(RESTRICT);
				}
				break;
			case CASCADE:
				EnterOuterAlt(_localctx, 3);
				{
				State = 3080;
				Match(CASCADE);
				}
				break;
			case SET:
				EnterOuterAlt(_localctx, 4);
				{
				State = 3081;
				Match(SET);
				State = 3082;
				_la = TokenStream.LA(1);
				if ( !(_la==DEFAULT || _la==NULL_P) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OptinheritContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INHERITS() { return GetToken(PostgreSQLParser.INHERITS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAREN() { return GetToken(PostgreSQLParser.OPEN_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Qualified_name_listContext qualified_name_list() {
			return GetRuleContext<Qualified_name_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAREN() { return GetToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public OptinheritContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_optinherit; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterOptinherit(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitOptinherit(this);
		}
	}

	[RuleVersion(0)]
	public OptinheritContext optinherit() {
		OptinheritContext _localctx = new OptinheritContext(Context, State);
		EnterRule(_localctx, 238, RULE_optinherit);
		try {
			State = 3091;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case INHERITS:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3085;
				Match(INHERITS);
				State = 3086;
				Match(OPEN_PAREN);
				State = 3087;
				qualified_name_list();
				State = 3088;
				Match(CLOSE_PAREN);
				}
				break;
			case Eof:
			case OPEN_PAREN:
			case SEMI:
			case ANALYSE:
			case ANALYZE:
			case CREATE:
			case DO:
			case FETCH:
			case GRANT:
			case INTO:
			case ON:
			case SELECT:
			case TABLE:
			case USING:
			case WITH:
			case ABORT_P:
			case ALTER:
			case BEGIN_P:
			case CHECKPOINT:
			case CLOSE:
			case CLUSTER:
			case COMMENT:
			case COMMIT:
			case COPY:
			case DEALLOCATE:
			case DECLARE:
			case DELETE_P:
			case DISCARD:
			case DROP:
			case EXECUTE:
			case EXPLAIN:
			case INSERT:
			case LISTEN:
			case LOAD:
			case LOCK_P:
			case MERGE:
			case MOVE:
			case NOTIFY:
			case PARTITION:
			case PREPARE:
			case REASSIGN:
			case REFRESH:
			case REINDEX:
			case RELEASE:
			case RESET:
			case REVOKE:
			case ROLLBACK:
			case SAVEPOINT:
			case SECURITY:
			case SERVER:
			case SET:
			case SHOW:
			case START:
			case TABLESPACE:
			case TRUNCATE:
			case UNLISTEN:
			case UPDATE:
			case VACUUM:
			case WITHOUT:
			case VALUES:
			case CALL:
			case IMPORT_P:
			case END_P:
			case MetaCommand:
				EnterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OptpartitionspecContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public PartitionspecContext partitionspec() {
			return GetRuleContext<PartitionspecContext>(0);
		}
		public OptpartitionspecContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_optpartitionspec; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterOptpartitionspec(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitOptpartitionspec(this);
		}
	}

	[RuleVersion(0)]
	public OptpartitionspecContext optpartitionspec() {
		OptpartitionspecContext _localctx = new OptpartitionspecContext(Context, State);
		EnterRule(_localctx, 240, RULE_optpartitionspec);
		try {
			State = 3095;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case PARTITION:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3093;
				partitionspec();
				}
				break;
			case Eof:
			case OPEN_PAREN:
			case SEMI:
			case ANALYSE:
			case ANALYZE:
			case CREATE:
			case DO:
			case FETCH:
			case GRANT:
			case INTO:
			case ON:
			case SELECT:
			case TABLE:
			case USING:
			case WITH:
			case ABORT_P:
			case ALTER:
			case BEGIN_P:
			case CHECKPOINT:
			case CLOSE:
			case CLUSTER:
			case COMMENT:
			case COMMIT:
			case COPY:
			case DEALLOCATE:
			case DECLARE:
			case DELETE_P:
			case DISCARD:
			case DROP:
			case EXECUTE:
			case EXPLAIN:
			case INSERT:
			case LISTEN:
			case LOAD:
			case LOCK_P:
			case MERGE:
			case MOVE:
			case NOTIFY:
			case PREPARE:
			case REASSIGN:
			case REFRESH:
			case REINDEX:
			case RELEASE:
			case RESET:
			case REVOKE:
			case ROLLBACK:
			case SAVEPOINT:
			case SECURITY:
			case SET:
			case SHOW:
			case START:
			case TABLESPACE:
			case TRUNCATE:
			case UNLISTEN:
			case UPDATE:
			case VACUUM:
			case WITHOUT:
			case VALUES:
			case CALL:
			case IMPORT_P:
			case END_P:
			case MetaCommand:
				EnterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PartitionspecContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARTITION() { return GetToken(PostgreSQLParser.PARTITION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BY() { return GetToken(PostgreSQLParser.BY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ColidContext colid() {
			return GetRuleContext<ColidContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAREN() { return GetToken(PostgreSQLParser.OPEN_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Part_paramsContext part_params() {
			return GetRuleContext<Part_paramsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAREN() { return GetToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public PartitionspecContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_partitionspec; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterPartitionspec(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitPartitionspec(this);
		}
	}

	[RuleVersion(0)]
	public PartitionspecContext partitionspec() {
		PartitionspecContext _localctx = new PartitionspecContext(Context, State);
		EnterRule(_localctx, 242, RULE_partitionspec);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3097;
			Match(PARTITION);
			State = 3098;
			Match(BY);
			State = 3099;
			colid();
			State = 3100;
			Match(OPEN_PAREN);
			State = 3101;
			part_params();
			State = 3102;
			Match(CLOSE_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Part_paramsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Part_elemContext[] part_elem() {
			return GetRuleContexts<Part_elemContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Part_elemContext part_elem(int i) {
			return GetRuleContext<Part_elemContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(PostgreSQLParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(PostgreSQLParser.COMMA, i);
		}
		public Part_paramsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_part_params; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterPart_params(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitPart_params(this);
		}
	}

	[RuleVersion(0)]
	public Part_paramsContext part_params() {
		Part_paramsContext _localctx = new Part_paramsContext(Context, State);
		EnterRule(_localctx, 244, RULE_part_params);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3104;
			part_elem();
			State = 3109;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 3105;
				Match(COMMA);
				State = 3106;
				part_elem();
				}
				}
				State = 3111;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Part_elemContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ColidContext colid() {
			return GetRuleContext<ColidContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Opt_collateContext opt_collate() {
			return GetRuleContext<Opt_collateContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Opt_classContext opt_class() {
			return GetRuleContext<Opt_classContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Func_expr_windowlessContext func_expr_windowless() {
			return GetRuleContext<Func_expr_windowlessContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAREN() { return GetToken(PostgreSQLParser.OPEN_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public A_exprContext a_expr() {
			return GetRuleContext<A_exprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAREN() { return GetToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public Part_elemContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_part_elem; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterPart_elem(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitPart_elem(this);
		}
	}

	[RuleVersion(0)]
	public Part_elemContext part_elem() {
		Part_elemContext _localctx = new Part_elemContext(Context, State);
		EnterRule(_localctx, 246, RULE_part_elem);
		try {
			State = 3126;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,115,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3112;
				colid();
				State = 3113;
				opt_collate();
				State = 3114;
				opt_class();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 3116;
				func_expr_windowless();
				State = 3117;
				opt_collate();
				State = 3118;
				opt_class();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 3120;
				Match(OPEN_PAREN);
				State = 3121;
				a_expr();
				State = 3122;
				Match(CLOSE_PAREN);
				State = 3123;
				opt_collate();
				State = 3124;
				opt_class();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Table_access_method_clauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode USING() { return GetToken(PostgreSQLParser.USING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		public Table_access_method_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_table_access_method_clause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterTable_access_method_clause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitTable_access_method_clause(this);
		}
	}

	[RuleVersion(0)]
	public Table_access_method_clauseContext table_access_method_clause() {
		Table_access_method_clauseContext _localctx = new Table_access_method_clauseContext(Context, State);
		EnterRule(_localctx, 248, RULE_table_access_method_clause);
		try {
			State = 3131;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case USING:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3128;
				Match(USING);
				State = 3129;
				name();
				}
				break;
			case Eof:
			case OPEN_PAREN:
			case SEMI:
			case ANALYSE:
			case ANALYZE:
			case AS:
			case CREATE:
			case DO:
			case FETCH:
			case GRANT:
			case INTO:
			case ON:
			case SELECT:
			case TABLE:
			case WITH:
			case ABORT_P:
			case ALTER:
			case BEGIN_P:
			case CHECKPOINT:
			case CLOSE:
			case CLUSTER:
			case COMMENT:
			case COMMIT:
			case COPY:
			case DEALLOCATE:
			case DECLARE:
			case DELETE_P:
			case DISCARD:
			case DROP:
			case EXECUTE:
			case EXPLAIN:
			case INSERT:
			case LISTEN:
			case LOAD:
			case LOCK_P:
			case MERGE:
			case MOVE:
			case NOTIFY:
			case PREPARE:
			case REASSIGN:
			case REFRESH:
			case REINDEX:
			case RELEASE:
			case RESET:
			case REVOKE:
			case ROLLBACK:
			case SAVEPOINT:
			case SECURITY:
			case SET:
			case SHOW:
			case START:
			case TABLESPACE:
			case TRUNCATE:
			case UNLISTEN:
			case UPDATE:
			case VACUUM:
			case WITHOUT:
			case VALUES:
			case CALL:
			case IMPORT_P:
			case END_P:
			case MetaCommand:
				EnterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OptwithContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WITH() { return GetToken(PostgreSQLParser.WITH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ReloptionsContext reloptions() {
			return GetRuleContext<ReloptionsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WITHOUT() { return GetToken(PostgreSQLParser.WITHOUT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OIDS() { return GetToken(PostgreSQLParser.OIDS, 0); }
		public OptwithContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_optwith; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterOptwith(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitOptwith(this);
		}
	}

	[RuleVersion(0)]
	public OptwithContext optwith() {
		OptwithContext _localctx = new OptwithContext(Context, State);
		EnterRule(_localctx, 250, RULE_optwith);
		try {
			State = 3138;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,117,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3133;
				Match(WITH);
				State = 3134;
				reloptions();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 3135;
				Match(WITHOUT);
				State = 3136;
				Match(OIDS);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OncommitoptionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ON() { return GetToken(PostgreSQLParser.ON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMIT() { return GetToken(PostgreSQLParser.COMMIT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DROP() { return GetToken(PostgreSQLParser.DROP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DELETE_P() { return GetToken(PostgreSQLParser.DELETE_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROWS() { return GetToken(PostgreSQLParser.ROWS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PRESERVE() { return GetToken(PostgreSQLParser.PRESERVE, 0); }
		public OncommitoptionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_oncommitoption; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterOncommitoption(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitOncommitoption(this);
		}
	}

	[RuleVersion(0)]
	public OncommitoptionContext oncommitoption() {
		OncommitoptionContext _localctx = new OncommitoptionContext(Context, State);
		EnterRule(_localctx, 252, RULE_oncommitoption);
		try {
			State = 3150;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ON:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3140;
				Match(ON);
				State = 3141;
				Match(COMMIT);
				State = 3147;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case DROP:
					{
					State = 3142;
					Match(DROP);
					}
					break;
				case DELETE_P:
					{
					State = 3143;
					Match(DELETE_P);
					State = 3144;
					Match(ROWS);
					}
					break;
				case PRESERVE:
					{
					State = 3145;
					Match(PRESERVE);
					State = 3146;
					Match(ROWS);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case Eof:
			case OPEN_PAREN:
			case SEMI:
			case ANALYSE:
			case ANALYZE:
			case AS:
			case CREATE:
			case DO:
			case FETCH:
			case GRANT:
			case INTO:
			case SELECT:
			case TABLE:
			case WITH:
			case ABORT_P:
			case ALTER:
			case BEGIN_P:
			case CHECKPOINT:
			case CLOSE:
			case CLUSTER:
			case COMMENT:
			case COMMIT:
			case COPY:
			case DEALLOCATE:
			case DECLARE:
			case DELETE_P:
			case DISCARD:
			case DROP:
			case EXECUTE:
			case EXPLAIN:
			case INSERT:
			case LISTEN:
			case LOAD:
			case LOCK_P:
			case MERGE:
			case MOVE:
			case NOTIFY:
			case PREPARE:
			case REASSIGN:
			case REFRESH:
			case REINDEX:
			case RELEASE:
			case RESET:
			case REVOKE:
			case ROLLBACK:
			case SAVEPOINT:
			case SECURITY:
			case SET:
			case SHOW:
			case START:
			case TABLESPACE:
			case TRUNCATE:
			case UNLISTEN:
			case UPDATE:
			case VACUUM:
			case VALUES:
			case CALL:
			case IMPORT_P:
			case END_P:
			case MetaCommand:
				EnterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OpttablespaceContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLESPACE() { return GetToken(PostgreSQLParser.TABLESPACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		public OpttablespaceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_opttablespace; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterOpttablespace(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitOpttablespace(this);
		}
	}

	[RuleVersion(0)]
	public OpttablespaceContext opttablespace() {
		OpttablespaceContext _localctx = new OpttablespaceContext(Context, State);
		EnterRule(_localctx, 254, RULE_opttablespace);
		try {
			State = 3155;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case TABLESPACE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3152;
				Match(TABLESPACE);
				State = 3153;
				name();
				}
				break;
			case Eof:
			case OPEN_PAREN:
			case SEMI:
			case ANALYSE:
			case ANALYZE:
			case AS:
			case CREATE:
			case DO:
			case FETCH:
			case GRANT:
			case INTO:
			case SELECT:
			case TABLE:
			case WHERE:
			case WITH:
			case ABORT_P:
			case ALTER:
			case BEGIN_P:
			case CHECKPOINT:
			case CLOSE:
			case CLUSTER:
			case COMMENT:
			case COMMIT:
			case COPY:
			case DEALLOCATE:
			case DECLARE:
			case DELETE_P:
			case DISCARD:
			case DROP:
			case EXECUTE:
			case EXPLAIN:
			case INSERT:
			case LISTEN:
			case LOAD:
			case LOCK_P:
			case MERGE:
			case MOVE:
			case NOTIFY:
			case PREPARE:
			case REASSIGN:
			case REFRESH:
			case REINDEX:
			case RELEASE:
			case RESET:
			case REVOKE:
			case ROLLBACK:
			case SAVEPOINT:
			case SECURITY:
			case SET:
			case SHOW:
			case START:
			case TRUNCATE:
			case UNLISTEN:
			case UPDATE:
			case VACUUM:
			case VALUES:
			case CALL:
			case IMPORT_P:
			case END_P:
			case MetaCommand:
				EnterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OptconstablespaceContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode USING() { return GetToken(PostgreSQLParser.USING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INDEX() { return GetToken(PostgreSQLParser.INDEX, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLESPACE() { return GetToken(PostgreSQLParser.TABLESPACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		public OptconstablespaceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_optconstablespace; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterOptconstablespace(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitOptconstablespace(this);
		}
	}

	[RuleVersion(0)]
	public OptconstablespaceContext optconstablespace() {
		OptconstablespaceContext _localctx = new OptconstablespaceContext(Context, State);
		EnterRule(_localctx, 256, RULE_optconstablespace);
		try {
			State = 3162;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case USING:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3157;
				Match(USING);
				State = 3158;
				Match(INDEX);
				State = 3159;
				Match(TABLESPACE);
				State = 3160;
				name();
				}
				break;
			case Eof:
			case OPEN_PAREN:
			case CLOSE_PAREN:
			case COMMA:
			case SEMI:
			case ANALYSE:
			case ANALYZE:
			case CHECK:
			case COLLATE:
			case CONSTRAINT:
			case CREATE:
			case DEFAULT:
			case DEFERRABLE:
			case DO:
			case FETCH:
			case GRANT:
			case INITIALLY:
			case INTO:
			case NOT:
			case NULL_P:
			case PRIMARY:
			case REFERENCES:
			case SELECT:
			case TABLE:
			case UNIQUE:
			case WHERE:
			case WITH:
			case ABORT_P:
			case ALTER:
			case BEGIN_P:
			case CHECKPOINT:
			case CLOSE:
			case CLUSTER:
			case COMMENT:
			case COMMIT:
			case COPY:
			case DEALLOCATE:
			case DECLARE:
			case DELETE_P:
			case DISCARD:
			case DROP:
			case EXECUTE:
			case EXPLAIN:
			case INSERT:
			case LISTEN:
			case LOAD:
			case LOCK_P:
			case MERGE:
			case MOVE:
			case NO:
			case NOTIFY:
			case PREPARE:
			case REASSIGN:
			case REFRESH:
			case REINDEX:
			case RELEASE:
			case RESET:
			case REVOKE:
			case ROLLBACK:
			case SAVEPOINT:
			case SECURITY:
			case SET:
			case SHOW:
			case START:
			case TRUNCATE:
			case UNLISTEN:
			case UPDATE:
			case VACUUM:
			case VALUES:
			case CALL:
			case GENERATED:
			case IMPORT_P:
			case END_P:
			case MetaCommand:
				EnterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExistingindexContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode USING() { return GetToken(PostgreSQLParser.USING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INDEX() { return GetToken(PostgreSQLParser.INDEX, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		public ExistingindexContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_existingindex; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterExistingindex(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitExistingindex(this);
		}
	}

	[RuleVersion(0)]
	public ExistingindexContext existingindex() {
		ExistingindexContext _localctx = new ExistingindexContext(Context, State);
		EnterRule(_localctx, 258, RULE_existingindex);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3164;
			Match(USING);
			State = 3165;
			Match(INDEX);
			State = 3166;
			name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CreatestatsstmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CREATE() { return GetToken(PostgreSQLParser.CREATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STATISTICS() { return GetToken(PostgreSQLParser.STATISTICS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Any_nameContext any_name() {
			return GetRuleContext<Any_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Opt_name_listContext opt_name_list() {
			return GetRuleContext<Opt_name_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ON() { return GetToken(PostgreSQLParser.ON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Expr_listContext expr_list() {
			return GetRuleContext<Expr_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FROM() { return GetToken(PostgreSQLParser.FROM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public From_listContext from_list() {
			return GetRuleContext<From_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF_P() { return GetToken(PostgreSQLParser.IF_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT() { return GetToken(PostgreSQLParser.NOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXISTS() { return GetToken(PostgreSQLParser.EXISTS, 0); }
		public CreatestatsstmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_createstatsstmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterCreatestatsstmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitCreatestatsstmt(this);
		}
	}

	[RuleVersion(0)]
	public CreatestatsstmtContext createstatsstmt() {
		CreatestatsstmtContext _localctx = new CreatestatsstmtContext(Context, State);
		EnterRule(_localctx, 260, RULE_createstatsstmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3168;
			Match(CREATE);
			State = 3169;
			Match(STATISTICS);
			State = 3173;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,122,Context) ) {
			case 1:
				{
				State = 3170;
				Match(IF_P);
				State = 3171;
				Match(NOT);
				State = 3172;
				Match(EXISTS);
				}
				break;
			}
			State = 3175;
			any_name();
			State = 3176;
			opt_name_list();
			State = 3177;
			Match(ON);
			State = 3178;
			expr_list();
			State = 3179;
			Match(FROM);
			State = 3180;
			from_list();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AlterstatsstmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALTER() { return GetToken(PostgreSQLParser.ALTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] STATISTICS() { return GetTokens(PostgreSQLParser.STATISTICS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STATISTICS(int i) {
			return GetToken(PostgreSQLParser.STATISTICS, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Any_nameContext any_name() {
			return GetRuleContext<Any_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SET() { return GetToken(PostgreSQLParser.SET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SignediconstContext signediconst() {
			return GetRuleContext<SignediconstContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF_P() { return GetToken(PostgreSQLParser.IF_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXISTS() { return GetToken(PostgreSQLParser.EXISTS, 0); }
		public AlterstatsstmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alterstatsstmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterAlterstatsstmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitAlterstatsstmt(this);
		}
	}

	[RuleVersion(0)]
	public AlterstatsstmtContext alterstatsstmt() {
		AlterstatsstmtContext _localctx = new AlterstatsstmtContext(Context, State);
		EnterRule(_localctx, 262, RULE_alterstatsstmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3182;
			Match(ALTER);
			State = 3183;
			Match(STATISTICS);
			State = 3186;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,123,Context) ) {
			case 1:
				{
				State = 3184;
				Match(IF_P);
				State = 3185;
				Match(EXISTS);
				}
				break;
			}
			State = 3188;
			any_name();
			State = 3189;
			Match(SET);
			State = 3190;
			Match(STATISTICS);
			State = 3191;
			signediconst();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CreateasstmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CREATE() { return GetToken(PostgreSQLParser.CREATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public OpttempContext opttemp() {
			return GetRuleContext<OpttempContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLE() { return GetToken(PostgreSQLParser.TABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Create_as_targetContext create_as_target() {
			return GetRuleContext<Create_as_targetContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS() { return GetToken(PostgreSQLParser.AS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SelectstmtContext selectstmt() {
			return GetRuleContext<SelectstmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Opt_with_dataContext opt_with_data() {
			return GetRuleContext<Opt_with_dataContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF_P() { return GetToken(PostgreSQLParser.IF_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT() { return GetToken(PostgreSQLParser.NOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXISTS() { return GetToken(PostgreSQLParser.EXISTS, 0); }
		public CreateasstmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_createasstmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterCreateasstmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitCreateasstmt(this);
		}
	}

	[RuleVersion(0)]
	public CreateasstmtContext createasstmt() {
		CreateasstmtContext _localctx = new CreateasstmtContext(Context, State);
		EnterRule(_localctx, 264, RULE_createasstmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3193;
			Match(CREATE);
			State = 3194;
			opttemp();
			State = 3195;
			Match(TABLE);
			State = 3199;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,124,Context) ) {
			case 1:
				{
				State = 3196;
				Match(IF_P);
				State = 3197;
				Match(NOT);
				State = 3198;
				Match(EXISTS);
				}
				break;
			}
			State = 3201;
			create_as_target();
			State = 3202;
			Match(AS);
			State = 3203;
			selectstmt();
			State = 3204;
			opt_with_data();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Create_as_targetContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Qualified_nameContext qualified_name() {
			return GetRuleContext<Qualified_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Opt_column_listContext opt_column_list() {
			return GetRuleContext<Opt_column_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Table_access_method_clauseContext table_access_method_clause() {
			return GetRuleContext<Table_access_method_clauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public OptwithContext optwith() {
			return GetRuleContext<OptwithContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public OncommitoptionContext oncommitoption() {
			return GetRuleContext<OncommitoptionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public OpttablespaceContext opttablespace() {
			return GetRuleContext<OpttablespaceContext>(0);
		}
		public Create_as_targetContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_create_as_target; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterCreate_as_target(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitCreate_as_target(this);
		}
	}

	[RuleVersion(0)]
	public Create_as_targetContext create_as_target() {
		Create_as_targetContext _localctx = new Create_as_targetContext(Context, State);
		EnterRule(_localctx, 266, RULE_create_as_target);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3206;
			qualified_name();
			State = 3207;
			opt_column_list();
			State = 3208;
			table_access_method_clause();
			State = 3209;
			optwith();
			State = 3210;
			oncommitoption();
			State = 3211;
			opttablespace();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Opt_with_dataContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WITH() { return GetToken(PostgreSQLParser.WITH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DATA_P() { return GetToken(PostgreSQLParser.DATA_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NO() { return GetToken(PostgreSQLParser.NO, 0); }
		public Opt_with_dataContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_opt_with_data; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterOpt_with_data(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitOpt_with_data(this);
		}
	}

	[RuleVersion(0)]
	public Opt_with_dataContext opt_with_data() {
		Opt_with_dataContext _localctx = new Opt_with_dataContext(Context, State);
		EnterRule(_localctx, 268, RULE_opt_with_data);
		try {
			State = 3220;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,126,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3213;
				Match(WITH);
				State = 3217;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case DATA_P:
					{
					State = 3214;
					Match(DATA_P);
					}
					break;
				case NO:
					{
					State = 3215;
					Match(NO);
					State = 3216;
					Match(DATA_P);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CreatematviewstmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CREATE() { return GetToken(PostgreSQLParser.CREATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public OptnologContext optnolog() {
			return GetRuleContext<OptnologContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MATERIALIZED() { return GetToken(PostgreSQLParser.MATERIALIZED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VIEW() { return GetToken(PostgreSQLParser.VIEW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Create_mv_targetContext create_mv_target() {
			return GetRuleContext<Create_mv_targetContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS() { return GetToken(PostgreSQLParser.AS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SelectstmtContext selectstmt() {
			return GetRuleContext<SelectstmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Opt_with_dataContext opt_with_data() {
			return GetRuleContext<Opt_with_dataContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF_P() { return GetToken(PostgreSQLParser.IF_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT() { return GetToken(PostgreSQLParser.NOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXISTS() { return GetToken(PostgreSQLParser.EXISTS, 0); }
		public CreatematviewstmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_creatematviewstmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterCreatematviewstmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitCreatematviewstmt(this);
		}
	}

	[RuleVersion(0)]
	public CreatematviewstmtContext creatematviewstmt() {
		CreatematviewstmtContext _localctx = new CreatematviewstmtContext(Context, State);
		EnterRule(_localctx, 270, RULE_creatematviewstmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3222;
			Match(CREATE);
			State = 3223;
			optnolog();
			State = 3224;
			Match(MATERIALIZED);
			State = 3225;
			Match(VIEW);
			State = 3229;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,127,Context) ) {
			case 1:
				{
				State = 3226;
				Match(IF_P);
				State = 3227;
				Match(NOT);
				State = 3228;
				Match(EXISTS);
				}
				break;
			}
			State = 3231;
			create_mv_target();
			State = 3232;
			Match(AS);
			State = 3233;
			selectstmt();
			State = 3234;
			opt_with_data();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Create_mv_targetContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Qualified_nameContext qualified_name() {
			return GetRuleContext<Qualified_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Opt_column_listContext opt_column_list() {
			return GetRuleContext<Opt_column_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Table_access_method_clauseContext table_access_method_clause() {
			return GetRuleContext<Table_access_method_clauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Opt_reloptionsContext opt_reloptions() {
			return GetRuleContext<Opt_reloptionsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public OpttablespaceContext opttablespace() {
			return GetRuleContext<OpttablespaceContext>(0);
		}
		public Create_mv_targetContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_create_mv_target; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterCreate_mv_target(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitCreate_mv_target(this);
		}
	}

	[RuleVersion(0)]
	public Create_mv_targetContext create_mv_target() {
		Create_mv_targetContext _localctx = new Create_mv_targetContext(Context, State);
		EnterRule(_localctx, 272, RULE_create_mv_target);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3236;
			qualified_name();
			State = 3237;
			opt_column_list();
			State = 3238;
			table_access_method_clause();
			State = 3239;
			opt_reloptions();
			State = 3240;
			opttablespace();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OptnologContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNLOGGED() { return GetToken(PostgreSQLParser.UNLOGGED, 0); }
		public OptnologContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_optnolog; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterOptnolog(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitOptnolog(this);
		}
	}

	[RuleVersion(0)]
	public OptnologContext optnolog() {
		OptnologContext _localctx = new OptnologContext(Context, State);
		EnterRule(_localctx, 274, RULE_optnolog);
		try {
			State = 3244;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case UNLOGGED:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3242;
				Match(UNLOGGED);
				}
				break;
			case MATERIALIZED:
				EnterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RefreshmatviewstmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REFRESH() { return GetToken(PostgreSQLParser.REFRESH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MATERIALIZED() { return GetToken(PostgreSQLParser.MATERIALIZED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VIEW() { return GetToken(PostgreSQLParser.VIEW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Opt_concurrentlyContext opt_concurrently() {
			return GetRuleContext<Opt_concurrentlyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Qualified_nameContext qualified_name() {
			return GetRuleContext<Qualified_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Opt_with_dataContext opt_with_data() {
			return GetRuleContext<Opt_with_dataContext>(0);
		}
		public RefreshmatviewstmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_refreshmatviewstmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterRefreshmatviewstmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitRefreshmatviewstmt(this);
		}
	}

	[RuleVersion(0)]
	public RefreshmatviewstmtContext refreshmatviewstmt() {
		RefreshmatviewstmtContext _localctx = new RefreshmatviewstmtContext(Context, State);
		EnterRule(_localctx, 276, RULE_refreshmatviewstmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3246;
			Match(REFRESH);
			State = 3247;
			Match(MATERIALIZED);
			State = 3248;
			Match(VIEW);
			State = 3249;
			opt_concurrently();
			State = 3250;
			qualified_name();
			State = 3251;
			opt_with_data();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CreateseqstmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CREATE() { return GetToken(PostgreSQLParser.CREATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public OpttempContext opttemp() {
			return GetRuleContext<OpttempContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEQUENCE() { return GetToken(PostgreSQLParser.SEQUENCE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Qualified_nameContext qualified_name() {
			return GetRuleContext<Qualified_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public OptseqoptlistContext optseqoptlist() {
			return GetRuleContext<OptseqoptlistContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF_P() { return GetToken(PostgreSQLParser.IF_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT() { return GetToken(PostgreSQLParser.NOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXISTS() { return GetToken(PostgreSQLParser.EXISTS, 0); }
		public CreateseqstmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_createseqstmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterCreateseqstmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitCreateseqstmt(this);
		}
	}

	[RuleVersion(0)]
	public CreateseqstmtContext createseqstmt() {
		CreateseqstmtContext _localctx = new CreateseqstmtContext(Context, State);
		EnterRule(_localctx, 278, RULE_createseqstmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3253;
			Match(CREATE);
			State = 3254;
			opttemp();
			State = 3255;
			Match(SEQUENCE);
			State = 3259;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,129,Context) ) {
			case 1:
				{
				State = 3256;
				Match(IF_P);
				State = 3257;
				Match(NOT);
				State = 3258;
				Match(EXISTS);
				}
				break;
			}
			State = 3261;
			qualified_name();
			State = 3262;
			optseqoptlist();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AlterseqstmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALTER() { return GetToken(PostgreSQLParser.ALTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEQUENCE() { return GetToken(PostgreSQLParser.SEQUENCE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Qualified_nameContext qualified_name() {
			return GetRuleContext<Qualified_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SeqoptlistContext seqoptlist() {
			return GetRuleContext<SeqoptlistContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF_P() { return GetToken(PostgreSQLParser.IF_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXISTS() { return GetToken(PostgreSQLParser.EXISTS, 0); }
		public AlterseqstmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alterseqstmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterAlterseqstmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitAlterseqstmt(this);
		}
	}

	[RuleVersion(0)]
	public AlterseqstmtContext alterseqstmt() {
		AlterseqstmtContext _localctx = new AlterseqstmtContext(Context, State);
		EnterRule(_localctx, 280, RULE_alterseqstmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3264;
			Match(ALTER);
			State = 3265;
			Match(SEQUENCE);
			State = 3268;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,130,Context) ) {
			case 1:
				{
				State = 3266;
				Match(IF_P);
				State = 3267;
				Match(EXISTS);
				}
				break;
			}
			State = 3270;
			qualified_name();
			State = 3271;
			seqoptlist();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OptseqoptlistContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SeqoptlistContext seqoptlist() {
			return GetRuleContext<SeqoptlistContext>(0);
		}
		public OptseqoptlistContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_optseqoptlist; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterOptseqoptlist(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitOptseqoptlist(this);
		}
	}

	[RuleVersion(0)]
	public OptseqoptlistContext optseqoptlist() {
		OptseqoptlistContext _localctx = new OptseqoptlistContext(Context, State);
		EnterRule(_localctx, 282, RULE_optseqoptlist);
		try {
			State = 3275;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,131,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3273;
				seqoptlist();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OptparenthesizedseqoptlistContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAREN() { return GetToken(PostgreSQLParser.OPEN_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SeqoptlistContext seqoptlist() {
			return GetRuleContext<SeqoptlistContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAREN() { return GetToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public OptparenthesizedseqoptlistContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_optparenthesizedseqoptlist; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterOptparenthesizedseqoptlist(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitOptparenthesizedseqoptlist(this);
		}
	}

	[RuleVersion(0)]
	public OptparenthesizedseqoptlistContext optparenthesizedseqoptlist() {
		OptparenthesizedseqoptlistContext _localctx = new OptparenthesizedseqoptlistContext(Context, State);
		EnterRule(_localctx, 284, RULE_optparenthesizedseqoptlist);
		try {
			State = 3282;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,132,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3277;
				Match(OPEN_PAREN);
				State = 3278;
				seqoptlist();
				State = 3279;
				Match(CLOSE_PAREN);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SeqoptlistContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SeqoptelemContext[] seqoptelem() {
			return GetRuleContexts<SeqoptelemContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SeqoptelemContext seqoptelem(int i) {
			return GetRuleContext<SeqoptelemContext>(i);
		}
		public SeqoptlistContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_seqoptlist; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterSeqoptlist(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitSeqoptlist(this);
		}
	}

	[RuleVersion(0)]
	public SeqoptlistContext seqoptlist() {
		SeqoptlistContext _localctx = new SeqoptlistContext(Context, State);
		EnterRule(_localctx, 286, RULE_seqoptlist);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 3285;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 3284;
					seqoptelem();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 3287;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,133,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SeqoptelemContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS() { return GetToken(PostgreSQLParser.AS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SimpletypenameContext simpletypename() {
			return GetRuleContext<SimpletypenameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CACHE() { return GetToken(PostgreSQLParser.CACHE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NumericonlyContext numericonly() {
			return GetRuleContext<NumericonlyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CYCLE() { return GetToken(PostgreSQLParser.CYCLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INCREMENT() { return GetToken(PostgreSQLParser.INCREMENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Opt_byContext opt_by() {
			return GetRuleContext<Opt_byContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MAXVALUE() { return GetToken(PostgreSQLParser.MAXVALUE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINVALUE() { return GetToken(PostgreSQLParser.MINVALUE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NO() { return GetToken(PostgreSQLParser.NO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OWNED() { return GetToken(PostgreSQLParser.OWNED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BY() { return GetToken(PostgreSQLParser.BY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Any_nameContext any_name() {
			return GetRuleContext<Any_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEQUENCE() { return GetToken(PostgreSQLParser.SEQUENCE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NAME_P() { return GetToken(PostgreSQLParser.NAME_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode START() { return GetToken(PostgreSQLParser.START, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Opt_withContext opt_with() {
			return GetRuleContext<Opt_withContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RESTART() { return GetToken(PostgreSQLParser.RESTART, 0); }
		public SeqoptelemContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_seqoptelem; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterSeqoptelem(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitSeqoptelem(this);
		}
	}

	[RuleVersion(0)]
	public SeqoptelemContext seqoptelem() {
		SeqoptelemContext _localctx = new SeqoptelemContext(Context, State);
		EnterRule(_localctx, 288, RULE_seqoptelem);
		int _la;
		try {
			State = 3319;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case AS:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3289;
				Match(AS);
				State = 3290;
				simpletypename();
				}
				break;
			case CACHE:
				EnterOuterAlt(_localctx, 2);
				{
				State = 3291;
				Match(CACHE);
				State = 3292;
				numericonly();
				}
				break;
			case CYCLE:
				EnterOuterAlt(_localctx, 3);
				{
				State = 3293;
				Match(CYCLE);
				}
				break;
			case INCREMENT:
				EnterOuterAlt(_localctx, 4);
				{
				State = 3294;
				Match(INCREMENT);
				State = 3295;
				opt_by();
				State = 3296;
				numericonly();
				}
				break;
			case MAXVALUE:
				EnterOuterAlt(_localctx, 5);
				{
				State = 3298;
				Match(MAXVALUE);
				State = 3299;
				numericonly();
				}
				break;
			case MINVALUE:
				EnterOuterAlt(_localctx, 6);
				{
				State = 3300;
				Match(MINVALUE);
				State = 3301;
				numericonly();
				}
				break;
			case NO:
				EnterOuterAlt(_localctx, 7);
				{
				State = 3302;
				Match(NO);
				State = 3303;
				_la = TokenStream.LA(1);
				if ( !(_la==CYCLE || _la==MAXVALUE || _la==MINVALUE) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			case OWNED:
				EnterOuterAlt(_localctx, 8);
				{
				State = 3304;
				Match(OWNED);
				State = 3305;
				Match(BY);
				State = 3306;
				any_name();
				}
				break;
			case SEQUENCE:
				EnterOuterAlt(_localctx, 9);
				{
				State = 3307;
				Match(SEQUENCE);
				State = 3308;
				Match(NAME_P);
				State = 3309;
				any_name();
				}
				break;
			case START:
				EnterOuterAlt(_localctx, 10);
				{
				State = 3310;
				Match(START);
				State = 3311;
				opt_with();
				State = 3312;
				numericonly();
				}
				break;
			case RESTART:
				EnterOuterAlt(_localctx, 11);
				{
				State = 3314;
				Match(RESTART);
				State = 3315;
				opt_with();
				State = 3317;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==PLUS || _la==MINUS || _la==Integral || _la==Numeric) {
					{
					State = 3316;
					numericonly();
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Opt_byContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BY() { return GetToken(PostgreSQLParser.BY, 0); }
		public Opt_byContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_opt_by; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterOpt_by(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitOpt_by(this);
		}
	}

	[RuleVersion(0)]
	public Opt_byContext opt_by() {
		Opt_byContext _localctx = new Opt_byContext(Context, State);
		EnterRule(_localctx, 290, RULE_opt_by);
		try {
			State = 3323;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case BY:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3321;
				Match(BY);
				}
				break;
			case PLUS:
			case MINUS:
			case Integral:
			case Numeric:
				EnterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NumericonlyContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FconstContext fconst() {
			return GetRuleContext<FconstContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLUS() { return GetToken(PostgreSQLParser.PLUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUS() { return GetToken(PostgreSQLParser.MINUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SignediconstContext signediconst() {
			return GetRuleContext<SignediconstContext>(0);
		}
		public NumericonlyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_numericonly; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterNumericonly(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitNumericonly(this);
		}
	}

	[RuleVersion(0)]
	public NumericonlyContext numericonly() {
		NumericonlyContext _localctx = new NumericonlyContext(Context, State);
		EnterRule(_localctx, 292, RULE_numericonly);
		try {
			State = 3331;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,137,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3325;
				fconst();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 3326;
				Match(PLUS);
				State = 3327;
				fconst();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 3328;
				Match(MINUS);
				State = 3329;
				fconst();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 3330;
				signediconst();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Numericonly_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NumericonlyContext[] numericonly() {
			return GetRuleContexts<NumericonlyContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public NumericonlyContext numericonly(int i) {
			return GetRuleContext<NumericonlyContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(PostgreSQLParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(PostgreSQLParser.COMMA, i);
		}
		public Numericonly_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_numericonly_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterNumericonly_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitNumericonly_list(this);
		}
	}

	[RuleVersion(0)]
	public Numericonly_listContext numericonly_list() {
		Numericonly_listContext _localctx = new Numericonly_listContext(Context, State);
		EnterRule(_localctx, 294, RULE_numericonly_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3333;
			numericonly();
			State = 3338;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 3334;
				Match(COMMA);
				State = 3335;
				numericonly();
				}
				}
				State = 3340;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CreateplangstmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CREATE() { return GetToken(PostgreSQLParser.CREATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Opt_or_replaceContext opt_or_replace() {
			return GetRuleContext<Opt_or_replaceContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Opt_trustedContext opt_trusted() {
			return GetRuleContext<Opt_trustedContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Opt_proceduralContext opt_procedural() {
			return GetRuleContext<Opt_proceduralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LANGUAGE() { return GetToken(PostgreSQLParser.LANGUAGE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HANDLER() { return GetToken(PostgreSQLParser.HANDLER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Handler_nameContext handler_name() {
			return GetRuleContext<Handler_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Opt_inline_handlerContext opt_inline_handler() {
			return GetRuleContext<Opt_inline_handlerContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Opt_validatorContext opt_validator() {
			return GetRuleContext<Opt_validatorContext>(0);
		}
		public CreateplangstmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_createplangstmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterCreateplangstmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitCreateplangstmt(this);
		}
	}

	[RuleVersion(0)]
	public CreateplangstmtContext createplangstmt() {
		CreateplangstmtContext _localctx = new CreateplangstmtContext(Context, State);
		EnterRule(_localctx, 296, RULE_createplangstmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3341;
			Match(CREATE);
			State = 3342;
			opt_or_replace();
			State = 3343;
			opt_trusted();
			State = 3344;
			opt_procedural();
			State = 3345;
			Match(LANGUAGE);
			State = 3346;
			name();
			State = 3352;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==HANDLER) {
				{
				State = 3347;
				Match(HANDLER);
				State = 3348;
				handler_name();
				State = 3349;
				opt_inline_handler();
				State = 3350;
				opt_validator();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Opt_trustedContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRUSTED() { return GetToken(PostgreSQLParser.TRUSTED, 0); }
		public Opt_trustedContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_opt_trusted; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterOpt_trusted(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitOpt_trusted(this);
		}
	}

	[RuleVersion(0)]
	public Opt_trustedContext opt_trusted() {
		Opt_trustedContext _localctx = new Opt_trustedContext(Context, State);
		EnterRule(_localctx, 298, RULE_opt_trusted);
		try {
			State = 3356;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case TRUSTED:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3354;
				Match(TRUSTED);
				}
				break;
			case LANGUAGE:
			case PROCEDURAL:
				EnterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Handler_nameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AttrsContext attrs() {
			return GetRuleContext<AttrsContext>(0);
		}
		public Handler_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_handler_name; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterHandler_name(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitHandler_name(this);
		}
	}

	[RuleVersion(0)]
	public Handler_nameContext handler_name() {
		Handler_nameContext _localctx = new Handler_nameContext(Context, State);
		EnterRule(_localctx, 300, RULE_handler_name);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3358;
			name();
			State = 3360;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==DOT) {
				{
				State = 3359;
				attrs();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Opt_inline_handlerContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INLINE_P() { return GetToken(PostgreSQLParser.INLINE_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Handler_nameContext handler_name() {
			return GetRuleContext<Handler_nameContext>(0);
		}
		public Opt_inline_handlerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_opt_inline_handler; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterOpt_inline_handler(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitOpt_inline_handler(this);
		}
	}

	[RuleVersion(0)]
	public Opt_inline_handlerContext opt_inline_handler() {
		Opt_inline_handlerContext _localctx = new Opt_inline_handlerContext(Context, State);
		EnterRule(_localctx, 302, RULE_opt_inline_handler);
		try {
			State = 3365;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case INLINE_P:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3362;
				Match(INLINE_P);
				State = 3363;
				handler_name();
				}
				break;
			case Eof:
			case OPEN_PAREN:
			case SEMI:
			case ANALYSE:
			case ANALYZE:
			case CREATE:
			case DO:
			case FETCH:
			case GRANT:
			case INTO:
			case SELECT:
			case TABLE:
			case WITH:
			case ABORT_P:
			case ALTER:
			case BEGIN_P:
			case CHECKPOINT:
			case CLOSE:
			case CLUSTER:
			case COMMENT:
			case COMMIT:
			case COPY:
			case DEALLOCATE:
			case DECLARE:
			case DELETE_P:
			case DISCARD:
			case DROP:
			case EXECUTE:
			case EXPLAIN:
			case INSERT:
			case LISTEN:
			case LOAD:
			case LOCK_P:
			case MERGE:
			case MOVE:
			case NO:
			case NOTIFY:
			case PREPARE:
			case REASSIGN:
			case REFRESH:
			case REINDEX:
			case RELEASE:
			case RESET:
			case REVOKE:
			case ROLLBACK:
			case SAVEPOINT:
			case SECURITY:
			case SET:
			case SHOW:
			case START:
			case TRUNCATE:
			case UNLISTEN:
			case UPDATE:
			case VACUUM:
			case VALIDATOR:
			case VALUES:
			case CALL:
			case IMPORT_P:
			case END_P:
			case MetaCommand:
				EnterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Validator_clauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VALIDATOR() { return GetToken(PostgreSQLParser.VALIDATOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Handler_nameContext handler_name() {
			return GetRuleContext<Handler_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NO() { return GetToken(PostgreSQLParser.NO, 0); }
		public Validator_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_validator_clause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterValidator_clause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitValidator_clause(this);
		}
	}

	[RuleVersion(0)]
	public Validator_clauseContext validator_clause() {
		Validator_clauseContext _localctx = new Validator_clauseContext(Context, State);
		EnterRule(_localctx, 304, RULE_validator_clause);
		try {
			State = 3371;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case VALIDATOR:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3367;
				Match(VALIDATOR);
				State = 3368;
				handler_name();
				}
				break;
			case NO:
				EnterOuterAlt(_localctx, 2);
				{
				State = 3369;
				Match(NO);
				State = 3370;
				Match(VALIDATOR);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Opt_validatorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Validator_clauseContext validator_clause() {
			return GetRuleContext<Validator_clauseContext>(0);
		}
		public Opt_validatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_opt_validator; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterOpt_validator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitOpt_validator(this);
		}
	}

	[RuleVersion(0)]
	public Opt_validatorContext opt_validator() {
		Opt_validatorContext _localctx = new Opt_validatorContext(Context, State);
		EnterRule(_localctx, 306, RULE_opt_validator);
		try {
			State = 3375;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case NO:
			case VALIDATOR:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3373;
				validator_clause();
				}
				break;
			case Eof:
			case OPEN_PAREN:
			case SEMI:
			case ANALYSE:
			case ANALYZE:
			case CREATE:
			case DO:
			case FETCH:
			case GRANT:
			case INTO:
			case SELECT:
			case TABLE:
			case WITH:
			case ABORT_P:
			case ALTER:
			case BEGIN_P:
			case CHECKPOINT:
			case CLOSE:
			case CLUSTER:
			case COMMENT:
			case COMMIT:
			case COPY:
			case DEALLOCATE:
			case DECLARE:
			case DELETE_P:
			case DISCARD:
			case DROP:
			case EXECUTE:
			case EXPLAIN:
			case INSERT:
			case LISTEN:
			case LOAD:
			case LOCK_P:
			case MERGE:
			case MOVE:
			case NOTIFY:
			case PREPARE:
			case REASSIGN:
			case REFRESH:
			case REINDEX:
			case RELEASE:
			case RESET:
			case REVOKE:
			case ROLLBACK:
			case SAVEPOINT:
			case SECURITY:
			case SET:
			case SHOW:
			case START:
			case TRUNCATE:
			case UNLISTEN:
			case UPDATE:
			case VACUUM:
			case VALUES:
			case CALL:
			case IMPORT_P:
			case END_P:
			case MetaCommand:
				EnterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Opt_proceduralContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PROCEDURAL() { return GetToken(PostgreSQLParser.PROCEDURAL, 0); }
		public Opt_proceduralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_opt_procedural; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterOpt_procedural(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitOpt_procedural(this);
		}
	}

	[RuleVersion(0)]
	public Opt_proceduralContext opt_procedural() {
		Opt_proceduralContext _localctx = new Opt_proceduralContext(Context, State);
		EnterRule(_localctx, 308, RULE_opt_procedural);
		try {
			State = 3379;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case PROCEDURAL:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3377;
				Match(PROCEDURAL);
				}
				break;
			case LANGUAGE:
				EnterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CreatetablespacestmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CREATE() { return GetToken(PostgreSQLParser.CREATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLESPACE() { return GetToken(PostgreSQLParser.TABLESPACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public OpttablespaceownerContext opttablespaceowner() {
			return GetRuleContext<OpttablespaceownerContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOCATION() { return GetToken(PostgreSQLParser.LOCATION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SconstContext sconst() {
			return GetRuleContext<SconstContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Opt_reloptionsContext opt_reloptions() {
			return GetRuleContext<Opt_reloptionsContext>(0);
		}
		public CreatetablespacestmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_createtablespacestmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterCreatetablespacestmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitCreatetablespacestmt(this);
		}
	}

	[RuleVersion(0)]
	public CreatetablespacestmtContext createtablespacestmt() {
		CreatetablespacestmtContext _localctx = new CreatetablespacestmtContext(Context, State);
		EnterRule(_localctx, 310, RULE_createtablespacestmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3381;
			Match(CREATE);
			State = 3382;
			Match(TABLESPACE);
			State = 3383;
			name();
			State = 3384;
			opttablespaceowner();
			State = 3385;
			Match(LOCATION);
			State = 3386;
			sconst();
			State = 3387;
			opt_reloptions();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OpttablespaceownerContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OWNER() { return GetToken(PostgreSQLParser.OWNER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public RolespecContext rolespec() {
			return GetRuleContext<RolespecContext>(0);
		}
		public OpttablespaceownerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_opttablespaceowner; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterOpttablespaceowner(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitOpttablespaceowner(this);
		}
	}

	[RuleVersion(0)]
	public OpttablespaceownerContext opttablespaceowner() {
		OpttablespaceownerContext _localctx = new OpttablespaceownerContext(Context, State);
		EnterRule(_localctx, 312, RULE_opttablespaceowner);
		try {
			State = 3392;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case OWNER:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3389;
				Match(OWNER);
				State = 3390;
				rolespec();
				}
				break;
			case LOCATION:
				EnterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DroptablespacestmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DROP() { return GetToken(PostgreSQLParser.DROP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLESPACE() { return GetToken(PostgreSQLParser.TABLESPACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF_P() { return GetToken(PostgreSQLParser.IF_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXISTS() { return GetToken(PostgreSQLParser.EXISTS, 0); }
		public DroptablespacestmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_droptablespacestmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterDroptablespacestmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitDroptablespacestmt(this);
		}
	}

	[RuleVersion(0)]
	public DroptablespacestmtContext droptablespacestmt() {
		DroptablespacestmtContext _localctx = new DroptablespacestmtContext(Context, State);
		EnterRule(_localctx, 314, RULE_droptablespacestmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3394;
			Match(DROP);
			State = 3395;
			Match(TABLESPACE);
			State = 3398;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,147,Context) ) {
			case 1:
				{
				State = 3396;
				Match(IF_P);
				State = 3397;
				Match(EXISTS);
				}
				break;
			}
			State = 3400;
			name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CreateextensionstmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CREATE() { return GetToken(PostgreSQLParser.CREATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXTENSION() { return GetToken(PostgreSQLParser.EXTENSION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Opt_withContext opt_with() {
			return GetRuleContext<Opt_withContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Create_extension_opt_listContext create_extension_opt_list() {
			return GetRuleContext<Create_extension_opt_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF_P() { return GetToken(PostgreSQLParser.IF_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT() { return GetToken(PostgreSQLParser.NOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXISTS() { return GetToken(PostgreSQLParser.EXISTS, 0); }
		public CreateextensionstmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_createextensionstmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterCreateextensionstmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitCreateextensionstmt(this);
		}
	}

	[RuleVersion(0)]
	public CreateextensionstmtContext createextensionstmt() {
		CreateextensionstmtContext _localctx = new CreateextensionstmtContext(Context, State);
		EnterRule(_localctx, 316, RULE_createextensionstmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3402;
			Match(CREATE);
			State = 3403;
			Match(EXTENSION);
			State = 3407;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,148,Context) ) {
			case 1:
				{
				State = 3404;
				Match(IF_P);
				State = 3405;
				Match(NOT);
				State = 3406;
				Match(EXISTS);
				}
				break;
			}
			State = 3409;
			name();
			State = 3410;
			opt_with();
			State = 3411;
			create_extension_opt_list();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Create_extension_opt_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Create_extension_opt_itemContext[] create_extension_opt_item() {
			return GetRuleContexts<Create_extension_opt_itemContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Create_extension_opt_itemContext create_extension_opt_item(int i) {
			return GetRuleContext<Create_extension_opt_itemContext>(i);
		}
		public Create_extension_opt_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_create_extension_opt_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterCreate_extension_opt_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitCreate_extension_opt_list(this);
		}
	}

	[RuleVersion(0)]
	public Create_extension_opt_listContext create_extension_opt_list() {
		Create_extension_opt_listContext _localctx = new Create_extension_opt_listContext(Context, State);
		EnterRule(_localctx, 318, RULE_create_extension_opt_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3416;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==FROM || _la==CASCADE || _la==SCHEMA || _la==VERSION_P) {
				{
				{
				State = 3413;
				create_extension_opt_item();
				}
				}
				State = 3418;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Create_extension_opt_itemContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SCHEMA() { return GetToken(PostgreSQLParser.SCHEMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VERSION_P() { return GetToken(PostgreSQLParser.VERSION_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Nonreservedword_or_sconstContext nonreservedword_or_sconst() {
			return GetRuleContext<Nonreservedword_or_sconstContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FROM() { return GetToken(PostgreSQLParser.FROM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CASCADE() { return GetToken(PostgreSQLParser.CASCADE, 0); }
		public Create_extension_opt_itemContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_create_extension_opt_item; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterCreate_extension_opt_item(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitCreate_extension_opt_item(this);
		}
	}

	[RuleVersion(0)]
	public Create_extension_opt_itemContext create_extension_opt_item() {
		Create_extension_opt_itemContext _localctx = new Create_extension_opt_itemContext(Context, State);
		EnterRule(_localctx, 320, RULE_create_extension_opt_item);
		try {
			State = 3426;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case SCHEMA:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3419;
				Match(SCHEMA);
				State = 3420;
				name();
				}
				break;
			case VERSION_P:
				EnterOuterAlt(_localctx, 2);
				{
				State = 3421;
				Match(VERSION_P);
				State = 3422;
				nonreservedword_or_sconst();
				}
				break;
			case FROM:
				EnterOuterAlt(_localctx, 3);
				{
				State = 3423;
				Match(FROM);
				State = 3424;
				nonreservedword_or_sconst();
				}
				break;
			case CASCADE:
				EnterOuterAlt(_localctx, 4);
				{
				State = 3425;
				Match(CASCADE);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AlterextensionstmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALTER() { return GetToken(PostgreSQLParser.ALTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXTENSION() { return GetToken(PostgreSQLParser.EXTENSION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UPDATE() { return GetToken(PostgreSQLParser.UPDATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Alter_extension_opt_listContext alter_extension_opt_list() {
			return GetRuleContext<Alter_extension_opt_listContext>(0);
		}
		public AlterextensionstmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alterextensionstmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterAlterextensionstmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitAlterextensionstmt(this);
		}
	}

	[RuleVersion(0)]
	public AlterextensionstmtContext alterextensionstmt() {
		AlterextensionstmtContext _localctx = new AlterextensionstmtContext(Context, State);
		EnterRule(_localctx, 322, RULE_alterextensionstmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3428;
			Match(ALTER);
			State = 3429;
			Match(EXTENSION);
			State = 3430;
			name();
			State = 3431;
			Match(UPDATE);
			State = 3432;
			alter_extension_opt_list();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_extension_opt_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Alter_extension_opt_itemContext[] alter_extension_opt_item() {
			return GetRuleContexts<Alter_extension_opt_itemContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Alter_extension_opt_itemContext alter_extension_opt_item(int i) {
			return GetRuleContext<Alter_extension_opt_itemContext>(i);
		}
		public Alter_extension_opt_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_extension_opt_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterAlter_extension_opt_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitAlter_extension_opt_list(this);
		}
	}

	[RuleVersion(0)]
	public Alter_extension_opt_listContext alter_extension_opt_list() {
		Alter_extension_opt_listContext _localctx = new Alter_extension_opt_listContext(Context, State);
		EnterRule(_localctx, 324, RULE_alter_extension_opt_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3437;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==TO) {
				{
				{
				State = 3434;
				alter_extension_opt_item();
				}
				}
				State = 3439;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_extension_opt_itemContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TO() { return GetToken(PostgreSQLParser.TO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Nonreservedword_or_sconstContext nonreservedword_or_sconst() {
			return GetRuleContext<Nonreservedword_or_sconstContext>(0);
		}
		public Alter_extension_opt_itemContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_extension_opt_item; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterAlter_extension_opt_item(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitAlter_extension_opt_item(this);
		}
	}

	[RuleVersion(0)]
	public Alter_extension_opt_itemContext alter_extension_opt_item() {
		Alter_extension_opt_itemContext _localctx = new Alter_extension_opt_itemContext(Context, State);
		EnterRule(_localctx, 326, RULE_alter_extension_opt_item);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3440;
			Match(TO);
			State = 3441;
			nonreservedword_or_sconst();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AlterextensioncontentsstmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALTER() { return GetToken(PostgreSQLParser.ALTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXTENSION() { return GetToken(PostgreSQLParser.EXTENSION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NameContext[] name() {
			return GetRuleContexts<NameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public NameContext name(int i) {
			return GetRuleContext<NameContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Add_dropContext add_drop() {
			return GetRuleContext<Add_dropContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Object_type_nameContext object_type_name() {
			return GetRuleContext<Object_type_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Object_type_any_nameContext object_type_any_name() {
			return GetRuleContext<Object_type_any_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Any_nameContext any_name() {
			return GetRuleContext<Any_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AGGREGATE() { return GetToken(PostgreSQLParser.AGGREGATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Aggregate_with_argtypesContext aggregate_with_argtypes() {
			return GetRuleContext<Aggregate_with_argtypesContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CAST() { return GetToken(PostgreSQLParser.CAST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAREN() { return GetToken(PostgreSQLParser.OPEN_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypenameContext[] typename() {
			return GetRuleContexts<TypenameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypenameContext typename(int i) {
			return GetRuleContext<TypenameContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS() { return GetToken(PostgreSQLParser.AS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAREN() { return GetToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOMAIN_P() { return GetToken(PostgreSQLParser.DOMAIN_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FUNCTION() { return GetToken(PostgreSQLParser.FUNCTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Function_with_argtypesContext function_with_argtypes() {
			return GetRuleContext<Function_with_argtypesContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPERATOR() { return GetToken(PostgreSQLParser.OPERATOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Operator_with_argtypesContext operator_with_argtypes() {
			return GetRuleContext<Operator_with_argtypesContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLASS() { return GetToken(PostgreSQLParser.CLASS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode USING() { return GetToken(PostgreSQLParser.USING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FAMILY() { return GetToken(PostgreSQLParser.FAMILY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PROCEDURE() { return GetToken(PostgreSQLParser.PROCEDURE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROUTINE() { return GetToken(PostgreSQLParser.ROUTINE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRANSFORM() { return GetToken(PostgreSQLParser.TRANSFORM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOR() { return GetToken(PostgreSQLParser.FOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LANGUAGE() { return GetToken(PostgreSQLParser.LANGUAGE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TYPE_P() { return GetToken(PostgreSQLParser.TYPE_P, 0); }
		public AlterextensioncontentsstmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alterextensioncontentsstmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterAlterextensioncontentsstmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitAlterextensioncontentsstmt(this);
		}
	}

	[RuleVersion(0)]
	public AlterextensioncontentsstmtContext alterextensioncontentsstmt() {
		AlterextensioncontentsstmtContext _localctx = new AlterextensioncontentsstmtContext(Context, State);
		EnterRule(_localctx, 328, RULE_alterextensioncontentsstmt);
		try {
			State = 3547;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,152,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3443;
				Match(ALTER);
				State = 3444;
				Match(EXTENSION);
				State = 3445;
				name();
				State = 3446;
				add_drop();
				State = 3447;
				object_type_name();
				State = 3448;
				name();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 3450;
				Match(ALTER);
				State = 3451;
				Match(EXTENSION);
				State = 3452;
				name();
				State = 3453;
				add_drop();
				State = 3454;
				object_type_any_name();
				State = 3455;
				any_name();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 3457;
				Match(ALTER);
				State = 3458;
				Match(EXTENSION);
				State = 3459;
				name();
				State = 3460;
				add_drop();
				State = 3461;
				Match(AGGREGATE);
				State = 3462;
				aggregate_with_argtypes();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 3464;
				Match(ALTER);
				State = 3465;
				Match(EXTENSION);
				State = 3466;
				name();
				State = 3467;
				add_drop();
				State = 3468;
				Match(CAST);
				State = 3469;
				Match(OPEN_PAREN);
				State = 3470;
				typename();
				State = 3471;
				Match(AS);
				State = 3472;
				typename();
				State = 3473;
				Match(CLOSE_PAREN);
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 3475;
				Match(ALTER);
				State = 3476;
				Match(EXTENSION);
				State = 3477;
				name();
				State = 3478;
				add_drop();
				State = 3479;
				Match(DOMAIN_P);
				State = 3480;
				typename();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 3482;
				Match(ALTER);
				State = 3483;
				Match(EXTENSION);
				State = 3484;
				name();
				State = 3485;
				add_drop();
				State = 3486;
				Match(FUNCTION);
				State = 3487;
				function_with_argtypes();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 3489;
				Match(ALTER);
				State = 3490;
				Match(EXTENSION);
				State = 3491;
				name();
				State = 3492;
				add_drop();
				State = 3493;
				Match(OPERATOR);
				State = 3494;
				operator_with_argtypes();
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 3496;
				Match(ALTER);
				State = 3497;
				Match(EXTENSION);
				State = 3498;
				name();
				State = 3499;
				add_drop();
				State = 3500;
				Match(OPERATOR);
				State = 3501;
				Match(CLASS);
				State = 3502;
				any_name();
				State = 3503;
				Match(USING);
				State = 3504;
				name();
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 3506;
				Match(ALTER);
				State = 3507;
				Match(EXTENSION);
				State = 3508;
				name();
				State = 3509;
				add_drop();
				State = 3510;
				Match(OPERATOR);
				State = 3511;
				Match(FAMILY);
				State = 3512;
				any_name();
				State = 3513;
				Match(USING);
				State = 3514;
				name();
				}
				break;
			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 3516;
				Match(ALTER);
				State = 3517;
				Match(EXTENSION);
				State = 3518;
				name();
				State = 3519;
				add_drop();
				State = 3520;
				Match(PROCEDURE);
				State = 3521;
				function_with_argtypes();
				}
				break;
			case 11:
				EnterOuterAlt(_localctx, 11);
				{
				State = 3523;
				Match(ALTER);
				State = 3524;
				Match(EXTENSION);
				State = 3525;
				name();
				State = 3526;
				add_drop();
				State = 3527;
				Match(ROUTINE);
				State = 3528;
				function_with_argtypes();
				}
				break;
			case 12:
				EnterOuterAlt(_localctx, 12);
				{
				State = 3530;
				Match(ALTER);
				State = 3531;
				Match(EXTENSION);
				State = 3532;
				name();
				State = 3533;
				add_drop();
				State = 3534;
				Match(TRANSFORM);
				State = 3535;
				Match(FOR);
				State = 3536;
				typename();
				State = 3537;
				Match(LANGUAGE);
				State = 3538;
				name();
				}
				break;
			case 13:
				EnterOuterAlt(_localctx, 13);
				{
				State = 3540;
				Match(ALTER);
				State = 3541;
				Match(EXTENSION);
				State = 3542;
				name();
				State = 3543;
				add_drop();
				State = 3544;
				Match(TYPE_P);
				State = 3545;
				typename();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CreatefdwstmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CREATE() { return GetToken(PostgreSQLParser.CREATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOREIGN() { return GetToken(PostgreSQLParser.FOREIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DATA_P() { return GetToken(PostgreSQLParser.DATA_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WRAPPER() { return GetToken(PostgreSQLParser.WRAPPER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Opt_fdw_optionsContext opt_fdw_options() {
			return GetRuleContext<Opt_fdw_optionsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Create_generic_optionsContext create_generic_options() {
			return GetRuleContext<Create_generic_optionsContext>(0);
		}
		public CreatefdwstmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_createfdwstmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterCreatefdwstmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitCreatefdwstmt(this);
		}
	}

	[RuleVersion(0)]
	public CreatefdwstmtContext createfdwstmt() {
		CreatefdwstmtContext _localctx = new CreatefdwstmtContext(Context, State);
		EnterRule(_localctx, 330, RULE_createfdwstmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3549;
			Match(CREATE);
			State = 3550;
			Match(FOREIGN);
			State = 3551;
			Match(DATA_P);
			State = 3552;
			Match(WRAPPER);
			State = 3553;
			name();
			State = 3554;
			opt_fdw_options();
			State = 3555;
			create_generic_options();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Fdw_optionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HANDLER() { return GetToken(PostgreSQLParser.HANDLER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Handler_nameContext handler_name() {
			return GetRuleContext<Handler_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NO() { return GetToken(PostgreSQLParser.NO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VALIDATOR() { return GetToken(PostgreSQLParser.VALIDATOR, 0); }
		public Fdw_optionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fdw_option; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterFdw_option(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitFdw_option(this);
		}
	}

	[RuleVersion(0)]
	public Fdw_optionContext fdw_option() {
		Fdw_optionContext _localctx = new Fdw_optionContext(Context, State);
		EnterRule(_localctx, 332, RULE_fdw_option);
		try {
			State = 3565;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,153,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3557;
				Match(HANDLER);
				State = 3558;
				handler_name();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 3559;
				Match(NO);
				State = 3560;
				Match(HANDLER);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 3561;
				Match(VALIDATOR);
				State = 3562;
				handler_name();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 3563;
				Match(NO);
				State = 3564;
				Match(VALIDATOR);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Fdw_optionsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Fdw_optionContext[] fdw_option() {
			return GetRuleContexts<Fdw_optionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Fdw_optionContext fdw_option(int i) {
			return GetRuleContext<Fdw_optionContext>(i);
		}
		public Fdw_optionsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fdw_options; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterFdw_options(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitFdw_options(this);
		}
	}

	[RuleVersion(0)]
	public Fdw_optionsContext fdw_options() {
		Fdw_optionsContext _localctx = new Fdw_optionsContext(Context, State);
		EnterRule(_localctx, 334, RULE_fdw_options);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3568;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 3567;
				fdw_option();
				}
				}
				State = 3570;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==HANDLER || _la==NO || _la==VALIDATOR );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Opt_fdw_optionsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Fdw_optionsContext fdw_options() {
			return GetRuleContext<Fdw_optionsContext>(0);
		}
		public Opt_fdw_optionsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_opt_fdw_options; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterOpt_fdw_options(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitOpt_fdw_options(this);
		}
	}

	[RuleVersion(0)]
	public Opt_fdw_optionsContext opt_fdw_options() {
		Opt_fdw_optionsContext _localctx = new Opt_fdw_optionsContext(Context, State);
		EnterRule(_localctx, 336, RULE_opt_fdw_options);
		try {
			State = 3574;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case HANDLER:
			case NO:
			case VALIDATOR:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3572;
				fdw_options();
				}
				break;
			case Eof:
			case OPEN_PAREN:
			case SEMI:
			case ANALYSE:
			case ANALYZE:
			case CREATE:
			case DO:
			case FETCH:
			case GRANT:
			case INTO:
			case SELECT:
			case TABLE:
			case WITH:
			case ABORT_P:
			case ALTER:
			case BEGIN_P:
			case CHECKPOINT:
			case CLOSE:
			case CLUSTER:
			case COMMENT:
			case COMMIT:
			case COPY:
			case DEALLOCATE:
			case DECLARE:
			case DELETE_P:
			case DISCARD:
			case DROP:
			case EXECUTE:
			case EXPLAIN:
			case INSERT:
			case LISTEN:
			case LOAD:
			case LOCK_P:
			case MERGE:
			case MOVE:
			case NOTIFY:
			case OPTIONS:
			case PREPARE:
			case REASSIGN:
			case REFRESH:
			case REINDEX:
			case RELEASE:
			case RESET:
			case REVOKE:
			case ROLLBACK:
			case SAVEPOINT:
			case SECURITY:
			case SET:
			case SHOW:
			case START:
			case TRUNCATE:
			case UNLISTEN:
			case UPDATE:
			case VACUUM:
			case VALUES:
			case CALL:
			case IMPORT_P:
			case END_P:
			case MetaCommand:
				EnterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AlterfdwstmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALTER() { return GetToken(PostgreSQLParser.ALTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOREIGN() { return GetToken(PostgreSQLParser.FOREIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DATA_P() { return GetToken(PostgreSQLParser.DATA_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WRAPPER() { return GetToken(PostgreSQLParser.WRAPPER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Opt_fdw_optionsContext opt_fdw_options() {
			return GetRuleContext<Opt_fdw_optionsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Alter_generic_optionsContext alter_generic_options() {
			return GetRuleContext<Alter_generic_optionsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Fdw_optionsContext fdw_options() {
			return GetRuleContext<Fdw_optionsContext>(0);
		}
		public AlterfdwstmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alterfdwstmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterAlterfdwstmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitAlterfdwstmt(this);
		}
	}

	[RuleVersion(0)]
	public AlterfdwstmtContext alterfdwstmt() {
		AlterfdwstmtContext _localctx = new AlterfdwstmtContext(Context, State);
		EnterRule(_localctx, 338, RULE_alterfdwstmt);
		try {
			State = 3591;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,156,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3576;
				Match(ALTER);
				State = 3577;
				Match(FOREIGN);
				State = 3578;
				Match(DATA_P);
				State = 3579;
				Match(WRAPPER);
				State = 3580;
				name();
				State = 3581;
				opt_fdw_options();
				State = 3582;
				alter_generic_options();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 3584;
				Match(ALTER);
				State = 3585;
				Match(FOREIGN);
				State = 3586;
				Match(DATA_P);
				State = 3587;
				Match(WRAPPER);
				State = 3588;
				name();
				State = 3589;
				fdw_options();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Create_generic_optionsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPTIONS() { return GetToken(PostgreSQLParser.OPTIONS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAREN() { return GetToken(PostgreSQLParser.OPEN_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Generic_option_listContext generic_option_list() {
			return GetRuleContext<Generic_option_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAREN() { return GetToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public Create_generic_optionsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_create_generic_options; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterCreate_generic_options(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitCreate_generic_options(this);
		}
	}

	[RuleVersion(0)]
	public Create_generic_optionsContext create_generic_options() {
		Create_generic_optionsContext _localctx = new Create_generic_optionsContext(Context, State);
		EnterRule(_localctx, 340, RULE_create_generic_options);
		try {
			State = 3599;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case OPTIONS:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3593;
				Match(OPTIONS);
				State = 3594;
				Match(OPEN_PAREN);
				State = 3595;
				generic_option_list();
				State = 3596;
				Match(CLOSE_PAREN);
				}
				break;
			case Eof:
			case OPEN_PAREN:
			case CLOSE_PAREN:
			case COMMA:
			case SEMI:
			case ANALYSE:
			case ANALYZE:
			case CHECK:
			case COLLATE:
			case CONSTRAINT:
			case CREATE:
			case DEFAULT:
			case DEFERRABLE:
			case DO:
			case FETCH:
			case GRANT:
			case INITIALLY:
			case INTO:
			case NOT:
			case NULL_P:
			case PRIMARY:
			case REFERENCES:
			case SELECT:
			case TABLE:
			case UNIQUE:
			case WITH:
			case ABORT_P:
			case ALTER:
			case BEGIN_P:
			case CHECKPOINT:
			case CLOSE:
			case CLUSTER:
			case COMMENT:
			case COMMIT:
			case COPY:
			case DEALLOCATE:
			case DECLARE:
			case DELETE_P:
			case DISCARD:
			case DROP:
			case EXECUTE:
			case EXPLAIN:
			case INSERT:
			case LISTEN:
			case LOAD:
			case LOCK_P:
			case MERGE:
			case MOVE:
			case NOTIFY:
			case PREPARE:
			case REASSIGN:
			case REFRESH:
			case REINDEX:
			case RELEASE:
			case RESET:
			case REVOKE:
			case ROLLBACK:
			case SAVEPOINT:
			case SECURITY:
			case SET:
			case SHOW:
			case START:
			case TRUNCATE:
			case UNLISTEN:
			case UPDATE:
			case VACUUM:
			case VALUES:
			case CALL:
			case GENERATED:
			case IMPORT_P:
			case END_P:
			case MetaCommand:
				EnterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Generic_option_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Generic_option_elemContext[] generic_option_elem() {
			return GetRuleContexts<Generic_option_elemContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Generic_option_elemContext generic_option_elem(int i) {
			return GetRuleContext<Generic_option_elemContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(PostgreSQLParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(PostgreSQLParser.COMMA, i);
		}
		public Generic_option_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_generic_option_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterGeneric_option_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitGeneric_option_list(this);
		}
	}

	[RuleVersion(0)]
	public Generic_option_listContext generic_option_list() {
		Generic_option_listContext _localctx = new Generic_option_listContext(Context, State);
		EnterRule(_localctx, 342, RULE_generic_option_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3601;
			generic_option_elem();
			State = 3606;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 3602;
				Match(COMMA);
				State = 3603;
				generic_option_elem();
				}
				}
				State = 3608;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_generic_optionsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPTIONS() { return GetToken(PostgreSQLParser.OPTIONS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAREN() { return GetToken(PostgreSQLParser.OPEN_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Alter_generic_option_listContext alter_generic_option_list() {
			return GetRuleContext<Alter_generic_option_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAREN() { return GetToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public Alter_generic_optionsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_generic_options; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterAlter_generic_options(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitAlter_generic_options(this);
		}
	}

	[RuleVersion(0)]
	public Alter_generic_optionsContext alter_generic_options() {
		Alter_generic_optionsContext _localctx = new Alter_generic_optionsContext(Context, State);
		EnterRule(_localctx, 344, RULE_alter_generic_options);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3609;
			Match(OPTIONS);
			State = 3610;
			Match(OPEN_PAREN);
			State = 3611;
			alter_generic_option_list();
			State = 3612;
			Match(CLOSE_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_generic_option_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Alter_generic_option_elemContext[] alter_generic_option_elem() {
			return GetRuleContexts<Alter_generic_option_elemContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Alter_generic_option_elemContext alter_generic_option_elem(int i) {
			return GetRuleContext<Alter_generic_option_elemContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(PostgreSQLParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(PostgreSQLParser.COMMA, i);
		}
		public Alter_generic_option_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_generic_option_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterAlter_generic_option_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitAlter_generic_option_list(this);
		}
	}

	[RuleVersion(0)]
	public Alter_generic_option_listContext alter_generic_option_list() {
		Alter_generic_option_listContext _localctx = new Alter_generic_option_listContext(Context, State);
		EnterRule(_localctx, 346, RULE_alter_generic_option_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3614;
			alter_generic_option_elem();
			State = 3619;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 3615;
				Match(COMMA);
				State = 3616;
				alter_generic_option_elem();
				}
				}
				State = 3621;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_generic_option_elemContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Generic_option_elemContext generic_option_elem() {
			return GetRuleContext<Generic_option_elemContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SET() { return GetToken(PostgreSQLParser.SET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ADD_P() { return GetToken(PostgreSQLParser.ADD_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DROP() { return GetToken(PostgreSQLParser.DROP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Generic_option_nameContext generic_option_name() {
			return GetRuleContext<Generic_option_nameContext>(0);
		}
		public Alter_generic_option_elemContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_generic_option_elem; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterAlter_generic_option_elem(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitAlter_generic_option_elem(this);
		}
	}

	[RuleVersion(0)]
	public Alter_generic_option_elemContext alter_generic_option_elem() {
		Alter_generic_option_elemContext _localctx = new Alter_generic_option_elemContext(Context, State);
		EnterRule(_localctx, 348, RULE_alter_generic_option_elem);
		try {
			State = 3629;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,160,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3622;
				generic_option_elem();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 3623;
				Match(SET);
				State = 3624;
				generic_option_elem();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 3625;
				Match(ADD_P);
				State = 3626;
				generic_option_elem();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 3627;
				Match(DROP);
				State = 3628;
				generic_option_name();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Generic_option_elemContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Generic_option_nameContext generic_option_name() {
			return GetRuleContext<Generic_option_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Generic_option_argContext generic_option_arg() {
			return GetRuleContext<Generic_option_argContext>(0);
		}
		public Generic_option_elemContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_generic_option_elem; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterGeneric_option_elem(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitGeneric_option_elem(this);
		}
	}

	[RuleVersion(0)]
	public Generic_option_elemContext generic_option_elem() {
		Generic_option_elemContext _localctx = new Generic_option_elemContext(Context, State);
		EnterRule(_localctx, 350, RULE_generic_option_elem);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3631;
			generic_option_name();
			State = 3632;
			generic_option_arg();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Generic_option_nameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public CollabelContext collabel() {
			return GetRuleContext<CollabelContext>(0);
		}
		public Generic_option_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_generic_option_name; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterGeneric_option_name(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitGeneric_option_name(this);
		}
	}

	[RuleVersion(0)]
	public Generic_option_nameContext generic_option_name() {
		Generic_option_nameContext _localctx = new Generic_option_nameContext(Context, State);
		EnterRule(_localctx, 352, RULE_generic_option_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3634;
			collabel();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Generic_option_argContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SconstContext sconst() {
			return GetRuleContext<SconstContext>(0);
		}
		public Generic_option_argContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_generic_option_arg; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterGeneric_option_arg(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitGeneric_option_arg(this);
		}
	}

	[RuleVersion(0)]
	public Generic_option_argContext generic_option_arg() {
		Generic_option_argContext _localctx = new Generic_option_argContext(Context, State);
		EnterRule(_localctx, 354, RULE_generic_option_arg);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3636;
			sconst();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CreateforeignserverstmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CREATE() { return GetToken(PostgreSQLParser.CREATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SERVER() { return GetToken(PostgreSQLParser.SERVER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NameContext[] name() {
			return GetRuleContexts<NameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public NameContext name(int i) {
			return GetRuleContext<NameContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Opt_typeContext opt_type() {
			return GetRuleContext<Opt_typeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Opt_foreign_server_versionContext opt_foreign_server_version() {
			return GetRuleContext<Opt_foreign_server_versionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOREIGN() { return GetToken(PostgreSQLParser.FOREIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DATA_P() { return GetToken(PostgreSQLParser.DATA_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WRAPPER() { return GetToken(PostgreSQLParser.WRAPPER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Create_generic_optionsContext create_generic_options() {
			return GetRuleContext<Create_generic_optionsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF_P() { return GetToken(PostgreSQLParser.IF_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT() { return GetToken(PostgreSQLParser.NOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXISTS() { return GetToken(PostgreSQLParser.EXISTS, 0); }
		public CreateforeignserverstmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_createforeignserverstmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterCreateforeignserverstmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitCreateforeignserverstmt(this);
		}
	}

	[RuleVersion(0)]
	public CreateforeignserverstmtContext createforeignserverstmt() {
		CreateforeignserverstmtContext _localctx = new CreateforeignserverstmtContext(Context, State);
		EnterRule(_localctx, 356, RULE_createforeignserverstmt);
		try {
			State = 3663;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,161,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3638;
				Match(CREATE);
				State = 3639;
				Match(SERVER);
				State = 3640;
				name();
				State = 3641;
				opt_type();
				State = 3642;
				opt_foreign_server_version();
				State = 3643;
				Match(FOREIGN);
				State = 3644;
				Match(DATA_P);
				State = 3645;
				Match(WRAPPER);
				State = 3646;
				name();
				State = 3647;
				create_generic_options();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 3649;
				Match(CREATE);
				State = 3650;
				Match(SERVER);
				State = 3651;
				Match(IF_P);
				State = 3652;
				Match(NOT);
				State = 3653;
				Match(EXISTS);
				State = 3654;
				name();
				State = 3655;
				opt_type();
				State = 3656;
				opt_foreign_server_version();
				State = 3657;
				Match(FOREIGN);
				State = 3658;
				Match(DATA_P);
				State = 3659;
				Match(WRAPPER);
				State = 3660;
				name();
				State = 3661;
				create_generic_options();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Opt_typeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TYPE_P() { return GetToken(PostgreSQLParser.TYPE_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SconstContext sconst() {
			return GetRuleContext<SconstContext>(0);
		}
		public Opt_typeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_opt_type; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterOpt_type(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitOpt_type(this);
		}
	}

	[RuleVersion(0)]
	public Opt_typeContext opt_type() {
		Opt_typeContext _localctx = new Opt_typeContext(Context, State);
		EnterRule(_localctx, 358, RULE_opt_type);
		try {
			State = 3668;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case TYPE_P:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3665;
				Match(TYPE_P);
				State = 3666;
				sconst();
				}
				break;
			case FOREIGN:
			case VERSION_P:
				EnterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Foreign_server_versionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VERSION_P() { return GetToken(PostgreSQLParser.VERSION_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SconstContext sconst() {
			return GetRuleContext<SconstContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NULL_P() { return GetToken(PostgreSQLParser.NULL_P, 0); }
		public Foreign_server_versionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_foreign_server_version; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterForeign_server_version(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitForeign_server_version(this);
		}
	}

	[RuleVersion(0)]
	public Foreign_server_versionContext foreign_server_version() {
		Foreign_server_versionContext _localctx = new Foreign_server_versionContext(Context, State);
		EnterRule(_localctx, 360, RULE_foreign_server_version);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3670;
			Match(VERSION_P);
			State = 3673;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case StringConstant:
			case UnicodeEscapeStringConstant:
			case BeginDollarStringConstant:
			case EscapeStringConstant:
				{
				State = 3671;
				sconst();
				}
				break;
			case NULL_P:
				{
				State = 3672;
				Match(NULL_P);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Opt_foreign_server_versionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Foreign_server_versionContext foreign_server_version() {
			return GetRuleContext<Foreign_server_versionContext>(0);
		}
		public Opt_foreign_server_versionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_opt_foreign_server_version; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterOpt_foreign_server_version(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitOpt_foreign_server_version(this);
		}
	}

	[RuleVersion(0)]
	public Opt_foreign_server_versionContext opt_foreign_server_version() {
		Opt_foreign_server_versionContext _localctx = new Opt_foreign_server_versionContext(Context, State);
		EnterRule(_localctx, 362, RULE_opt_foreign_server_version);
		try {
			State = 3677;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case VERSION_P:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3675;
				foreign_server_version();
				}
				break;
			case FOREIGN:
				EnterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AlterforeignserverstmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALTER() { return GetToken(PostgreSQLParser.ALTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SERVER() { return GetToken(PostgreSQLParser.SERVER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Alter_generic_optionsContext alter_generic_options() {
			return GetRuleContext<Alter_generic_optionsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Foreign_server_versionContext foreign_server_version() {
			return GetRuleContext<Foreign_server_versionContext>(0);
		}
		public AlterforeignserverstmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alterforeignserverstmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterAlterforeignserverstmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitAlterforeignserverstmt(this);
		}
	}

	[RuleVersion(0)]
	public AlterforeignserverstmtContext alterforeignserverstmt() {
		AlterforeignserverstmtContext _localctx = new AlterforeignserverstmtContext(Context, State);
		EnterRule(_localctx, 364, RULE_alterforeignserverstmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3679;
			Match(ALTER);
			State = 3680;
			Match(SERVER);
			State = 3681;
			name();
			State = 3687;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case OPTIONS:
				{
				State = 3682;
				alter_generic_options();
				}
				break;
			case VERSION_P:
				{
				State = 3683;
				foreign_server_version();
				State = 3685;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==OPTIONS) {
					{
					State = 3684;
					alter_generic_options();
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CreateforeigntablestmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CREATE() { return GetToken(PostgreSQLParser.CREATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOREIGN() { return GetToken(PostgreSQLParser.FOREIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLE() { return GetToken(PostgreSQLParser.TABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Qualified_nameContext[] qualified_name() {
			return GetRuleContexts<Qualified_nameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Qualified_nameContext qualified_name(int i) {
			return GetRuleContext<Qualified_nameContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAREN() { return GetToken(PostgreSQLParser.OPEN_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public OpttableelementlistContext opttableelementlist() {
			return GetRuleContext<OpttableelementlistContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAREN() { return GetToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public OptinheritContext optinherit() {
			return GetRuleContext<OptinheritContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SERVER() { return GetToken(PostgreSQLParser.SERVER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Create_generic_optionsContext create_generic_options() {
			return GetRuleContext<Create_generic_optionsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF_P() { return GetToken(PostgreSQLParser.IF_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT() { return GetToken(PostgreSQLParser.NOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXISTS() { return GetToken(PostgreSQLParser.EXISTS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARTITION() { return GetToken(PostgreSQLParser.PARTITION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OF() { return GetToken(PostgreSQLParser.OF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public OpttypedtableelementlistContext opttypedtableelementlist() {
			return GetRuleContext<OpttypedtableelementlistContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PartitionboundspecContext partitionboundspec() {
			return GetRuleContext<PartitionboundspecContext>(0);
		}
		public CreateforeigntablestmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_createforeigntablestmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterCreateforeigntablestmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitCreateforeigntablestmt(this);
		}
	}

	[RuleVersion(0)]
	public CreateforeigntablestmtContext createforeigntablestmt() {
		CreateforeigntablestmtContext _localctx = new CreateforeigntablestmtContext(Context, State);
		EnterRule(_localctx, 366, RULE_createforeigntablestmt);
		try {
			State = 3745;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,167,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3689;
				Match(CREATE);
				State = 3690;
				Match(FOREIGN);
				State = 3691;
				Match(TABLE);
				State = 3692;
				qualified_name();
				State = 3693;
				Match(OPEN_PAREN);
				State = 3694;
				opttableelementlist();
				State = 3695;
				Match(CLOSE_PAREN);
				State = 3696;
				optinherit();
				State = 3697;
				Match(SERVER);
				State = 3698;
				name();
				State = 3699;
				create_generic_options();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 3701;
				Match(CREATE);
				State = 3702;
				Match(FOREIGN);
				State = 3703;
				Match(TABLE);
				State = 3704;
				Match(IF_P);
				State = 3705;
				Match(NOT);
				State = 3706;
				Match(EXISTS);
				State = 3707;
				qualified_name();
				State = 3708;
				Match(OPEN_PAREN);
				State = 3709;
				opttableelementlist();
				State = 3710;
				Match(CLOSE_PAREN);
				State = 3711;
				optinherit();
				State = 3712;
				Match(SERVER);
				State = 3713;
				name();
				State = 3714;
				create_generic_options();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 3716;
				Match(CREATE);
				State = 3717;
				Match(FOREIGN);
				State = 3718;
				Match(TABLE);
				State = 3719;
				qualified_name();
				State = 3720;
				Match(PARTITION);
				State = 3721;
				Match(OF);
				State = 3722;
				qualified_name();
				State = 3723;
				opttypedtableelementlist();
				State = 3724;
				partitionboundspec();
				State = 3725;
				Match(SERVER);
				State = 3726;
				name();
				State = 3727;
				create_generic_options();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 3729;
				Match(CREATE);
				State = 3730;
				Match(FOREIGN);
				State = 3731;
				Match(TABLE);
				State = 3732;
				Match(IF_P);
				State = 3733;
				Match(NOT);
				State = 3734;
				Match(EXISTS);
				State = 3735;
				qualified_name();
				State = 3736;
				Match(PARTITION);
				State = 3737;
				Match(OF);
				State = 3738;
				qualified_name();
				State = 3739;
				opttypedtableelementlist();
				State = 3740;
				partitionboundspec();
				State = 3741;
				Match(SERVER);
				State = 3742;
				name();
				State = 3743;
				create_generic_options();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ImportforeignschemastmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IMPORT_P() { return GetToken(PostgreSQLParser.IMPORT_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOREIGN() { return GetToken(PostgreSQLParser.FOREIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SCHEMA() { return GetToken(PostgreSQLParser.SCHEMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NameContext[] name() {
			return GetRuleContexts<NameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public NameContext name(int i) {
			return GetRuleContext<NameContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Import_qualificationContext import_qualification() {
			return GetRuleContext<Import_qualificationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FROM() { return GetToken(PostgreSQLParser.FROM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SERVER() { return GetToken(PostgreSQLParser.SERVER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTO() { return GetToken(PostgreSQLParser.INTO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Create_generic_optionsContext create_generic_options() {
			return GetRuleContext<Create_generic_optionsContext>(0);
		}
		public ImportforeignschemastmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_importforeignschemastmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterImportforeignschemastmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitImportforeignschemastmt(this);
		}
	}

	[RuleVersion(0)]
	public ImportforeignschemastmtContext importforeignschemastmt() {
		ImportforeignschemastmtContext _localctx = new ImportforeignschemastmtContext(Context, State);
		EnterRule(_localctx, 368, RULE_importforeignschemastmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3747;
			Match(IMPORT_P);
			State = 3748;
			Match(FOREIGN);
			State = 3749;
			Match(SCHEMA);
			State = 3750;
			name();
			State = 3751;
			import_qualification();
			State = 3752;
			Match(FROM);
			State = 3753;
			Match(SERVER);
			State = 3754;
			name();
			State = 3755;
			Match(INTO);
			State = 3756;
			name();
			State = 3757;
			create_generic_options();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Import_qualification_typeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LIMIT() { return GetToken(PostgreSQLParser.LIMIT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TO() { return GetToken(PostgreSQLParser.TO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXCEPT() { return GetToken(PostgreSQLParser.EXCEPT, 0); }
		public Import_qualification_typeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_import_qualification_type; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterImport_qualification_type(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitImport_qualification_type(this);
		}
	}

	[RuleVersion(0)]
	public Import_qualification_typeContext import_qualification_type() {
		Import_qualification_typeContext _localctx = new Import_qualification_typeContext(Context, State);
		EnterRule(_localctx, 370, RULE_import_qualification_type);
		try {
			State = 3762;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case LIMIT:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3759;
				Match(LIMIT);
				State = 3760;
				Match(TO);
				}
				break;
			case EXCEPT:
				EnterOuterAlt(_localctx, 2);
				{
				State = 3761;
				Match(EXCEPT);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Import_qualificationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Import_qualification_typeContext import_qualification_type() {
			return GetRuleContext<Import_qualification_typeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAREN() { return GetToken(PostgreSQLParser.OPEN_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Relation_expr_listContext relation_expr_list() {
			return GetRuleContext<Relation_expr_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAREN() { return GetToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public Import_qualificationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_import_qualification; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterImport_qualification(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitImport_qualification(this);
		}
	}

	[RuleVersion(0)]
	public Import_qualificationContext import_qualification() {
		Import_qualificationContext _localctx = new Import_qualificationContext(Context, State);
		EnterRule(_localctx, 372, RULE_import_qualification);
		try {
			State = 3770;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case EXCEPT:
			case LIMIT:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3764;
				import_qualification_type();
				State = 3765;
				Match(OPEN_PAREN);
				State = 3766;
				relation_expr_list();
				State = 3767;
				Match(CLOSE_PAREN);
				}
				break;
			case FROM:
				EnterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CreateusermappingstmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CREATE() { return GetToken(PostgreSQLParser.CREATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode USER() { return GetToken(PostgreSQLParser.USER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MAPPING() { return GetToken(PostgreSQLParser.MAPPING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOR() { return GetToken(PostgreSQLParser.FOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Auth_identContext auth_ident() {
			return GetRuleContext<Auth_identContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SERVER() { return GetToken(PostgreSQLParser.SERVER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Create_generic_optionsContext create_generic_options() {
			return GetRuleContext<Create_generic_optionsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF_P() { return GetToken(PostgreSQLParser.IF_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT() { return GetToken(PostgreSQLParser.NOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXISTS() { return GetToken(PostgreSQLParser.EXISTS, 0); }
		public CreateusermappingstmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_createusermappingstmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterCreateusermappingstmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitCreateusermappingstmt(this);
		}
	}

	[RuleVersion(0)]
	public CreateusermappingstmtContext createusermappingstmt() {
		CreateusermappingstmtContext _localctx = new CreateusermappingstmtContext(Context, State);
		EnterRule(_localctx, 374, RULE_createusermappingstmt);
		try {
			State = 3793;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,170,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3772;
				Match(CREATE);
				State = 3773;
				Match(USER);
				State = 3774;
				Match(MAPPING);
				State = 3775;
				Match(FOR);
				State = 3776;
				auth_ident();
				State = 3777;
				Match(SERVER);
				State = 3778;
				name();
				State = 3779;
				create_generic_options();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 3781;
				Match(CREATE);
				State = 3782;
				Match(USER);
				State = 3783;
				Match(MAPPING);
				State = 3784;
				Match(IF_P);
				State = 3785;
				Match(NOT);
				State = 3786;
				Match(EXISTS);
				State = 3787;
				Match(FOR);
				State = 3788;
				auth_ident();
				State = 3789;
				Match(SERVER);
				State = 3790;
				name();
				State = 3791;
				create_generic_options();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Auth_identContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public RolespecContext rolespec() {
			return GetRuleContext<RolespecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode USER() { return GetToken(PostgreSQLParser.USER, 0); }
		public Auth_identContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_auth_ident; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterAuth_ident(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitAuth_ident(this);
		}
	}

	[RuleVersion(0)]
	public Auth_identContext auth_ident() {
		Auth_identContext _localctx = new Auth_identContext(Context, State);
		EnterRule(_localctx, 376, RULE_auth_ident);
		try {
			State = 3797;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case AND:
			case ARRAY:
			case COLLATE:
			case COLUMN:
			case CONSTRAINT:
			case CURRENT_USER:
			case DEFAULT:
			case DO:
			case FETCH:
			case SESSION_USER:
			case TABLE:
			case AUTHORIZATION:
			case BINARY:
			case COLLATION:
			case CONCURRENTLY:
			case CROSS:
			case CURRENT_SCHEMA:
			case FREEZE:
			case FULL:
			case ILIKE:
			case INNER_P:
			case IS:
			case ISNULL:
			case JOIN:
			case LIKE:
			case NATURAL:
			case NOTNULL:
			case OUTER_P:
			case OVER:
			case OVERLAPS:
			case SIMILAR:
			case VERBOSE:
			case ABORT_P:
			case ABSOLUTE_P:
			case ACCESS:
			case ACTION:
			case ADD_P:
			case ADMIN:
			case AFTER:
			case AGGREGATE:
			case ALSO:
			case ALTER:
			case ALWAYS:
			case ASSERTION:
			case ASSIGNMENT:
			case AT:
			case ATTRIBUTE:
			case BACKWARD:
			case BEFORE:
			case BEGIN_P:
			case BY:
			case CACHE:
			case CALLED:
			case CASCADE:
			case CASCADED:
			case CATALOG:
			case CHAIN:
			case CHARACTERISTICS:
			case CHECKPOINT:
			case CLASS:
			case CLOSE:
			case CLUSTER:
			case COMMENT:
			case COMMENTS:
			case COMMIT:
			case COMMITTED:
			case CONFIGURATION:
			case CONNECTION:
			case CONSTRAINTS:
			case CONTENT_P:
			case CONTINUE_P:
			case CONVERSION_P:
			case COPY:
			case COST:
			case CSV:
			case CURSOR:
			case CYCLE:
			case DATA_P:
			case DATABASE:
			case DAY_P:
			case DEALLOCATE:
			case DECLARE:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE_P:
			case DELIMITER:
			case DELIMITERS:
			case DICTIONARY:
			case DISABLE_P:
			case DISCARD:
			case DOCUMENT_P:
			case DOMAIN_P:
			case DOUBLE_P:
			case DROP:
			case EACH:
			case ENABLE_P:
			case ENCODING:
			case ENCRYPTED:
			case ENUM_P:
			case ESCAPE:
			case EVENT:
			case EXCLUDE:
			case EXCLUDING:
			case EXCLUSIVE:
			case EXECUTE:
			case EXPLAIN:
			case EXTENSION:
			case EXTERNAL:
			case FAMILY:
			case FIRST_P:
			case FOLLOWING:
			case FORCE:
			case FORWARD:
			case FUNCTION:
			case FUNCTIONS:
			case GLOBAL:
			case GRANTED:
			case HANDLER:
			case HEADER_P:
			case HOLD:
			case HOUR_P:
			case IDENTITY_P:
			case IF_P:
			case IMMEDIATE:
			case IMMUTABLE:
			case IMPLICIT_P:
			case INCLUDING:
			case INCREMENT:
			case INDEX:
			case INDEXES:
			case INHERIT:
			case INHERITS:
			case INLINE_P:
			case INSENSITIVE:
			case INSERT:
			case INSTEAD:
			case INVOKER:
			case ISOLATION:
			case KEY:
			case LABEL:
			case LANGUAGE:
			case LARGE_P:
			case LAST_P:
			case LEAKPROOF:
			case LEVEL:
			case LISTEN:
			case LOAD:
			case LOCAL:
			case LOCATION:
			case LOCK_P:
			case MAPPING:
			case MATCH:
			case MATERIALIZED:
			case MAXVALUE:
			case MINUTE_P:
			case MINVALUE:
			case MODE:
			case MONTH_P:
			case MOVE:
			case NAME_P:
			case NAMES:
			case NEXT:
			case NO:
			case NOTHING:
			case NOTIFY:
			case NOWAIT:
			case NULLS_P:
			case OBJECT_P:
			case OF:
			case OFF:
			case OIDS:
			case OPERATOR:
			case OPTION:
			case OPTIONS:
			case OWNED:
			case OWNER:
			case PARSER:
			case PARTIAL:
			case PARTITION:
			case PASSING:
			case PASSWORD:
			case PLANS:
			case PRECEDING:
			case PREPARE:
			case PREPARED:
			case PRESERVE:
			case PRIOR:
			case PRIVILEGES:
			case PROCEDURAL:
			case PROCEDURE:
			case PROGRAM:
			case QUOTE:
			case RANGE:
			case READ:
			case REASSIGN:
			case RECHECK:
			case RECURSIVE:
			case REF:
			case REFRESH:
			case REINDEX:
			case RELATIVE_P:
			case RELEASE:
			case RENAME:
			case REPEATABLE:
			case REPLACE:
			case REPLICA:
			case RESET:
			case RESTART:
			case RESTRICT:
			case RETURNS:
			case REVOKE:
			case ROLE:
			case ROLLBACK:
			case ROWS:
			case RULE:
			case SAVEPOINT:
			case SCHEMA:
			case SCROLL:
			case SEARCH:
			case SECOND_P:
			case SECURITY:
			case SEQUENCE:
			case SEQUENCES:
			case SERIALIZABLE:
			case SERVER:
			case SESSION:
			case SET:
			case SHARE:
			case SHOW:
			case SIMPLE:
			case SNAPSHOT:
			case STABLE:
			case STANDALONE_P:
			case START:
			case STATEMENT:
			case STATISTICS:
			case STDIN:
			case STDOUT:
			case STORAGE:
			case STRICT_P:
			case STRIP_P:
			case SYSID:
			case SYSTEM_P:
			case TABLES:
			case TABLESPACE:
			case TEMP:
			case TEMPLATE:
			case TEMPORARY:
			case TEXT_P:
			case TRANSACTION:
			case TRIGGER:
			case TRUNCATE:
			case TRUSTED:
			case TYPE_P:
			case TYPES_P:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNENCRYPTED:
			case UNKNOWN:
			case UNLISTEN:
			case UNLOGGED:
			case UNTIL:
			case UPDATE:
			case VACUUM:
			case VALID:
			case VALIDATE:
			case VALIDATOR:
			case VARYING:
			case VERSION_P:
			case VIEW:
			case VOLATILE:
			case WHITESPACE_P:
			case WITHOUT:
			case WORK:
			case WRAPPER:
			case WRITE:
			case XML_P:
			case YEAR_P:
			case YES_P:
			case ZONE:
			case BETWEEN:
			case BIGINT:
			case BIT:
			case BOOLEAN_P:
			case CHAR_P:
			case CHARACTER:
			case COALESCE:
			case DEC:
			case DECIMAL_P:
			case EXISTS:
			case EXTRACT:
			case FLOAT_P:
			case GREATEST:
			case INOUT:
			case INT_P:
			case INTEGER:
			case INTERVAL:
			case LEAST:
			case NATIONAL:
			case NCHAR:
			case NONE:
			case NULLIF:
			case NUMERIC:
			case OVERLAY:
			case POSITION:
			case PRECISION:
			case REAL:
			case ROW:
			case SETOF:
			case SMALLINT:
			case SUBSTRING:
			case TIME:
			case TIMESTAMP:
			case TREAT:
			case TRIM:
			case VALUES:
			case VARCHAR:
			case XMLATTRIBUTES:
			case XMLCOMMENT:
			case XMLAGG:
			case XML_IS_WELL_FORMED:
			case XML_IS_WELL_FORMED_DOCUMENT:
			case XML_IS_WELL_FORMED_CONTENT:
			case XPATH:
			case XPATH_EXISTS:
			case XMLCONCAT:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLPARSE:
			case XMLPI:
			case XMLROOT:
			case XMLSERIALIZE:
			case CALL:
			case CURRENT_P:
			case ATTACH:
			case DETACH:
			case EXPRESSION:
			case GENERATED:
			case LOGGED:
			case STORED:
			case INCLUDE:
			case ROUTINE:
			case TRANSFORM:
			case IMPORT_P:
			case POLICY:
			case METHOD:
			case REFERENCING:
			case NEW:
			case OLD:
			case VALUE_P:
			case SUBSCRIPTION:
			case PUBLICATION:
			case OUT_P:
			case ROUTINES:
			case SCHEMAS:
			case PROCEDURES:
			case INPUT_P:
			case SUPPORT:
			case PARALLEL:
			case SQL_P:
			case DEPENDS:
			case OVERRIDING:
			case CONFLICT:
			case SKIP_P:
			case LOCKED:
			case TIES:
			case ROLLUP:
			case CUBE:
			case GROUPING:
			case SETS:
			case TABLESAMPLE:
			case ORDINALITY:
			case XMLTABLE:
			case COLUMNS:
			case XMLNAMESPACES:
			case ROWTYPE:
			case NORMALIZED:
			case WITHIN:
			case FILTER:
			case GROUPS:
			case OTHERS:
			case NFC:
			case NFD:
			case NFKC:
			case NFKD:
			case UESCAPE:
			case VIEWS:
			case NORMALIZE:
			case DUMP:
			case PRINT_STRICT_PARAMS:
			case VARIABLE_CONFLICT:
			case ERROR:
			case USE_VARIABLE:
			case USE_COLUMN:
			case ALIAS:
			case CONSTANT:
			case PERFORM:
			case GET:
			case DIAGNOSTICS:
			case STACKED:
			case ELSIF:
			case REVERSE:
			case SLICE:
			case EXIT:
			case RETURN:
			case QUERY:
			case RAISE:
			case SQLSTATE:
			case DEBUG:
			case LOG:
			case INFO:
			case NOTICE:
			case WARNING:
			case EXCEPTION:
			case ASSERT:
			case OPEN:
			case ABS:
			case CBRT:
			case CEIL:
			case CEILING:
			case DEGREES:
			case DIV:
			case EXP:
			case FACTORIAL:
			case FLOOR:
			case GCD:
			case LCM:
			case LN:
			case LOG10:
			case MIN_SCALE:
			case MOD:
			case PI:
			case POWER:
			case RADIANS:
			case ROUND:
			case SCALE:
			case SIGN:
			case SQRT:
			case TRIM_SCALE:
			case TRUNC:
			case WIDTH_BUCKET:
			case RANDOM:
			case SETSEED:
			case ACOS:
			case ACOSD:
			case ASIN:
			case ASIND:
			case ATAN:
			case ATAND:
			case ATAN2:
			case ATAN2D:
			case COS:
			case COSD:
			case COT:
			case COTD:
			case SIN:
			case SIND:
			case TAN:
			case TAND:
			case SINH:
			case COSH:
			case TANH:
			case ASINH:
			case ACOSH:
			case ATANH:
			case BIT_LENGTH:
			case CHAR_LENGTH:
			case CHARACTER_LENGTH:
			case LOWER:
			case OCTET_LENGTH:
			case UPPER:
			case ASCII:
			case BTRIM:
			case CHR:
			case CONCAT:
			case CONCAT_WS:
			case FORMAT:
			case INITCAP:
			case LENGTH:
			case LPAD:
			case LTRIM:
			case MD5:
			case PARSE_IDENT:
			case PG_CLIENT_ENCODING:
			case QUOTE_IDENT:
			case QUOTE_LITERAL:
			case QUOTE_NULLABLE:
			case REGEXP_COUNT:
			case REGEXP_INSTR:
			case REGEXP_LIKE:
			case REGEXP_MATCH:
			case REGEXP_MATCHES:
			case REGEXP_REPLACE:
			case REGEXP_SPLIT_TO_ARRAY:
			case REGEXP_SPLIT_TO_TABLE:
			case REGEXP_SUBSTR:
			case REPEAT:
			case RPAD:
			case RTRIM:
			case SPLIT_PART:
			case STARTS_WITH:
			case STRING_TO_ARRAY:
			case STRING_TO_TABLE:
			case STRPOS:
			case SUBSTR:
			case TO_ASCII:
			case TO_HEX:
			case TRANSLATE:
			case UNISTR:
			case AGE:
			case CLOCK_TIMESTAMP:
			case DATE_BIN:
			case DATE_PART:
			case DATE_TRUNC:
			case ISFINITE:
			case JUSTIFY_DAYS:
			case JUSTIFY_HOURS:
			case JUSTIFY_INTERVAL:
			case MAKE_DATE:
			case MAKE_INTERVAL:
			case MAKE_TIME:
			case MAKE_TIMESTAMP:
			case MAKE_TIMESTAMPTZ:
			case NOW:
			case STATEMENT_TIMESTAMP:
			case TIMEOFDAY:
			case TRANSACTION_TIMESTAMP:
			case TO_TIMESTAMP:
			case TO_CHAR:
			case TO_DATE:
			case TO_NUMBER:
			case Identifier:
			case QuotedIdentifier:
			case UnicodeQuotedIdentifier:
			case PLSQLVARIABLENAME:
			case PLSQLIDENTIFIER:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3795;
				rolespec();
				}
				break;
			case USER:
				EnterOuterAlt(_localctx, 2);
				{
				State = 3796;
				Match(USER);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DropusermappingstmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DROP() { return GetToken(PostgreSQLParser.DROP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode USER() { return GetToken(PostgreSQLParser.USER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MAPPING() { return GetToken(PostgreSQLParser.MAPPING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOR() { return GetToken(PostgreSQLParser.FOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Auth_identContext auth_ident() {
			return GetRuleContext<Auth_identContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SERVER() { return GetToken(PostgreSQLParser.SERVER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF_P() { return GetToken(PostgreSQLParser.IF_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXISTS() { return GetToken(PostgreSQLParser.EXISTS, 0); }
		public DropusermappingstmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dropusermappingstmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterDropusermappingstmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitDropusermappingstmt(this);
		}
	}

	[RuleVersion(0)]
	public DropusermappingstmtContext dropusermappingstmt() {
		DropusermappingstmtContext _localctx = new DropusermappingstmtContext(Context, State);
		EnterRule(_localctx, 378, RULE_dropusermappingstmt);
		try {
			State = 3817;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,172,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3799;
				Match(DROP);
				State = 3800;
				Match(USER);
				State = 3801;
				Match(MAPPING);
				State = 3802;
				Match(FOR);
				State = 3803;
				auth_ident();
				State = 3804;
				Match(SERVER);
				State = 3805;
				name();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 3807;
				Match(DROP);
				State = 3808;
				Match(USER);
				State = 3809;
				Match(MAPPING);
				State = 3810;
				Match(IF_P);
				State = 3811;
				Match(EXISTS);
				State = 3812;
				Match(FOR);
				State = 3813;
				auth_ident();
				State = 3814;
				Match(SERVER);
				State = 3815;
				name();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AlterusermappingstmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALTER() { return GetToken(PostgreSQLParser.ALTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode USER() { return GetToken(PostgreSQLParser.USER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MAPPING() { return GetToken(PostgreSQLParser.MAPPING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOR() { return GetToken(PostgreSQLParser.FOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Auth_identContext auth_ident() {
			return GetRuleContext<Auth_identContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SERVER() { return GetToken(PostgreSQLParser.SERVER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Alter_generic_optionsContext alter_generic_options() {
			return GetRuleContext<Alter_generic_optionsContext>(0);
		}
		public AlterusermappingstmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alterusermappingstmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterAlterusermappingstmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitAlterusermappingstmt(this);
		}
	}

	[RuleVersion(0)]
	public AlterusermappingstmtContext alterusermappingstmt() {
		AlterusermappingstmtContext _localctx = new AlterusermappingstmtContext(Context, State);
		EnterRule(_localctx, 380, RULE_alterusermappingstmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3819;
			Match(ALTER);
			State = 3820;
			Match(USER);
			State = 3821;
			Match(MAPPING);
			State = 3822;
			Match(FOR);
			State = 3823;
			auth_ident();
			State = 3824;
			Match(SERVER);
			State = 3825;
			name();
			State = 3826;
			alter_generic_options();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CreatepolicystmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CREATE() { return GetToken(PostgreSQLParser.CREATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode POLICY() { return GetToken(PostgreSQLParser.POLICY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ON() { return GetToken(PostgreSQLParser.ON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Qualified_nameContext qualified_name() {
			return GetRuleContext<Qualified_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RowsecuritydefaultpermissiveContext rowsecuritydefaultpermissive() {
			return GetRuleContext<RowsecuritydefaultpermissiveContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RowsecuritydefaultforcmdContext rowsecuritydefaultforcmd() {
			return GetRuleContext<RowsecuritydefaultforcmdContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RowsecuritydefaulttoroleContext rowsecuritydefaulttorole() {
			return GetRuleContext<RowsecuritydefaulttoroleContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RowsecurityoptionalexprContext rowsecurityoptionalexpr() {
			return GetRuleContext<RowsecurityoptionalexprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RowsecurityoptionalwithcheckContext rowsecurityoptionalwithcheck() {
			return GetRuleContext<RowsecurityoptionalwithcheckContext>(0);
		}
		public CreatepolicystmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_createpolicystmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterCreatepolicystmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitCreatepolicystmt(this);
		}
	}

	[RuleVersion(0)]
	public CreatepolicystmtContext createpolicystmt() {
		CreatepolicystmtContext _localctx = new CreatepolicystmtContext(Context, State);
		EnterRule(_localctx, 382, RULE_createpolicystmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3828;
			Match(CREATE);
			State = 3829;
			Match(POLICY);
			State = 3830;
			name();
			State = 3831;
			Match(ON);
			State = 3832;
			qualified_name();
			State = 3833;
			rowsecuritydefaultpermissive();
			State = 3834;
			rowsecuritydefaultforcmd();
			State = 3835;
			rowsecuritydefaulttorole();
			State = 3836;
			rowsecurityoptionalexpr();
			State = 3837;
			rowsecurityoptionalwithcheck();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AlterpolicystmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALTER() { return GetToken(PostgreSQLParser.ALTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode POLICY() { return GetToken(PostgreSQLParser.POLICY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ON() { return GetToken(PostgreSQLParser.ON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Qualified_nameContext qualified_name() {
			return GetRuleContext<Qualified_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RowsecurityoptionaltoroleContext rowsecurityoptionaltorole() {
			return GetRuleContext<RowsecurityoptionaltoroleContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RowsecurityoptionalexprContext rowsecurityoptionalexpr() {
			return GetRuleContext<RowsecurityoptionalexprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RowsecurityoptionalwithcheckContext rowsecurityoptionalwithcheck() {
			return GetRuleContext<RowsecurityoptionalwithcheckContext>(0);
		}
		public AlterpolicystmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alterpolicystmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterAlterpolicystmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitAlterpolicystmt(this);
		}
	}

	[RuleVersion(0)]
	public AlterpolicystmtContext alterpolicystmt() {
		AlterpolicystmtContext _localctx = new AlterpolicystmtContext(Context, State);
		EnterRule(_localctx, 384, RULE_alterpolicystmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3839;
			Match(ALTER);
			State = 3840;
			Match(POLICY);
			State = 3841;
			name();
			State = 3842;
			Match(ON);
			State = 3843;
			qualified_name();
			State = 3844;
			rowsecurityoptionaltorole();
			State = 3845;
			rowsecurityoptionalexpr();
			State = 3846;
			rowsecurityoptionalwithcheck();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RowsecurityoptionalexprContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode USING() { return GetToken(PostgreSQLParser.USING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAREN() { return GetToken(PostgreSQLParser.OPEN_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public A_exprContext a_expr() {
			return GetRuleContext<A_exprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAREN() { return GetToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public RowsecurityoptionalexprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rowsecurityoptionalexpr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterRowsecurityoptionalexpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitRowsecurityoptionalexpr(this);
		}
	}

	[RuleVersion(0)]
	public RowsecurityoptionalexprContext rowsecurityoptionalexpr() {
		RowsecurityoptionalexprContext _localctx = new RowsecurityoptionalexprContext(Context, State);
		EnterRule(_localctx, 386, RULE_rowsecurityoptionalexpr);
		try {
			State = 3854;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case USING:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3848;
				Match(USING);
				State = 3849;
				Match(OPEN_PAREN);
				State = 3850;
				a_expr();
				State = 3851;
				Match(CLOSE_PAREN);
				}
				break;
			case Eof:
			case OPEN_PAREN:
			case SEMI:
			case ANALYSE:
			case ANALYZE:
			case CREATE:
			case DO:
			case FETCH:
			case GRANT:
			case INTO:
			case SELECT:
			case TABLE:
			case WITH:
			case ABORT_P:
			case ALTER:
			case BEGIN_P:
			case CHECKPOINT:
			case CLOSE:
			case CLUSTER:
			case COMMENT:
			case COMMIT:
			case COPY:
			case DEALLOCATE:
			case DECLARE:
			case DELETE_P:
			case DISCARD:
			case DROP:
			case EXECUTE:
			case EXPLAIN:
			case INSERT:
			case LISTEN:
			case LOAD:
			case LOCK_P:
			case MERGE:
			case MOVE:
			case NOTIFY:
			case PREPARE:
			case REASSIGN:
			case REFRESH:
			case REINDEX:
			case RELEASE:
			case RESET:
			case REVOKE:
			case ROLLBACK:
			case SAVEPOINT:
			case SECURITY:
			case SET:
			case SHOW:
			case START:
			case TRUNCATE:
			case UNLISTEN:
			case UPDATE:
			case VACUUM:
			case VALUES:
			case CALL:
			case IMPORT_P:
			case END_P:
			case MetaCommand:
				EnterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RowsecurityoptionalwithcheckContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WITH() { return GetToken(PostgreSQLParser.WITH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHECK() { return GetToken(PostgreSQLParser.CHECK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAREN() { return GetToken(PostgreSQLParser.OPEN_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public A_exprContext a_expr() {
			return GetRuleContext<A_exprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAREN() { return GetToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public RowsecurityoptionalwithcheckContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rowsecurityoptionalwithcheck; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterRowsecurityoptionalwithcheck(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitRowsecurityoptionalwithcheck(this);
		}
	}

	[RuleVersion(0)]
	public RowsecurityoptionalwithcheckContext rowsecurityoptionalwithcheck() {
		RowsecurityoptionalwithcheckContext _localctx = new RowsecurityoptionalwithcheckContext(Context, State);
		EnterRule(_localctx, 388, RULE_rowsecurityoptionalwithcheck);
		try {
			State = 3863;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,174,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3856;
				Match(WITH);
				State = 3857;
				Match(CHECK);
				State = 3858;
				Match(OPEN_PAREN);
				State = 3859;
				a_expr();
				State = 3860;
				Match(CLOSE_PAREN);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RowsecuritydefaulttoroleContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TO() { return GetToken(PostgreSQLParser.TO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Role_listContext role_list() {
			return GetRuleContext<Role_listContext>(0);
		}
		public RowsecuritydefaulttoroleContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rowsecuritydefaulttorole; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterRowsecuritydefaulttorole(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitRowsecuritydefaulttorole(this);
		}
	}

	[RuleVersion(0)]
	public RowsecuritydefaulttoroleContext rowsecuritydefaulttorole() {
		RowsecuritydefaulttoroleContext _localctx = new RowsecuritydefaulttoroleContext(Context, State);
		EnterRule(_localctx, 390, RULE_rowsecuritydefaulttorole);
		try {
			State = 3868;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case TO:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3865;
				Match(TO);
				State = 3866;
				role_list();
				}
				break;
			case Eof:
			case OPEN_PAREN:
			case SEMI:
			case ANALYSE:
			case ANALYZE:
			case CREATE:
			case DO:
			case FETCH:
			case GRANT:
			case INTO:
			case SELECT:
			case TABLE:
			case USING:
			case WITH:
			case ABORT_P:
			case ALTER:
			case BEGIN_P:
			case CHECKPOINT:
			case CLOSE:
			case CLUSTER:
			case COMMENT:
			case COMMIT:
			case COPY:
			case DEALLOCATE:
			case DECLARE:
			case DELETE_P:
			case DISCARD:
			case DROP:
			case EXECUTE:
			case EXPLAIN:
			case INSERT:
			case LISTEN:
			case LOAD:
			case LOCK_P:
			case MERGE:
			case MOVE:
			case NOTIFY:
			case PREPARE:
			case REASSIGN:
			case REFRESH:
			case REINDEX:
			case RELEASE:
			case RESET:
			case REVOKE:
			case ROLLBACK:
			case SAVEPOINT:
			case SECURITY:
			case SET:
			case SHOW:
			case START:
			case TRUNCATE:
			case UNLISTEN:
			case UPDATE:
			case VACUUM:
			case VALUES:
			case CALL:
			case IMPORT_P:
			case END_P:
			case MetaCommand:
				EnterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RowsecurityoptionaltoroleContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TO() { return GetToken(PostgreSQLParser.TO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Role_listContext role_list() {
			return GetRuleContext<Role_listContext>(0);
		}
		public RowsecurityoptionaltoroleContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rowsecurityoptionaltorole; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterRowsecurityoptionaltorole(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitRowsecurityoptionaltorole(this);
		}
	}

	[RuleVersion(0)]
	public RowsecurityoptionaltoroleContext rowsecurityoptionaltorole() {
		RowsecurityoptionaltoroleContext _localctx = new RowsecurityoptionaltoroleContext(Context, State);
		EnterRule(_localctx, 392, RULE_rowsecurityoptionaltorole);
		try {
			State = 3873;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case TO:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3870;
				Match(TO);
				State = 3871;
				role_list();
				}
				break;
			case Eof:
			case OPEN_PAREN:
			case SEMI:
			case ANALYSE:
			case ANALYZE:
			case CREATE:
			case DO:
			case FETCH:
			case GRANT:
			case INTO:
			case SELECT:
			case TABLE:
			case USING:
			case WITH:
			case ABORT_P:
			case ALTER:
			case BEGIN_P:
			case CHECKPOINT:
			case CLOSE:
			case CLUSTER:
			case COMMENT:
			case COMMIT:
			case COPY:
			case DEALLOCATE:
			case DECLARE:
			case DELETE_P:
			case DISCARD:
			case DROP:
			case EXECUTE:
			case EXPLAIN:
			case INSERT:
			case LISTEN:
			case LOAD:
			case LOCK_P:
			case MERGE:
			case MOVE:
			case NOTIFY:
			case PREPARE:
			case REASSIGN:
			case REFRESH:
			case REINDEX:
			case RELEASE:
			case RESET:
			case REVOKE:
			case ROLLBACK:
			case SAVEPOINT:
			case SECURITY:
			case SET:
			case SHOW:
			case START:
			case TRUNCATE:
			case UNLISTEN:
			case UPDATE:
			case VACUUM:
			case VALUES:
			case CALL:
			case IMPORT_P:
			case END_P:
			case MetaCommand:
				EnterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RowsecuritydefaultpermissiveContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS() { return GetToken(PostgreSQLParser.AS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public RowsecuritydefaultpermissiveContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rowsecuritydefaultpermissive; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterRowsecuritydefaultpermissive(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitRowsecuritydefaultpermissive(this);
		}
	}

	[RuleVersion(0)]
	public RowsecuritydefaultpermissiveContext rowsecuritydefaultpermissive() {
		RowsecuritydefaultpermissiveContext _localctx = new RowsecuritydefaultpermissiveContext(Context, State);
		EnterRule(_localctx, 394, RULE_rowsecuritydefaultpermissive);
		try {
			State = 3878;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case AS:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3875;
				Match(AS);
				State = 3876;
				identifier();
				}
				break;
			case Eof:
			case OPEN_PAREN:
			case SEMI:
			case ANALYSE:
			case ANALYZE:
			case CREATE:
			case DO:
			case FETCH:
			case FOR:
			case GRANT:
			case INTO:
			case SELECT:
			case TABLE:
			case TO:
			case USING:
			case WITH:
			case ABORT_P:
			case ALTER:
			case BEGIN_P:
			case CHECKPOINT:
			case CLOSE:
			case CLUSTER:
			case COMMENT:
			case COMMIT:
			case COPY:
			case DEALLOCATE:
			case DECLARE:
			case DELETE_P:
			case DISCARD:
			case DROP:
			case EXECUTE:
			case EXPLAIN:
			case INSERT:
			case LISTEN:
			case LOAD:
			case LOCK_P:
			case MERGE:
			case MOVE:
			case NOTIFY:
			case PREPARE:
			case REASSIGN:
			case REFRESH:
			case REINDEX:
			case RELEASE:
			case RESET:
			case REVOKE:
			case ROLLBACK:
			case SAVEPOINT:
			case SECURITY:
			case SET:
			case SHOW:
			case START:
			case TRUNCATE:
			case UNLISTEN:
			case UPDATE:
			case VACUUM:
			case VALUES:
			case CALL:
			case IMPORT_P:
			case END_P:
			case MetaCommand:
				EnterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RowsecuritydefaultforcmdContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOR() { return GetToken(PostgreSQLParser.FOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Row_security_cmdContext row_security_cmd() {
			return GetRuleContext<Row_security_cmdContext>(0);
		}
		public RowsecuritydefaultforcmdContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rowsecuritydefaultforcmd; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterRowsecuritydefaultforcmd(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitRowsecuritydefaultforcmd(this);
		}
	}

	[RuleVersion(0)]
	public RowsecuritydefaultforcmdContext rowsecuritydefaultforcmd() {
		RowsecuritydefaultforcmdContext _localctx = new RowsecuritydefaultforcmdContext(Context, State);
		EnterRule(_localctx, 396, RULE_rowsecuritydefaultforcmd);
		try {
			State = 3883;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case FOR:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3880;
				Match(FOR);
				State = 3881;
				row_security_cmd();
				}
				break;
			case Eof:
			case OPEN_PAREN:
			case SEMI:
			case ANALYSE:
			case ANALYZE:
			case CREATE:
			case DO:
			case FETCH:
			case GRANT:
			case INTO:
			case SELECT:
			case TABLE:
			case TO:
			case USING:
			case WITH:
			case ABORT_P:
			case ALTER:
			case BEGIN_P:
			case CHECKPOINT:
			case CLOSE:
			case CLUSTER:
			case COMMENT:
			case COMMIT:
			case COPY:
			case DEALLOCATE:
			case DECLARE:
			case DELETE_P:
			case DISCARD:
			case DROP:
			case EXECUTE:
			case EXPLAIN:
			case INSERT:
			case LISTEN:
			case LOAD:
			case LOCK_P:
			case MERGE:
			case MOVE:
			case NOTIFY:
			case PREPARE:
			case REASSIGN:
			case REFRESH:
			case REINDEX:
			case RELEASE:
			case RESET:
			case REVOKE:
			case ROLLBACK:
			case SAVEPOINT:
			case SECURITY:
			case SET:
			case SHOW:
			case START:
			case TRUNCATE:
			case UNLISTEN:
			case UPDATE:
			case VACUUM:
			case VALUES:
			case CALL:
			case IMPORT_P:
			case END_P:
			case MetaCommand:
				EnterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Row_security_cmdContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALL() { return GetToken(PostgreSQLParser.ALL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SELECT() { return GetToken(PostgreSQLParser.SELECT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INSERT() { return GetToken(PostgreSQLParser.INSERT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UPDATE() { return GetToken(PostgreSQLParser.UPDATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DELETE_P() { return GetToken(PostgreSQLParser.DELETE_P, 0); }
		public Row_security_cmdContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_row_security_cmd; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterRow_security_cmd(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitRow_security_cmd(this);
		}
	}

	[RuleVersion(0)]
	public Row_security_cmdContext row_security_cmd() {
		Row_security_cmdContext _localctx = new Row_security_cmdContext(Context, State);
		EnterRule(_localctx, 398, RULE_row_security_cmd);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3885;
			_la = TokenStream.LA(1);
			if ( !(_la==ALL || _la==SELECT || _la==DELETE_P || _la==INSERT || _la==UPDATE) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CreateamstmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CREATE() { return GetToken(PostgreSQLParser.CREATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ACCESS() { return GetToken(PostgreSQLParser.ACCESS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode METHOD() { return GetToken(PostgreSQLParser.METHOD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TYPE_P() { return GetToken(PostgreSQLParser.TYPE_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Am_typeContext am_type() {
			return GetRuleContext<Am_typeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HANDLER() { return GetToken(PostgreSQLParser.HANDLER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Handler_nameContext handler_name() {
			return GetRuleContext<Handler_nameContext>(0);
		}
		public CreateamstmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_createamstmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterCreateamstmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitCreateamstmt(this);
		}
	}

	[RuleVersion(0)]
	public CreateamstmtContext createamstmt() {
		CreateamstmtContext _localctx = new CreateamstmtContext(Context, State);
		EnterRule(_localctx, 400, RULE_createamstmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3887;
			Match(CREATE);
			State = 3888;
			Match(ACCESS);
			State = 3889;
			Match(METHOD);
			State = 3890;
			name();
			State = 3891;
			Match(TYPE_P);
			State = 3892;
			am_type();
			State = 3893;
			Match(HANDLER);
			State = 3894;
			handler_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Am_typeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INDEX() { return GetToken(PostgreSQLParser.INDEX, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLE() { return GetToken(PostgreSQLParser.TABLE, 0); }
		public Am_typeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_am_type; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterAm_type(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitAm_type(this);
		}
	}

	[RuleVersion(0)]
	public Am_typeContext am_type() {
		Am_typeContext _localctx = new Am_typeContext(Context, State);
		EnterRule(_localctx, 402, RULE_am_type);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3896;
			_la = TokenStream.LA(1);
			if ( !(_la==TABLE || _la==INDEX) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CreatetrigstmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CREATE() { return GetToken(PostgreSQLParser.CREATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRIGGER() { return GetToken(PostgreSQLParser.TRIGGER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TriggeractiontimeContext triggeractiontime() {
			return GetRuleContext<TriggeractiontimeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TriggereventsContext triggerevents() {
			return GetRuleContext<TriggereventsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ON() { return GetToken(PostgreSQLParser.ON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Qualified_nameContext qualified_name() {
			return GetRuleContext<Qualified_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TriggerreferencingContext triggerreferencing() {
			return GetRuleContext<TriggerreferencingContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TriggerforspecContext triggerforspec() {
			return GetRuleContext<TriggerforspecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TriggerwhenContext triggerwhen() {
			return GetRuleContext<TriggerwhenContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXECUTE() { return GetToken(PostgreSQLParser.EXECUTE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Function_or_procedureContext function_or_procedure() {
			return GetRuleContext<Function_or_procedureContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Func_nameContext func_name() {
			return GetRuleContext<Func_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAREN() { return GetToken(PostgreSQLParser.OPEN_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TriggerfuncargsContext triggerfuncargs() {
			return GetRuleContext<TriggerfuncargsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAREN() { return GetToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONSTRAINT() { return GetToken(PostgreSQLParser.CONSTRAINT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AFTER() { return GetToken(PostgreSQLParser.AFTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public OptconstrfromtableContext optconstrfromtable() {
			return GetRuleContext<OptconstrfromtableContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ConstraintattributespecContext constraintattributespec() {
			return GetRuleContext<ConstraintattributespecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOR() { return GetToken(PostgreSQLParser.FOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EACH() { return GetToken(PostgreSQLParser.EACH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROW() { return GetToken(PostgreSQLParser.ROW, 0); }
		public CreatetrigstmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_createtrigstmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterCreatetrigstmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitCreatetrigstmt(this);
		}
	}

	[RuleVersion(0)]
	public CreatetrigstmtContext createtrigstmt() {
		CreatetrigstmtContext _localctx = new CreatetrigstmtContext(Context, State);
		EnterRule(_localctx, 404, RULE_createtrigstmt);
		try {
			State = 3936;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,179,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3898;
				Match(CREATE);
				State = 3899;
				Match(TRIGGER);
				State = 3900;
				name();
				State = 3901;
				triggeractiontime();
				State = 3902;
				triggerevents();
				State = 3903;
				Match(ON);
				State = 3904;
				qualified_name();
				State = 3905;
				triggerreferencing();
				State = 3906;
				triggerforspec();
				State = 3907;
				triggerwhen();
				State = 3908;
				Match(EXECUTE);
				State = 3909;
				function_or_procedure();
				State = 3910;
				func_name();
				State = 3911;
				Match(OPEN_PAREN);
				State = 3912;
				triggerfuncargs();
				State = 3913;
				Match(CLOSE_PAREN);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 3915;
				Match(CREATE);
				State = 3916;
				Match(CONSTRAINT);
				State = 3917;
				Match(TRIGGER);
				State = 3918;
				name();
				State = 3919;
				Match(AFTER);
				State = 3920;
				triggerevents();
				State = 3921;
				Match(ON);
				State = 3922;
				qualified_name();
				State = 3923;
				optconstrfromtable();
				State = 3924;
				constraintattributespec();
				State = 3925;
				Match(FOR);
				State = 3926;
				Match(EACH);
				State = 3927;
				Match(ROW);
				State = 3928;
				triggerwhen();
				State = 3929;
				Match(EXECUTE);
				State = 3930;
				function_or_procedure();
				State = 3931;
				func_name();
				State = 3932;
				Match(OPEN_PAREN);
				State = 3933;
				triggerfuncargs();
				State = 3934;
				Match(CLOSE_PAREN);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TriggeractiontimeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BEFORE() { return GetToken(PostgreSQLParser.BEFORE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AFTER() { return GetToken(PostgreSQLParser.AFTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INSTEAD() { return GetToken(PostgreSQLParser.INSTEAD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OF() { return GetToken(PostgreSQLParser.OF, 0); }
		public TriggeractiontimeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_triggeractiontime; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterTriggeractiontime(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitTriggeractiontime(this);
		}
	}

	[RuleVersion(0)]
	public TriggeractiontimeContext triggeractiontime() {
		TriggeractiontimeContext _localctx = new TriggeractiontimeContext(Context, State);
		EnterRule(_localctx, 406, RULE_triggeractiontime);
		try {
			State = 3942;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case BEFORE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3938;
				Match(BEFORE);
				}
				break;
			case AFTER:
				EnterOuterAlt(_localctx, 2);
				{
				State = 3939;
				Match(AFTER);
				}
				break;
			case INSTEAD:
				EnterOuterAlt(_localctx, 3);
				{
				State = 3940;
				Match(INSTEAD);
				State = 3941;
				Match(OF);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TriggereventsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TriggeroneeventContext[] triggeroneevent() {
			return GetRuleContexts<TriggeroneeventContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TriggeroneeventContext triggeroneevent(int i) {
			return GetRuleContext<TriggeroneeventContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] OR() { return GetTokens(PostgreSQLParser.OR); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OR(int i) {
			return GetToken(PostgreSQLParser.OR, i);
		}
		public TriggereventsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_triggerevents; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterTriggerevents(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitTriggerevents(this);
		}
	}

	[RuleVersion(0)]
	public TriggereventsContext triggerevents() {
		TriggereventsContext _localctx = new TriggereventsContext(Context, State);
		EnterRule(_localctx, 408, RULE_triggerevents);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3944;
			triggeroneevent();
			State = 3949;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==OR) {
				{
				{
				State = 3945;
				Match(OR);
				State = 3946;
				triggeroneevent();
				}
				}
				State = 3951;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TriggeroneeventContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INSERT() { return GetToken(PostgreSQLParser.INSERT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DELETE_P() { return GetToken(PostgreSQLParser.DELETE_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UPDATE() { return GetToken(PostgreSQLParser.UPDATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OF() { return GetToken(PostgreSQLParser.OF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ColumnlistContext columnlist() {
			return GetRuleContext<ColumnlistContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRUNCATE() { return GetToken(PostgreSQLParser.TRUNCATE, 0); }
		public TriggeroneeventContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_triggeroneevent; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterTriggeroneevent(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitTriggeroneevent(this);
		}
	}

	[RuleVersion(0)]
	public TriggeroneeventContext triggeroneevent() {
		TriggeroneeventContext _localctx = new TriggeroneeventContext(Context, State);
		EnterRule(_localctx, 410, RULE_triggeroneevent);
		try {
			State = 3959;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,182,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3952;
				Match(INSERT);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 3953;
				Match(DELETE_P);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 3954;
				Match(UPDATE);
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 3955;
				Match(UPDATE);
				State = 3956;
				Match(OF);
				State = 3957;
				columnlist();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 3958;
				Match(TRUNCATE);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TriggerreferencingContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REFERENCING() { return GetToken(PostgreSQLParser.REFERENCING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TriggertransitionsContext triggertransitions() {
			return GetRuleContext<TriggertransitionsContext>(0);
		}
		public TriggerreferencingContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_triggerreferencing; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterTriggerreferencing(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitTriggerreferencing(this);
		}
	}

	[RuleVersion(0)]
	public TriggerreferencingContext triggerreferencing() {
		TriggerreferencingContext _localctx = new TriggerreferencingContext(Context, State);
		EnterRule(_localctx, 412, RULE_triggerreferencing);
		try {
			State = 3964;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case REFERENCING:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3961;
				Match(REFERENCING);
				State = 3962;
				triggertransitions();
				}
				break;
			case FOR:
			case WHEN:
			case EXECUTE:
				EnterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TriggertransitionsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TriggertransitionContext[] triggertransition() {
			return GetRuleContexts<TriggertransitionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TriggertransitionContext triggertransition(int i) {
			return GetRuleContext<TriggertransitionContext>(i);
		}
		public TriggertransitionsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_triggertransitions; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterTriggertransitions(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitTriggertransitions(this);
		}
	}

	[RuleVersion(0)]
	public TriggertransitionsContext triggertransitions() {
		TriggertransitionsContext _localctx = new TriggertransitionsContext(Context, State);
		EnterRule(_localctx, 414, RULE_triggertransitions);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3967;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 3966;
				triggertransition();
				}
				}
				State = 3969;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==NEW || _la==OLD );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TriggertransitionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TransitionoldornewContext transitionoldornew() {
			return GetRuleContext<TransitionoldornewContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TransitionrowortableContext transitionrowortable() {
			return GetRuleContext<TransitionrowortableContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Opt_asContext opt_as() {
			return GetRuleContext<Opt_asContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TransitionrelnameContext transitionrelname() {
			return GetRuleContext<TransitionrelnameContext>(0);
		}
		public TriggertransitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_triggertransition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterTriggertransition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitTriggertransition(this);
		}
	}

	[RuleVersion(0)]
	public TriggertransitionContext triggertransition() {
		TriggertransitionContext _localctx = new TriggertransitionContext(Context, State);
		EnterRule(_localctx, 416, RULE_triggertransition);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3971;
			transitionoldornew();
			State = 3972;
			transitionrowortable();
			State = 3973;
			opt_as();
			State = 3974;
			transitionrelname();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TransitionoldornewContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NEW() { return GetToken(PostgreSQLParser.NEW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OLD() { return GetToken(PostgreSQLParser.OLD, 0); }
		public TransitionoldornewContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_transitionoldornew; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterTransitionoldornew(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitTransitionoldornew(this);
		}
	}

	[RuleVersion(0)]
	public TransitionoldornewContext transitionoldornew() {
		TransitionoldornewContext _localctx = new TransitionoldornewContext(Context, State);
		EnterRule(_localctx, 418, RULE_transitionoldornew);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3976;
			_la = TokenStream.LA(1);
			if ( !(_la==NEW || _la==OLD) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TransitionrowortableContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLE() { return GetToken(PostgreSQLParser.TABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROW() { return GetToken(PostgreSQLParser.ROW, 0); }
		public TransitionrowortableContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_transitionrowortable; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterTransitionrowortable(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitTransitionrowortable(this);
		}
	}

	[RuleVersion(0)]
	public TransitionrowortableContext transitionrowortable() {
		TransitionrowortableContext _localctx = new TransitionrowortableContext(Context, State);
		EnterRule(_localctx, 420, RULE_transitionrowortable);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3978;
			_la = TokenStream.LA(1);
			if ( !(_la==TABLE || _la==ROW) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TransitionrelnameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ColidContext colid() {
			return GetRuleContext<ColidContext>(0);
		}
		public TransitionrelnameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_transitionrelname; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterTransitionrelname(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitTransitionrelname(this);
		}
	}

	[RuleVersion(0)]
	public TransitionrelnameContext transitionrelname() {
		TransitionrelnameContext _localctx = new TransitionrelnameContext(Context, State);
		EnterRule(_localctx, 422, RULE_transitionrelname);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3980;
			colid();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TriggerforspecContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOR() { return GetToken(PostgreSQLParser.FOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TriggerforopteachContext triggerforopteach() {
			return GetRuleContext<TriggerforopteachContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TriggerfortypeContext triggerfortype() {
			return GetRuleContext<TriggerfortypeContext>(0);
		}
		public TriggerforspecContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_triggerforspec; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterTriggerforspec(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitTriggerforspec(this);
		}
	}

	[RuleVersion(0)]
	public TriggerforspecContext triggerforspec() {
		TriggerforspecContext _localctx = new TriggerforspecContext(Context, State);
		EnterRule(_localctx, 424, RULE_triggerforspec);
		try {
			State = 3987;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case FOR:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3982;
				Match(FOR);
				State = 3983;
				triggerforopteach();
				State = 3984;
				triggerfortype();
				}
				break;
			case WHEN:
			case EXECUTE:
				EnterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TriggerforopteachContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EACH() { return GetToken(PostgreSQLParser.EACH, 0); }
		public TriggerforopteachContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_triggerforopteach; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterTriggerforopteach(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitTriggerforopteach(this);
		}
	}

	[RuleVersion(0)]
	public TriggerforopteachContext triggerforopteach() {
		TriggerforopteachContext _localctx = new TriggerforopteachContext(Context, State);
		EnterRule(_localctx, 426, RULE_triggerforopteach);
		try {
			State = 3991;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case EACH:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3989;
				Match(EACH);
				}
				break;
			case STATEMENT:
			case ROW:
				EnterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TriggerfortypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROW() { return GetToken(PostgreSQLParser.ROW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STATEMENT() { return GetToken(PostgreSQLParser.STATEMENT, 0); }
		public TriggerfortypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_triggerfortype; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterTriggerfortype(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitTriggerfortype(this);
		}
	}

	[RuleVersion(0)]
	public TriggerfortypeContext triggerfortype() {
		TriggerfortypeContext _localctx = new TriggerfortypeContext(Context, State);
		EnterRule(_localctx, 428, RULE_triggerfortype);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3993;
			_la = TokenStream.LA(1);
			if ( !(_la==STATEMENT || _la==ROW) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TriggerwhenContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WHEN() { return GetToken(PostgreSQLParser.WHEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAREN() { return GetToken(PostgreSQLParser.OPEN_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public A_exprContext a_expr() {
			return GetRuleContext<A_exprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAREN() { return GetToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public TriggerwhenContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_triggerwhen; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterTriggerwhen(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitTriggerwhen(this);
		}
	}

	[RuleVersion(0)]
	public TriggerwhenContext triggerwhen() {
		TriggerwhenContext _localctx = new TriggerwhenContext(Context, State);
		EnterRule(_localctx, 430, RULE_triggerwhen);
		try {
			State = 4001;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case WHEN:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3995;
				Match(WHEN);
				State = 3996;
				Match(OPEN_PAREN);
				State = 3997;
				a_expr();
				State = 3998;
				Match(CLOSE_PAREN);
				}
				break;
			case EXECUTE:
				EnterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Function_or_procedureContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FUNCTION() { return GetToken(PostgreSQLParser.FUNCTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PROCEDURE() { return GetToken(PostgreSQLParser.PROCEDURE, 0); }
		public Function_or_procedureContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_function_or_procedure; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterFunction_or_procedure(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitFunction_or_procedure(this);
		}
	}

	[RuleVersion(0)]
	public Function_or_procedureContext function_or_procedure() {
		Function_or_procedureContext _localctx = new Function_or_procedureContext(Context, State);
		EnterRule(_localctx, 432, RULE_function_or_procedure);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4003;
			_la = TokenStream.LA(1);
			if ( !(_la==FUNCTION || _la==PROCEDURE) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TriggerfuncargsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TriggerfuncargContext[] triggerfuncarg() {
			return GetRuleContexts<TriggerfuncargContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TriggerfuncargContext triggerfuncarg(int i) {
			return GetRuleContext<TriggerfuncargContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(PostgreSQLParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(PostgreSQLParser.COMMA, i);
		}
		public TriggerfuncargsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_triggerfuncargs; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterTriggerfuncargs(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitTriggerfuncargs(this);
		}
	}

	[RuleVersion(0)]
	public TriggerfuncargsContext triggerfuncargs() {
		TriggerfuncargsContext _localctx = new TriggerfuncargsContext(Context, State);
		EnterRule(_localctx, 434, RULE_triggerfuncargs);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4007;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ALL:
			case ANALYSE:
			case ANALYZE:
			case AND:
			case ANY:
			case ARRAY:
			case AS:
			case ASC:
			case ASYMMETRIC:
			case BOTH:
			case CASE:
			case CAST:
			case CHECK:
			case COLLATE:
			case COLUMN:
			case CONSTRAINT:
			case CREATE:
			case CURRENT_CATALOG:
			case CURRENT_DATE:
			case CURRENT_ROLE:
			case CURRENT_TIME:
			case CURRENT_TIMESTAMP:
			case CURRENT_USER:
			case DEFAULT:
			case DEFERRABLE:
			case DESC:
			case DISTINCT:
			case DO:
			case ELSE:
			case EXCEPT:
			case FALSE_P:
			case FETCH:
			case FOR:
			case FOREIGN:
			case FROM:
			case GRANT:
			case GROUP_P:
			case HAVING:
			case IN_P:
			case INITIALLY:
			case INTERSECT:
			case LATERAL_P:
			case LEADING:
			case LIMIT:
			case LOCALTIME:
			case LOCALTIMESTAMP:
			case NOT:
			case NULL_P:
			case OFFSET:
			case ON:
			case ONLY:
			case OR:
			case ORDER:
			case PLACING:
			case PRIMARY:
			case REFERENCES:
			case RETURNING:
			case SELECT:
			case SESSION_USER:
			case SOME:
			case SYMMETRIC:
			case TABLE:
			case THEN:
			case TO:
			case TRAILING:
			case TRUE_P:
			case UNION:
			case UNIQUE:
			case USER:
			case USING:
			case VARIADIC:
			case WHEN:
			case WHERE:
			case WINDOW:
			case WITH:
			case AUTHORIZATION:
			case BINARY:
			case COLLATION:
			case CONCURRENTLY:
			case CROSS:
			case CURRENT_SCHEMA:
			case FREEZE:
			case FULL:
			case ILIKE:
			case INNER_P:
			case IS:
			case ISNULL:
			case JOIN:
			case LIKE:
			case NATURAL:
			case NOTNULL:
			case OUTER_P:
			case OVER:
			case OVERLAPS:
			case SIMILAR:
			case VERBOSE:
			case ABORT_P:
			case ABSOLUTE_P:
			case ACCESS:
			case ACTION:
			case ADD_P:
			case ADMIN:
			case AFTER:
			case AGGREGATE:
			case ALSO:
			case ALTER:
			case ALWAYS:
			case ASSERTION:
			case ASSIGNMENT:
			case AT:
			case ATTRIBUTE:
			case BACKWARD:
			case BEFORE:
			case BEGIN_P:
			case BY:
			case CACHE:
			case CALLED:
			case CASCADE:
			case CASCADED:
			case CATALOG:
			case CHAIN:
			case CHARACTERISTICS:
			case CHECKPOINT:
			case CLASS:
			case CLOSE:
			case CLUSTER:
			case COMMENT:
			case COMMENTS:
			case COMMIT:
			case COMMITTED:
			case CONFIGURATION:
			case CONNECTION:
			case CONSTRAINTS:
			case CONTENT_P:
			case CONTINUE_P:
			case CONVERSION_P:
			case COPY:
			case COST:
			case CSV:
			case CURSOR:
			case CYCLE:
			case DATA_P:
			case DATABASE:
			case DAY_P:
			case DEALLOCATE:
			case DECLARE:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE_P:
			case DELIMITER:
			case DELIMITERS:
			case DICTIONARY:
			case DISABLE_P:
			case DISCARD:
			case DOCUMENT_P:
			case DOMAIN_P:
			case DOUBLE_P:
			case DROP:
			case EACH:
			case ENABLE_P:
			case ENCODING:
			case ENCRYPTED:
			case ENUM_P:
			case ESCAPE:
			case EVENT:
			case EXCLUDE:
			case EXCLUDING:
			case EXCLUSIVE:
			case EXECUTE:
			case EXPLAIN:
			case EXTENSION:
			case EXTERNAL:
			case FAMILY:
			case FIRST_P:
			case FOLLOWING:
			case FORCE:
			case FORWARD:
			case FUNCTION:
			case FUNCTIONS:
			case GLOBAL:
			case GRANTED:
			case HANDLER:
			case HEADER_P:
			case HOLD:
			case HOUR_P:
			case IDENTITY_P:
			case IF_P:
			case IMMEDIATE:
			case IMMUTABLE:
			case IMPLICIT_P:
			case INCLUDING:
			case INCREMENT:
			case INDEX:
			case INDEXES:
			case INHERIT:
			case INHERITS:
			case INLINE_P:
			case INSENSITIVE:
			case INSERT:
			case INSTEAD:
			case INVOKER:
			case ISOLATION:
			case KEY:
			case LABEL:
			case LANGUAGE:
			case LARGE_P:
			case LAST_P:
			case LEAKPROOF:
			case LEVEL:
			case LISTEN:
			case LOAD:
			case LOCAL:
			case LOCATION:
			case LOCK_P:
			case MAPPING:
			case MATCH:
			case MATERIALIZED:
			case MAXVALUE:
			case MINUTE_P:
			case MINVALUE:
			case MODE:
			case MONTH_P:
			case MOVE:
			case NAME_P:
			case NAMES:
			case NEXT:
			case NO:
			case NOTHING:
			case NOTIFY:
			case NOWAIT:
			case NULLS_P:
			case OBJECT_P:
			case OF:
			case OFF:
			case OIDS:
			case OPERATOR:
			case OPTION:
			case OPTIONS:
			case OWNED:
			case OWNER:
			case PARSER:
			case PARTIAL:
			case PARTITION:
			case PASSING:
			case PASSWORD:
			case PLANS:
			case PRECEDING:
			case PREPARE:
			case PREPARED:
			case PRESERVE:
			case PRIOR:
			case PRIVILEGES:
			case PROCEDURAL:
			case PROCEDURE:
			case PROGRAM:
			case QUOTE:
			case RANGE:
			case READ:
			case REASSIGN:
			case RECHECK:
			case RECURSIVE:
			case REF:
			case REFRESH:
			case REINDEX:
			case RELATIVE_P:
			case RELEASE:
			case RENAME:
			case REPEATABLE:
			case REPLACE:
			case REPLICA:
			case RESET:
			case RESTART:
			case RESTRICT:
			case RETURNS:
			case REVOKE:
			case ROLE:
			case ROLLBACK:
			case ROWS:
			case RULE:
			case SAVEPOINT:
			case SCHEMA:
			case SCROLL:
			case SEARCH:
			case SECOND_P:
			case SECURITY:
			case SEQUENCE:
			case SEQUENCES:
			case SERIALIZABLE:
			case SERVER:
			case SESSION:
			case SET:
			case SHARE:
			case SHOW:
			case SIMPLE:
			case SNAPSHOT:
			case STABLE:
			case STANDALONE_P:
			case START:
			case STATEMENT:
			case STATISTICS:
			case STDIN:
			case STDOUT:
			case STORAGE:
			case STRICT_P:
			case STRIP_P:
			case SYSID:
			case SYSTEM_P:
			case TABLES:
			case TABLESPACE:
			case TEMP:
			case TEMPLATE:
			case TEMPORARY:
			case TEXT_P:
			case TRANSACTION:
			case TRIGGER:
			case TRUNCATE:
			case TRUSTED:
			case TYPE_P:
			case TYPES_P:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNENCRYPTED:
			case UNKNOWN:
			case UNLISTEN:
			case UNLOGGED:
			case UNTIL:
			case UPDATE:
			case VACUUM:
			case VALID:
			case VALIDATE:
			case VALIDATOR:
			case VARYING:
			case VERSION_P:
			case VIEW:
			case VOLATILE:
			case WHITESPACE_P:
			case WITHOUT:
			case WORK:
			case WRAPPER:
			case WRITE:
			case XML_P:
			case YEAR_P:
			case YES_P:
			case ZONE:
			case BETWEEN:
			case BIGINT:
			case BIT:
			case BOOLEAN_P:
			case CHAR_P:
			case CHARACTER:
			case COALESCE:
			case DEC:
			case DECIMAL_P:
			case EXISTS:
			case EXTRACT:
			case FLOAT_P:
			case GREATEST:
			case INOUT:
			case INT_P:
			case INTEGER:
			case INTERVAL:
			case LEAST:
			case NATIONAL:
			case NCHAR:
			case NONE:
			case NULLIF:
			case NUMERIC:
			case OVERLAY:
			case POSITION:
			case PRECISION:
			case REAL:
			case ROW:
			case SETOF:
			case SMALLINT:
			case SUBSTRING:
			case TIME:
			case TIMESTAMP:
			case TREAT:
			case TRIM:
			case VALUES:
			case VARCHAR:
			case XMLATTRIBUTES:
			case XMLCOMMENT:
			case XMLAGG:
			case XML_IS_WELL_FORMED:
			case XML_IS_WELL_FORMED_DOCUMENT:
			case XML_IS_WELL_FORMED_CONTENT:
			case XPATH:
			case XPATH_EXISTS:
			case XMLCONCAT:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLPARSE:
			case XMLPI:
			case XMLROOT:
			case XMLSERIALIZE:
			case CALL:
			case CURRENT_P:
			case ATTACH:
			case DETACH:
			case EXPRESSION:
			case GENERATED:
			case LOGGED:
			case STORED:
			case INCLUDE:
			case ROUTINE:
			case TRANSFORM:
			case IMPORT_P:
			case POLICY:
			case METHOD:
			case REFERENCING:
			case NEW:
			case OLD:
			case VALUE_P:
			case SUBSCRIPTION:
			case PUBLICATION:
			case OUT_P:
			case END_P:
			case ROUTINES:
			case SCHEMAS:
			case PROCEDURES:
			case INPUT_P:
			case SUPPORT:
			case PARALLEL:
			case SQL_P:
			case DEPENDS:
			case OVERRIDING:
			case CONFLICT:
			case SKIP_P:
			case LOCKED:
			case TIES:
			case ROLLUP:
			case CUBE:
			case GROUPING:
			case SETS:
			case TABLESAMPLE:
			case ORDINALITY:
			case XMLTABLE:
			case COLUMNS:
			case XMLNAMESPACES:
			case ROWTYPE:
			case NORMALIZED:
			case WITHIN:
			case FILTER:
			case GROUPS:
			case OTHERS:
			case NFC:
			case NFD:
			case NFKC:
			case NFKD:
			case UESCAPE:
			case VIEWS:
			case NORMALIZE:
			case DUMP:
			case PRINT_STRICT_PARAMS:
			case VARIABLE_CONFLICT:
			case ERROR:
			case USE_VARIABLE:
			case USE_COLUMN:
			case ALIAS:
			case CONSTANT:
			case PERFORM:
			case GET:
			case DIAGNOSTICS:
			case STACKED:
			case ELSIF:
			case REVERSE:
			case SLICE:
			case EXIT:
			case RETURN:
			case QUERY:
			case RAISE:
			case SQLSTATE:
			case DEBUG:
			case LOG:
			case INFO:
			case NOTICE:
			case WARNING:
			case EXCEPTION:
			case ASSERT:
			case OPEN:
			case ABS:
			case CBRT:
			case CEIL:
			case CEILING:
			case DEGREES:
			case DIV:
			case EXP:
			case FACTORIAL:
			case FLOOR:
			case GCD:
			case LCM:
			case LN:
			case LOG10:
			case MIN_SCALE:
			case MOD:
			case PI:
			case POWER:
			case RADIANS:
			case ROUND:
			case SCALE:
			case SIGN:
			case SQRT:
			case TRIM_SCALE:
			case TRUNC:
			case WIDTH_BUCKET:
			case RANDOM:
			case SETSEED:
			case ACOS:
			case ACOSD:
			case ASIN:
			case ASIND:
			case ATAN:
			case ATAND:
			case ATAN2:
			case ATAN2D:
			case COS:
			case COSD:
			case COT:
			case COTD:
			case SIN:
			case SIND:
			case TAN:
			case TAND:
			case SINH:
			case COSH:
			case TANH:
			case ASINH:
			case ACOSH:
			case ATANH:
			case BIT_LENGTH:
			case CHAR_LENGTH:
			case CHARACTER_LENGTH:
			case LOWER:
			case OCTET_LENGTH:
			case UPPER:
			case ASCII:
			case BTRIM:
			case CHR:
			case CONCAT:
			case CONCAT_WS:
			case FORMAT:
			case INITCAP:
			case LENGTH:
			case LPAD:
			case LTRIM:
			case MD5:
			case PARSE_IDENT:
			case PG_CLIENT_ENCODING:
			case QUOTE_IDENT:
			case QUOTE_LITERAL:
			case QUOTE_NULLABLE:
			case REGEXP_COUNT:
			case REGEXP_INSTR:
			case REGEXP_LIKE:
			case REGEXP_MATCH:
			case REGEXP_MATCHES:
			case REGEXP_REPLACE:
			case REGEXP_SPLIT_TO_ARRAY:
			case REGEXP_SPLIT_TO_TABLE:
			case REGEXP_SUBSTR:
			case REPEAT:
			case RPAD:
			case RTRIM:
			case SPLIT_PART:
			case STARTS_WITH:
			case STRING_TO_ARRAY:
			case STRING_TO_TABLE:
			case STRPOS:
			case SUBSTR:
			case TO_ASCII:
			case TO_HEX:
			case TRANSLATE:
			case UNISTR:
			case AGE:
			case CLOCK_TIMESTAMP:
			case DATE_BIN:
			case DATE_PART:
			case DATE_TRUNC:
			case ISFINITE:
			case JUSTIFY_DAYS:
			case JUSTIFY_HOURS:
			case JUSTIFY_INTERVAL:
			case MAKE_DATE:
			case MAKE_INTERVAL:
			case MAKE_TIME:
			case MAKE_TIMESTAMP:
			case MAKE_TIMESTAMPTZ:
			case NOW:
			case STATEMENT_TIMESTAMP:
			case TIMEOFDAY:
			case TRANSACTION_TIMESTAMP:
			case TO_TIMESTAMP:
			case TO_CHAR:
			case TO_DATE:
			case TO_NUMBER:
			case Identifier:
			case QuotedIdentifier:
			case UnicodeQuotedIdentifier:
			case StringConstant:
			case UnicodeEscapeStringConstant:
			case BeginDollarStringConstant:
			case Integral:
			case Numeric:
			case PLSQLVARIABLENAME:
			case PLSQLIDENTIFIER:
			case EscapeStringConstant:
				{
				State = 4005;
				triggerfuncarg();
				}
				break;
			case CLOSE_PAREN:
			case COMMA:
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 4013;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 4009;
				Match(COMMA);
				State = 4010;
				triggerfuncarg();
				}
				}
				State = 4015;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TriggerfuncargContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IconstContext iconst() {
			return GetRuleContext<IconstContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FconstContext fconst() {
			return GetRuleContext<FconstContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SconstContext sconst() {
			return GetRuleContext<SconstContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CollabelContext collabel() {
			return GetRuleContext<CollabelContext>(0);
		}
		public TriggerfuncargContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_triggerfuncarg; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterTriggerfuncarg(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitTriggerfuncarg(this);
		}
	}

	[RuleVersion(0)]
	public TriggerfuncargContext triggerfuncarg() {
		TriggerfuncargContext _localctx = new TriggerfuncargContext(Context, State);
		EnterRule(_localctx, 436, RULE_triggerfuncarg);
		try {
			State = 4020;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Integral:
				EnterOuterAlt(_localctx, 1);
				{
				State = 4016;
				iconst();
				}
				break;
			case Numeric:
				EnterOuterAlt(_localctx, 2);
				{
				State = 4017;
				fconst();
				}
				break;
			case StringConstant:
			case UnicodeEscapeStringConstant:
			case BeginDollarStringConstant:
			case EscapeStringConstant:
				EnterOuterAlt(_localctx, 3);
				{
				State = 4018;
				sconst();
				}
				break;
			case ALL:
			case ANALYSE:
			case ANALYZE:
			case AND:
			case ANY:
			case ARRAY:
			case AS:
			case ASC:
			case ASYMMETRIC:
			case BOTH:
			case CASE:
			case CAST:
			case CHECK:
			case COLLATE:
			case COLUMN:
			case CONSTRAINT:
			case CREATE:
			case CURRENT_CATALOG:
			case CURRENT_DATE:
			case CURRENT_ROLE:
			case CURRENT_TIME:
			case CURRENT_TIMESTAMP:
			case CURRENT_USER:
			case DEFAULT:
			case DEFERRABLE:
			case DESC:
			case DISTINCT:
			case DO:
			case ELSE:
			case EXCEPT:
			case FALSE_P:
			case FETCH:
			case FOR:
			case FOREIGN:
			case FROM:
			case GRANT:
			case GROUP_P:
			case HAVING:
			case IN_P:
			case INITIALLY:
			case INTERSECT:
			case LATERAL_P:
			case LEADING:
			case LIMIT:
			case LOCALTIME:
			case LOCALTIMESTAMP:
			case NOT:
			case NULL_P:
			case OFFSET:
			case ON:
			case ONLY:
			case OR:
			case ORDER:
			case PLACING:
			case PRIMARY:
			case REFERENCES:
			case RETURNING:
			case SELECT:
			case SESSION_USER:
			case SOME:
			case SYMMETRIC:
			case TABLE:
			case THEN:
			case TO:
			case TRAILING:
			case TRUE_P:
			case UNION:
			case UNIQUE:
			case USER:
			case USING:
			case VARIADIC:
			case WHEN:
			case WHERE:
			case WINDOW:
			case WITH:
			case AUTHORIZATION:
			case BINARY:
			case COLLATION:
			case CONCURRENTLY:
			case CROSS:
			case CURRENT_SCHEMA:
			case FREEZE:
			case FULL:
			case ILIKE:
			case INNER_P:
			case IS:
			case ISNULL:
			case JOIN:
			case LIKE:
			case NATURAL:
			case NOTNULL:
			case OUTER_P:
			case OVER:
			case OVERLAPS:
			case SIMILAR:
			case VERBOSE:
			case ABORT_P:
			case ABSOLUTE_P:
			case ACCESS:
			case ACTION:
			case ADD_P:
			case ADMIN:
			case AFTER:
			case AGGREGATE:
			case ALSO:
			case ALTER:
			case ALWAYS:
			case ASSERTION:
			case ASSIGNMENT:
			case AT:
			case ATTRIBUTE:
			case BACKWARD:
			case BEFORE:
			case BEGIN_P:
			case BY:
			case CACHE:
			case CALLED:
			case CASCADE:
			case CASCADED:
			case CATALOG:
			case CHAIN:
			case CHARACTERISTICS:
			case CHECKPOINT:
			case CLASS:
			case CLOSE:
			case CLUSTER:
			case COMMENT:
			case COMMENTS:
			case COMMIT:
			case COMMITTED:
			case CONFIGURATION:
			case CONNECTION:
			case CONSTRAINTS:
			case CONTENT_P:
			case CONTINUE_P:
			case CONVERSION_P:
			case COPY:
			case COST:
			case CSV:
			case CURSOR:
			case CYCLE:
			case DATA_P:
			case DATABASE:
			case DAY_P:
			case DEALLOCATE:
			case DECLARE:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE_P:
			case DELIMITER:
			case DELIMITERS:
			case DICTIONARY:
			case DISABLE_P:
			case DISCARD:
			case DOCUMENT_P:
			case DOMAIN_P:
			case DOUBLE_P:
			case DROP:
			case EACH:
			case ENABLE_P:
			case ENCODING:
			case ENCRYPTED:
			case ENUM_P:
			case ESCAPE:
			case EVENT:
			case EXCLUDE:
			case EXCLUDING:
			case EXCLUSIVE:
			case EXECUTE:
			case EXPLAIN:
			case EXTENSION:
			case EXTERNAL:
			case FAMILY:
			case FIRST_P:
			case FOLLOWING:
			case FORCE:
			case FORWARD:
			case FUNCTION:
			case FUNCTIONS:
			case GLOBAL:
			case GRANTED:
			case HANDLER:
			case HEADER_P:
			case HOLD:
			case HOUR_P:
			case IDENTITY_P:
			case IF_P:
			case IMMEDIATE:
			case IMMUTABLE:
			case IMPLICIT_P:
			case INCLUDING:
			case INCREMENT:
			case INDEX:
			case INDEXES:
			case INHERIT:
			case INHERITS:
			case INLINE_P:
			case INSENSITIVE:
			case INSERT:
			case INSTEAD:
			case INVOKER:
			case ISOLATION:
			case KEY:
			case LABEL:
			case LANGUAGE:
			case LARGE_P:
			case LAST_P:
			case LEAKPROOF:
			case LEVEL:
			case LISTEN:
			case LOAD:
			case LOCAL:
			case LOCATION:
			case LOCK_P:
			case MAPPING:
			case MATCH:
			case MATERIALIZED:
			case MAXVALUE:
			case MINUTE_P:
			case MINVALUE:
			case MODE:
			case MONTH_P:
			case MOVE:
			case NAME_P:
			case NAMES:
			case NEXT:
			case NO:
			case NOTHING:
			case NOTIFY:
			case NOWAIT:
			case NULLS_P:
			case OBJECT_P:
			case OF:
			case OFF:
			case OIDS:
			case OPERATOR:
			case OPTION:
			case OPTIONS:
			case OWNED:
			case OWNER:
			case PARSER:
			case PARTIAL:
			case PARTITION:
			case PASSING:
			case PASSWORD:
			case PLANS:
			case PRECEDING:
			case PREPARE:
			case PREPARED:
			case PRESERVE:
			case PRIOR:
			case PRIVILEGES:
			case PROCEDURAL:
			case PROCEDURE:
			case PROGRAM:
			case QUOTE:
			case RANGE:
			case READ:
			case REASSIGN:
			case RECHECK:
			case RECURSIVE:
			case REF:
			case REFRESH:
			case REINDEX:
			case RELATIVE_P:
			case RELEASE:
			case RENAME:
			case REPEATABLE:
			case REPLACE:
			case REPLICA:
			case RESET:
			case RESTART:
			case RESTRICT:
			case RETURNS:
			case REVOKE:
			case ROLE:
			case ROLLBACK:
			case ROWS:
			case RULE:
			case SAVEPOINT:
			case SCHEMA:
			case SCROLL:
			case SEARCH:
			case SECOND_P:
			case SECURITY:
			case SEQUENCE:
			case SEQUENCES:
			case SERIALIZABLE:
			case SERVER:
			case SESSION:
			case SET:
			case SHARE:
			case SHOW:
			case SIMPLE:
			case SNAPSHOT:
			case STABLE:
			case STANDALONE_P:
			case START:
			case STATEMENT:
			case STATISTICS:
			case STDIN:
			case STDOUT:
			case STORAGE:
			case STRICT_P:
			case STRIP_P:
			case SYSID:
			case SYSTEM_P:
			case TABLES:
			case TABLESPACE:
			case TEMP:
			case TEMPLATE:
			case TEMPORARY:
			case TEXT_P:
			case TRANSACTION:
			case TRIGGER:
			case TRUNCATE:
			case TRUSTED:
			case TYPE_P:
			case TYPES_P:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNENCRYPTED:
			case UNKNOWN:
			case UNLISTEN:
			case UNLOGGED:
			case UNTIL:
			case UPDATE:
			case VACUUM:
			case VALID:
			case VALIDATE:
			case VALIDATOR:
			case VARYING:
			case VERSION_P:
			case VIEW:
			case VOLATILE:
			case WHITESPACE_P:
			case WITHOUT:
			case WORK:
			case WRAPPER:
			case WRITE:
			case XML_P:
			case YEAR_P:
			case YES_P:
			case ZONE:
			case BETWEEN:
			case BIGINT:
			case BIT:
			case BOOLEAN_P:
			case CHAR_P:
			case CHARACTER:
			case COALESCE:
			case DEC:
			case DECIMAL_P:
			case EXISTS:
			case EXTRACT:
			case FLOAT_P:
			case GREATEST:
			case INOUT:
			case INT_P:
			case INTEGER:
			case INTERVAL:
			case LEAST:
			case NATIONAL:
			case NCHAR:
			case NONE:
			case NULLIF:
			case NUMERIC:
			case OVERLAY:
			case POSITION:
			case PRECISION:
			case REAL:
			case ROW:
			case SETOF:
			case SMALLINT:
			case SUBSTRING:
			case TIME:
			case TIMESTAMP:
			case TREAT:
			case TRIM:
			case VALUES:
			case VARCHAR:
			case XMLATTRIBUTES:
			case XMLCOMMENT:
			case XMLAGG:
			case XML_IS_WELL_FORMED:
			case XML_IS_WELL_FORMED_DOCUMENT:
			case XML_IS_WELL_FORMED_CONTENT:
			case XPATH:
			case XPATH_EXISTS:
			case XMLCONCAT:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLPARSE:
			case XMLPI:
			case XMLROOT:
			case XMLSERIALIZE:
			case CALL:
			case CURRENT_P:
			case ATTACH:
			case DETACH:
			case EXPRESSION:
			case GENERATED:
			case LOGGED:
			case STORED:
			case INCLUDE:
			case ROUTINE:
			case TRANSFORM:
			case IMPORT_P:
			case POLICY:
			case METHOD:
			case REFERENCING:
			case NEW:
			case OLD:
			case VALUE_P:
			case SUBSCRIPTION:
			case PUBLICATION:
			case OUT_P:
			case END_P:
			case ROUTINES:
			case SCHEMAS:
			case PROCEDURES:
			case INPUT_P:
			case SUPPORT:
			case PARALLEL:
			case SQL_P:
			case DEPENDS:
			case OVERRIDING:
			case CONFLICT:
			case SKIP_P:
			case LOCKED:
			case TIES:
			case ROLLUP:
			case CUBE:
			case GROUPING:
			case SETS:
			case TABLESAMPLE:
			case ORDINALITY:
			case XMLTABLE:
			case COLUMNS:
			case XMLNAMESPACES:
			case ROWTYPE:
			case NORMALIZED:
			case WITHIN:
			case FILTER:
			case GROUPS:
			case OTHERS:
			case NFC:
			case NFD:
			case NFKC:
			case NFKD:
			case UESCAPE:
			case VIEWS:
			case NORMALIZE:
			case DUMP:
			case PRINT_STRICT_PARAMS:
			case VARIABLE_CONFLICT:
			case ERROR:
			case USE_VARIABLE:
			case USE_COLUMN:
			case ALIAS:
			case CONSTANT:
			case PERFORM:
			case GET:
			case DIAGNOSTICS:
			case STACKED:
			case ELSIF:
			case REVERSE:
			case SLICE:
			case EXIT:
			case RETURN:
			case QUERY:
			case RAISE:
			case SQLSTATE:
			case DEBUG:
			case LOG:
			case INFO:
			case NOTICE:
			case WARNING:
			case EXCEPTION:
			case ASSERT:
			case OPEN:
			case ABS:
			case CBRT:
			case CEIL:
			case CEILING:
			case DEGREES:
			case DIV:
			case EXP:
			case FACTORIAL:
			case FLOOR:
			case GCD:
			case LCM:
			case LN:
			case LOG10:
			case MIN_SCALE:
			case MOD:
			case PI:
			case POWER:
			case RADIANS:
			case ROUND:
			case SCALE:
			case SIGN:
			case SQRT:
			case TRIM_SCALE:
			case TRUNC:
			case WIDTH_BUCKET:
			case RANDOM:
			case SETSEED:
			case ACOS:
			case ACOSD:
			case ASIN:
			case ASIND:
			case ATAN:
			case ATAND:
			case ATAN2:
			case ATAN2D:
			case COS:
			case COSD:
			case COT:
			case COTD:
			case SIN:
			case SIND:
			case TAN:
			case TAND:
			case SINH:
			case COSH:
			case TANH:
			case ASINH:
			case ACOSH:
			case ATANH:
			case BIT_LENGTH:
			case CHAR_LENGTH:
			case CHARACTER_LENGTH:
			case LOWER:
			case OCTET_LENGTH:
			case UPPER:
			case ASCII:
			case BTRIM:
			case CHR:
			case CONCAT:
			case CONCAT_WS:
			case FORMAT:
			case INITCAP:
			case LENGTH:
			case LPAD:
			case LTRIM:
			case MD5:
			case PARSE_IDENT:
			case PG_CLIENT_ENCODING:
			case QUOTE_IDENT:
			case QUOTE_LITERAL:
			case QUOTE_NULLABLE:
			case REGEXP_COUNT:
			case REGEXP_INSTR:
			case REGEXP_LIKE:
			case REGEXP_MATCH:
			case REGEXP_MATCHES:
			case REGEXP_REPLACE:
			case REGEXP_SPLIT_TO_ARRAY:
			case REGEXP_SPLIT_TO_TABLE:
			case REGEXP_SUBSTR:
			case REPEAT:
			case RPAD:
			case RTRIM:
			case SPLIT_PART:
			case STARTS_WITH:
			case STRING_TO_ARRAY:
			case STRING_TO_TABLE:
			case STRPOS:
			case SUBSTR:
			case TO_ASCII:
			case TO_HEX:
			case TRANSLATE:
			case UNISTR:
			case AGE:
			case CLOCK_TIMESTAMP:
			case DATE_BIN:
			case DATE_PART:
			case DATE_TRUNC:
			case ISFINITE:
			case JUSTIFY_DAYS:
			case JUSTIFY_HOURS:
			case JUSTIFY_INTERVAL:
			case MAKE_DATE:
			case MAKE_INTERVAL:
			case MAKE_TIME:
			case MAKE_TIMESTAMP:
			case MAKE_TIMESTAMPTZ:
			case NOW:
			case STATEMENT_TIMESTAMP:
			case TIMEOFDAY:
			case TRANSACTION_TIMESTAMP:
			case TO_TIMESTAMP:
			case TO_CHAR:
			case TO_DATE:
			case TO_NUMBER:
			case Identifier:
			case QuotedIdentifier:
			case UnicodeQuotedIdentifier:
			case PLSQLVARIABLENAME:
			case PLSQLIDENTIFIER:
				EnterOuterAlt(_localctx, 4);
				{
				State = 4019;
				collabel();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OptconstrfromtableContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FROM() { return GetToken(PostgreSQLParser.FROM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Qualified_nameContext qualified_name() {
			return GetRuleContext<Qualified_nameContext>(0);
		}
		public OptconstrfromtableContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_optconstrfromtable; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterOptconstrfromtable(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitOptconstrfromtable(this);
		}
	}

	[RuleVersion(0)]
	public OptconstrfromtableContext optconstrfromtable() {
		OptconstrfromtableContext _localctx = new OptconstrfromtableContext(Context, State);
		EnterRule(_localctx, 438, RULE_optconstrfromtable);
		try {
			State = 4025;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case FROM:
				EnterOuterAlt(_localctx, 1);
				{
				State = 4022;
				Match(FROM);
				State = 4023;
				qualified_name();
				}
				break;
			case DEFERRABLE:
			case FOR:
			case INITIALLY:
			case NOT:
			case NO:
				EnterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConstraintattributespecContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ConstraintattributeElemContext[] constraintattributeElem() {
			return GetRuleContexts<ConstraintattributeElemContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ConstraintattributeElemContext constraintattributeElem(int i) {
			return GetRuleContext<ConstraintattributeElemContext>(i);
		}
		public ConstraintattributespecContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constraintattributespec; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterConstraintattributespec(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitConstraintattributespec(this);
		}
	}

	[RuleVersion(0)]
	public ConstraintattributespecContext constraintattributespec() {
		ConstraintattributespecContext _localctx = new ConstraintattributespecContext(Context, State);
		EnterRule(_localctx, 440, RULE_constraintattributespec);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4030;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la - 54)) & ~0x3f) == 0 && ((1L << (_la - 54)) & 8421377L) != 0 || _la==NO) {
				{
				{
				State = 4027;
				constraintattributeElem();
				}
				}
				State = 4032;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConstraintattributeElemContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT() { return GetToken(PostgreSQLParser.NOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFERRABLE() { return GetToken(PostgreSQLParser.DEFERRABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INITIALLY() { return GetToken(PostgreSQLParser.INITIALLY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IMMEDIATE() { return GetToken(PostgreSQLParser.IMMEDIATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFERRED() { return GetToken(PostgreSQLParser.DEFERRED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VALID() { return GetToken(PostgreSQLParser.VALID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NO() { return GetToken(PostgreSQLParser.NO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INHERIT() { return GetToken(PostgreSQLParser.INHERIT, 0); }
		public ConstraintattributeElemContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constraintattributeElem; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterConstraintattributeElem(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitConstraintattributeElem(this);
		}
	}

	[RuleVersion(0)]
	public ConstraintattributeElemContext constraintattributeElem() {
		ConstraintattributeElemContext _localctx = new ConstraintattributeElemContext(Context, State);
		EnterRule(_localctx, 442, RULE_constraintattributeElem);
		try {
			State = 4044;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,193,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 4033;
				Match(NOT);
				State = 4034;
				Match(DEFERRABLE);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 4035;
				Match(DEFERRABLE);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 4036;
				Match(INITIALLY);
				State = 4037;
				Match(IMMEDIATE);
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 4038;
				Match(INITIALLY);
				State = 4039;
				Match(DEFERRED);
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 4040;
				Match(NOT);
				State = 4041;
				Match(VALID);
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 4042;
				Match(NO);
				State = 4043;
				Match(INHERIT);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CreateeventtrigstmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CREATE() { return GetToken(PostgreSQLParser.CREATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EVENT() { return GetToken(PostgreSQLParser.EVENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRIGGER() { return GetToken(PostgreSQLParser.TRIGGER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ON() { return GetToken(PostgreSQLParser.ON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public CollabelContext collabel() {
			return GetRuleContext<CollabelContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXECUTE() { return GetToken(PostgreSQLParser.EXECUTE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Function_or_procedureContext function_or_procedure() {
			return GetRuleContext<Function_or_procedureContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Func_nameContext func_name() {
			return GetRuleContext<Func_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAREN() { return GetToken(PostgreSQLParser.OPEN_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAREN() { return GetToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WHEN() { return GetToken(PostgreSQLParser.WHEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Event_trigger_when_listContext event_trigger_when_list() {
			return GetRuleContext<Event_trigger_when_listContext>(0);
		}
		public CreateeventtrigstmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_createeventtrigstmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterCreateeventtrigstmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitCreateeventtrigstmt(this);
		}
	}

	[RuleVersion(0)]
	public CreateeventtrigstmtContext createeventtrigstmt() {
		CreateeventtrigstmtContext _localctx = new CreateeventtrigstmtContext(Context, State);
		EnterRule(_localctx, 444, RULE_createeventtrigstmt);
		try {
			State = 4072;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,194,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 4046;
				Match(CREATE);
				State = 4047;
				Match(EVENT);
				State = 4048;
				Match(TRIGGER);
				State = 4049;
				name();
				State = 4050;
				Match(ON);
				State = 4051;
				collabel();
				State = 4052;
				Match(EXECUTE);
				State = 4053;
				function_or_procedure();
				State = 4054;
				func_name();
				State = 4055;
				Match(OPEN_PAREN);
				State = 4056;
				Match(CLOSE_PAREN);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 4058;
				Match(CREATE);
				State = 4059;
				Match(EVENT);
				State = 4060;
				Match(TRIGGER);
				State = 4061;
				name();
				State = 4062;
				Match(ON);
				State = 4063;
				collabel();
				State = 4064;
				Match(WHEN);
				State = 4065;
				event_trigger_when_list();
				State = 4066;
				Match(EXECUTE);
				State = 4067;
				function_or_procedure();
				State = 4068;
				func_name();
				State = 4069;
				Match(OPEN_PAREN);
				State = 4070;
				Match(CLOSE_PAREN);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Event_trigger_when_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Event_trigger_when_itemContext[] event_trigger_when_item() {
			return GetRuleContexts<Event_trigger_when_itemContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Event_trigger_when_itemContext event_trigger_when_item(int i) {
			return GetRuleContext<Event_trigger_when_itemContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] AND() { return GetTokens(PostgreSQLParser.AND); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AND(int i) {
			return GetToken(PostgreSQLParser.AND, i);
		}
		public Event_trigger_when_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_event_trigger_when_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterEvent_trigger_when_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitEvent_trigger_when_list(this);
		}
	}

	[RuleVersion(0)]
	public Event_trigger_when_listContext event_trigger_when_list() {
		Event_trigger_when_listContext _localctx = new Event_trigger_when_listContext(Context, State);
		EnterRule(_localctx, 446, RULE_event_trigger_when_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4074;
			event_trigger_when_item();
			State = 4079;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==AND) {
				{
				{
				State = 4075;
				Match(AND);
				State = 4076;
				event_trigger_when_item();
				}
				}
				State = 4081;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Event_trigger_when_itemContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ColidContext colid() {
			return GetRuleContext<ColidContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IN_P() { return GetToken(PostgreSQLParser.IN_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAREN() { return GetToken(PostgreSQLParser.OPEN_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Event_trigger_value_listContext event_trigger_value_list() {
			return GetRuleContext<Event_trigger_value_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAREN() { return GetToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public Event_trigger_when_itemContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_event_trigger_when_item; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterEvent_trigger_when_item(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitEvent_trigger_when_item(this);
		}
	}

	[RuleVersion(0)]
	public Event_trigger_when_itemContext event_trigger_when_item() {
		Event_trigger_when_itemContext _localctx = new Event_trigger_when_itemContext(Context, State);
		EnterRule(_localctx, 448, RULE_event_trigger_when_item);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4082;
			colid();
			State = 4083;
			Match(IN_P);
			State = 4084;
			Match(OPEN_PAREN);
			State = 4085;
			event_trigger_value_list();
			State = 4086;
			Match(CLOSE_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Event_trigger_value_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SconstContext[] sconst() {
			return GetRuleContexts<SconstContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SconstContext sconst(int i) {
			return GetRuleContext<SconstContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(PostgreSQLParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(PostgreSQLParser.COMMA, i);
		}
		public Event_trigger_value_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_event_trigger_value_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterEvent_trigger_value_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitEvent_trigger_value_list(this);
		}
	}

	[RuleVersion(0)]
	public Event_trigger_value_listContext event_trigger_value_list() {
		Event_trigger_value_listContext _localctx = new Event_trigger_value_listContext(Context, State);
		EnterRule(_localctx, 450, RULE_event_trigger_value_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4088;
			sconst();
			State = 4093;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 4089;
				Match(COMMA);
				State = 4090;
				sconst();
				}
				}
				State = 4095;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AltereventtrigstmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALTER() { return GetToken(PostgreSQLParser.ALTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EVENT() { return GetToken(PostgreSQLParser.EVENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRIGGER() { return GetToken(PostgreSQLParser.TRIGGER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Enable_triggerContext enable_trigger() {
			return GetRuleContext<Enable_triggerContext>(0);
		}
		public AltereventtrigstmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_altereventtrigstmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterAltereventtrigstmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitAltereventtrigstmt(this);
		}
	}

	[RuleVersion(0)]
	public AltereventtrigstmtContext altereventtrigstmt() {
		AltereventtrigstmtContext _localctx = new AltereventtrigstmtContext(Context, State);
		EnterRule(_localctx, 452, RULE_altereventtrigstmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4096;
			Match(ALTER);
			State = 4097;
			Match(EVENT);
			State = 4098;
			Match(TRIGGER);
			State = 4099;
			name();
			State = 4100;
			enable_trigger();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Enable_triggerContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ENABLE_P() { return GetToken(PostgreSQLParser.ENABLE_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REPLICA() { return GetToken(PostgreSQLParser.REPLICA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALWAYS() { return GetToken(PostgreSQLParser.ALWAYS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DISABLE_P() { return GetToken(PostgreSQLParser.DISABLE_P, 0); }
		public Enable_triggerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enable_trigger; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterEnable_trigger(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitEnable_trigger(this);
		}
	}

	[RuleVersion(0)]
	public Enable_triggerContext enable_trigger() {
		Enable_triggerContext _localctx = new Enable_triggerContext(Context, State);
		EnterRule(_localctx, 454, RULE_enable_trigger);
		try {
			State = 4108;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,197,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 4102;
				Match(ENABLE_P);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 4103;
				Match(ENABLE_P);
				State = 4104;
				Match(REPLICA);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 4105;
				Match(ENABLE_P);
				State = 4106;
				Match(ALWAYS);
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 4107;
				Match(DISABLE_P);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CreateassertionstmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CREATE() { return GetToken(PostgreSQLParser.CREATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSERTION() { return GetToken(PostgreSQLParser.ASSERTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Any_nameContext any_name() {
			return GetRuleContext<Any_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHECK() { return GetToken(PostgreSQLParser.CHECK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAREN() { return GetToken(PostgreSQLParser.OPEN_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public A_exprContext a_expr() {
			return GetRuleContext<A_exprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAREN() { return GetToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ConstraintattributespecContext constraintattributespec() {
			return GetRuleContext<ConstraintattributespecContext>(0);
		}
		public CreateassertionstmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_createassertionstmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterCreateassertionstmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitCreateassertionstmt(this);
		}
	}

	[RuleVersion(0)]
	public CreateassertionstmtContext createassertionstmt() {
		CreateassertionstmtContext _localctx = new CreateassertionstmtContext(Context, State);
		EnterRule(_localctx, 456, RULE_createassertionstmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4110;
			Match(CREATE);
			State = 4111;
			Match(ASSERTION);
			State = 4112;
			any_name();
			State = 4113;
			Match(CHECK);
			State = 4114;
			Match(OPEN_PAREN);
			State = 4115;
			a_expr();
			State = 4116;
			Match(CLOSE_PAREN);
			State = 4117;
			constraintattributespec();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DefinestmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CREATE() { return GetToken(PostgreSQLParser.CREATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Opt_or_replaceContext opt_or_replace() {
			return GetRuleContext<Opt_or_replaceContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AGGREGATE() { return GetToken(PostgreSQLParser.AGGREGATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Func_nameContext func_name() {
			return GetRuleContext<Func_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Aggr_argsContext aggr_args() {
			return GetRuleContext<Aggr_argsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DefinitionContext definition() {
			return GetRuleContext<DefinitionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Old_aggr_definitionContext old_aggr_definition() {
			return GetRuleContext<Old_aggr_definitionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPERATOR() { return GetToken(PostgreSQLParser.OPERATOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Any_operatorContext any_operator() {
			return GetRuleContext<Any_operatorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TYPE_P() { return GetToken(PostgreSQLParser.TYPE_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Any_nameContext[] any_name() {
			return GetRuleContexts<Any_nameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Any_nameContext any_name(int i) {
			return GetRuleContext<Any_nameContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS() { return GetToken(PostgreSQLParser.AS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAREN() { return GetToken(PostgreSQLParser.OPEN_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public OpttablefuncelementlistContext opttablefuncelementlist() {
			return GetRuleContext<OpttablefuncelementlistContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAREN() { return GetToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ENUM_P() { return GetToken(PostgreSQLParser.ENUM_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Opt_enum_val_listContext opt_enum_val_list() {
			return GetRuleContext<Opt_enum_val_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RANGE() { return GetToken(PostgreSQLParser.RANGE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TEXT_P() { return GetToken(PostgreSQLParser.TEXT_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEARCH() { return GetToken(PostgreSQLParser.SEARCH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARSER() { return GetToken(PostgreSQLParser.PARSER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DICTIONARY() { return GetToken(PostgreSQLParser.DICTIONARY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TEMPLATE() { return GetToken(PostgreSQLParser.TEMPLATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONFIGURATION() { return GetToken(PostgreSQLParser.CONFIGURATION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLLATION() { return GetToken(PostgreSQLParser.COLLATION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF_P() { return GetToken(PostgreSQLParser.IF_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT() { return GetToken(PostgreSQLParser.NOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXISTS() { return GetToken(PostgreSQLParser.EXISTS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FROM() { return GetToken(PostgreSQLParser.FROM, 0); }
		public DefinestmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_definestmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterDefinestmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitDefinestmt(this);
		}
	}

	[RuleVersion(0)]
	public DefinestmtContext definestmt() {
		DefinestmtContext _localctx = new DefinestmtContext(Context, State);
		EnterRule(_localctx, 458, RULE_definestmt);
		try {
			State = 4225;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,198,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 4119;
				Match(CREATE);
				State = 4120;
				opt_or_replace();
				State = 4121;
				Match(AGGREGATE);
				State = 4122;
				func_name();
				State = 4123;
				aggr_args();
				State = 4124;
				definition();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 4126;
				Match(CREATE);
				State = 4127;
				opt_or_replace();
				State = 4128;
				Match(AGGREGATE);
				State = 4129;
				func_name();
				State = 4130;
				old_aggr_definition();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 4132;
				Match(CREATE);
				State = 4133;
				Match(OPERATOR);
				State = 4134;
				any_operator();
				State = 4135;
				definition();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 4137;
				Match(CREATE);
				State = 4138;
				Match(TYPE_P);
				State = 4139;
				any_name();
				State = 4140;
				definition();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 4142;
				Match(CREATE);
				State = 4143;
				Match(TYPE_P);
				State = 4144;
				any_name();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 4145;
				Match(CREATE);
				State = 4146;
				Match(TYPE_P);
				State = 4147;
				any_name();
				State = 4148;
				Match(AS);
				State = 4149;
				Match(OPEN_PAREN);
				State = 4150;
				opttablefuncelementlist();
				State = 4151;
				Match(CLOSE_PAREN);
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 4153;
				Match(CREATE);
				State = 4154;
				Match(TYPE_P);
				State = 4155;
				any_name();
				State = 4156;
				Match(AS);
				State = 4157;
				Match(ENUM_P);
				State = 4158;
				Match(OPEN_PAREN);
				State = 4159;
				opt_enum_val_list();
				State = 4160;
				Match(CLOSE_PAREN);
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 4162;
				Match(CREATE);
				State = 4163;
				Match(TYPE_P);
				State = 4164;
				any_name();
				State = 4165;
				Match(AS);
				State = 4166;
				Match(RANGE);
				State = 4167;
				definition();
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 4169;
				Match(CREATE);
				State = 4170;
				Match(TEXT_P);
				State = 4171;
				Match(SEARCH);
				State = 4172;
				Match(PARSER);
				State = 4173;
				any_name();
				State = 4174;
				definition();
				}
				break;
			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 4176;
				Match(CREATE);
				State = 4177;
				Match(TEXT_P);
				State = 4178;
				Match(SEARCH);
				State = 4179;
				Match(DICTIONARY);
				State = 4180;
				any_name();
				State = 4181;
				definition();
				}
				break;
			case 11:
				EnterOuterAlt(_localctx, 11);
				{
				State = 4183;
				Match(CREATE);
				State = 4184;
				Match(TEXT_P);
				State = 4185;
				Match(SEARCH);
				State = 4186;
				Match(TEMPLATE);
				State = 4187;
				any_name();
				State = 4188;
				definition();
				}
				break;
			case 12:
				EnterOuterAlt(_localctx, 12);
				{
				State = 4190;
				Match(CREATE);
				State = 4191;
				Match(TEXT_P);
				State = 4192;
				Match(SEARCH);
				State = 4193;
				Match(CONFIGURATION);
				State = 4194;
				any_name();
				State = 4195;
				definition();
				}
				break;
			case 13:
				EnterOuterAlt(_localctx, 13);
				{
				State = 4197;
				Match(CREATE);
				State = 4198;
				Match(COLLATION);
				State = 4199;
				any_name();
				State = 4200;
				definition();
				}
				break;
			case 14:
				EnterOuterAlt(_localctx, 14);
				{
				State = 4202;
				Match(CREATE);
				State = 4203;
				Match(COLLATION);
				State = 4204;
				Match(IF_P);
				State = 4205;
				Match(NOT);
				State = 4206;
				Match(EXISTS);
				State = 4207;
				any_name();
				State = 4208;
				definition();
				}
				break;
			case 15:
				EnterOuterAlt(_localctx, 15);
				{
				State = 4210;
				Match(CREATE);
				State = 4211;
				Match(COLLATION);
				State = 4212;
				any_name();
				State = 4213;
				Match(FROM);
				State = 4214;
				any_name();
				}
				break;
			case 16:
				EnterOuterAlt(_localctx, 16);
				{
				State = 4216;
				Match(CREATE);
				State = 4217;
				Match(COLLATION);
				State = 4218;
				Match(IF_P);
				State = 4219;
				Match(NOT);
				State = 4220;
				Match(EXISTS);
				State = 4221;
				any_name();
				State = 4222;
				Match(FROM);
				State = 4223;
				any_name();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DefinitionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAREN() { return GetToken(PostgreSQLParser.OPEN_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Def_listContext def_list() {
			return GetRuleContext<Def_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAREN() { return GetToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public DefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_definition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterDefinition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitDefinition(this);
		}
	}

	[RuleVersion(0)]
	public DefinitionContext definition() {
		DefinitionContext _localctx = new DefinitionContext(Context, State);
		EnterRule(_localctx, 460, RULE_definition);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4227;
			Match(OPEN_PAREN);
			State = 4228;
			def_list();
			State = 4229;
			Match(CLOSE_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Def_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Def_elemContext[] def_elem() {
			return GetRuleContexts<Def_elemContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Def_elemContext def_elem(int i) {
			return GetRuleContext<Def_elemContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(PostgreSQLParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(PostgreSQLParser.COMMA, i);
		}
		public Def_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_def_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterDef_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitDef_list(this);
		}
	}

	[RuleVersion(0)]
	public Def_listContext def_list() {
		Def_listContext _localctx = new Def_listContext(Context, State);
		EnterRule(_localctx, 462, RULE_def_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4231;
			def_elem();
			State = 4236;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 4232;
				Match(COMMA);
				State = 4233;
				def_elem();
				}
				}
				State = 4238;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Def_elemContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public CollabelContext collabel() {
			return GetRuleContext<CollabelContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL() { return GetToken(PostgreSQLParser.EQUAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Def_argContext def_arg() {
			return GetRuleContext<Def_argContext>(0);
		}
		public Def_elemContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_def_elem; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterDef_elem(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitDef_elem(this);
		}
	}

	[RuleVersion(0)]
	public Def_elemContext def_elem() {
		Def_elemContext _localctx = new Def_elemContext(Context, State);
		EnterRule(_localctx, 464, RULE_def_elem);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4239;
			collabel();
			State = 4242;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==EQUAL) {
				{
				State = 4240;
				Match(EQUAL);
				State = 4241;
				def_arg();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Def_argContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Func_typeContext func_type() {
			return GetRuleContext<Func_typeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Reserved_keywordContext reserved_keyword() {
			return GetRuleContext<Reserved_keywordContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Qual_all_opContext qual_all_op() {
			return GetRuleContext<Qual_all_opContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NumericonlyContext numericonly() {
			return GetRuleContext<NumericonlyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SconstContext sconst() {
			return GetRuleContext<SconstContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NONE() { return GetToken(PostgreSQLParser.NONE, 0); }
		public Def_argContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_def_arg; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterDef_arg(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitDef_arg(this);
		}
	}

	[RuleVersion(0)]
	public Def_argContext def_arg() {
		Def_argContext _localctx = new Def_argContext(Context, State);
		EnterRule(_localctx, 466, RULE_def_arg);
		try {
			State = 4250;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,201,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 4244;
				func_type();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 4245;
				reserved_keyword();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 4246;
				qual_all_op();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 4247;
				numericonly();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 4248;
				sconst();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 4249;
				Match(NONE);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Old_aggr_definitionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAREN() { return GetToken(PostgreSQLParser.OPEN_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Old_aggr_listContext old_aggr_list() {
			return GetRuleContext<Old_aggr_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAREN() { return GetToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public Old_aggr_definitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_old_aggr_definition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterOld_aggr_definition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitOld_aggr_definition(this);
		}
	}

	[RuleVersion(0)]
	public Old_aggr_definitionContext old_aggr_definition() {
		Old_aggr_definitionContext _localctx = new Old_aggr_definitionContext(Context, State);
		EnterRule(_localctx, 468, RULE_old_aggr_definition);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4252;
			Match(OPEN_PAREN);
			State = 4253;
			old_aggr_list();
			State = 4254;
			Match(CLOSE_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Old_aggr_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Old_aggr_elemContext[] old_aggr_elem() {
			return GetRuleContexts<Old_aggr_elemContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Old_aggr_elemContext old_aggr_elem(int i) {
			return GetRuleContext<Old_aggr_elemContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(PostgreSQLParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(PostgreSQLParser.COMMA, i);
		}
		public Old_aggr_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_old_aggr_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterOld_aggr_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitOld_aggr_list(this);
		}
	}

	[RuleVersion(0)]
	public Old_aggr_listContext old_aggr_list() {
		Old_aggr_listContext _localctx = new Old_aggr_listContext(Context, State);
		EnterRule(_localctx, 470, RULE_old_aggr_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4256;
			old_aggr_elem();
			State = 4261;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 4257;
				Match(COMMA);
				State = 4258;
				old_aggr_elem();
				}
				}
				State = 4263;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Old_aggr_elemContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL() { return GetToken(PostgreSQLParser.EQUAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Def_argContext def_arg() {
			return GetRuleContext<Def_argContext>(0);
		}
		public Old_aggr_elemContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_old_aggr_elem; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterOld_aggr_elem(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitOld_aggr_elem(this);
		}
	}

	[RuleVersion(0)]
	public Old_aggr_elemContext old_aggr_elem() {
		Old_aggr_elemContext _localctx = new Old_aggr_elemContext(Context, State);
		EnterRule(_localctx, 472, RULE_old_aggr_elem);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4264;
			identifier();
			State = 4265;
			Match(EQUAL);
			State = 4266;
			def_arg();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Opt_enum_val_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Enum_val_listContext enum_val_list() {
			return GetRuleContext<Enum_val_listContext>(0);
		}
		public Opt_enum_val_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_opt_enum_val_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterOpt_enum_val_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitOpt_enum_val_list(this);
		}
	}

	[RuleVersion(0)]
	public Opt_enum_val_listContext opt_enum_val_list() {
		Opt_enum_val_listContext _localctx = new Opt_enum_val_listContext(Context, State);
		EnterRule(_localctx, 474, RULE_opt_enum_val_list);
		try {
			State = 4270;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case StringConstant:
			case UnicodeEscapeStringConstant:
			case BeginDollarStringConstant:
			case EscapeStringConstant:
				EnterOuterAlt(_localctx, 1);
				{
				State = 4268;
				enum_val_list();
				}
				break;
			case CLOSE_PAREN:
				EnterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Enum_val_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SconstContext[] sconst() {
			return GetRuleContexts<SconstContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SconstContext sconst(int i) {
			return GetRuleContext<SconstContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(PostgreSQLParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(PostgreSQLParser.COMMA, i);
		}
		public Enum_val_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enum_val_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterEnum_val_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitEnum_val_list(this);
		}
	}

	[RuleVersion(0)]
	public Enum_val_listContext enum_val_list() {
		Enum_val_listContext _localctx = new Enum_val_listContext(Context, State);
		EnterRule(_localctx, 476, RULE_enum_val_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4272;
			sconst();
			State = 4277;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 4273;
				Match(COMMA);
				State = 4274;
				sconst();
				}
				}
				State = 4279;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AlterenumstmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALTER() { return GetToken(PostgreSQLParser.ALTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TYPE_P() { return GetToken(PostgreSQLParser.TYPE_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Any_nameContext any_name() {
			return GetRuleContext<Any_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ADD_P() { return GetToken(PostgreSQLParser.ADD_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VALUE_P() { return GetToken(PostgreSQLParser.VALUE_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Opt_if_not_existsContext opt_if_not_exists() {
			return GetRuleContext<Opt_if_not_existsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SconstContext[] sconst() {
			return GetRuleContexts<SconstContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SconstContext sconst(int i) {
			return GetRuleContext<SconstContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BEFORE() { return GetToken(PostgreSQLParser.BEFORE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AFTER() { return GetToken(PostgreSQLParser.AFTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RENAME() { return GetToken(PostgreSQLParser.RENAME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TO() { return GetToken(PostgreSQLParser.TO, 0); }
		public AlterenumstmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alterenumstmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterAlterenumstmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitAlterenumstmt(this);
		}
	}

	[RuleVersion(0)]
	public AlterenumstmtContext alterenumstmt() {
		AlterenumstmtContext _localctx = new AlterenumstmtContext(Context, State);
		EnterRule(_localctx, 478, RULE_alterenumstmt);
		try {
			State = 4317;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,205,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 4280;
				Match(ALTER);
				State = 4281;
				Match(TYPE_P);
				State = 4282;
				any_name();
				State = 4283;
				Match(ADD_P);
				State = 4284;
				Match(VALUE_P);
				State = 4285;
				opt_if_not_exists();
				State = 4286;
				sconst();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 4288;
				Match(ALTER);
				State = 4289;
				Match(TYPE_P);
				State = 4290;
				any_name();
				State = 4291;
				Match(ADD_P);
				State = 4292;
				Match(VALUE_P);
				State = 4293;
				opt_if_not_exists();
				State = 4294;
				sconst();
				State = 4295;
				Match(BEFORE);
				State = 4296;
				sconst();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 4298;
				Match(ALTER);
				State = 4299;
				Match(TYPE_P);
				State = 4300;
				any_name();
				State = 4301;
				Match(ADD_P);
				State = 4302;
				Match(VALUE_P);
				State = 4303;
				opt_if_not_exists();
				State = 4304;
				sconst();
				State = 4305;
				Match(AFTER);
				State = 4306;
				sconst();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 4308;
				Match(ALTER);
				State = 4309;
				Match(TYPE_P);
				State = 4310;
				any_name();
				State = 4311;
				Match(RENAME);
				State = 4312;
				Match(VALUE_P);
				State = 4313;
				sconst();
				State = 4314;
				Match(TO);
				State = 4315;
				sconst();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Opt_if_not_existsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF_P() { return GetToken(PostgreSQLParser.IF_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT() { return GetToken(PostgreSQLParser.NOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXISTS() { return GetToken(PostgreSQLParser.EXISTS, 0); }
		public Opt_if_not_existsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_opt_if_not_exists; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterOpt_if_not_exists(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitOpt_if_not_exists(this);
		}
	}

	[RuleVersion(0)]
	public Opt_if_not_existsContext opt_if_not_exists() {
		Opt_if_not_existsContext _localctx = new Opt_if_not_existsContext(Context, State);
		EnterRule(_localctx, 480, RULE_opt_if_not_exists);
		try {
			State = 4323;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case IF_P:
				EnterOuterAlt(_localctx, 1);
				{
				State = 4319;
				Match(IF_P);
				State = 4320;
				Match(NOT);
				State = 4321;
				Match(EXISTS);
				}
				break;
			case StringConstant:
			case UnicodeEscapeStringConstant:
			case BeginDollarStringConstant:
			case EscapeStringConstant:
				EnterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CreateopclassstmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CREATE() { return GetToken(PostgreSQLParser.CREATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPERATOR() { return GetToken(PostgreSQLParser.OPERATOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLASS() { return GetToken(PostgreSQLParser.CLASS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Any_nameContext any_name() {
			return GetRuleContext<Any_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Opt_defaultContext opt_default() {
			return GetRuleContext<Opt_defaultContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOR() { return GetToken(PostgreSQLParser.FOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TYPE_P() { return GetToken(PostgreSQLParser.TYPE_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypenameContext typename() {
			return GetRuleContext<TypenameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode USING() { return GetToken(PostgreSQLParser.USING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Opt_opfamilyContext opt_opfamily() {
			return GetRuleContext<Opt_opfamilyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS() { return GetToken(PostgreSQLParser.AS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Opclass_item_listContext opclass_item_list() {
			return GetRuleContext<Opclass_item_listContext>(0);
		}
		public CreateopclassstmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_createopclassstmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterCreateopclassstmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitCreateopclassstmt(this);
		}
	}

	[RuleVersion(0)]
	public CreateopclassstmtContext createopclassstmt() {
		CreateopclassstmtContext _localctx = new CreateopclassstmtContext(Context, State);
		EnterRule(_localctx, 482, RULE_createopclassstmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4325;
			Match(CREATE);
			State = 4326;
			Match(OPERATOR);
			State = 4327;
			Match(CLASS);
			State = 4328;
			any_name();
			State = 4329;
			opt_default();
			State = 4330;
			Match(FOR);
			State = 4331;
			Match(TYPE_P);
			State = 4332;
			typename();
			State = 4333;
			Match(USING);
			State = 4334;
			name();
			State = 4335;
			opt_opfamily();
			State = 4336;
			Match(AS);
			State = 4337;
			opclass_item_list();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Opclass_item_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Opclass_itemContext[] opclass_item() {
			return GetRuleContexts<Opclass_itemContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Opclass_itemContext opclass_item(int i) {
			return GetRuleContext<Opclass_itemContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(PostgreSQLParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(PostgreSQLParser.COMMA, i);
		}
		public Opclass_item_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_opclass_item_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterOpclass_item_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitOpclass_item_list(this);
		}
	}

	[RuleVersion(0)]
	public Opclass_item_listContext opclass_item_list() {
		Opclass_item_listContext _localctx = new Opclass_item_listContext(Context, State);
		EnterRule(_localctx, 484, RULE_opclass_item_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4339;
			opclass_item();
			State = 4344;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 4340;
				Match(COMMA);
				State = 4341;
				opclass_item();
				}
				}
				State = 4346;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Opclass_itemContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPERATOR() { return GetToken(PostgreSQLParser.OPERATOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IconstContext iconst() {
			return GetRuleContext<IconstContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Any_operatorContext any_operator() {
			return GetRuleContext<Any_operatorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Opclass_purposeContext opclass_purpose() {
			return GetRuleContext<Opclass_purposeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Opt_recheckContext opt_recheck() {
			return GetRuleContext<Opt_recheckContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Operator_with_argtypesContext operator_with_argtypes() {
			return GetRuleContext<Operator_with_argtypesContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FUNCTION() { return GetToken(PostgreSQLParser.FUNCTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Function_with_argtypesContext function_with_argtypes() {
			return GetRuleContext<Function_with_argtypesContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAREN() { return GetToken(PostgreSQLParser.OPEN_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Type_listContext type_list() {
			return GetRuleContext<Type_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAREN() { return GetToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STORAGE() { return GetToken(PostgreSQLParser.STORAGE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypenameContext typename() {
			return GetRuleContext<TypenameContext>(0);
		}
		public Opclass_itemContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_opclass_item; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterOpclass_item(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitOpclass_item(this);
		}
	}

	[RuleVersion(0)]
	public Opclass_itemContext opclass_item() {
		Opclass_itemContext _localctx = new Opclass_itemContext(Context, State);
		EnterRule(_localctx, 486, RULE_opclass_item);
		try {
			State = 4372;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,208,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 4347;
				Match(OPERATOR);
				State = 4348;
				iconst();
				State = 4349;
				any_operator();
				State = 4350;
				opclass_purpose();
				State = 4351;
				opt_recheck();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 4353;
				Match(OPERATOR);
				State = 4354;
				iconst();
				State = 4355;
				operator_with_argtypes();
				State = 4356;
				opclass_purpose();
				State = 4357;
				opt_recheck();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 4359;
				Match(FUNCTION);
				State = 4360;
				iconst();
				State = 4361;
				function_with_argtypes();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 4363;
				Match(FUNCTION);
				State = 4364;
				iconst();
				State = 4365;
				Match(OPEN_PAREN);
				State = 4366;
				type_list();
				State = 4367;
				Match(CLOSE_PAREN);
				State = 4368;
				function_with_argtypes();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 4370;
				Match(STORAGE);
				State = 4371;
				typename();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Opt_defaultContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFAULT() { return GetToken(PostgreSQLParser.DEFAULT, 0); }
		public Opt_defaultContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_opt_default; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterOpt_default(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitOpt_default(this);
		}
	}

	[RuleVersion(0)]
	public Opt_defaultContext opt_default() {
		Opt_defaultContext _localctx = new Opt_defaultContext(Context, State);
		EnterRule(_localctx, 488, RULE_opt_default);
		try {
			State = 4376;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case DEFAULT:
				EnterOuterAlt(_localctx, 1);
				{
				State = 4374;
				Match(DEFAULT);
				}
				break;
			case FOR:
			case CONVERSION_P:
				EnterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Opt_opfamilyContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FAMILY() { return GetToken(PostgreSQLParser.FAMILY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Any_nameContext any_name() {
			return GetRuleContext<Any_nameContext>(0);
		}
		public Opt_opfamilyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_opt_opfamily; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterOpt_opfamily(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitOpt_opfamily(this);
		}
	}

	[RuleVersion(0)]
	public Opt_opfamilyContext opt_opfamily() {
		Opt_opfamilyContext _localctx = new Opt_opfamilyContext(Context, State);
		EnterRule(_localctx, 490, RULE_opt_opfamily);
		try {
			State = 4381;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case FAMILY:
				EnterOuterAlt(_localctx, 1);
				{
				State = 4378;
				Match(FAMILY);
				State = 4379;
				any_name();
				}
				break;
			case AS:
				EnterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Opclass_purposeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOR() { return GetToken(PostgreSQLParser.FOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEARCH() { return GetToken(PostgreSQLParser.SEARCH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ORDER() { return GetToken(PostgreSQLParser.ORDER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BY() { return GetToken(PostgreSQLParser.BY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Any_nameContext any_name() {
			return GetRuleContext<Any_nameContext>(0);
		}
		public Opclass_purposeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_opclass_purpose; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterOpclass_purpose(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitOpclass_purpose(this);
		}
	}

	[RuleVersion(0)]
	public Opclass_purposeContext opclass_purpose() {
		Opclass_purposeContext _localctx = new Opclass_purposeContext(Context, State);
		EnterRule(_localctx, 492, RULE_opclass_purpose);
		try {
			State = 4390;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,211,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 4383;
				Match(FOR);
				State = 4384;
				Match(SEARCH);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 4385;
				Match(FOR);
				State = 4386;
				Match(ORDER);
				State = 4387;
				Match(BY);
				State = 4388;
				any_name();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Opt_recheckContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RECHECK() { return GetToken(PostgreSQLParser.RECHECK, 0); }
		public Opt_recheckContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_opt_recheck; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterOpt_recheck(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitOpt_recheck(this);
		}
	}

	[RuleVersion(0)]
	public Opt_recheckContext opt_recheck() {
		Opt_recheckContext _localctx = new Opt_recheckContext(Context, State);
		EnterRule(_localctx, 494, RULE_opt_recheck);
		try {
			State = 4394;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case RECHECK:
				EnterOuterAlt(_localctx, 1);
				{
				State = 4392;
				Match(RECHECK);
				}
				break;
			case Eof:
			case OPEN_PAREN:
			case COMMA:
			case SEMI:
			case ANALYSE:
			case ANALYZE:
			case CREATE:
			case DO:
			case FETCH:
			case GRANT:
			case INTO:
			case SELECT:
			case TABLE:
			case WITH:
			case ABORT_P:
			case ALTER:
			case BEGIN_P:
			case CHECKPOINT:
			case CLOSE:
			case CLUSTER:
			case COMMENT:
			case COMMIT:
			case COPY:
			case DEALLOCATE:
			case DECLARE:
			case DELETE_P:
			case DISCARD:
			case DROP:
			case EXECUTE:
			case EXPLAIN:
			case INSERT:
			case LISTEN:
			case LOAD:
			case LOCK_P:
			case MERGE:
			case MOVE:
			case NOTIFY:
			case PREPARE:
			case REASSIGN:
			case REFRESH:
			case REINDEX:
			case RELEASE:
			case RESET:
			case REVOKE:
			case ROLLBACK:
			case SAVEPOINT:
			case SECURITY:
			case SET:
			case SHOW:
			case START:
			case TRUNCATE:
			case UNLISTEN:
			case UPDATE:
			case VACUUM:
			case VALUES:
			case CALL:
			case IMPORT_P:
			case END_P:
			case MetaCommand:
				EnterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CreateopfamilystmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CREATE() { return GetToken(PostgreSQLParser.CREATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPERATOR() { return GetToken(PostgreSQLParser.OPERATOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FAMILY() { return GetToken(PostgreSQLParser.FAMILY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Any_nameContext any_name() {
			return GetRuleContext<Any_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode USING() { return GetToken(PostgreSQLParser.USING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		public CreateopfamilystmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_createopfamilystmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterCreateopfamilystmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitCreateopfamilystmt(this);
		}
	}

	[RuleVersion(0)]
	public CreateopfamilystmtContext createopfamilystmt() {
		CreateopfamilystmtContext _localctx = new CreateopfamilystmtContext(Context, State);
		EnterRule(_localctx, 496, RULE_createopfamilystmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4396;
			Match(CREATE);
			State = 4397;
			Match(OPERATOR);
			State = 4398;
			Match(FAMILY);
			State = 4399;
			any_name();
			State = 4400;
			Match(USING);
			State = 4401;
			name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AlteropfamilystmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALTER() { return GetToken(PostgreSQLParser.ALTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPERATOR() { return GetToken(PostgreSQLParser.OPERATOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FAMILY() { return GetToken(PostgreSQLParser.FAMILY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Any_nameContext any_name() {
			return GetRuleContext<Any_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode USING() { return GetToken(PostgreSQLParser.USING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ADD_P() { return GetToken(PostgreSQLParser.ADD_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Opclass_item_listContext opclass_item_list() {
			return GetRuleContext<Opclass_item_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DROP() { return GetToken(PostgreSQLParser.DROP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Opclass_drop_listContext opclass_drop_list() {
			return GetRuleContext<Opclass_drop_listContext>(0);
		}
		public AlteropfamilystmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alteropfamilystmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterAlteropfamilystmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitAlteropfamilystmt(this);
		}
	}

	[RuleVersion(0)]
	public AlteropfamilystmtContext alteropfamilystmt() {
		AlteropfamilystmtContext _localctx = new AlteropfamilystmtContext(Context, State);
		EnterRule(_localctx, 498, RULE_alteropfamilystmt);
		try {
			State = 4421;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,213,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 4403;
				Match(ALTER);
				State = 4404;
				Match(OPERATOR);
				State = 4405;
				Match(FAMILY);
				State = 4406;
				any_name();
				State = 4407;
				Match(USING);
				State = 4408;
				name();
				State = 4409;
				Match(ADD_P);
				State = 4410;
				opclass_item_list();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 4412;
				Match(ALTER);
				State = 4413;
				Match(OPERATOR);
				State = 4414;
				Match(FAMILY);
				State = 4415;
				any_name();
				State = 4416;
				Match(USING);
				State = 4417;
				name();
				State = 4418;
				Match(DROP);
				State = 4419;
				opclass_drop_list();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Opclass_drop_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Opclass_dropContext[] opclass_drop() {
			return GetRuleContexts<Opclass_dropContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Opclass_dropContext opclass_drop(int i) {
			return GetRuleContext<Opclass_dropContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(PostgreSQLParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(PostgreSQLParser.COMMA, i);
		}
		public Opclass_drop_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_opclass_drop_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterOpclass_drop_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitOpclass_drop_list(this);
		}
	}

	[RuleVersion(0)]
	public Opclass_drop_listContext opclass_drop_list() {
		Opclass_drop_listContext _localctx = new Opclass_drop_listContext(Context, State);
		EnterRule(_localctx, 500, RULE_opclass_drop_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4423;
			opclass_drop();
			State = 4428;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 4424;
				Match(COMMA);
				State = 4425;
				opclass_drop();
				}
				}
				State = 4430;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Opclass_dropContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPERATOR() { return GetToken(PostgreSQLParser.OPERATOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IconstContext iconst() {
			return GetRuleContext<IconstContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAREN() { return GetToken(PostgreSQLParser.OPEN_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Type_listContext type_list() {
			return GetRuleContext<Type_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAREN() { return GetToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FUNCTION() { return GetToken(PostgreSQLParser.FUNCTION, 0); }
		public Opclass_dropContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_opclass_drop; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterOpclass_drop(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitOpclass_drop(this);
		}
	}

	[RuleVersion(0)]
	public Opclass_dropContext opclass_drop() {
		Opclass_dropContext _localctx = new Opclass_dropContext(Context, State);
		EnterRule(_localctx, 502, RULE_opclass_drop);
		try {
			State = 4443;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case OPERATOR:
				EnterOuterAlt(_localctx, 1);
				{
				State = 4431;
				Match(OPERATOR);
				State = 4432;
				iconst();
				State = 4433;
				Match(OPEN_PAREN);
				State = 4434;
				type_list();
				State = 4435;
				Match(CLOSE_PAREN);
				}
				break;
			case FUNCTION:
				EnterOuterAlt(_localctx, 2);
				{
				State = 4437;
				Match(FUNCTION);
				State = 4438;
				iconst();
				State = 4439;
				Match(OPEN_PAREN);
				State = 4440;
				type_list();
				State = 4441;
				Match(CLOSE_PAREN);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DropopclassstmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DROP() { return GetToken(PostgreSQLParser.DROP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPERATOR() { return GetToken(PostgreSQLParser.OPERATOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLASS() { return GetToken(PostgreSQLParser.CLASS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Any_nameContext any_name() {
			return GetRuleContext<Any_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode USING() { return GetToken(PostgreSQLParser.USING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Opt_drop_behaviorContext opt_drop_behavior() {
			return GetRuleContext<Opt_drop_behaviorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF_P() { return GetToken(PostgreSQLParser.IF_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXISTS() { return GetToken(PostgreSQLParser.EXISTS, 0); }
		public DropopclassstmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dropopclassstmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterDropopclassstmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitDropopclassstmt(this);
		}
	}

	[RuleVersion(0)]
	public DropopclassstmtContext dropopclassstmt() {
		DropopclassstmtContext _localctx = new DropopclassstmtContext(Context, State);
		EnterRule(_localctx, 504, RULE_dropopclassstmt);
		try {
			State = 4463;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,216,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 4445;
				Match(DROP);
				State = 4446;
				Match(OPERATOR);
				State = 4447;
				Match(CLASS);
				State = 4448;
				any_name();
				State = 4449;
				Match(USING);
				State = 4450;
				name();
				State = 4451;
				opt_drop_behavior();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 4453;
				Match(DROP);
				State = 4454;
				Match(OPERATOR);
				State = 4455;
				Match(CLASS);
				State = 4456;
				Match(IF_P);
				State = 4457;
				Match(EXISTS);
				State = 4458;
				any_name();
				State = 4459;
				Match(USING);
				State = 4460;
				name();
				State = 4461;
				opt_drop_behavior();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DropopfamilystmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DROP() { return GetToken(PostgreSQLParser.DROP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPERATOR() { return GetToken(PostgreSQLParser.OPERATOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FAMILY() { return GetToken(PostgreSQLParser.FAMILY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Any_nameContext any_name() {
			return GetRuleContext<Any_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode USING() { return GetToken(PostgreSQLParser.USING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Opt_drop_behaviorContext opt_drop_behavior() {
			return GetRuleContext<Opt_drop_behaviorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF_P() { return GetToken(PostgreSQLParser.IF_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXISTS() { return GetToken(PostgreSQLParser.EXISTS, 0); }
		public DropopfamilystmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dropopfamilystmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterDropopfamilystmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitDropopfamilystmt(this);
		}
	}

	[RuleVersion(0)]
	public DropopfamilystmtContext dropopfamilystmt() {
		DropopfamilystmtContext _localctx = new DropopfamilystmtContext(Context, State);
		EnterRule(_localctx, 506, RULE_dropopfamilystmt);
		try {
			State = 4483;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,217,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 4465;
				Match(DROP);
				State = 4466;
				Match(OPERATOR);
				State = 4467;
				Match(FAMILY);
				State = 4468;
				any_name();
				State = 4469;
				Match(USING);
				State = 4470;
				name();
				State = 4471;
				opt_drop_behavior();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 4473;
				Match(DROP);
				State = 4474;
				Match(OPERATOR);
				State = 4475;
				Match(FAMILY);
				State = 4476;
				Match(IF_P);
				State = 4477;
				Match(EXISTS);
				State = 4478;
				any_name();
				State = 4479;
				Match(USING);
				State = 4480;
				name();
				State = 4481;
				opt_drop_behavior();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DropownedstmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DROP() { return GetToken(PostgreSQLParser.DROP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OWNED() { return GetToken(PostgreSQLParser.OWNED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BY() { return GetToken(PostgreSQLParser.BY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Role_listContext role_list() {
			return GetRuleContext<Role_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Opt_drop_behaviorContext opt_drop_behavior() {
			return GetRuleContext<Opt_drop_behaviorContext>(0);
		}
		public DropownedstmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dropownedstmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterDropownedstmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitDropownedstmt(this);
		}
	}

	[RuleVersion(0)]
	public DropownedstmtContext dropownedstmt() {
		DropownedstmtContext _localctx = new DropownedstmtContext(Context, State);
		EnterRule(_localctx, 508, RULE_dropownedstmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4485;
			Match(DROP);
			State = 4486;
			Match(OWNED);
			State = 4487;
			Match(BY);
			State = 4488;
			role_list();
			State = 4489;
			opt_drop_behavior();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReassignownedstmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REASSIGN() { return GetToken(PostgreSQLParser.REASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OWNED() { return GetToken(PostgreSQLParser.OWNED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BY() { return GetToken(PostgreSQLParser.BY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Role_listContext role_list() {
			return GetRuleContext<Role_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TO() { return GetToken(PostgreSQLParser.TO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public RolespecContext rolespec() {
			return GetRuleContext<RolespecContext>(0);
		}
		public ReassignownedstmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_reassignownedstmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterReassignownedstmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitReassignownedstmt(this);
		}
	}

	[RuleVersion(0)]
	public ReassignownedstmtContext reassignownedstmt() {
		ReassignownedstmtContext _localctx = new ReassignownedstmtContext(Context, State);
		EnterRule(_localctx, 510, RULE_reassignownedstmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4491;
			Match(REASSIGN);
			State = 4492;
			Match(OWNED);
			State = 4493;
			Match(BY);
			State = 4494;
			role_list();
			State = 4495;
			Match(TO);
			State = 4496;
			rolespec();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DropstmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DROP() { return GetToken(PostgreSQLParser.DROP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Object_type_any_nameContext object_type_any_name() {
			return GetRuleContext<Object_type_any_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF_P() { return GetToken(PostgreSQLParser.IF_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXISTS() { return GetToken(PostgreSQLParser.EXISTS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Any_name_listContext any_name_list() {
			return GetRuleContext<Any_name_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Opt_drop_behaviorContext opt_drop_behavior() {
			return GetRuleContext<Opt_drop_behaviorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Drop_type_nameContext drop_type_name() {
			return GetRuleContext<Drop_type_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Name_listContext name_list() {
			return GetRuleContext<Name_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Object_type_name_on_any_nameContext object_type_name_on_any_name() {
			return GetRuleContext<Object_type_name_on_any_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ON() { return GetToken(PostgreSQLParser.ON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Any_nameContext any_name() {
			return GetRuleContext<Any_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TYPE_P() { return GetToken(PostgreSQLParser.TYPE_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Type_name_listContext type_name_list() {
			return GetRuleContext<Type_name_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOMAIN_P() { return GetToken(PostgreSQLParser.DOMAIN_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INDEX() { return GetToken(PostgreSQLParser.INDEX, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONCURRENTLY() { return GetToken(PostgreSQLParser.CONCURRENTLY, 0); }
		public DropstmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dropstmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterDropstmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitDropstmt(this);
		}
	}

	[RuleVersion(0)]
	public DropstmtContext dropstmt() {
		DropstmtContext _localctx = new DropstmtContext(Context, State);
		EnterRule(_localctx, 512, RULE_dropstmt);
		try {
			State = 4576;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,218,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 4498;
				Match(DROP);
				State = 4499;
				object_type_any_name();
				State = 4500;
				Match(IF_P);
				State = 4501;
				Match(EXISTS);
				State = 4502;
				any_name_list();
				State = 4503;
				opt_drop_behavior();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 4505;
				Match(DROP);
				State = 4506;
				object_type_any_name();
				State = 4507;
				any_name_list();
				State = 4508;
				opt_drop_behavior();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 4510;
				Match(DROP);
				State = 4511;
				drop_type_name();
				State = 4512;
				Match(IF_P);
				State = 4513;
				Match(EXISTS);
				State = 4514;
				name_list();
				State = 4515;
				opt_drop_behavior();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 4517;
				Match(DROP);
				State = 4518;
				drop_type_name();
				State = 4519;
				name_list();
				State = 4520;
				opt_drop_behavior();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 4522;
				Match(DROP);
				State = 4523;
				object_type_name_on_any_name();
				State = 4524;
				name();
				State = 4525;
				Match(ON);
				State = 4526;
				any_name();
				State = 4527;
				opt_drop_behavior();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 4529;
				Match(DROP);
				State = 4530;
				object_type_name_on_any_name();
				State = 4531;
				Match(IF_P);
				State = 4532;
				Match(EXISTS);
				State = 4533;
				name();
				State = 4534;
				Match(ON);
				State = 4535;
				any_name();
				State = 4536;
				opt_drop_behavior();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 4538;
				Match(DROP);
				State = 4539;
				Match(TYPE_P);
				State = 4540;
				type_name_list();
				State = 4541;
				opt_drop_behavior();
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 4543;
				Match(DROP);
				State = 4544;
				Match(TYPE_P);
				State = 4545;
				Match(IF_P);
				State = 4546;
				Match(EXISTS);
				State = 4547;
				type_name_list();
				State = 4548;
				opt_drop_behavior();
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 4550;
				Match(DROP);
				State = 4551;
				Match(DOMAIN_P);
				State = 4552;
				type_name_list();
				State = 4553;
				opt_drop_behavior();
				}
				break;
			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 4555;
				Match(DROP);
				State = 4556;
				Match(DOMAIN_P);
				State = 4557;
				Match(IF_P);
				State = 4558;
				Match(EXISTS);
				State = 4559;
				type_name_list();
				State = 4560;
				opt_drop_behavior();
				}
				break;
			case 11:
				EnterOuterAlt(_localctx, 11);
				{
				State = 4562;
				Match(DROP);
				State = 4563;
				Match(INDEX);
				State = 4564;
				Match(CONCURRENTLY);
				State = 4565;
				any_name_list();
				State = 4566;
				opt_drop_behavior();
				}
				break;
			case 12:
				EnterOuterAlt(_localctx, 12);
				{
				State = 4568;
				Match(DROP);
				State = 4569;
				Match(INDEX);
				State = 4570;
				Match(CONCURRENTLY);
				State = 4571;
				Match(IF_P);
				State = 4572;
				Match(EXISTS);
				State = 4573;
				any_name_list();
				State = 4574;
				opt_drop_behavior();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Object_type_any_nameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLE() { return GetToken(PostgreSQLParser.TABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEQUENCE() { return GetToken(PostgreSQLParser.SEQUENCE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VIEW() { return GetToken(PostgreSQLParser.VIEW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MATERIALIZED() { return GetToken(PostgreSQLParser.MATERIALIZED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INDEX() { return GetToken(PostgreSQLParser.INDEX, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOREIGN() { return GetToken(PostgreSQLParser.FOREIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLLATION() { return GetToken(PostgreSQLParser.COLLATION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONVERSION_P() { return GetToken(PostgreSQLParser.CONVERSION_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STATISTICS() { return GetToken(PostgreSQLParser.STATISTICS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TEXT_P() { return GetToken(PostgreSQLParser.TEXT_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEARCH() { return GetToken(PostgreSQLParser.SEARCH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARSER() { return GetToken(PostgreSQLParser.PARSER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DICTIONARY() { return GetToken(PostgreSQLParser.DICTIONARY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TEMPLATE() { return GetToken(PostgreSQLParser.TEMPLATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONFIGURATION() { return GetToken(PostgreSQLParser.CONFIGURATION, 0); }
		public Object_type_any_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_object_type_any_name; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterObject_type_any_name(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitObject_type_any_name(this);
		}
	}

	[RuleVersion(0)]
	public Object_type_any_nameContext object_type_any_name() {
		Object_type_any_nameContext _localctx = new Object_type_any_nameContext(Context, State);
		EnterRule(_localctx, 514, RULE_object_type_any_name);
		try {
			State = 4601;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,219,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 4578;
				Match(TABLE);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 4579;
				Match(SEQUENCE);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 4580;
				Match(VIEW);
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 4581;
				Match(MATERIALIZED);
				State = 4582;
				Match(VIEW);
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 4583;
				Match(INDEX);
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 4584;
				Match(FOREIGN);
				State = 4585;
				Match(TABLE);
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 4586;
				Match(COLLATION);
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 4587;
				Match(CONVERSION_P);
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 4588;
				Match(STATISTICS);
				}
				break;
			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 4589;
				Match(TEXT_P);
				State = 4590;
				Match(SEARCH);
				State = 4591;
				Match(PARSER);
				}
				break;
			case 11:
				EnterOuterAlt(_localctx, 11);
				{
				State = 4592;
				Match(TEXT_P);
				State = 4593;
				Match(SEARCH);
				State = 4594;
				Match(DICTIONARY);
				}
				break;
			case 12:
				EnterOuterAlt(_localctx, 12);
				{
				State = 4595;
				Match(TEXT_P);
				State = 4596;
				Match(SEARCH);
				State = 4597;
				Match(TEMPLATE);
				}
				break;
			case 13:
				EnterOuterAlt(_localctx, 13);
				{
				State = 4598;
				Match(TEXT_P);
				State = 4599;
				Match(SEARCH);
				State = 4600;
				Match(CONFIGURATION);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Object_type_nameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Drop_type_nameContext drop_type_name() {
			return GetRuleContext<Drop_type_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DATABASE() { return GetToken(PostgreSQLParser.DATABASE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROLE() { return GetToken(PostgreSQLParser.ROLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SUBSCRIPTION() { return GetToken(PostgreSQLParser.SUBSCRIPTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLESPACE() { return GetToken(PostgreSQLParser.TABLESPACE, 0); }
		public Object_type_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_object_type_name; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterObject_type_name(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitObject_type_name(this);
		}
	}

	[RuleVersion(0)]
	public Object_type_nameContext object_type_name() {
		Object_type_nameContext _localctx = new Object_type_nameContext(Context, State);
		EnterRule(_localctx, 516, RULE_object_type_name);
		try {
			State = 4608;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case FOREIGN:
			case ACCESS:
			case EVENT:
			case EXTENSION:
			case LANGUAGE:
			case PROCEDURAL:
			case SCHEMA:
			case SERVER:
			case PUBLICATION:
				EnterOuterAlt(_localctx, 1);
				{
				State = 4603;
				drop_type_name();
				}
				break;
			case DATABASE:
				EnterOuterAlt(_localctx, 2);
				{
				State = 4604;
				Match(DATABASE);
				}
				break;
			case ROLE:
				EnterOuterAlt(_localctx, 3);
				{
				State = 4605;
				Match(ROLE);
				}
				break;
			case SUBSCRIPTION:
				EnterOuterAlt(_localctx, 4);
				{
				State = 4606;
				Match(SUBSCRIPTION);
				}
				break;
			case TABLESPACE:
				EnterOuterAlt(_localctx, 5);
				{
				State = 4607;
				Match(TABLESPACE);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Drop_type_nameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ACCESS() { return GetToken(PostgreSQLParser.ACCESS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode METHOD() { return GetToken(PostgreSQLParser.METHOD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EVENT() { return GetToken(PostgreSQLParser.EVENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRIGGER() { return GetToken(PostgreSQLParser.TRIGGER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXTENSION() { return GetToken(PostgreSQLParser.EXTENSION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOREIGN() { return GetToken(PostgreSQLParser.FOREIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DATA_P() { return GetToken(PostgreSQLParser.DATA_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WRAPPER() { return GetToken(PostgreSQLParser.WRAPPER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Opt_proceduralContext opt_procedural() {
			return GetRuleContext<Opt_proceduralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LANGUAGE() { return GetToken(PostgreSQLParser.LANGUAGE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PUBLICATION() { return GetToken(PostgreSQLParser.PUBLICATION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SCHEMA() { return GetToken(PostgreSQLParser.SCHEMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SERVER() { return GetToken(PostgreSQLParser.SERVER, 0); }
		public Drop_type_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_drop_type_name; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterDrop_type_name(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitDrop_type_name(this);
		}
	}

	[RuleVersion(0)]
	public Drop_type_nameContext drop_type_name() {
		Drop_type_nameContext _localctx = new Drop_type_nameContext(Context, State);
		EnterRule(_localctx, 518, RULE_drop_type_name);
		try {
			State = 4624;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ACCESS:
				EnterOuterAlt(_localctx, 1);
				{
				State = 4610;
				Match(ACCESS);
				State = 4611;
				Match(METHOD);
				}
				break;
			case EVENT:
				EnterOuterAlt(_localctx, 2);
				{
				State = 4612;
				Match(EVENT);
				State = 4613;
				Match(TRIGGER);
				}
				break;
			case EXTENSION:
				EnterOuterAlt(_localctx, 3);
				{
				State = 4614;
				Match(EXTENSION);
				}
				break;
			case FOREIGN:
				EnterOuterAlt(_localctx, 4);
				{
				State = 4615;
				Match(FOREIGN);
				State = 4616;
				Match(DATA_P);
				State = 4617;
				Match(WRAPPER);
				}
				break;
			case LANGUAGE:
			case PROCEDURAL:
				EnterOuterAlt(_localctx, 5);
				{
				State = 4618;
				opt_procedural();
				State = 4619;
				Match(LANGUAGE);
				}
				break;
			case PUBLICATION:
				EnterOuterAlt(_localctx, 6);
				{
				State = 4621;
				Match(PUBLICATION);
				}
				break;
			case SCHEMA:
				EnterOuterAlt(_localctx, 7);
				{
				State = 4622;
				Match(SCHEMA);
				}
				break;
			case SERVER:
				EnterOuterAlt(_localctx, 8);
				{
				State = 4623;
				Match(SERVER);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Object_type_name_on_any_nameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode POLICY() { return GetToken(PostgreSQLParser.POLICY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RULE() { return GetToken(PostgreSQLParser.RULE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRIGGER() { return GetToken(PostgreSQLParser.TRIGGER, 0); }
		public Object_type_name_on_any_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_object_type_name_on_any_name; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterObject_type_name_on_any_name(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitObject_type_name_on_any_name(this);
		}
	}

	[RuleVersion(0)]
	public Object_type_name_on_any_nameContext object_type_name_on_any_name() {
		Object_type_name_on_any_nameContext _localctx = new Object_type_name_on_any_nameContext(Context, State);
		EnterRule(_localctx, 520, RULE_object_type_name_on_any_name);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4626;
			_la = TokenStream.LA(1);
			if ( !(_la==RULE || _la==TRIGGER || _la==POLICY) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Any_name_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Any_nameContext[] any_name() {
			return GetRuleContexts<Any_nameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Any_nameContext any_name(int i) {
			return GetRuleContext<Any_nameContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(PostgreSQLParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(PostgreSQLParser.COMMA, i);
		}
		public Any_name_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_any_name_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterAny_name_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitAny_name_list(this);
		}
	}

	[RuleVersion(0)]
	public Any_name_listContext any_name_list() {
		Any_name_listContext _localctx = new Any_name_listContext(Context, State);
		EnterRule(_localctx, 522, RULE_any_name_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4628;
			any_name();
			State = 4633;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 4629;
				Match(COMMA);
				State = 4630;
				any_name();
				}
				}
				State = 4635;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Any_nameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ColidContext colid() {
			return GetRuleContext<ColidContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AttrsContext attrs() {
			return GetRuleContext<AttrsContext>(0);
		}
		public Any_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_any_name; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterAny_name(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitAny_name(this);
		}
	}

	[RuleVersion(0)]
	public Any_nameContext any_name() {
		Any_nameContext _localctx = new Any_nameContext(Context, State);
		EnterRule(_localctx, 524, RULE_any_name);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4636;
			colid();
			State = 4638;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==DOT) {
				{
				State = 4637;
				attrs();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AttrsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] DOT() { return GetTokens(PostgreSQLParser.DOT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT(int i) {
			return GetToken(PostgreSQLParser.DOT, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Attr_nameContext[] attr_name() {
			return GetRuleContexts<Attr_nameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Attr_nameContext attr_name(int i) {
			return GetRuleContext<Attr_nameContext>(i);
		}
		public AttrsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_attrs; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterAttrs(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitAttrs(this);
		}
	}

	[RuleVersion(0)]
	public AttrsContext attrs() {
		AttrsContext _localctx = new AttrsContext(Context, State);
		EnterRule(_localctx, 526, RULE_attrs);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 4642;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 4640;
					Match(DOT);
					State = 4641;
					attr_name();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 4644;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,224,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Type_name_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypenameContext[] typename() {
			return GetRuleContexts<TypenameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypenameContext typename(int i) {
			return GetRuleContext<TypenameContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(PostgreSQLParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(PostgreSQLParser.COMMA, i);
		}
		public Type_name_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type_name_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterType_name_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitType_name_list(this);
		}
	}

	[RuleVersion(0)]
	public Type_name_listContext type_name_list() {
		Type_name_listContext _localctx = new Type_name_listContext(Context, State);
		EnterRule(_localctx, 528, RULE_type_name_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4646;
			typename();
			State = 4651;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 4647;
				Match(COMMA);
				State = 4648;
				typename();
				}
				}
				State = 4653;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TruncatestmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRUNCATE() { return GetToken(PostgreSQLParser.TRUNCATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Opt_tableContext opt_table() {
			return GetRuleContext<Opt_tableContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Relation_expr_listContext relation_expr_list() {
			return GetRuleContext<Relation_expr_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Opt_restart_seqsContext opt_restart_seqs() {
			return GetRuleContext<Opt_restart_seqsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Opt_drop_behaviorContext opt_drop_behavior() {
			return GetRuleContext<Opt_drop_behaviorContext>(0);
		}
		public TruncatestmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_truncatestmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterTruncatestmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitTruncatestmt(this);
		}
	}

	[RuleVersion(0)]
	public TruncatestmtContext truncatestmt() {
		TruncatestmtContext _localctx = new TruncatestmtContext(Context, State);
		EnterRule(_localctx, 530, RULE_truncatestmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4654;
			Match(TRUNCATE);
			State = 4655;
			opt_table();
			State = 4656;
			relation_expr_list();
			State = 4657;
			opt_restart_seqs();
			State = 4658;
			opt_drop_behavior();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Opt_restart_seqsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONTINUE_P() { return GetToken(PostgreSQLParser.CONTINUE_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTITY_P() { return GetToken(PostgreSQLParser.IDENTITY_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RESTART() { return GetToken(PostgreSQLParser.RESTART, 0); }
		public Opt_restart_seqsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_opt_restart_seqs; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterOpt_restart_seqs(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitOpt_restart_seqs(this);
		}
	}

	[RuleVersion(0)]
	public Opt_restart_seqsContext opt_restart_seqs() {
		Opt_restart_seqsContext _localctx = new Opt_restart_seqsContext(Context, State);
		EnterRule(_localctx, 532, RULE_opt_restart_seqs);
		try {
			State = 4665;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case CONTINUE_P:
				EnterOuterAlt(_localctx, 1);
				{
				State = 4660;
				Match(CONTINUE_P);
				State = 4661;
				Match(IDENTITY_P);
				}
				break;
			case RESTART:
				EnterOuterAlt(_localctx, 2);
				{
				State = 4662;
				Match(RESTART);
				State = 4663;
				Match(IDENTITY_P);
				}
				break;
			case Eof:
			case OPEN_PAREN:
			case SEMI:
			case ANALYSE:
			case ANALYZE:
			case CREATE:
			case DO:
			case FETCH:
			case GRANT:
			case INTO:
			case SELECT:
			case TABLE:
			case WITH:
			case ABORT_P:
			case ALTER:
			case BEGIN_P:
			case CASCADE:
			case CHECKPOINT:
			case CLOSE:
			case CLUSTER:
			case COMMENT:
			case COMMIT:
			case COPY:
			case DEALLOCATE:
			case DECLARE:
			case DELETE_P:
			case DISCARD:
			case DROP:
			case EXECUTE:
			case EXPLAIN:
			case INSERT:
			case LISTEN:
			case LOAD:
			case LOCK_P:
			case MERGE:
			case MOVE:
			case NOTIFY:
			case PREPARE:
			case REASSIGN:
			case REFRESH:
			case REINDEX:
			case RELEASE:
			case RESET:
			case RESTRICT:
			case REVOKE:
			case ROLLBACK:
			case SAVEPOINT:
			case SECURITY:
			case SET:
			case SHOW:
			case START:
			case TRUNCATE:
			case UNLISTEN:
			case UPDATE:
			case VACUUM:
			case VALUES:
			case CALL:
			case IMPORT_P:
			case END_P:
			case MetaCommand:
				EnterOuterAlt(_localctx, 3);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CommentstmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMENT() { return GetToken(PostgreSQLParser.COMMENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] ON() { return GetTokens(PostgreSQLParser.ON); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ON(int i) {
			return GetToken(PostgreSQLParser.ON, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Object_type_any_nameContext object_type_any_name() {
			return GetRuleContext<Object_type_any_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Any_nameContext any_name() {
			return GetRuleContext<Any_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IS() { return GetToken(PostgreSQLParser.IS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Comment_textContext comment_text() {
			return GetRuleContext<Comment_textContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLUMN() { return GetToken(PostgreSQLParser.COLUMN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Object_type_nameContext object_type_name() {
			return GetRuleContext<Object_type_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TYPE_P() { return GetToken(PostgreSQLParser.TYPE_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypenameContext[] typename() {
			return GetRuleContexts<TypenameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypenameContext typename(int i) {
			return GetRuleContext<TypenameContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOMAIN_P() { return GetToken(PostgreSQLParser.DOMAIN_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AGGREGATE() { return GetToken(PostgreSQLParser.AGGREGATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Aggregate_with_argtypesContext aggregate_with_argtypes() {
			return GetRuleContext<Aggregate_with_argtypesContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FUNCTION() { return GetToken(PostgreSQLParser.FUNCTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Function_with_argtypesContext function_with_argtypes() {
			return GetRuleContext<Function_with_argtypesContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPERATOR() { return GetToken(PostgreSQLParser.OPERATOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Operator_with_argtypesContext operator_with_argtypes() {
			return GetRuleContext<Operator_with_argtypesContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONSTRAINT() { return GetToken(PostgreSQLParser.CONSTRAINT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Object_type_name_on_any_nameContext object_type_name_on_any_name() {
			return GetRuleContext<Object_type_name_on_any_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PROCEDURE() { return GetToken(PostgreSQLParser.PROCEDURE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROUTINE() { return GetToken(PostgreSQLParser.ROUTINE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRANSFORM() { return GetToken(PostgreSQLParser.TRANSFORM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOR() { return GetToken(PostgreSQLParser.FOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LANGUAGE() { return GetToken(PostgreSQLParser.LANGUAGE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLASS() { return GetToken(PostgreSQLParser.CLASS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode USING() { return GetToken(PostgreSQLParser.USING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FAMILY() { return GetToken(PostgreSQLParser.FAMILY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LARGE_P() { return GetToken(PostgreSQLParser.LARGE_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OBJECT_P() { return GetToken(PostgreSQLParser.OBJECT_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NumericonlyContext numericonly() {
			return GetRuleContext<NumericonlyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CAST() { return GetToken(PostgreSQLParser.CAST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAREN() { return GetToken(PostgreSQLParser.OPEN_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS() { return GetToken(PostgreSQLParser.AS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAREN() { return GetToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public CommentstmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_commentstmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterCommentstmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitCommentstmt(this);
		}
	}

	[RuleVersion(0)]
	public CommentstmtContext commentstmt() {
		CommentstmtContext _localctx = new CommentstmtContext(Context, State);
		EnterRule(_localctx, 534, RULE_commentstmt);
		try {
			State = 4814;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,227,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 4667;
				Match(COMMENT);
				State = 4668;
				Match(ON);
				State = 4669;
				object_type_any_name();
				State = 4670;
				any_name();
				State = 4671;
				Match(IS);
				State = 4672;
				comment_text();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 4674;
				Match(COMMENT);
				State = 4675;
				Match(ON);
				State = 4676;
				Match(COLUMN);
				State = 4677;
				any_name();
				State = 4678;
				Match(IS);
				State = 4679;
				comment_text();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 4681;
				Match(COMMENT);
				State = 4682;
				Match(ON);
				State = 4683;
				object_type_name();
				State = 4684;
				name();
				State = 4685;
				Match(IS);
				State = 4686;
				comment_text();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 4688;
				Match(COMMENT);
				State = 4689;
				Match(ON);
				State = 4690;
				Match(TYPE_P);
				State = 4691;
				typename();
				State = 4692;
				Match(IS);
				State = 4693;
				comment_text();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 4695;
				Match(COMMENT);
				State = 4696;
				Match(ON);
				State = 4697;
				Match(DOMAIN_P);
				State = 4698;
				typename();
				State = 4699;
				Match(IS);
				State = 4700;
				comment_text();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 4702;
				Match(COMMENT);
				State = 4703;
				Match(ON);
				State = 4704;
				Match(AGGREGATE);
				State = 4705;
				aggregate_with_argtypes();
				State = 4706;
				Match(IS);
				State = 4707;
				comment_text();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 4709;
				Match(COMMENT);
				State = 4710;
				Match(ON);
				State = 4711;
				Match(FUNCTION);
				State = 4712;
				function_with_argtypes();
				State = 4713;
				Match(IS);
				State = 4714;
				comment_text();
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 4716;
				Match(COMMENT);
				State = 4717;
				Match(ON);
				State = 4718;
				Match(OPERATOR);
				State = 4719;
				operator_with_argtypes();
				State = 4720;
				Match(IS);
				State = 4721;
				comment_text();
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 4723;
				Match(COMMENT);
				State = 4724;
				Match(ON);
				State = 4725;
				Match(CONSTRAINT);
				State = 4726;
				name();
				State = 4727;
				Match(ON);
				State = 4728;
				any_name();
				State = 4729;
				Match(IS);
				State = 4730;
				comment_text();
				}
				break;
			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 4732;
				Match(COMMENT);
				State = 4733;
				Match(ON);
				State = 4734;
				Match(CONSTRAINT);
				State = 4735;
				name();
				State = 4736;
				Match(ON);
				State = 4737;
				Match(DOMAIN_P);
				State = 4738;
				any_name();
				State = 4739;
				Match(IS);
				State = 4740;
				comment_text();
				}
				break;
			case 11:
				EnterOuterAlt(_localctx, 11);
				{
				State = 4742;
				Match(COMMENT);
				State = 4743;
				Match(ON);
				State = 4744;
				object_type_name_on_any_name();
				State = 4745;
				name();
				State = 4746;
				Match(ON);
				State = 4747;
				any_name();
				State = 4748;
				Match(IS);
				State = 4749;
				comment_text();
				}
				break;
			case 12:
				EnterOuterAlt(_localctx, 12);
				{
				State = 4751;
				Match(COMMENT);
				State = 4752;
				Match(ON);
				State = 4753;
				Match(PROCEDURE);
				State = 4754;
				function_with_argtypes();
				State = 4755;
				Match(IS);
				State = 4756;
				comment_text();
				}
				break;
			case 13:
				EnterOuterAlt(_localctx, 13);
				{
				State = 4758;
				Match(COMMENT);
				State = 4759;
				Match(ON);
				State = 4760;
				Match(ROUTINE);
				State = 4761;
				function_with_argtypes();
				State = 4762;
				Match(IS);
				State = 4763;
				comment_text();
				}
				break;
			case 14:
				EnterOuterAlt(_localctx, 14);
				{
				State = 4765;
				Match(COMMENT);
				State = 4766;
				Match(ON);
				State = 4767;
				Match(TRANSFORM);
				State = 4768;
				Match(FOR);
				State = 4769;
				typename();
				State = 4770;
				Match(LANGUAGE);
				State = 4771;
				name();
				State = 4772;
				Match(IS);
				State = 4773;
				comment_text();
				}
				break;
			case 15:
				EnterOuterAlt(_localctx, 15);
				{
				State = 4775;
				Match(COMMENT);
				State = 4776;
				Match(ON);
				State = 4777;
				Match(OPERATOR);
				State = 4778;
				Match(CLASS);
				State = 4779;
				any_name();
				State = 4780;
				Match(USING);
				State = 4781;
				name();
				State = 4782;
				Match(IS);
				State = 4783;
				comment_text();
				}
				break;
			case 16:
				EnterOuterAlt(_localctx, 16);
				{
				State = 4785;
				Match(COMMENT);
				State = 4786;
				Match(ON);
				State = 4787;
				Match(OPERATOR);
				State = 4788;
				Match(FAMILY);
				State = 4789;
				any_name();
				State = 4790;
				Match(USING);
				State = 4791;
				name();
				State = 4792;
				Match(IS);
				State = 4793;
				comment_text();
				}
				break;
			case 17:
				EnterOuterAlt(_localctx, 17);
				{
				State = 4795;
				Match(COMMENT);
				State = 4796;
				Match(ON);
				State = 4797;
				Match(LARGE_P);
				State = 4798;
				Match(OBJECT_P);
				State = 4799;
				numericonly();
				State = 4800;
				Match(IS);
				State = 4801;
				comment_text();
				}
				break;
			case 18:
				EnterOuterAlt(_localctx, 18);
				{
				State = 4803;
				Match(COMMENT);
				State = 4804;
				Match(ON);
				State = 4805;
				Match(CAST);
				State = 4806;
				Match(OPEN_PAREN);
				State = 4807;
				typename();
				State = 4808;
				Match(AS);
				State = 4809;
				typename();
				State = 4810;
				Match(CLOSE_PAREN);
				State = 4811;
				Match(IS);
				State = 4812;
				comment_text();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Comment_textContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SconstContext sconst() {
			return GetRuleContext<SconstContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NULL_P() { return GetToken(PostgreSQLParser.NULL_P, 0); }
		public Comment_textContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_comment_text; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterComment_text(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitComment_text(this);
		}
	}

	[RuleVersion(0)]
	public Comment_textContext comment_text() {
		Comment_textContext _localctx = new Comment_textContext(Context, State);
		EnterRule(_localctx, 536, RULE_comment_text);
		try {
			State = 4818;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case StringConstant:
			case UnicodeEscapeStringConstant:
			case BeginDollarStringConstant:
			case EscapeStringConstant:
				EnterOuterAlt(_localctx, 1);
				{
				State = 4816;
				sconst();
				}
				break;
			case NULL_P:
				EnterOuterAlt(_localctx, 2);
				{
				State = 4817;
				Match(NULL_P);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SeclabelstmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SECURITY() { return GetToken(PostgreSQLParser.SECURITY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LABEL() { return GetToken(PostgreSQLParser.LABEL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Opt_providerContext opt_provider() {
			return GetRuleContext<Opt_providerContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ON() { return GetToken(PostgreSQLParser.ON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Object_type_any_nameContext object_type_any_name() {
			return GetRuleContext<Object_type_any_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Any_nameContext any_name() {
			return GetRuleContext<Any_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IS() { return GetToken(PostgreSQLParser.IS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Security_labelContext security_label() {
			return GetRuleContext<Security_labelContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLUMN() { return GetToken(PostgreSQLParser.COLUMN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Object_type_nameContext object_type_name() {
			return GetRuleContext<Object_type_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TYPE_P() { return GetToken(PostgreSQLParser.TYPE_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypenameContext typename() {
			return GetRuleContext<TypenameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOMAIN_P() { return GetToken(PostgreSQLParser.DOMAIN_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AGGREGATE() { return GetToken(PostgreSQLParser.AGGREGATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Aggregate_with_argtypesContext aggregate_with_argtypes() {
			return GetRuleContext<Aggregate_with_argtypesContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FUNCTION() { return GetToken(PostgreSQLParser.FUNCTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Function_with_argtypesContext function_with_argtypes() {
			return GetRuleContext<Function_with_argtypesContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LARGE_P() { return GetToken(PostgreSQLParser.LARGE_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OBJECT_P() { return GetToken(PostgreSQLParser.OBJECT_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NumericonlyContext numericonly() {
			return GetRuleContext<NumericonlyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PROCEDURE() { return GetToken(PostgreSQLParser.PROCEDURE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROUTINE() { return GetToken(PostgreSQLParser.ROUTINE, 0); }
		public SeclabelstmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_seclabelstmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterSeclabelstmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitSeclabelstmt(this);
		}
	}

	[RuleVersion(0)]
	public SeclabelstmtContext seclabelstmt() {
		SeclabelstmtContext _localctx = new SeclabelstmtContext(Context, State);
		EnterRule(_localctx, 538, RULE_seclabelstmt);
		try {
			State = 4911;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,229,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 4820;
				Match(SECURITY);
				State = 4821;
				Match(LABEL);
				State = 4822;
				opt_provider();
				State = 4823;
				Match(ON);
				State = 4824;
				object_type_any_name();
				State = 4825;
				any_name();
				State = 4826;
				Match(IS);
				State = 4827;
				security_label();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 4829;
				Match(SECURITY);
				State = 4830;
				Match(LABEL);
				State = 4831;
				opt_provider();
				State = 4832;
				Match(ON);
				State = 4833;
				Match(COLUMN);
				State = 4834;
				any_name();
				State = 4835;
				Match(IS);
				State = 4836;
				security_label();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 4838;
				Match(SECURITY);
				State = 4839;
				Match(LABEL);
				State = 4840;
				opt_provider();
				State = 4841;
				Match(ON);
				State = 4842;
				object_type_name();
				State = 4843;
				name();
				State = 4844;
				Match(IS);
				State = 4845;
				security_label();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 4847;
				Match(SECURITY);
				State = 4848;
				Match(LABEL);
				State = 4849;
				opt_provider();
				State = 4850;
				Match(ON);
				State = 4851;
				Match(TYPE_P);
				State = 4852;
				typename();
				State = 4853;
				Match(IS);
				State = 4854;
				security_label();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 4856;
				Match(SECURITY);
				State = 4857;
				Match(LABEL);
				State = 4858;
				opt_provider();
				State = 4859;
				Match(ON);
				State = 4860;
				Match(DOMAIN_P);
				State = 4861;
				typename();
				State = 4862;
				Match(IS);
				State = 4863;
				security_label();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 4865;
				Match(SECURITY);
				State = 4866;
				Match(LABEL);
				State = 4867;
				opt_provider();
				State = 4868;
				Match(ON);
				State = 4869;
				Match(AGGREGATE);
				State = 4870;
				aggregate_with_argtypes();
				State = 4871;
				Match(IS);
				State = 4872;
				security_label();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 4874;
				Match(SECURITY);
				State = 4875;
				Match(LABEL);
				State = 4876;
				opt_provider();
				State = 4877;
				Match(ON);
				State = 4878;
				Match(FUNCTION);
				State = 4879;
				function_with_argtypes();
				State = 4880;
				Match(IS);
				State = 4881;
				security_label();
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 4883;
				Match(SECURITY);
				State = 4884;
				Match(LABEL);
				State = 4885;
				opt_provider();
				State = 4886;
				Match(ON);
				State = 4887;
				Match(LARGE_P);
				State = 4888;
				Match(OBJECT_P);
				State = 4889;
				numericonly();
				State = 4890;
				Match(IS);
				State = 4891;
				security_label();
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 4893;
				Match(SECURITY);
				State = 4894;
				Match(LABEL);
				State = 4895;
				opt_provider();
				State = 4896;
				Match(ON);
				State = 4897;
				Match(PROCEDURE);
				State = 4898;
				function_with_argtypes();
				State = 4899;
				Match(IS);
				State = 4900;
				security_label();
				}
				break;
			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 4902;
				Match(SECURITY);
				State = 4903;
				Match(LABEL);
				State = 4904;
				opt_provider();
				State = 4905;
				Match(ON);
				State = 4906;
				Match(ROUTINE);
				State = 4907;
				function_with_argtypes();
				State = 4908;
				Match(IS);
				State = 4909;
				security_label();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Opt_providerContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOR() { return GetToken(PostgreSQLParser.FOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Nonreservedword_or_sconstContext nonreservedword_or_sconst() {
			return GetRuleContext<Nonreservedword_or_sconstContext>(0);
		}
		public Opt_providerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_opt_provider; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterOpt_provider(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitOpt_provider(this);
		}
	}

	[RuleVersion(0)]
	public Opt_providerContext opt_provider() {
		Opt_providerContext _localctx = new Opt_providerContext(Context, State);
		EnterRule(_localctx, 540, RULE_opt_provider);
		try {
			State = 4916;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case FOR:
				EnterOuterAlt(_localctx, 1);
				{
				State = 4913;
				Match(FOR);
				State = 4914;
				nonreservedword_or_sconst();
				}
				break;
			case ON:
				EnterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Security_labelContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SconstContext sconst() {
			return GetRuleContext<SconstContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NULL_P() { return GetToken(PostgreSQLParser.NULL_P, 0); }
		public Security_labelContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_security_label; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterSecurity_label(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitSecurity_label(this);
		}
	}

	[RuleVersion(0)]
	public Security_labelContext security_label() {
		Security_labelContext _localctx = new Security_labelContext(Context, State);
		EnterRule(_localctx, 542, RULE_security_label);
		try {
			State = 4920;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case StringConstant:
			case UnicodeEscapeStringConstant:
			case BeginDollarStringConstant:
			case EscapeStringConstant:
				EnterOuterAlt(_localctx, 1);
				{
				State = 4918;
				sconst();
				}
				break;
			case NULL_P:
				EnterOuterAlt(_localctx, 2);
				{
				State = 4919;
				Match(NULL_P);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FetchstmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FETCH() { return GetToken(PostgreSQLParser.FETCH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Fetch_argsContext fetch_args() {
			return GetRuleContext<Fetch_argsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MOVE() { return GetToken(PostgreSQLParser.MOVE, 0); }
		public FetchstmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fetchstmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterFetchstmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitFetchstmt(this);
		}
	}

	[RuleVersion(0)]
	public FetchstmtContext fetchstmt() {
		FetchstmtContext _localctx = new FetchstmtContext(Context, State);
		EnterRule(_localctx, 544, RULE_fetchstmt);
		try {
			State = 4926;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case FETCH:
				EnterOuterAlt(_localctx, 1);
				{
				State = 4922;
				Match(FETCH);
				State = 4923;
				fetch_args();
				}
				break;
			case MOVE:
				EnterOuterAlt(_localctx, 2);
				{
				State = 4924;
				Match(MOVE);
				State = 4925;
				fetch_args();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Fetch_argsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Cursor_nameContext cursor_name() {
			return GetRuleContext<Cursor_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public From_inContext from_in() {
			return GetRuleContext<From_inContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NEXT() { return GetToken(PostgreSQLParser.NEXT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Opt_from_inContext opt_from_in() {
			return GetRuleContext<Opt_from_inContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PRIOR() { return GetToken(PostgreSQLParser.PRIOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FIRST_P() { return GetToken(PostgreSQLParser.FIRST_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LAST_P() { return GetToken(PostgreSQLParser.LAST_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ABSOLUTE_P() { return GetToken(PostgreSQLParser.ABSOLUTE_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SignediconstContext signediconst() {
			return GetRuleContext<SignediconstContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RELATIVE_P() { return GetToken(PostgreSQLParser.RELATIVE_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALL() { return GetToken(PostgreSQLParser.ALL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FORWARD() { return GetToken(PostgreSQLParser.FORWARD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BACKWARD() { return GetToken(PostgreSQLParser.BACKWARD, 0); }
		public Fetch_argsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fetch_args; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterFetch_args(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitFetch_args(this);
		}
	}

	[RuleVersion(0)]
	public Fetch_argsContext fetch_args() {
		Fetch_argsContext _localctx = new Fetch_argsContext(Context, State);
		EnterRule(_localctx, 546, RULE_fetch_args);
		try {
			State = 4994;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,233,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 4928;
				cursor_name();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 4929;
				from_in();
				State = 4930;
				cursor_name();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 4932;
				Match(NEXT);
				State = 4933;
				opt_from_in();
				State = 4934;
				cursor_name();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 4936;
				Match(PRIOR);
				State = 4937;
				opt_from_in();
				State = 4938;
				cursor_name();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 4940;
				Match(FIRST_P);
				State = 4941;
				opt_from_in();
				State = 4942;
				cursor_name();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 4944;
				Match(LAST_P);
				State = 4945;
				opt_from_in();
				State = 4946;
				cursor_name();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 4948;
				Match(ABSOLUTE_P);
				State = 4949;
				signediconst();
				State = 4950;
				opt_from_in();
				State = 4951;
				cursor_name();
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 4953;
				Match(RELATIVE_P);
				State = 4954;
				signediconst();
				State = 4955;
				opt_from_in();
				State = 4956;
				cursor_name();
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 4958;
				signediconst();
				State = 4959;
				opt_from_in();
				State = 4960;
				cursor_name();
				}
				break;
			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 4962;
				Match(ALL);
				State = 4963;
				opt_from_in();
				State = 4964;
				cursor_name();
				}
				break;
			case 11:
				EnterOuterAlt(_localctx, 11);
				{
				State = 4966;
				Match(FORWARD);
				State = 4967;
				opt_from_in();
				State = 4968;
				cursor_name();
				}
				break;
			case 12:
				EnterOuterAlt(_localctx, 12);
				{
				State = 4970;
				Match(FORWARD);
				State = 4971;
				signediconst();
				State = 4972;
				opt_from_in();
				State = 4973;
				cursor_name();
				}
				break;
			case 13:
				EnterOuterAlt(_localctx, 13);
				{
				State = 4975;
				Match(FORWARD);
				State = 4976;
				Match(ALL);
				State = 4977;
				opt_from_in();
				State = 4978;
				cursor_name();
				}
				break;
			case 14:
				EnterOuterAlt(_localctx, 14);
				{
				State = 4980;
				Match(BACKWARD);
				State = 4981;
				opt_from_in();
				State = 4982;
				cursor_name();
				}
				break;
			case 15:
				EnterOuterAlt(_localctx, 15);
				{
				State = 4984;
				Match(BACKWARD);
				State = 4985;
				signediconst();
				State = 4986;
				opt_from_in();
				State = 4987;
				cursor_name();
				}
				break;
			case 16:
				EnterOuterAlt(_localctx, 16);
				{
				State = 4989;
				Match(BACKWARD);
				State = 4990;
				Match(ALL);
				State = 4991;
				opt_from_in();
				State = 4992;
				cursor_name();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class From_inContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FROM() { return GetToken(PostgreSQLParser.FROM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IN_P() { return GetToken(PostgreSQLParser.IN_P, 0); }
		public From_inContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_from_in; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterFrom_in(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitFrom_in(this);
		}
	}

	[RuleVersion(0)]
	public From_inContext from_in() {
		From_inContext _localctx = new From_inContext(Context, State);
		EnterRule(_localctx, 548, RULE_from_in);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4996;
			_la = TokenStream.LA(1);
			if ( !(_la==FROM || _la==IN_P) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Opt_from_inContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public From_inContext from_in() {
			return GetRuleContext<From_inContext>(0);
		}
		public Opt_from_inContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_opt_from_in; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterOpt_from_in(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitOpt_from_in(this);
		}
	}

	[RuleVersion(0)]
	public Opt_from_inContext opt_from_in() {
		Opt_from_inContext _localctx = new Opt_from_inContext(Context, State);
		EnterRule(_localctx, 550, RULE_opt_from_in);
		try {
			State = 5000;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case FROM:
			case IN_P:
				EnterOuterAlt(_localctx, 1);
				{
				State = 4998;
				from_in();
				}
				break;
			case AND:
			case ARRAY:
			case COLLATE:
			case COLUMN:
			case CONSTRAINT:
			case DEFAULT:
			case DO:
			case FETCH:
			case TABLE:
			case IS:
			case LEFT:
			case OUTER_P:
			case OVER:
			case RIGHT:
			case ABORT_P:
			case ABSOLUTE_P:
			case ACCESS:
			case ACTION:
			case ADD_P:
			case ADMIN:
			case AFTER:
			case AGGREGATE:
			case ALSO:
			case ALTER:
			case ALWAYS:
			case ASSERTION:
			case ASSIGNMENT:
			case AT:
			case ATTRIBUTE:
			case BACKWARD:
			case BEFORE:
			case BEGIN_P:
			case BY:
			case CACHE:
			case CALLED:
			case CASCADE:
			case CASCADED:
			case CATALOG:
			case CHAIN:
			case CHARACTERISTICS:
			case CHECKPOINT:
			case CLASS:
			case CLOSE:
			case CLUSTER:
			case COMMENT:
			case COMMENTS:
			case COMMIT:
			case COMMITTED:
			case CONFIGURATION:
			case CONNECTION:
			case CONSTRAINTS:
			case CONTENT_P:
			case CONTINUE_P:
			case CONVERSION_P:
			case COPY:
			case COST:
			case CSV:
			case CURSOR:
			case CYCLE:
			case DATA_P:
			case DATABASE:
			case DAY_P:
			case DEALLOCATE:
			case DECLARE:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE_P:
			case DELIMITER:
			case DELIMITERS:
			case DICTIONARY:
			case DISABLE_P:
			case DISCARD:
			case DOCUMENT_P:
			case DOMAIN_P:
			case DOUBLE_P:
			case DROP:
			case EACH:
			case ENABLE_P:
			case ENCODING:
			case ENCRYPTED:
			case ENUM_P:
			case ESCAPE:
			case EVENT:
			case EXCLUDE:
			case EXCLUDING:
			case EXCLUSIVE:
			case EXECUTE:
			case EXPLAIN:
			case EXTENSION:
			case EXTERNAL:
			case FAMILY:
			case FIRST_P:
			case FOLLOWING:
			case FORCE:
			case FORWARD:
			case FUNCTION:
			case FUNCTIONS:
			case GLOBAL:
			case GRANTED:
			case HANDLER:
			case HEADER_P:
			case HOLD:
			case HOUR_P:
			case IDENTITY_P:
			case IF_P:
			case IMMEDIATE:
			case IMMUTABLE:
			case IMPLICIT_P:
			case INCLUDING:
			case INCREMENT:
			case INDEX:
			case INDEXES:
			case INHERIT:
			case INHERITS:
			case INLINE_P:
			case INSENSITIVE:
			case INSERT:
			case INSTEAD:
			case INVOKER:
			case ISOLATION:
			case KEY:
			case LABEL:
			case LANGUAGE:
			case LARGE_P:
			case LAST_P:
			case LEAKPROOF:
			case LEVEL:
			case LISTEN:
			case LOAD:
			case LOCAL:
			case LOCATION:
			case LOCK_P:
			case MAPPING:
			case MATCH:
			case MATERIALIZED:
			case MAXVALUE:
			case MINUTE_P:
			case MINVALUE:
			case MODE:
			case MONTH_P:
			case MOVE:
			case NAME_P:
			case NAMES:
			case NEXT:
			case NO:
			case NOTHING:
			case NOTIFY:
			case NOWAIT:
			case NULLS_P:
			case OBJECT_P:
			case OF:
			case OFF:
			case OIDS:
			case OPERATOR:
			case OPTION:
			case OPTIONS:
			case OWNED:
			case OWNER:
			case PARSER:
			case PARTIAL:
			case PARTITION:
			case PASSING:
			case PASSWORD:
			case PLANS:
			case PRECEDING:
			case PREPARE:
			case PREPARED:
			case PRESERVE:
			case PRIOR:
			case PRIVILEGES:
			case PROCEDURAL:
			case PROCEDURE:
			case PROGRAM:
			case QUOTE:
			case RANGE:
			case READ:
			case REASSIGN:
			case RECHECK:
			case RECURSIVE:
			case REF:
			case REFRESH:
			case REINDEX:
			case RELATIVE_P:
			case RELEASE:
			case RENAME:
			case REPEATABLE:
			case REPLACE:
			case REPLICA:
			case RESET:
			case RESTART:
			case RESTRICT:
			case RETURNS:
			case REVOKE:
			case ROLE:
			case ROLLBACK:
			case ROWS:
			case RULE:
			case SAVEPOINT:
			case SCHEMA:
			case SCROLL:
			case SEARCH:
			case SECOND_P:
			case SECURITY:
			case SEQUENCE:
			case SEQUENCES:
			case SERIALIZABLE:
			case SERVER:
			case SESSION:
			case SET:
			case SHARE:
			case SHOW:
			case SIMPLE:
			case SNAPSHOT:
			case STABLE:
			case STANDALONE_P:
			case START:
			case STATEMENT:
			case STATISTICS:
			case STDIN:
			case STDOUT:
			case STORAGE:
			case STRICT_P:
			case STRIP_P:
			case SYSID:
			case SYSTEM_P:
			case TABLES:
			case TABLESPACE:
			case TEMP:
			case TEMPLATE:
			case TEMPORARY:
			case TEXT_P:
			case TRANSACTION:
			case TRIGGER:
			case TRUNCATE:
			case TRUSTED:
			case TYPE_P:
			case TYPES_P:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNENCRYPTED:
			case UNKNOWN:
			case UNLISTEN:
			case UNLOGGED:
			case UNTIL:
			case UPDATE:
			case VACUUM:
			case VALID:
			case VALIDATE:
			case VALIDATOR:
			case VARYING:
			case VERSION_P:
			case VIEW:
			case VOLATILE:
			case WHITESPACE_P:
			case WITHOUT:
			case WORK:
			case WRAPPER:
			case WRITE:
			case XML_P:
			case YEAR_P:
			case YES_P:
			case ZONE:
			case BETWEEN:
			case BIGINT:
			case BIT:
			case BOOLEAN_P:
			case CHAR_P:
			case CHARACTER:
			case COALESCE:
			case DEC:
			case DECIMAL_P:
			case EXISTS:
			case EXTRACT:
			case FLOAT_P:
			case GREATEST:
			case INOUT:
			case INT_P:
			case INTEGER:
			case INTERVAL:
			case LEAST:
			case NATIONAL:
			case NCHAR:
			case NONE:
			case NULLIF:
			case NUMERIC:
			case OVERLAY:
			case POSITION:
			case PRECISION:
			case REAL:
			case ROW:
			case SETOF:
			case SMALLINT:
			case SUBSTRING:
			case TIME:
			case TIMESTAMP:
			case TREAT:
			case TRIM:
			case VALUES:
			case VARCHAR:
			case XMLATTRIBUTES:
			case XMLCOMMENT:
			case XMLAGG:
			case XML_IS_WELL_FORMED:
			case XML_IS_WELL_FORMED_DOCUMENT:
			case XML_IS_WELL_FORMED_CONTENT:
			case XPATH:
			case XPATH_EXISTS:
			case XMLCONCAT:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLPARSE:
			case XMLPI:
			case XMLROOT:
			case XMLSERIALIZE:
			case CALL:
			case CURRENT_P:
			case ATTACH:
			case DETACH:
			case EXPRESSION:
			case GENERATED:
			case LOGGED:
			case STORED:
			case INCLUDE:
			case ROUTINE:
			case TRANSFORM:
			case IMPORT_P:
			case POLICY:
			case METHOD:
			case REFERENCING:
			case NEW:
			case OLD:
			case VALUE_P:
			case SUBSCRIPTION:
			case PUBLICATION:
			case OUT_P:
			case ROUTINES:
			case SCHEMAS:
			case PROCEDURES:
			case INPUT_P:
			case SUPPORT:
			case PARALLEL:
			case SQL_P:
			case DEPENDS:
			case OVERRIDING:
			case CONFLICT:
			case SKIP_P:
			case LOCKED:
			case TIES:
			case ROLLUP:
			case CUBE:
			case GROUPING:
			case SETS:
			case ORDINALITY:
			case XMLTABLE:
			case COLUMNS:
			case XMLNAMESPACES:
			case ROWTYPE:
			case NORMALIZED:
			case WITHIN:
			case FILTER:
			case GROUPS:
			case OTHERS:
			case NFC:
			case NFD:
			case NFKC:
			case NFKD:
			case UESCAPE:
			case VIEWS:
			case NORMALIZE:
			case DUMP:
			case PRINT_STRICT_PARAMS:
			case VARIABLE_CONFLICT:
			case ERROR:
			case USE_VARIABLE:
			case USE_COLUMN:
			case ALIAS:
			case CONSTANT:
			case PERFORM:
			case GET:
			case DIAGNOSTICS:
			case STACKED:
			case ELSIF:
			case REVERSE:
			case SLICE:
			case EXIT:
			case RETURN:
			case QUERY:
			case RAISE:
			case SQLSTATE:
			case DEBUG:
			case LOG:
			case INFO:
			case NOTICE:
			case WARNING:
			case EXCEPTION:
			case ASSERT:
			case OPEN:
			case ABS:
			case CBRT:
			case CEIL:
			case CEILING:
			case DEGREES:
			case DIV:
			case EXP:
			case FACTORIAL:
			case FLOOR:
			case GCD:
			case LCM:
			case LN:
			case LOG10:
			case MIN_SCALE:
			case MOD:
			case PI:
			case POWER:
			case RADIANS:
			case ROUND:
			case SCALE:
			case SIGN:
			case SQRT:
			case TRIM_SCALE:
			case TRUNC:
			case WIDTH_BUCKET:
			case RANDOM:
			case SETSEED:
			case ACOS:
			case ACOSD:
			case ASIN:
			case ASIND:
			case ATAN:
			case ATAND:
			case ATAN2:
			case ATAN2D:
			case COS:
			case COSD:
			case COT:
			case COTD:
			case SIN:
			case SIND:
			case TAN:
			case TAND:
			case SINH:
			case COSH:
			case TANH:
			case ASINH:
			case ACOSH:
			case ATANH:
			case BIT_LENGTH:
			case CHAR_LENGTH:
			case CHARACTER_LENGTH:
			case LOWER:
			case OCTET_LENGTH:
			case UPPER:
			case ASCII:
			case BTRIM:
			case CHR:
			case CONCAT:
			case CONCAT_WS:
			case FORMAT:
			case INITCAP:
			case LENGTH:
			case LPAD:
			case LTRIM:
			case MD5:
			case PARSE_IDENT:
			case PG_CLIENT_ENCODING:
			case QUOTE_IDENT:
			case QUOTE_LITERAL:
			case QUOTE_NULLABLE:
			case REGEXP_COUNT:
			case REGEXP_INSTR:
			case REGEXP_LIKE:
			case REGEXP_MATCH:
			case REGEXP_MATCHES:
			case REGEXP_REPLACE:
			case REGEXP_SPLIT_TO_ARRAY:
			case REGEXP_SPLIT_TO_TABLE:
			case REGEXP_SUBSTR:
			case REPEAT:
			case RPAD:
			case RTRIM:
			case SPLIT_PART:
			case STARTS_WITH:
			case STRING_TO_ARRAY:
			case STRING_TO_TABLE:
			case STRPOS:
			case SUBSTR:
			case TO_ASCII:
			case TO_HEX:
			case TRANSLATE:
			case UNISTR:
			case AGE:
			case CLOCK_TIMESTAMP:
			case DATE_BIN:
			case DATE_PART:
			case DATE_TRUNC:
			case ISFINITE:
			case JUSTIFY_DAYS:
			case JUSTIFY_HOURS:
			case JUSTIFY_INTERVAL:
			case MAKE_DATE:
			case MAKE_INTERVAL:
			case MAKE_TIME:
			case MAKE_TIMESTAMP:
			case MAKE_TIMESTAMPTZ:
			case NOW:
			case STATEMENT_TIMESTAMP:
			case TIMEOFDAY:
			case TRANSACTION_TIMESTAMP:
			case TO_TIMESTAMP:
			case TO_CHAR:
			case TO_DATE:
			case TO_NUMBER:
			case Identifier:
			case QuotedIdentifier:
			case UnicodeQuotedIdentifier:
			case PLSQLVARIABLENAME:
			case PLSQLIDENTIFIER:
				EnterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GrantstmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GRANT() { return GetToken(PostgreSQLParser.GRANT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public PrivilegesContext privileges() {
			return GetRuleContext<PrivilegesContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ON() { return GetToken(PostgreSQLParser.ON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Privilege_targetContext privilege_target() {
			return GetRuleContext<Privilege_targetContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TO() { return GetToken(PostgreSQLParser.TO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Grantee_listContext grantee_list() {
			return GetRuleContext<Grantee_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Opt_grant_grant_optionContext opt_grant_grant_option() {
			return GetRuleContext<Opt_grant_grant_optionContext>(0);
		}
		public GrantstmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_grantstmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterGrantstmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitGrantstmt(this);
		}
	}

	[RuleVersion(0)]
	public GrantstmtContext grantstmt() {
		GrantstmtContext _localctx = new GrantstmtContext(Context, State);
		EnterRule(_localctx, 552, RULE_grantstmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5002;
			Match(GRANT);
			State = 5003;
			privileges();
			State = 5004;
			Match(ON);
			State = 5005;
			privilege_target();
			State = 5006;
			Match(TO);
			State = 5007;
			grantee_list();
			State = 5008;
			opt_grant_grant_option();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RevokestmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REVOKE() { return GetToken(PostgreSQLParser.REVOKE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public PrivilegesContext privileges() {
			return GetRuleContext<PrivilegesContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ON() { return GetToken(PostgreSQLParser.ON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Privilege_targetContext privilege_target() {
			return GetRuleContext<Privilege_targetContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FROM() { return GetToken(PostgreSQLParser.FROM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Grantee_listContext grantee_list() {
			return GetRuleContext<Grantee_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Opt_drop_behaviorContext opt_drop_behavior() {
			return GetRuleContext<Opt_drop_behaviorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GRANT() { return GetToken(PostgreSQLParser.GRANT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPTION() { return GetToken(PostgreSQLParser.OPTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOR() { return GetToken(PostgreSQLParser.FOR, 0); }
		public RevokestmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_revokestmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterRevokestmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitRevokestmt(this);
		}
	}

	[RuleVersion(0)]
	public RevokestmtContext revokestmt() {
		RevokestmtContext _localctx = new RevokestmtContext(Context, State);
		EnterRule(_localctx, 554, RULE_revokestmt);
		try {
			State = 5029;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,235,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 5010;
				Match(REVOKE);
				State = 5011;
				privileges();
				State = 5012;
				Match(ON);
				State = 5013;
				privilege_target();
				State = 5014;
				Match(FROM);
				State = 5015;
				grantee_list();
				State = 5016;
				opt_drop_behavior();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 5018;
				Match(REVOKE);
				State = 5019;
				Match(GRANT);
				State = 5020;
				Match(OPTION);
				State = 5021;
				Match(FOR);
				State = 5022;
				privileges();
				State = 5023;
				Match(ON);
				State = 5024;
				privilege_target();
				State = 5025;
				Match(FROM);
				State = 5026;
				grantee_list();
				State = 5027;
				opt_drop_behavior();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrivilegesContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Privilege_listContext privilege_list() {
			return GetRuleContext<Privilege_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALL() { return GetToken(PostgreSQLParser.ALL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PRIVILEGES() { return GetToken(PostgreSQLParser.PRIVILEGES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAREN() { return GetToken(PostgreSQLParser.OPEN_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ColumnlistContext columnlist() {
			return GetRuleContext<ColumnlistContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAREN() { return GetToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public PrivilegesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_privileges; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterPrivileges(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitPrivileges(this);
		}
	}

	[RuleVersion(0)]
	public PrivilegesContext privileges() {
		PrivilegesContext _localctx = new PrivilegesContext(Context, State);
		EnterRule(_localctx, 556, RULE_privileges);
		try {
			State = 5046;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,236,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 5031;
				privilege_list();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 5032;
				Match(ALL);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 5033;
				Match(ALL);
				State = 5034;
				Match(PRIVILEGES);
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 5035;
				Match(ALL);
				State = 5036;
				Match(OPEN_PAREN);
				State = 5037;
				columnlist();
				State = 5038;
				Match(CLOSE_PAREN);
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 5040;
				Match(ALL);
				State = 5041;
				Match(PRIVILEGES);
				State = 5042;
				Match(OPEN_PAREN);
				State = 5043;
				columnlist();
				State = 5044;
				Match(CLOSE_PAREN);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Privilege_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public PrivilegeContext[] privilege() {
			return GetRuleContexts<PrivilegeContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public PrivilegeContext privilege(int i) {
			return GetRuleContext<PrivilegeContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(PostgreSQLParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(PostgreSQLParser.COMMA, i);
		}
		public Privilege_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_privilege_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterPrivilege_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitPrivilege_list(this);
		}
	}

	[RuleVersion(0)]
	public Privilege_listContext privilege_list() {
		Privilege_listContext _localctx = new Privilege_listContext(Context, State);
		EnterRule(_localctx, 558, RULE_privilege_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5048;
			privilege();
			State = 5053;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 5049;
				Match(COMMA);
				State = 5050;
				privilege();
				}
				}
				State = 5055;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrivilegeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SELECT() { return GetToken(PostgreSQLParser.SELECT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Opt_column_listContext opt_column_list() {
			return GetRuleContext<Opt_column_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REFERENCES() { return GetToken(PostgreSQLParser.REFERENCES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CREATE() { return GetToken(PostgreSQLParser.CREATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ColidContext colid() {
			return GetRuleContext<ColidContext>(0);
		}
		public PrivilegeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_privilege; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterPrivilege(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitPrivilege(this);
		}
	}

	[RuleVersion(0)]
	public PrivilegeContext privilege() {
		PrivilegeContext _localctx = new PrivilegeContext(Context, State);
		EnterRule(_localctx, 560, RULE_privilege);
		try {
			State = 5065;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case SELECT:
				EnterOuterAlt(_localctx, 1);
				{
				State = 5056;
				Match(SELECT);
				State = 5057;
				opt_column_list();
				}
				break;
			case REFERENCES:
				EnterOuterAlt(_localctx, 2);
				{
				State = 5058;
				Match(REFERENCES);
				State = 5059;
				opt_column_list();
				}
				break;
			case CREATE:
				EnterOuterAlt(_localctx, 3);
				{
				State = 5060;
				Match(CREATE);
				State = 5061;
				opt_column_list();
				}
				break;
			case AND:
			case ARRAY:
			case COLLATE:
			case COLUMN:
			case CONSTRAINT:
			case DEFAULT:
			case DO:
			case FETCH:
			case TABLE:
			case IS:
			case LEFT:
			case OUTER_P:
			case OVER:
			case RIGHT:
			case ABORT_P:
			case ABSOLUTE_P:
			case ACCESS:
			case ACTION:
			case ADD_P:
			case ADMIN:
			case AFTER:
			case AGGREGATE:
			case ALSO:
			case ALTER:
			case ALWAYS:
			case ASSERTION:
			case ASSIGNMENT:
			case AT:
			case ATTRIBUTE:
			case BACKWARD:
			case BEFORE:
			case BEGIN_P:
			case BY:
			case CACHE:
			case CALLED:
			case CASCADE:
			case CASCADED:
			case CATALOG:
			case CHAIN:
			case CHARACTERISTICS:
			case CHECKPOINT:
			case CLASS:
			case CLOSE:
			case CLUSTER:
			case COMMENT:
			case COMMENTS:
			case COMMIT:
			case COMMITTED:
			case CONFIGURATION:
			case CONNECTION:
			case CONSTRAINTS:
			case CONTENT_P:
			case CONTINUE_P:
			case CONVERSION_P:
			case COPY:
			case COST:
			case CSV:
			case CURSOR:
			case CYCLE:
			case DATA_P:
			case DATABASE:
			case DAY_P:
			case DEALLOCATE:
			case DECLARE:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE_P:
			case DELIMITER:
			case DELIMITERS:
			case DICTIONARY:
			case DISABLE_P:
			case DISCARD:
			case DOCUMENT_P:
			case DOMAIN_P:
			case DOUBLE_P:
			case DROP:
			case EACH:
			case ENABLE_P:
			case ENCODING:
			case ENCRYPTED:
			case ENUM_P:
			case ESCAPE:
			case EVENT:
			case EXCLUDE:
			case EXCLUDING:
			case EXCLUSIVE:
			case EXECUTE:
			case EXPLAIN:
			case EXTENSION:
			case EXTERNAL:
			case FAMILY:
			case FIRST_P:
			case FOLLOWING:
			case FORCE:
			case FORWARD:
			case FUNCTION:
			case FUNCTIONS:
			case GLOBAL:
			case GRANTED:
			case HANDLER:
			case HEADER_P:
			case HOLD:
			case HOUR_P:
			case IDENTITY_P:
			case IF_P:
			case IMMEDIATE:
			case IMMUTABLE:
			case IMPLICIT_P:
			case INCLUDING:
			case INCREMENT:
			case INDEX:
			case INDEXES:
			case INHERIT:
			case INHERITS:
			case INLINE_P:
			case INSENSITIVE:
			case INSERT:
			case INSTEAD:
			case INVOKER:
			case ISOLATION:
			case KEY:
			case LABEL:
			case LANGUAGE:
			case LARGE_P:
			case LAST_P:
			case LEAKPROOF:
			case LEVEL:
			case LISTEN:
			case LOAD:
			case LOCAL:
			case LOCATION:
			case LOCK_P:
			case MAPPING:
			case MATCH:
			case MATERIALIZED:
			case MAXVALUE:
			case MINUTE_P:
			case MINVALUE:
			case MODE:
			case MONTH_P:
			case MOVE:
			case NAME_P:
			case NAMES:
			case NEXT:
			case NO:
			case NOTHING:
			case NOTIFY:
			case NOWAIT:
			case NULLS_P:
			case OBJECT_P:
			case OF:
			case OFF:
			case OIDS:
			case OPERATOR:
			case OPTION:
			case OPTIONS:
			case OWNED:
			case OWNER:
			case PARSER:
			case PARTIAL:
			case PARTITION:
			case PASSING:
			case PASSWORD:
			case PLANS:
			case PRECEDING:
			case PREPARE:
			case PREPARED:
			case PRESERVE:
			case PRIOR:
			case PRIVILEGES:
			case PROCEDURAL:
			case PROCEDURE:
			case PROGRAM:
			case QUOTE:
			case RANGE:
			case READ:
			case REASSIGN:
			case RECHECK:
			case RECURSIVE:
			case REF:
			case REFRESH:
			case REINDEX:
			case RELATIVE_P:
			case RELEASE:
			case RENAME:
			case REPEATABLE:
			case REPLACE:
			case REPLICA:
			case RESET:
			case RESTART:
			case RESTRICT:
			case RETURNS:
			case REVOKE:
			case ROLE:
			case ROLLBACK:
			case ROWS:
			case RULE:
			case SAVEPOINT:
			case SCHEMA:
			case SCROLL:
			case SEARCH:
			case SECOND_P:
			case SECURITY:
			case SEQUENCE:
			case SEQUENCES:
			case SERIALIZABLE:
			case SERVER:
			case SESSION:
			case SET:
			case SHARE:
			case SHOW:
			case SIMPLE:
			case SNAPSHOT:
			case STABLE:
			case STANDALONE_P:
			case START:
			case STATEMENT:
			case STATISTICS:
			case STDIN:
			case STDOUT:
			case STORAGE:
			case STRICT_P:
			case STRIP_P:
			case SYSID:
			case SYSTEM_P:
			case TABLES:
			case TABLESPACE:
			case TEMP:
			case TEMPLATE:
			case TEMPORARY:
			case TEXT_P:
			case TRANSACTION:
			case TRIGGER:
			case TRUNCATE:
			case TRUSTED:
			case TYPE_P:
			case TYPES_P:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNENCRYPTED:
			case UNKNOWN:
			case UNLISTEN:
			case UNLOGGED:
			case UNTIL:
			case UPDATE:
			case VACUUM:
			case VALID:
			case VALIDATE:
			case VALIDATOR:
			case VARYING:
			case VERSION_P:
			case VIEW:
			case VOLATILE:
			case WHITESPACE_P:
			case WITHOUT:
			case WORK:
			case WRAPPER:
			case WRITE:
			case XML_P:
			case YEAR_P:
			case YES_P:
			case ZONE:
			case BETWEEN:
			case BIGINT:
			case BIT:
			case BOOLEAN_P:
			case CHAR_P:
			case CHARACTER:
			case COALESCE:
			case DEC:
			case DECIMAL_P:
			case EXISTS:
			case EXTRACT:
			case FLOAT_P:
			case GREATEST:
			case INOUT:
			case INT_P:
			case INTEGER:
			case INTERVAL:
			case LEAST:
			case NATIONAL:
			case NCHAR:
			case NONE:
			case NULLIF:
			case NUMERIC:
			case OVERLAY:
			case POSITION:
			case PRECISION:
			case REAL:
			case ROW:
			case SETOF:
			case SMALLINT:
			case SUBSTRING:
			case TIME:
			case TIMESTAMP:
			case TREAT:
			case TRIM:
			case VALUES:
			case VARCHAR:
			case XMLATTRIBUTES:
			case XMLCOMMENT:
			case XMLAGG:
			case XML_IS_WELL_FORMED:
			case XML_IS_WELL_FORMED_DOCUMENT:
			case XML_IS_WELL_FORMED_CONTENT:
			case XPATH:
			case XPATH_EXISTS:
			case XMLCONCAT:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLPARSE:
			case XMLPI:
			case XMLROOT:
			case XMLSERIALIZE:
			case CALL:
			case CURRENT_P:
			case ATTACH:
			case DETACH:
			case EXPRESSION:
			case GENERATED:
			case LOGGED:
			case STORED:
			case INCLUDE:
			case ROUTINE:
			case TRANSFORM:
			case IMPORT_P:
			case POLICY:
			case METHOD:
			case REFERENCING:
			case NEW:
			case OLD:
			case VALUE_P:
			case SUBSCRIPTION:
			case PUBLICATION:
			case OUT_P:
			case ROUTINES:
			case SCHEMAS:
			case PROCEDURES:
			case INPUT_P:
			case SUPPORT:
			case PARALLEL:
			case SQL_P:
			case DEPENDS:
			case OVERRIDING:
			case CONFLICT:
			case SKIP_P:
			case LOCKED:
			case TIES:
			case ROLLUP:
			case CUBE:
			case GROUPING:
			case SETS:
			case ORDINALITY:
			case XMLTABLE:
			case COLUMNS:
			case XMLNAMESPACES:
			case ROWTYPE:
			case NORMALIZED:
			case WITHIN:
			case FILTER:
			case GROUPS:
			case OTHERS:
			case NFC:
			case NFD:
			case NFKC:
			case NFKD:
			case UESCAPE:
			case VIEWS:
			case NORMALIZE:
			case DUMP:
			case PRINT_STRICT_PARAMS:
			case VARIABLE_CONFLICT:
			case ERROR:
			case USE_VARIABLE:
			case USE_COLUMN:
			case ALIAS:
			case CONSTANT:
			case PERFORM:
			case GET:
			case DIAGNOSTICS:
			case STACKED:
			case ELSIF:
			case REVERSE:
			case SLICE:
			case EXIT:
			case RETURN:
			case QUERY:
			case RAISE:
			case SQLSTATE:
			case DEBUG:
			case LOG:
			case INFO:
			case NOTICE:
			case WARNING:
			case EXCEPTION:
			case ASSERT:
			case OPEN:
			case ABS:
			case CBRT:
			case CEIL:
			case CEILING:
			case DEGREES:
			case DIV:
			case EXP:
			case FACTORIAL:
			case FLOOR:
			case GCD:
			case LCM:
			case LN:
			case LOG10:
			case MIN_SCALE:
			case MOD:
			case PI:
			case POWER:
			case RADIANS:
			case ROUND:
			case SCALE:
			case SIGN:
			case SQRT:
			case TRIM_SCALE:
			case TRUNC:
			case WIDTH_BUCKET:
			case RANDOM:
			case SETSEED:
			case ACOS:
			case ACOSD:
			case ASIN:
			case ASIND:
			case ATAN:
			case ATAND:
			case ATAN2:
			case ATAN2D:
			case COS:
			case COSD:
			case COT:
			case COTD:
			case SIN:
			case SIND:
			case TAN:
			case TAND:
			case SINH:
			case COSH:
			case TANH:
			case ASINH:
			case ACOSH:
			case ATANH:
			case BIT_LENGTH:
			case CHAR_LENGTH:
			case CHARACTER_LENGTH:
			case LOWER:
			case OCTET_LENGTH:
			case UPPER:
			case ASCII:
			case BTRIM:
			case CHR:
			case CONCAT:
			case CONCAT_WS:
			case FORMAT:
			case INITCAP:
			case LENGTH:
			case LPAD:
			case LTRIM:
			case MD5:
			case PARSE_IDENT:
			case PG_CLIENT_ENCODING:
			case QUOTE_IDENT:
			case QUOTE_LITERAL:
			case QUOTE_NULLABLE:
			case REGEXP_COUNT:
			case REGEXP_INSTR:
			case REGEXP_LIKE:
			case REGEXP_MATCH:
			case REGEXP_MATCHES:
			case REGEXP_REPLACE:
			case REGEXP_SPLIT_TO_ARRAY:
			case REGEXP_SPLIT_TO_TABLE:
			case REGEXP_SUBSTR:
			case REPEAT:
			case RPAD:
			case RTRIM:
			case SPLIT_PART:
			case STARTS_WITH:
			case STRING_TO_ARRAY:
			case STRING_TO_TABLE:
			case STRPOS:
			case SUBSTR:
			case TO_ASCII:
			case TO_HEX:
			case TRANSLATE:
			case UNISTR:
			case AGE:
			case CLOCK_TIMESTAMP:
			case DATE_BIN:
			case DATE_PART:
			case DATE_TRUNC:
			case ISFINITE:
			case JUSTIFY_DAYS:
			case JUSTIFY_HOURS:
			case JUSTIFY_INTERVAL:
			case MAKE_DATE:
			case MAKE_INTERVAL:
			case MAKE_TIME:
			case MAKE_TIMESTAMP:
			case MAKE_TIMESTAMPTZ:
			case NOW:
			case STATEMENT_TIMESTAMP:
			case TIMEOFDAY:
			case TRANSACTION_TIMESTAMP:
			case TO_TIMESTAMP:
			case TO_CHAR:
			case TO_DATE:
			case TO_NUMBER:
			case Identifier:
			case QuotedIdentifier:
			case UnicodeQuotedIdentifier:
			case PLSQLVARIABLENAME:
			case PLSQLIDENTIFIER:
				EnterOuterAlt(_localctx, 4);
				{
				State = 5062;
				colid();
				State = 5063;
				opt_column_list();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Privilege_targetContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Qualified_name_listContext qualified_name_list() {
			return GetRuleContext<Qualified_name_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLE() { return GetToken(PostgreSQLParser.TABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEQUENCE() { return GetToken(PostgreSQLParser.SEQUENCE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOREIGN() { return GetToken(PostgreSQLParser.FOREIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DATA_P() { return GetToken(PostgreSQLParser.DATA_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WRAPPER() { return GetToken(PostgreSQLParser.WRAPPER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Name_listContext name_list() {
			return GetRuleContext<Name_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SERVER() { return GetToken(PostgreSQLParser.SERVER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FUNCTION() { return GetToken(PostgreSQLParser.FUNCTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Function_with_argtypes_listContext function_with_argtypes_list() {
			return GetRuleContext<Function_with_argtypes_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PROCEDURE() { return GetToken(PostgreSQLParser.PROCEDURE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROUTINE() { return GetToken(PostgreSQLParser.ROUTINE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DATABASE() { return GetToken(PostgreSQLParser.DATABASE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOMAIN_P() { return GetToken(PostgreSQLParser.DOMAIN_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Any_name_listContext any_name_list() {
			return GetRuleContext<Any_name_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LANGUAGE() { return GetToken(PostgreSQLParser.LANGUAGE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LARGE_P() { return GetToken(PostgreSQLParser.LARGE_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OBJECT_P() { return GetToken(PostgreSQLParser.OBJECT_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Numericonly_listContext numericonly_list() {
			return GetRuleContext<Numericonly_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SCHEMA() { return GetToken(PostgreSQLParser.SCHEMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLESPACE() { return GetToken(PostgreSQLParser.TABLESPACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TYPE_P() { return GetToken(PostgreSQLParser.TYPE_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALL() { return GetToken(PostgreSQLParser.ALL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLES() { return GetToken(PostgreSQLParser.TABLES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IN_P() { return GetToken(PostgreSQLParser.IN_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEQUENCES() { return GetToken(PostgreSQLParser.SEQUENCES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FUNCTIONS() { return GetToken(PostgreSQLParser.FUNCTIONS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PROCEDURES() { return GetToken(PostgreSQLParser.PROCEDURES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROUTINES() { return GetToken(PostgreSQLParser.ROUTINES, 0); }
		public Privilege_targetContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_privilege_target; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterPrivilege_target(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitPrivilege_target(this);
		}
	}

	[RuleVersion(0)]
	public Privilege_targetContext privilege_target() {
		Privilege_targetContext _localctx = new Privilege_targetContext(Context, State);
		EnterRule(_localctx, 562, RULE_privilege_target);
		try {
			State = 5125;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,239,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 5067;
				qualified_name_list();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 5068;
				Match(TABLE);
				State = 5069;
				qualified_name_list();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 5070;
				Match(SEQUENCE);
				State = 5071;
				qualified_name_list();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 5072;
				Match(FOREIGN);
				State = 5073;
				Match(DATA_P);
				State = 5074;
				Match(WRAPPER);
				State = 5075;
				name_list();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 5076;
				Match(FOREIGN);
				State = 5077;
				Match(SERVER);
				State = 5078;
				name_list();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 5079;
				Match(FUNCTION);
				State = 5080;
				function_with_argtypes_list();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 5081;
				Match(PROCEDURE);
				State = 5082;
				function_with_argtypes_list();
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 5083;
				Match(ROUTINE);
				State = 5084;
				function_with_argtypes_list();
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 5085;
				Match(DATABASE);
				State = 5086;
				name_list();
				}
				break;
			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 5087;
				Match(DOMAIN_P);
				State = 5088;
				any_name_list();
				}
				break;
			case 11:
				EnterOuterAlt(_localctx, 11);
				{
				State = 5089;
				Match(LANGUAGE);
				State = 5090;
				name_list();
				}
				break;
			case 12:
				EnterOuterAlt(_localctx, 12);
				{
				State = 5091;
				Match(LARGE_P);
				State = 5092;
				Match(OBJECT_P);
				State = 5093;
				numericonly_list();
				}
				break;
			case 13:
				EnterOuterAlt(_localctx, 13);
				{
				State = 5094;
				Match(SCHEMA);
				State = 5095;
				name_list();
				}
				break;
			case 14:
				EnterOuterAlt(_localctx, 14);
				{
				State = 5096;
				Match(TABLESPACE);
				State = 5097;
				name_list();
				}
				break;
			case 15:
				EnterOuterAlt(_localctx, 15);
				{
				State = 5098;
				Match(TYPE_P);
				State = 5099;
				any_name_list();
				}
				break;
			case 16:
				EnterOuterAlt(_localctx, 16);
				{
				State = 5100;
				Match(ALL);
				State = 5101;
				Match(TABLES);
				State = 5102;
				Match(IN_P);
				State = 5103;
				Match(SCHEMA);
				State = 5104;
				name_list();
				}
				break;
			case 17:
				EnterOuterAlt(_localctx, 17);
				{
				State = 5105;
				Match(ALL);
				State = 5106;
				Match(SEQUENCES);
				State = 5107;
				Match(IN_P);
				State = 5108;
				Match(SCHEMA);
				State = 5109;
				name_list();
				}
				break;
			case 18:
				EnterOuterAlt(_localctx, 18);
				{
				State = 5110;
				Match(ALL);
				State = 5111;
				Match(FUNCTIONS);
				State = 5112;
				Match(IN_P);
				State = 5113;
				Match(SCHEMA);
				State = 5114;
				name_list();
				}
				break;
			case 19:
				EnterOuterAlt(_localctx, 19);
				{
				State = 5115;
				Match(ALL);
				State = 5116;
				Match(PROCEDURES);
				State = 5117;
				Match(IN_P);
				State = 5118;
				Match(SCHEMA);
				State = 5119;
				name_list();
				}
				break;
			case 20:
				EnterOuterAlt(_localctx, 20);
				{
				State = 5120;
				Match(ALL);
				State = 5121;
				Match(ROUTINES);
				State = 5122;
				Match(IN_P);
				State = 5123;
				Match(SCHEMA);
				State = 5124;
				name_list();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Grantee_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public GranteeContext[] grantee() {
			return GetRuleContexts<GranteeContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public GranteeContext grantee(int i) {
			return GetRuleContext<GranteeContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(PostgreSQLParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(PostgreSQLParser.COMMA, i);
		}
		public Grantee_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_grantee_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterGrantee_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitGrantee_list(this);
		}
	}

	[RuleVersion(0)]
	public Grantee_listContext grantee_list() {
		Grantee_listContext _localctx = new Grantee_listContext(Context, State);
		EnterRule(_localctx, 564, RULE_grantee_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5127;
			grantee();
			State = 5132;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 5128;
				Match(COMMA);
				State = 5129;
				grantee();
				}
				}
				State = 5134;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GranteeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public RolespecContext rolespec() {
			return GetRuleContext<RolespecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GROUP_P() { return GetToken(PostgreSQLParser.GROUP_P, 0); }
		public GranteeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_grantee; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterGrantee(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitGrantee(this);
		}
	}

	[RuleVersion(0)]
	public GranteeContext grantee() {
		GranteeContext _localctx = new GranteeContext(Context, State);
		EnterRule(_localctx, 566, RULE_grantee);
		try {
			State = 5138;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case AND:
			case ARRAY:
			case COLLATE:
			case COLUMN:
			case CONSTRAINT:
			case CURRENT_USER:
			case DEFAULT:
			case DO:
			case FETCH:
			case SESSION_USER:
			case TABLE:
			case AUTHORIZATION:
			case BINARY:
			case COLLATION:
			case CONCURRENTLY:
			case CROSS:
			case CURRENT_SCHEMA:
			case FREEZE:
			case FULL:
			case ILIKE:
			case INNER_P:
			case IS:
			case ISNULL:
			case JOIN:
			case LIKE:
			case NATURAL:
			case NOTNULL:
			case OUTER_P:
			case OVER:
			case OVERLAPS:
			case SIMILAR:
			case VERBOSE:
			case ABORT_P:
			case ABSOLUTE_P:
			case ACCESS:
			case ACTION:
			case ADD_P:
			case ADMIN:
			case AFTER:
			case AGGREGATE:
			case ALSO:
			case ALTER:
			case ALWAYS:
			case ASSERTION:
			case ASSIGNMENT:
			case AT:
			case ATTRIBUTE:
			case BACKWARD:
			case BEFORE:
			case BEGIN_P:
			case BY:
			case CACHE:
			case CALLED:
			case CASCADE:
			case CASCADED:
			case CATALOG:
			case CHAIN:
			case CHARACTERISTICS:
			case CHECKPOINT:
			case CLASS:
			case CLOSE:
			case CLUSTER:
			case COMMENT:
			case COMMENTS:
			case COMMIT:
			case COMMITTED:
			case CONFIGURATION:
			case CONNECTION:
			case CONSTRAINTS:
			case CONTENT_P:
			case CONTINUE_P:
			case CONVERSION_P:
			case COPY:
			case COST:
			case CSV:
			case CURSOR:
			case CYCLE:
			case DATA_P:
			case DATABASE:
			case DAY_P:
			case DEALLOCATE:
			case DECLARE:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE_P:
			case DELIMITER:
			case DELIMITERS:
			case DICTIONARY:
			case DISABLE_P:
			case DISCARD:
			case DOCUMENT_P:
			case DOMAIN_P:
			case DOUBLE_P:
			case DROP:
			case EACH:
			case ENABLE_P:
			case ENCODING:
			case ENCRYPTED:
			case ENUM_P:
			case ESCAPE:
			case EVENT:
			case EXCLUDE:
			case EXCLUDING:
			case EXCLUSIVE:
			case EXECUTE:
			case EXPLAIN:
			case EXTENSION:
			case EXTERNAL:
			case FAMILY:
			case FIRST_P:
			case FOLLOWING:
			case FORCE:
			case FORWARD:
			case FUNCTION:
			case FUNCTIONS:
			case GLOBAL:
			case GRANTED:
			case HANDLER:
			case HEADER_P:
			case HOLD:
			case HOUR_P:
			case IDENTITY_P:
			case IF_P:
			case IMMEDIATE:
			case IMMUTABLE:
			case IMPLICIT_P:
			case INCLUDING:
			case INCREMENT:
			case INDEX:
			case INDEXES:
			case INHERIT:
			case INHERITS:
			case INLINE_P:
			case INSENSITIVE:
			case INSERT:
			case INSTEAD:
			case INVOKER:
			case ISOLATION:
			case KEY:
			case LABEL:
			case LANGUAGE:
			case LARGE_P:
			case LAST_P:
			case LEAKPROOF:
			case LEVEL:
			case LISTEN:
			case LOAD:
			case LOCAL:
			case LOCATION:
			case LOCK_P:
			case MAPPING:
			case MATCH:
			case MATERIALIZED:
			case MAXVALUE:
			case MINUTE_P:
			case MINVALUE:
			case MODE:
			case MONTH_P:
			case MOVE:
			case NAME_P:
			case NAMES:
			case NEXT:
			case NO:
			case NOTHING:
			case NOTIFY:
			case NOWAIT:
			case NULLS_P:
			case OBJECT_P:
			case OF:
			case OFF:
			case OIDS:
			case OPERATOR:
			case OPTION:
			case OPTIONS:
			case OWNED:
			case OWNER:
			case PARSER:
			case PARTIAL:
			case PARTITION:
			case PASSING:
			case PASSWORD:
			case PLANS:
			case PRECEDING:
			case PREPARE:
			case PREPARED:
			case PRESERVE:
			case PRIOR:
			case PRIVILEGES:
			case PROCEDURAL:
			case PROCEDURE:
			case PROGRAM:
			case QUOTE:
			case RANGE:
			case READ:
			case REASSIGN:
			case RECHECK:
			case RECURSIVE:
			case REF:
			case REFRESH:
			case REINDEX:
			case RELATIVE_P:
			case RELEASE:
			case RENAME:
			case REPEATABLE:
			case REPLACE:
			case REPLICA:
			case RESET:
			case RESTART:
			case RESTRICT:
			case RETURNS:
			case REVOKE:
			case ROLE:
			case ROLLBACK:
			case ROWS:
			case RULE:
			case SAVEPOINT:
			case SCHEMA:
			case SCROLL:
			case SEARCH:
			case SECOND_P:
			case SECURITY:
			case SEQUENCE:
			case SEQUENCES:
			case SERIALIZABLE:
			case SERVER:
			case SESSION:
			case SET:
			case SHARE:
			case SHOW:
			case SIMPLE:
			case SNAPSHOT:
			case STABLE:
			case STANDALONE_P:
			case START:
			case STATEMENT:
			case STATISTICS:
			case STDIN:
			case STDOUT:
			case STORAGE:
			case STRICT_P:
			case STRIP_P:
			case SYSID:
			case SYSTEM_P:
			case TABLES:
			case TABLESPACE:
			case TEMP:
			case TEMPLATE:
			case TEMPORARY:
			case TEXT_P:
			case TRANSACTION:
			case TRIGGER:
			case TRUNCATE:
			case TRUSTED:
			case TYPE_P:
			case TYPES_P:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNENCRYPTED:
			case UNKNOWN:
			case UNLISTEN:
			case UNLOGGED:
			case UNTIL:
			case UPDATE:
			case VACUUM:
			case VALID:
			case VALIDATE:
			case VALIDATOR:
			case VARYING:
			case VERSION_P:
			case VIEW:
			case VOLATILE:
			case WHITESPACE_P:
			case WITHOUT:
			case WORK:
			case WRAPPER:
			case WRITE:
			case XML_P:
			case YEAR_P:
			case YES_P:
			case ZONE:
			case BETWEEN:
			case BIGINT:
			case BIT:
			case BOOLEAN_P:
			case CHAR_P:
			case CHARACTER:
			case COALESCE:
			case DEC:
			case DECIMAL_P:
			case EXISTS:
			case EXTRACT:
			case FLOAT_P:
			case GREATEST:
			case INOUT:
			case INT_P:
			case INTEGER:
			case INTERVAL:
			case LEAST:
			case NATIONAL:
			case NCHAR:
			case NONE:
			case NULLIF:
			case NUMERIC:
			case OVERLAY:
			case POSITION:
			case PRECISION:
			case REAL:
			case ROW:
			case SETOF:
			case SMALLINT:
			case SUBSTRING:
			case TIME:
			case TIMESTAMP:
			case TREAT:
			case TRIM:
			case VALUES:
			case VARCHAR:
			case XMLATTRIBUTES:
			case XMLCOMMENT:
			case XMLAGG:
			case XML_IS_WELL_FORMED:
			case XML_IS_WELL_FORMED_DOCUMENT:
			case XML_IS_WELL_FORMED_CONTENT:
			case XPATH:
			case XPATH_EXISTS:
			case XMLCONCAT:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLPARSE:
			case XMLPI:
			case XMLROOT:
			case XMLSERIALIZE:
			case CALL:
			case CURRENT_P:
			case ATTACH:
			case DETACH:
			case EXPRESSION:
			case GENERATED:
			case LOGGED:
			case STORED:
			case INCLUDE:
			case ROUTINE:
			case TRANSFORM:
			case IMPORT_P:
			case POLICY:
			case METHOD:
			case REFERENCING:
			case NEW:
			case OLD:
			case VALUE_P:
			case SUBSCRIPTION:
			case PUBLICATION:
			case OUT_P:
			case ROUTINES:
			case SCHEMAS:
			case PROCEDURES:
			case INPUT_P:
			case SUPPORT:
			case PARALLEL:
			case SQL_P:
			case DEPENDS:
			case OVERRIDING:
			case CONFLICT:
			case SKIP_P:
			case LOCKED:
			case TIES:
			case ROLLUP:
			case CUBE:
			case GROUPING:
			case SETS:
			case TABLESAMPLE:
			case ORDINALITY:
			case XMLTABLE:
			case COLUMNS:
			case XMLNAMESPACES:
			case ROWTYPE:
			case NORMALIZED:
			case WITHIN:
			case FILTER:
			case GROUPS:
			case OTHERS:
			case NFC:
			case NFD:
			case NFKC:
			case NFKD:
			case UESCAPE:
			case VIEWS:
			case NORMALIZE:
			case DUMP:
			case PRINT_STRICT_PARAMS:
			case VARIABLE_CONFLICT:
			case ERROR:
			case USE_VARIABLE:
			case USE_COLUMN:
			case ALIAS:
			case CONSTANT:
			case PERFORM:
			case GET:
			case DIAGNOSTICS:
			case STACKED:
			case ELSIF:
			case REVERSE:
			case SLICE:
			case EXIT:
			case RETURN:
			case QUERY:
			case RAISE:
			case SQLSTATE:
			case DEBUG:
			case LOG:
			case INFO:
			case NOTICE:
			case WARNING:
			case EXCEPTION:
			case ASSERT:
			case OPEN:
			case ABS:
			case CBRT:
			case CEIL:
			case CEILING:
			case DEGREES:
			case DIV:
			case EXP:
			case FACTORIAL:
			case FLOOR:
			case GCD:
			case LCM:
			case LN:
			case LOG10:
			case MIN_SCALE:
			case MOD:
			case PI:
			case POWER:
			case RADIANS:
			case ROUND:
			case SCALE:
			case SIGN:
			case SQRT:
			case TRIM_SCALE:
			case TRUNC:
			case WIDTH_BUCKET:
			case RANDOM:
			case SETSEED:
			case ACOS:
			case ACOSD:
			case ASIN:
			case ASIND:
			case ATAN:
			case ATAND:
			case ATAN2:
			case ATAN2D:
			case COS:
			case COSD:
			case COT:
			case COTD:
			case SIN:
			case SIND:
			case TAN:
			case TAND:
			case SINH:
			case COSH:
			case TANH:
			case ASINH:
			case ACOSH:
			case ATANH:
			case BIT_LENGTH:
			case CHAR_LENGTH:
			case CHARACTER_LENGTH:
			case LOWER:
			case OCTET_LENGTH:
			case UPPER:
			case ASCII:
			case BTRIM:
			case CHR:
			case CONCAT:
			case CONCAT_WS:
			case FORMAT:
			case INITCAP:
			case LENGTH:
			case LPAD:
			case LTRIM:
			case MD5:
			case PARSE_IDENT:
			case PG_CLIENT_ENCODING:
			case QUOTE_IDENT:
			case QUOTE_LITERAL:
			case QUOTE_NULLABLE:
			case REGEXP_COUNT:
			case REGEXP_INSTR:
			case REGEXP_LIKE:
			case REGEXP_MATCH:
			case REGEXP_MATCHES:
			case REGEXP_REPLACE:
			case REGEXP_SPLIT_TO_ARRAY:
			case REGEXP_SPLIT_TO_TABLE:
			case REGEXP_SUBSTR:
			case REPEAT:
			case RPAD:
			case RTRIM:
			case SPLIT_PART:
			case STARTS_WITH:
			case STRING_TO_ARRAY:
			case STRING_TO_TABLE:
			case STRPOS:
			case SUBSTR:
			case TO_ASCII:
			case TO_HEX:
			case TRANSLATE:
			case UNISTR:
			case AGE:
			case CLOCK_TIMESTAMP:
			case DATE_BIN:
			case DATE_PART:
			case DATE_TRUNC:
			case ISFINITE:
			case JUSTIFY_DAYS:
			case JUSTIFY_HOURS:
			case JUSTIFY_INTERVAL:
			case MAKE_DATE:
			case MAKE_INTERVAL:
			case MAKE_TIME:
			case MAKE_TIMESTAMP:
			case MAKE_TIMESTAMPTZ:
			case NOW:
			case STATEMENT_TIMESTAMP:
			case TIMEOFDAY:
			case TRANSACTION_TIMESTAMP:
			case TO_TIMESTAMP:
			case TO_CHAR:
			case TO_DATE:
			case TO_NUMBER:
			case Identifier:
			case QuotedIdentifier:
			case UnicodeQuotedIdentifier:
			case PLSQLVARIABLENAME:
			case PLSQLIDENTIFIER:
				EnterOuterAlt(_localctx, 1);
				{
				State = 5135;
				rolespec();
				}
				break;
			case GROUP_P:
				EnterOuterAlt(_localctx, 2);
				{
				State = 5136;
				Match(GROUP_P);
				State = 5137;
				rolespec();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Opt_grant_grant_optionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WITH() { return GetToken(PostgreSQLParser.WITH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GRANT() { return GetToken(PostgreSQLParser.GRANT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPTION() { return GetToken(PostgreSQLParser.OPTION, 0); }
		public Opt_grant_grant_optionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_opt_grant_grant_option; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterOpt_grant_grant_option(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitOpt_grant_grant_option(this);
		}
	}

	[RuleVersion(0)]
	public Opt_grant_grant_optionContext opt_grant_grant_option() {
		Opt_grant_grant_optionContext _localctx = new Opt_grant_grant_optionContext(Context, State);
		EnterRule(_localctx, 568, RULE_opt_grant_grant_option);
		try {
			State = 5144;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,242,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 5140;
				Match(WITH);
				State = 5141;
				Match(GRANT);
				State = 5142;
				Match(OPTION);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GrantrolestmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GRANT() { return GetToken(PostgreSQLParser.GRANT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Privilege_listContext privilege_list() {
			return GetRuleContext<Privilege_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TO() { return GetToken(PostgreSQLParser.TO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Role_listContext role_list() {
			return GetRuleContext<Role_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Opt_grant_admin_optionContext opt_grant_admin_option() {
			return GetRuleContext<Opt_grant_admin_optionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Opt_granted_byContext opt_granted_by() {
			return GetRuleContext<Opt_granted_byContext>(0);
		}
		public GrantrolestmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_grantrolestmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterGrantrolestmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitGrantrolestmt(this);
		}
	}

	[RuleVersion(0)]
	public GrantrolestmtContext grantrolestmt() {
		GrantrolestmtContext _localctx = new GrantrolestmtContext(Context, State);
		EnterRule(_localctx, 570, RULE_grantrolestmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5146;
			Match(GRANT);
			State = 5147;
			privilege_list();
			State = 5148;
			Match(TO);
			State = 5149;
			role_list();
			State = 5150;
			opt_grant_admin_option();
			State = 5151;
			opt_granted_by();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RevokerolestmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REVOKE() { return GetToken(PostgreSQLParser.REVOKE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Privilege_listContext privilege_list() {
			return GetRuleContext<Privilege_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FROM() { return GetToken(PostgreSQLParser.FROM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Role_listContext role_list() {
			return GetRuleContext<Role_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Opt_granted_byContext opt_granted_by() {
			return GetRuleContext<Opt_granted_byContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Opt_drop_behaviorContext opt_drop_behavior() {
			return GetRuleContext<Opt_drop_behaviorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ADMIN() { return GetToken(PostgreSQLParser.ADMIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPTION() { return GetToken(PostgreSQLParser.OPTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOR() { return GetToken(PostgreSQLParser.FOR, 0); }
		public RevokerolestmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_revokerolestmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterRevokerolestmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitRevokerolestmt(this);
		}
	}

	[RuleVersion(0)]
	public RevokerolestmtContext revokerolestmt() {
		RevokerolestmtContext _localctx = new RevokerolestmtContext(Context, State);
		EnterRule(_localctx, 572, RULE_revokerolestmt);
		try {
			State = 5170;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,243,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 5153;
				Match(REVOKE);
				State = 5154;
				privilege_list();
				State = 5155;
				Match(FROM);
				State = 5156;
				role_list();
				State = 5157;
				opt_granted_by();
				State = 5158;
				opt_drop_behavior();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 5160;
				Match(REVOKE);
				State = 5161;
				Match(ADMIN);
				State = 5162;
				Match(OPTION);
				State = 5163;
				Match(FOR);
				State = 5164;
				privilege_list();
				State = 5165;
				Match(FROM);
				State = 5166;
				role_list();
				State = 5167;
				opt_granted_by();
				State = 5168;
				opt_drop_behavior();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Opt_grant_admin_optionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WITH() { return GetToken(PostgreSQLParser.WITH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ADMIN() { return GetToken(PostgreSQLParser.ADMIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPTION() { return GetToken(PostgreSQLParser.OPTION, 0); }
		public Opt_grant_admin_optionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_opt_grant_admin_option; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterOpt_grant_admin_option(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitOpt_grant_admin_option(this);
		}
	}

	[RuleVersion(0)]
	public Opt_grant_admin_optionContext opt_grant_admin_option() {
		Opt_grant_admin_optionContext _localctx = new Opt_grant_admin_optionContext(Context, State);
		EnterRule(_localctx, 574, RULE_opt_grant_admin_option);
		try {
			State = 5176;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,244,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 5172;
				Match(WITH);
				State = 5173;
				Match(ADMIN);
				State = 5174;
				Match(OPTION);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Opt_granted_byContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GRANTED() { return GetToken(PostgreSQLParser.GRANTED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BY() { return GetToken(PostgreSQLParser.BY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public RolespecContext rolespec() {
			return GetRuleContext<RolespecContext>(0);
		}
		public Opt_granted_byContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_opt_granted_by; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterOpt_granted_by(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitOpt_granted_by(this);
		}
	}

	[RuleVersion(0)]
	public Opt_granted_byContext opt_granted_by() {
		Opt_granted_byContext _localctx = new Opt_granted_byContext(Context, State);
		EnterRule(_localctx, 576, RULE_opt_granted_by);
		try {
			State = 5182;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case GRANTED:
				EnterOuterAlt(_localctx, 1);
				{
				State = 5178;
				Match(GRANTED);
				State = 5179;
				Match(BY);
				State = 5180;
				rolespec();
				}
				break;
			case Eof:
			case OPEN_PAREN:
			case SEMI:
			case ANALYSE:
			case ANALYZE:
			case CREATE:
			case DO:
			case FETCH:
			case GRANT:
			case INTO:
			case SELECT:
			case TABLE:
			case WITH:
			case ABORT_P:
			case ALTER:
			case BEGIN_P:
			case CASCADE:
			case CHECKPOINT:
			case CLOSE:
			case CLUSTER:
			case COMMENT:
			case COMMIT:
			case COPY:
			case DEALLOCATE:
			case DECLARE:
			case DELETE_P:
			case DISCARD:
			case DROP:
			case EXECUTE:
			case EXPLAIN:
			case INSERT:
			case LISTEN:
			case LOAD:
			case LOCK_P:
			case MERGE:
			case MOVE:
			case NOTIFY:
			case PREPARE:
			case REASSIGN:
			case REFRESH:
			case REINDEX:
			case RELEASE:
			case RESET:
			case RESTRICT:
			case REVOKE:
			case ROLLBACK:
			case SAVEPOINT:
			case SECURITY:
			case SET:
			case SHOW:
			case START:
			case TRUNCATE:
			case UNLISTEN:
			case UPDATE:
			case VACUUM:
			case VALUES:
			case CALL:
			case IMPORT_P:
			case END_P:
			case MetaCommand:
				EnterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AlterdefaultprivilegesstmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALTER() { return GetToken(PostgreSQLParser.ALTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFAULT() { return GetToken(PostgreSQLParser.DEFAULT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PRIVILEGES() { return GetToken(PostgreSQLParser.PRIVILEGES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public DefacloptionlistContext defacloptionlist() {
			return GetRuleContext<DefacloptionlistContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DefaclactionContext defaclaction() {
			return GetRuleContext<DefaclactionContext>(0);
		}
		public AlterdefaultprivilegesstmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alterdefaultprivilegesstmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterAlterdefaultprivilegesstmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitAlterdefaultprivilegesstmt(this);
		}
	}

	[RuleVersion(0)]
	public AlterdefaultprivilegesstmtContext alterdefaultprivilegesstmt() {
		AlterdefaultprivilegesstmtContext _localctx = new AlterdefaultprivilegesstmtContext(Context, State);
		EnterRule(_localctx, 578, RULE_alterdefaultprivilegesstmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5184;
			Match(ALTER);
			State = 5185;
			Match(DEFAULT);
			State = 5186;
			Match(PRIVILEGES);
			State = 5187;
			defacloptionlist();
			State = 5188;
			defaclaction();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DefacloptionlistContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DefacloptionContext[] defacloption() {
			return GetRuleContexts<DefacloptionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public DefacloptionContext defacloption(int i) {
			return GetRuleContext<DefacloptionContext>(i);
		}
		public DefacloptionlistContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_defacloptionlist; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterDefacloptionlist(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitDefacloptionlist(this);
		}
	}

	[RuleVersion(0)]
	public DefacloptionlistContext defacloptionlist() {
		DefacloptionlistContext _localctx = new DefacloptionlistContext(Context, State);
		EnterRule(_localctx, 580, RULE_defacloptionlist);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5193;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==FOR || _la==IN_P) {
				{
				{
				State = 5190;
				defacloption();
				}
				}
				State = 5195;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DefacloptionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IN_P() { return GetToken(PostgreSQLParser.IN_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SCHEMA() { return GetToken(PostgreSQLParser.SCHEMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Name_listContext name_list() {
			return GetRuleContext<Name_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOR() { return GetToken(PostgreSQLParser.FOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROLE() { return GetToken(PostgreSQLParser.ROLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Role_listContext role_list() {
			return GetRuleContext<Role_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode USER() { return GetToken(PostgreSQLParser.USER, 0); }
		public DefacloptionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_defacloption; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterDefacloption(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitDefacloption(this);
		}
	}

	[RuleVersion(0)]
	public DefacloptionContext defacloption() {
		DefacloptionContext _localctx = new DefacloptionContext(Context, State);
		EnterRule(_localctx, 582, RULE_defacloption);
		try {
			State = 5205;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,247,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 5196;
				Match(IN_P);
				State = 5197;
				Match(SCHEMA);
				State = 5198;
				name_list();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 5199;
				Match(FOR);
				State = 5200;
				Match(ROLE);
				State = 5201;
				role_list();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 5202;
				Match(FOR);
				State = 5203;
				Match(USER);
				State = 5204;
				role_list();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DefaclactionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GRANT() { return GetToken(PostgreSQLParser.GRANT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public PrivilegesContext privileges() {
			return GetRuleContext<PrivilegesContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ON() { return GetToken(PostgreSQLParser.ON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Defacl_privilege_targetContext defacl_privilege_target() {
			return GetRuleContext<Defacl_privilege_targetContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TO() { return GetToken(PostgreSQLParser.TO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Grantee_listContext grantee_list() {
			return GetRuleContext<Grantee_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Opt_grant_grant_optionContext opt_grant_grant_option() {
			return GetRuleContext<Opt_grant_grant_optionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REVOKE() { return GetToken(PostgreSQLParser.REVOKE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FROM() { return GetToken(PostgreSQLParser.FROM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Opt_drop_behaviorContext opt_drop_behavior() {
			return GetRuleContext<Opt_drop_behaviorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPTION() { return GetToken(PostgreSQLParser.OPTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOR() { return GetToken(PostgreSQLParser.FOR, 0); }
		public DefaclactionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_defaclaction; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterDefaclaction(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitDefaclaction(this);
		}
	}

	[RuleVersion(0)]
	public DefaclactionContext defaclaction() {
		DefaclactionContext _localctx = new DefaclactionContext(Context, State);
		EnterRule(_localctx, 584, RULE_defaclaction);
		try {
			State = 5234;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,248,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 5207;
				Match(GRANT);
				State = 5208;
				privileges();
				State = 5209;
				Match(ON);
				State = 5210;
				defacl_privilege_target();
				State = 5211;
				Match(TO);
				State = 5212;
				grantee_list();
				State = 5213;
				opt_grant_grant_option();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 5215;
				Match(REVOKE);
				State = 5216;
				privileges();
				State = 5217;
				Match(ON);
				State = 5218;
				defacl_privilege_target();
				State = 5219;
				Match(FROM);
				State = 5220;
				grantee_list();
				State = 5221;
				opt_drop_behavior();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 5223;
				Match(REVOKE);
				State = 5224;
				Match(GRANT);
				State = 5225;
				Match(OPTION);
				State = 5226;
				Match(FOR);
				State = 5227;
				privileges();
				State = 5228;
				Match(ON);
				State = 5229;
				defacl_privilege_target();
				State = 5230;
				Match(FROM);
				State = 5231;
				grantee_list();
				State = 5232;
				opt_drop_behavior();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Defacl_privilege_targetContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLES() { return GetToken(PostgreSQLParser.TABLES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FUNCTIONS() { return GetToken(PostgreSQLParser.FUNCTIONS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROUTINES() { return GetToken(PostgreSQLParser.ROUTINES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEQUENCES() { return GetToken(PostgreSQLParser.SEQUENCES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TYPES_P() { return GetToken(PostgreSQLParser.TYPES_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SCHEMAS() { return GetToken(PostgreSQLParser.SCHEMAS, 0); }
		public Defacl_privilege_targetContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_defacl_privilege_target; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterDefacl_privilege_target(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitDefacl_privilege_target(this);
		}
	}

	[RuleVersion(0)]
	public Defacl_privilege_targetContext defacl_privilege_target() {
		Defacl_privilege_targetContext _localctx = new Defacl_privilege_targetContext(Context, State);
		EnterRule(_localctx, 586, RULE_defacl_privilege_target);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5236;
			_la = TokenStream.LA(1);
			if ( !(_la==FUNCTIONS || (((_la - 323)) & ~0x3f) == 0 && ((1L << (_la - 323)) & 4297064449L) != 0 || _la==ROUTINES || _la==SCHEMAS) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IndexstmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CREATE() { return GetToken(PostgreSQLParser.CREATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Opt_uniqueContext opt_unique() {
			return GetRuleContext<Opt_uniqueContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INDEX() { return GetToken(PostgreSQLParser.INDEX, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Opt_concurrentlyContext opt_concurrently() {
			return GetRuleContext<Opt_concurrentlyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Opt_index_nameContext opt_index_name() {
			return GetRuleContext<Opt_index_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ON() { return GetToken(PostgreSQLParser.ON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Relation_exprContext relation_expr() {
			return GetRuleContext<Relation_exprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Access_method_clauseContext access_method_clause() {
			return GetRuleContext<Access_method_clauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAREN() { return GetToken(PostgreSQLParser.OPEN_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Index_paramsContext index_params() {
			return GetRuleContext<Index_paramsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAREN() { return GetToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Opt_includeContext opt_include() {
			return GetRuleContext<Opt_includeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Opt_reloptionsContext opt_reloptions() {
			return GetRuleContext<Opt_reloptionsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public OpttablespaceContext opttablespace() {
			return GetRuleContext<OpttablespaceContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Where_clauseContext where_clause() {
			return GetRuleContext<Where_clauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF_P() { return GetToken(PostgreSQLParser.IF_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT() { return GetToken(PostgreSQLParser.NOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXISTS() { return GetToken(PostgreSQLParser.EXISTS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		public IndexstmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_indexstmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterIndexstmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitIndexstmt(this);
		}
	}

	[RuleVersion(0)]
	public IndexstmtContext indexstmt() {
		IndexstmtContext _localctx = new IndexstmtContext(Context, State);
		EnterRule(_localctx, 588, RULE_indexstmt);
		try {
			State = 5273;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,249,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 5238;
				Match(CREATE);
				State = 5239;
				opt_unique();
				State = 5240;
				Match(INDEX);
				State = 5241;
				opt_concurrently();
				State = 5242;
				opt_index_name();
				State = 5243;
				Match(ON);
				State = 5244;
				relation_expr();
				State = 5245;
				access_method_clause();
				State = 5246;
				Match(OPEN_PAREN);
				State = 5247;
				index_params();
				State = 5248;
				Match(CLOSE_PAREN);
				State = 5249;
				opt_include();
				State = 5250;
				opt_reloptions();
				State = 5251;
				opttablespace();
				State = 5252;
				where_clause();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 5254;
				Match(CREATE);
				State = 5255;
				opt_unique();
				State = 5256;
				Match(INDEX);
				State = 5257;
				opt_concurrently();
				State = 5258;
				Match(IF_P);
				State = 5259;
				Match(NOT);
				State = 5260;
				Match(EXISTS);
				State = 5261;
				name();
				State = 5262;
				Match(ON);
				State = 5263;
				relation_expr();
				State = 5264;
				access_method_clause();
				State = 5265;
				Match(OPEN_PAREN);
				State = 5266;
				index_params();
				State = 5267;
				Match(CLOSE_PAREN);
				State = 5268;
				opt_include();
				State = 5269;
				opt_reloptions();
				State = 5270;
				opttablespace();
				State = 5271;
				where_clause();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Opt_uniqueContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNIQUE() { return GetToken(PostgreSQLParser.UNIQUE, 0); }
		public Opt_uniqueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_opt_unique; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterOpt_unique(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitOpt_unique(this);
		}
	}

	[RuleVersion(0)]
	public Opt_uniqueContext opt_unique() {
		Opt_uniqueContext _localctx = new Opt_uniqueContext(Context, State);
		EnterRule(_localctx, 590, RULE_opt_unique);
		try {
			State = 5277;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case UNIQUE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 5275;
				Match(UNIQUE);
				}
				break;
			case INDEX:
				EnterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Opt_concurrentlyContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONCURRENTLY() { return GetToken(PostgreSQLParser.CONCURRENTLY, 0); }
		public Opt_concurrentlyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_opt_concurrently; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterOpt_concurrently(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitOpt_concurrently(this);
		}
	}

	[RuleVersion(0)]
	public Opt_concurrentlyContext opt_concurrently() {
		Opt_concurrentlyContext _localctx = new Opt_concurrentlyContext(Context, State);
		EnterRule(_localctx, 592, RULE_opt_concurrently);
		try {
			State = 5281;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case CONCURRENTLY:
				EnterOuterAlt(_localctx, 1);
				{
				State = 5279;
				Match(CONCURRENTLY);
				}
				break;
			case AND:
			case ARRAY:
			case COLLATE:
			case COLUMN:
			case CONSTRAINT:
			case DEFAULT:
			case DO:
			case FETCH:
			case ON:
			case TABLE:
			case IS:
			case LEFT:
			case OUTER_P:
			case OVER:
			case RIGHT:
			case ABORT_P:
			case ABSOLUTE_P:
			case ACCESS:
			case ACTION:
			case ADD_P:
			case ADMIN:
			case AFTER:
			case AGGREGATE:
			case ALSO:
			case ALTER:
			case ALWAYS:
			case ASSERTION:
			case ASSIGNMENT:
			case AT:
			case ATTRIBUTE:
			case BACKWARD:
			case BEFORE:
			case BEGIN_P:
			case BY:
			case CACHE:
			case CALLED:
			case CASCADE:
			case CASCADED:
			case CATALOG:
			case CHAIN:
			case CHARACTERISTICS:
			case CHECKPOINT:
			case CLASS:
			case CLOSE:
			case CLUSTER:
			case COMMENT:
			case COMMENTS:
			case COMMIT:
			case COMMITTED:
			case CONFIGURATION:
			case CONNECTION:
			case CONSTRAINTS:
			case CONTENT_P:
			case CONTINUE_P:
			case CONVERSION_P:
			case COPY:
			case COST:
			case CSV:
			case CURSOR:
			case CYCLE:
			case DATA_P:
			case DATABASE:
			case DAY_P:
			case DEALLOCATE:
			case DECLARE:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE_P:
			case DELIMITER:
			case DELIMITERS:
			case DICTIONARY:
			case DISABLE_P:
			case DISCARD:
			case DOCUMENT_P:
			case DOMAIN_P:
			case DOUBLE_P:
			case DROP:
			case EACH:
			case ENABLE_P:
			case ENCODING:
			case ENCRYPTED:
			case ENUM_P:
			case ESCAPE:
			case EVENT:
			case EXCLUDE:
			case EXCLUDING:
			case EXCLUSIVE:
			case EXECUTE:
			case EXPLAIN:
			case EXTENSION:
			case EXTERNAL:
			case FAMILY:
			case FIRST_P:
			case FOLLOWING:
			case FORCE:
			case FORWARD:
			case FUNCTION:
			case FUNCTIONS:
			case GLOBAL:
			case GRANTED:
			case HANDLER:
			case HEADER_P:
			case HOLD:
			case HOUR_P:
			case IDENTITY_P:
			case IF_P:
			case IMMEDIATE:
			case IMMUTABLE:
			case IMPLICIT_P:
			case INCLUDING:
			case INCREMENT:
			case INDEX:
			case INDEXES:
			case INHERIT:
			case INHERITS:
			case INLINE_P:
			case INSENSITIVE:
			case INSERT:
			case INSTEAD:
			case INVOKER:
			case ISOLATION:
			case KEY:
			case LABEL:
			case LANGUAGE:
			case LARGE_P:
			case LAST_P:
			case LEAKPROOF:
			case LEVEL:
			case LISTEN:
			case LOAD:
			case LOCAL:
			case LOCATION:
			case LOCK_P:
			case MAPPING:
			case MATCH:
			case MATERIALIZED:
			case MAXVALUE:
			case MINUTE_P:
			case MINVALUE:
			case MODE:
			case MONTH_P:
			case MOVE:
			case NAME_P:
			case NAMES:
			case NEXT:
			case NO:
			case NOTHING:
			case NOTIFY:
			case NOWAIT:
			case NULLS_P:
			case OBJECT_P:
			case OF:
			case OFF:
			case OIDS:
			case OPERATOR:
			case OPTION:
			case OPTIONS:
			case OWNED:
			case OWNER:
			case PARSER:
			case PARTIAL:
			case PARTITION:
			case PASSING:
			case PASSWORD:
			case PLANS:
			case PRECEDING:
			case PREPARE:
			case PREPARED:
			case PRESERVE:
			case PRIOR:
			case PRIVILEGES:
			case PROCEDURAL:
			case PROCEDURE:
			case PROGRAM:
			case QUOTE:
			case RANGE:
			case READ:
			case REASSIGN:
			case RECHECK:
			case RECURSIVE:
			case REF:
			case REFRESH:
			case REINDEX:
			case RELATIVE_P:
			case RELEASE:
			case RENAME:
			case REPEATABLE:
			case REPLACE:
			case REPLICA:
			case RESET:
			case RESTART:
			case RESTRICT:
			case RETURNS:
			case REVOKE:
			case ROLE:
			case ROLLBACK:
			case ROWS:
			case RULE:
			case SAVEPOINT:
			case SCHEMA:
			case SCROLL:
			case SEARCH:
			case SECOND_P:
			case SECURITY:
			case SEQUENCE:
			case SEQUENCES:
			case SERIALIZABLE:
			case SERVER:
			case SESSION:
			case SET:
			case SHARE:
			case SHOW:
			case SIMPLE:
			case SNAPSHOT:
			case STABLE:
			case STANDALONE_P:
			case START:
			case STATEMENT:
			case STATISTICS:
			case STDIN:
			case STDOUT:
			case STORAGE:
			case STRICT_P:
			case STRIP_P:
			case SYSID:
			case SYSTEM_P:
			case TABLES:
			case TABLESPACE:
			case TEMP:
			case TEMPLATE:
			case TEMPORARY:
			case TEXT_P:
			case TRANSACTION:
			case TRIGGER:
			case TRUNCATE:
			case TRUSTED:
			case TYPE_P:
			case TYPES_P:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNENCRYPTED:
			case UNKNOWN:
			case UNLISTEN:
			case UNLOGGED:
			case UNTIL:
			case UPDATE:
			case VACUUM:
			case VALID:
			case VALIDATE:
			case VALIDATOR:
			case VARYING:
			case VERSION_P:
			case VIEW:
			case VOLATILE:
			case WHITESPACE_P:
			case WITHOUT:
			case WORK:
			case WRAPPER:
			case WRITE:
			case XML_P:
			case YEAR_P:
			case YES_P:
			case ZONE:
			case BETWEEN:
			case BIGINT:
			case BIT:
			case BOOLEAN_P:
			case CHAR_P:
			case CHARACTER:
			case COALESCE:
			case DEC:
			case DECIMAL_P:
			case EXISTS:
			case EXTRACT:
			case FLOAT_P:
			case GREATEST:
			case INOUT:
			case INT_P:
			case INTEGER:
			case INTERVAL:
			case LEAST:
			case NATIONAL:
			case NCHAR:
			case NONE:
			case NULLIF:
			case NUMERIC:
			case OVERLAY:
			case POSITION:
			case PRECISION:
			case REAL:
			case ROW:
			case SETOF:
			case SMALLINT:
			case SUBSTRING:
			case TIME:
			case TIMESTAMP:
			case TREAT:
			case TRIM:
			case VALUES:
			case VARCHAR:
			case XMLATTRIBUTES:
			case XMLCOMMENT:
			case XMLAGG:
			case XML_IS_WELL_FORMED:
			case XML_IS_WELL_FORMED_DOCUMENT:
			case XML_IS_WELL_FORMED_CONTENT:
			case XPATH:
			case XPATH_EXISTS:
			case XMLCONCAT:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLPARSE:
			case XMLPI:
			case XMLROOT:
			case XMLSERIALIZE:
			case CALL:
			case CURRENT_P:
			case ATTACH:
			case DETACH:
			case EXPRESSION:
			case GENERATED:
			case LOGGED:
			case STORED:
			case INCLUDE:
			case ROUTINE:
			case TRANSFORM:
			case IMPORT_P:
			case POLICY:
			case METHOD:
			case REFERENCING:
			case NEW:
			case OLD:
			case VALUE_P:
			case SUBSCRIPTION:
			case PUBLICATION:
			case OUT_P:
			case ROUTINES:
			case SCHEMAS:
			case PROCEDURES:
			case INPUT_P:
			case SUPPORT:
			case PARALLEL:
			case SQL_P:
			case DEPENDS:
			case OVERRIDING:
			case CONFLICT:
			case SKIP_P:
			case LOCKED:
			case TIES:
			case ROLLUP:
			case CUBE:
			case GROUPING:
			case SETS:
			case ORDINALITY:
			case XMLTABLE:
			case COLUMNS:
			case XMLNAMESPACES:
			case ROWTYPE:
			case NORMALIZED:
			case WITHIN:
			case FILTER:
			case GROUPS:
			case OTHERS:
			case NFC:
			case NFD:
			case NFKC:
			case NFKD:
			case UESCAPE:
			case VIEWS:
			case NORMALIZE:
			case DUMP:
			case PRINT_STRICT_PARAMS:
			case VARIABLE_CONFLICT:
			case ERROR:
			case USE_VARIABLE:
			case USE_COLUMN:
			case ALIAS:
			case CONSTANT:
			case PERFORM:
			case GET:
			case DIAGNOSTICS:
			case STACKED:
			case ELSIF:
			case REVERSE:
			case SLICE:
			case EXIT:
			case RETURN:
			case QUERY:
			case RAISE:
			case SQLSTATE:
			case DEBUG:
			case LOG:
			case INFO:
			case NOTICE:
			case WARNING:
			case EXCEPTION:
			case ASSERT:
			case OPEN:
			case ABS:
			case CBRT:
			case CEIL:
			case CEILING:
			case DEGREES:
			case DIV:
			case EXP:
			case FACTORIAL:
			case FLOOR:
			case GCD:
			case LCM:
			case LN:
			case LOG10:
			case MIN_SCALE:
			case MOD:
			case PI:
			case POWER:
			case RADIANS:
			case ROUND:
			case SCALE:
			case SIGN:
			case SQRT:
			case TRIM_SCALE:
			case TRUNC:
			case WIDTH_BUCKET:
			case RANDOM:
			case SETSEED:
			case ACOS:
			case ACOSD:
			case ASIN:
			case ASIND:
			case ATAN:
			case ATAND:
			case ATAN2:
			case ATAN2D:
			case COS:
			case COSD:
			case COT:
			case COTD:
			case SIN:
			case SIND:
			case TAN:
			case TAND:
			case SINH:
			case COSH:
			case TANH:
			case ASINH:
			case ACOSH:
			case ATANH:
			case BIT_LENGTH:
			case CHAR_LENGTH:
			case CHARACTER_LENGTH:
			case LOWER:
			case OCTET_LENGTH:
			case UPPER:
			case ASCII:
			case BTRIM:
			case CHR:
			case CONCAT:
			case CONCAT_WS:
			case FORMAT:
			case INITCAP:
			case LENGTH:
			case LPAD:
			case LTRIM:
			case MD5:
			case PARSE_IDENT:
			case PG_CLIENT_ENCODING:
			case QUOTE_IDENT:
			case QUOTE_LITERAL:
			case QUOTE_NULLABLE:
			case REGEXP_COUNT:
			case REGEXP_INSTR:
			case REGEXP_LIKE:
			case REGEXP_MATCH:
			case REGEXP_MATCHES:
			case REGEXP_REPLACE:
			case REGEXP_SPLIT_TO_ARRAY:
			case REGEXP_SPLIT_TO_TABLE:
			case REGEXP_SUBSTR:
			case REPEAT:
			case RPAD:
			case RTRIM:
			case SPLIT_PART:
			case STARTS_WITH:
			case STRING_TO_ARRAY:
			case STRING_TO_TABLE:
			case STRPOS:
			case SUBSTR:
			case TO_ASCII:
			case TO_HEX:
			case TRANSLATE:
			case UNISTR:
			case AGE:
			case CLOCK_TIMESTAMP:
			case DATE_BIN:
			case DATE_PART:
			case DATE_TRUNC:
			case ISFINITE:
			case JUSTIFY_DAYS:
			case JUSTIFY_HOURS:
			case JUSTIFY_INTERVAL:
			case MAKE_DATE:
			case MAKE_INTERVAL:
			case MAKE_TIME:
			case MAKE_TIMESTAMP:
			case MAKE_TIMESTAMPTZ:
			case NOW:
			case STATEMENT_TIMESTAMP:
			case TIMEOFDAY:
			case TRANSACTION_TIMESTAMP:
			case TO_TIMESTAMP:
			case TO_CHAR:
			case TO_DATE:
			case TO_NUMBER:
			case Identifier:
			case QuotedIdentifier:
			case UnicodeQuotedIdentifier:
			case PLSQLVARIABLENAME:
			case PLSQLIDENTIFIER:
				EnterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Opt_index_nameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		public Opt_index_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_opt_index_name; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterOpt_index_name(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitOpt_index_name(this);
		}
	}

	[RuleVersion(0)]
	public Opt_index_nameContext opt_index_name() {
		Opt_index_nameContext _localctx = new Opt_index_nameContext(Context, State);
		EnterRule(_localctx, 594, RULE_opt_index_name);
		try {
			State = 5285;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case AND:
			case ARRAY:
			case COLLATE:
			case COLUMN:
			case CONSTRAINT:
			case DEFAULT:
			case DO:
			case FETCH:
			case TABLE:
			case IS:
			case LEFT:
			case OUTER_P:
			case OVER:
			case RIGHT:
			case ABORT_P:
			case ABSOLUTE_P:
			case ACCESS:
			case ACTION:
			case ADD_P:
			case ADMIN:
			case AFTER:
			case AGGREGATE:
			case ALSO:
			case ALTER:
			case ALWAYS:
			case ASSERTION:
			case ASSIGNMENT:
			case AT:
			case ATTRIBUTE:
			case BACKWARD:
			case BEFORE:
			case BEGIN_P:
			case BY:
			case CACHE:
			case CALLED:
			case CASCADE:
			case CASCADED:
			case CATALOG:
			case CHAIN:
			case CHARACTERISTICS:
			case CHECKPOINT:
			case CLASS:
			case CLOSE:
			case CLUSTER:
			case COMMENT:
			case COMMENTS:
			case COMMIT:
			case COMMITTED:
			case CONFIGURATION:
			case CONNECTION:
			case CONSTRAINTS:
			case CONTENT_P:
			case CONTINUE_P:
			case CONVERSION_P:
			case COPY:
			case COST:
			case CSV:
			case CURSOR:
			case CYCLE:
			case DATA_P:
			case DATABASE:
			case DAY_P:
			case DEALLOCATE:
			case DECLARE:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE_P:
			case DELIMITER:
			case DELIMITERS:
			case DICTIONARY:
			case DISABLE_P:
			case DISCARD:
			case DOCUMENT_P:
			case DOMAIN_P:
			case DOUBLE_P:
			case DROP:
			case EACH:
			case ENABLE_P:
			case ENCODING:
			case ENCRYPTED:
			case ENUM_P:
			case ESCAPE:
			case EVENT:
			case EXCLUDE:
			case EXCLUDING:
			case EXCLUSIVE:
			case EXECUTE:
			case EXPLAIN:
			case EXTENSION:
			case EXTERNAL:
			case FAMILY:
			case FIRST_P:
			case FOLLOWING:
			case FORCE:
			case FORWARD:
			case FUNCTION:
			case FUNCTIONS:
			case GLOBAL:
			case GRANTED:
			case HANDLER:
			case HEADER_P:
			case HOLD:
			case HOUR_P:
			case IDENTITY_P:
			case IF_P:
			case IMMEDIATE:
			case IMMUTABLE:
			case IMPLICIT_P:
			case INCLUDING:
			case INCREMENT:
			case INDEX:
			case INDEXES:
			case INHERIT:
			case INHERITS:
			case INLINE_P:
			case INSENSITIVE:
			case INSERT:
			case INSTEAD:
			case INVOKER:
			case ISOLATION:
			case KEY:
			case LABEL:
			case LANGUAGE:
			case LARGE_P:
			case LAST_P:
			case LEAKPROOF:
			case LEVEL:
			case LISTEN:
			case LOAD:
			case LOCAL:
			case LOCATION:
			case LOCK_P:
			case MAPPING:
			case MATCH:
			case MATERIALIZED:
			case MAXVALUE:
			case MINUTE_P:
			case MINVALUE:
			case MODE:
			case MONTH_P:
			case MOVE:
			case NAME_P:
			case NAMES:
			case NEXT:
			case NO:
			case NOTHING:
			case NOTIFY:
			case NOWAIT:
			case NULLS_P:
			case OBJECT_P:
			case OF:
			case OFF:
			case OIDS:
			case OPERATOR:
			case OPTION:
			case OPTIONS:
			case OWNED:
			case OWNER:
			case PARSER:
			case PARTIAL:
			case PARTITION:
			case PASSING:
			case PASSWORD:
			case PLANS:
			case PRECEDING:
			case PREPARE:
			case PREPARED:
			case PRESERVE:
			case PRIOR:
			case PRIVILEGES:
			case PROCEDURAL:
			case PROCEDURE:
			case PROGRAM:
			case QUOTE:
			case RANGE:
			case READ:
			case REASSIGN:
			case RECHECK:
			case RECURSIVE:
			case REF:
			case REFRESH:
			case REINDEX:
			case RELATIVE_P:
			case RELEASE:
			case RENAME:
			case REPEATABLE:
			case REPLACE:
			case REPLICA:
			case RESET:
			case RESTART:
			case RESTRICT:
			case RETURNS:
			case REVOKE:
			case ROLE:
			case ROLLBACK:
			case ROWS:
			case RULE:
			case SAVEPOINT:
			case SCHEMA:
			case SCROLL:
			case SEARCH:
			case SECOND_P:
			case SECURITY:
			case SEQUENCE:
			case SEQUENCES:
			case SERIALIZABLE:
			case SERVER:
			case SESSION:
			case SET:
			case SHARE:
			case SHOW:
			case SIMPLE:
			case SNAPSHOT:
			case STABLE:
			case STANDALONE_P:
			case START:
			case STATEMENT:
			case STATISTICS:
			case STDIN:
			case STDOUT:
			case STORAGE:
			case STRICT_P:
			case STRIP_P:
			case SYSID:
			case SYSTEM_P:
			case TABLES:
			case TABLESPACE:
			case TEMP:
			case TEMPLATE:
			case TEMPORARY:
			case TEXT_P:
			case TRANSACTION:
			case TRIGGER:
			case TRUNCATE:
			case TRUSTED:
			case TYPE_P:
			case TYPES_P:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNENCRYPTED:
			case UNKNOWN:
			case UNLISTEN:
			case UNLOGGED:
			case UNTIL:
			case UPDATE:
			case VACUUM:
			case VALID:
			case VALIDATE:
			case VALIDATOR:
			case VARYING:
			case VERSION_P:
			case VIEW:
			case VOLATILE:
			case WHITESPACE_P:
			case WITHOUT:
			case WORK:
			case WRAPPER:
			case WRITE:
			case XML_P:
			case YEAR_P:
			case YES_P:
			case ZONE:
			case BETWEEN:
			case BIGINT:
			case BIT:
			case BOOLEAN_P:
			case CHAR_P:
			case CHARACTER:
			case COALESCE:
			case DEC:
			case DECIMAL_P:
			case EXISTS:
			case EXTRACT:
			case FLOAT_P:
			case GREATEST:
			case INOUT:
			case INT_P:
			case INTEGER:
			case INTERVAL:
			case LEAST:
			case NATIONAL:
			case NCHAR:
			case NONE:
			case NULLIF:
			case NUMERIC:
			case OVERLAY:
			case POSITION:
			case PRECISION:
			case REAL:
			case ROW:
			case SETOF:
			case SMALLINT:
			case SUBSTRING:
			case TIME:
			case TIMESTAMP:
			case TREAT:
			case TRIM:
			case VALUES:
			case VARCHAR:
			case XMLATTRIBUTES:
			case XMLCOMMENT:
			case XMLAGG:
			case XML_IS_WELL_FORMED:
			case XML_IS_WELL_FORMED_DOCUMENT:
			case XML_IS_WELL_FORMED_CONTENT:
			case XPATH:
			case XPATH_EXISTS:
			case XMLCONCAT:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLPARSE:
			case XMLPI:
			case XMLROOT:
			case XMLSERIALIZE:
			case CALL:
			case CURRENT_P:
			case ATTACH:
			case DETACH:
			case EXPRESSION:
			case GENERATED:
			case LOGGED:
			case STORED:
			case INCLUDE:
			case ROUTINE:
			case TRANSFORM:
			case IMPORT_P:
			case POLICY:
			case METHOD:
			case REFERENCING:
			case NEW:
			case OLD:
			case VALUE_P:
			case SUBSCRIPTION:
			case PUBLICATION:
			case OUT_P:
			case ROUTINES:
			case SCHEMAS:
			case PROCEDURES:
			case INPUT_P:
			case SUPPORT:
			case PARALLEL:
			case SQL_P:
			case DEPENDS:
			case OVERRIDING:
			case CONFLICT:
			case SKIP_P:
			case LOCKED:
			case TIES:
			case ROLLUP:
			case CUBE:
			case GROUPING:
			case SETS:
			case ORDINALITY:
			case XMLTABLE:
			case COLUMNS:
			case XMLNAMESPACES:
			case ROWTYPE:
			case NORMALIZED:
			case WITHIN:
			case FILTER:
			case GROUPS:
			case OTHERS:
			case NFC:
			case NFD:
			case NFKC:
			case NFKD:
			case UESCAPE:
			case VIEWS:
			case NORMALIZE:
			case DUMP:
			case PRINT_STRICT_PARAMS:
			case VARIABLE_CONFLICT:
			case ERROR:
			case USE_VARIABLE:
			case USE_COLUMN:
			case ALIAS:
			case CONSTANT:
			case PERFORM:
			case GET:
			case DIAGNOSTICS:
			case STACKED:
			case ELSIF:
			case REVERSE:
			case SLICE:
			case EXIT:
			case RETURN:
			case QUERY:
			case RAISE:
			case SQLSTATE:
			case DEBUG:
			case LOG:
			case INFO:
			case NOTICE:
			case WARNING:
			case EXCEPTION:
			case ASSERT:
			case OPEN:
			case ABS:
			case CBRT:
			case CEIL:
			case CEILING:
			case DEGREES:
			case DIV:
			case EXP:
			case FACTORIAL:
			case FLOOR:
			case GCD:
			case LCM:
			case LN:
			case LOG10:
			case MIN_SCALE:
			case MOD:
			case PI:
			case POWER:
			case RADIANS:
			case ROUND:
			case SCALE:
			case SIGN:
			case SQRT:
			case TRIM_SCALE:
			case TRUNC:
			case WIDTH_BUCKET:
			case RANDOM:
			case SETSEED:
			case ACOS:
			case ACOSD:
			case ASIN:
			case ASIND:
			case ATAN:
			case ATAND:
			case ATAN2:
			case ATAN2D:
			case COS:
			case COSD:
			case COT:
			case COTD:
			case SIN:
			case SIND:
			case TAN:
			case TAND:
			case SINH:
			case COSH:
			case TANH:
			case ASINH:
			case ACOSH:
			case ATANH:
			case BIT_LENGTH:
			case CHAR_LENGTH:
			case CHARACTER_LENGTH:
			case LOWER:
			case OCTET_LENGTH:
			case UPPER:
			case ASCII:
			case BTRIM:
			case CHR:
			case CONCAT:
			case CONCAT_WS:
			case FORMAT:
			case INITCAP:
			case LENGTH:
			case LPAD:
			case LTRIM:
			case MD5:
			case PARSE_IDENT:
			case PG_CLIENT_ENCODING:
			case QUOTE_IDENT:
			case QUOTE_LITERAL:
			case QUOTE_NULLABLE:
			case REGEXP_COUNT:
			case REGEXP_INSTR:
			case REGEXP_LIKE:
			case REGEXP_MATCH:
			case REGEXP_MATCHES:
			case REGEXP_REPLACE:
			case REGEXP_SPLIT_TO_ARRAY:
			case REGEXP_SPLIT_TO_TABLE:
			case REGEXP_SUBSTR:
			case REPEAT:
			case RPAD:
			case RTRIM:
			case SPLIT_PART:
			case STARTS_WITH:
			case STRING_TO_ARRAY:
			case STRING_TO_TABLE:
			case STRPOS:
			case SUBSTR:
			case TO_ASCII:
			case TO_HEX:
			case TRANSLATE:
			case UNISTR:
			case AGE:
			case CLOCK_TIMESTAMP:
			case DATE_BIN:
			case DATE_PART:
			case DATE_TRUNC:
			case ISFINITE:
			case JUSTIFY_DAYS:
			case JUSTIFY_HOURS:
			case JUSTIFY_INTERVAL:
			case MAKE_DATE:
			case MAKE_INTERVAL:
			case MAKE_TIME:
			case MAKE_TIMESTAMP:
			case MAKE_TIMESTAMPTZ:
			case NOW:
			case STATEMENT_TIMESTAMP:
			case TIMEOFDAY:
			case TRANSACTION_TIMESTAMP:
			case TO_TIMESTAMP:
			case TO_CHAR:
			case TO_DATE:
			case TO_NUMBER:
			case Identifier:
			case QuotedIdentifier:
			case UnicodeQuotedIdentifier:
			case PLSQLVARIABLENAME:
			case PLSQLIDENTIFIER:
				EnterOuterAlt(_localctx, 1);
				{
				State = 5283;
				name();
				}
				break;
			case ON:
				EnterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Access_method_clauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode USING() { return GetToken(PostgreSQLParser.USING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		public Access_method_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_access_method_clause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterAccess_method_clause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitAccess_method_clause(this);
		}
	}

	[RuleVersion(0)]
	public Access_method_clauseContext access_method_clause() {
		Access_method_clauseContext _localctx = new Access_method_clauseContext(Context, State);
		EnterRule(_localctx, 596, RULE_access_method_clause);
		try {
			State = 5290;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case USING:
				EnterOuterAlt(_localctx, 1);
				{
				State = 5287;
				Match(USING);
				State = 5288;
				name();
				}
				break;
			case OPEN_PAREN:
				EnterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Index_paramsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Index_elemContext[] index_elem() {
			return GetRuleContexts<Index_elemContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Index_elemContext index_elem(int i) {
			return GetRuleContext<Index_elemContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(PostgreSQLParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(PostgreSQLParser.COMMA, i);
		}
		public Index_paramsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_index_params; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterIndex_params(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitIndex_params(this);
		}
	}

	[RuleVersion(0)]
	public Index_paramsContext index_params() {
		Index_paramsContext _localctx = new Index_paramsContext(Context, State);
		EnterRule(_localctx, 598, RULE_index_params);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5292;
			index_elem();
			State = 5297;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 5293;
				Match(COMMA);
				State = 5294;
				index_elem();
				}
				}
				State = 5299;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Index_elem_optionsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Opt_collateContext opt_collate() {
			return GetRuleContext<Opt_collateContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Opt_classContext opt_class() {
			return GetRuleContext<Opt_classContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Opt_asc_descContext opt_asc_desc() {
			return GetRuleContext<Opt_asc_descContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Opt_nulls_orderContext opt_nulls_order() {
			return GetRuleContext<Opt_nulls_orderContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Any_nameContext any_name() {
			return GetRuleContext<Any_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ReloptionsContext reloptions() {
			return GetRuleContext<ReloptionsContext>(0);
		}
		public Index_elem_optionsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_index_elem_options; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterIndex_elem_options(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitIndex_elem_options(this);
		}
	}

	[RuleVersion(0)]
	public Index_elem_optionsContext index_elem_options() {
		Index_elem_optionsContext _localctx = new Index_elem_optionsContext(Context, State);
		EnterRule(_localctx, 600, RULE_index_elem_options);
		try {
			State = 5311;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,255,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 5300;
				opt_collate();
				State = 5301;
				opt_class();
				State = 5302;
				opt_asc_desc();
				State = 5303;
				opt_nulls_order();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 5305;
				opt_collate();
				State = 5306;
				any_name();
				State = 5307;
				reloptions();
				State = 5308;
				opt_asc_desc();
				State = 5309;
				opt_nulls_order();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Index_elemContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ColidContext colid() {
			return GetRuleContext<ColidContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Index_elem_optionsContext index_elem_options() {
			return GetRuleContext<Index_elem_optionsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Func_expr_windowlessContext func_expr_windowless() {
			return GetRuleContext<Func_expr_windowlessContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAREN() { return GetToken(PostgreSQLParser.OPEN_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public A_exprContext a_expr() {
			return GetRuleContext<A_exprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAREN() { return GetToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public Index_elemContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_index_elem; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterIndex_elem(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitIndex_elem(this);
		}
	}

	[RuleVersion(0)]
	public Index_elemContext index_elem() {
		Index_elemContext _localctx = new Index_elemContext(Context, State);
		EnterRule(_localctx, 602, RULE_index_elem);
		try {
			State = 5324;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,256,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 5313;
				colid();
				State = 5314;
				index_elem_options();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 5316;
				func_expr_windowless();
				State = 5317;
				index_elem_options();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 5319;
				Match(OPEN_PAREN);
				State = 5320;
				a_expr();
				State = 5321;
				Match(CLOSE_PAREN);
				State = 5322;
				index_elem_options();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Opt_includeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INCLUDE() { return GetToken(PostgreSQLParser.INCLUDE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAREN() { return GetToken(PostgreSQLParser.OPEN_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Index_including_paramsContext index_including_params() {
			return GetRuleContext<Index_including_paramsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAREN() { return GetToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public Opt_includeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_opt_include; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterOpt_include(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitOpt_include(this);
		}
	}

	[RuleVersion(0)]
	public Opt_includeContext opt_include() {
		Opt_includeContext _localctx = new Opt_includeContext(Context, State);
		EnterRule(_localctx, 604, RULE_opt_include);
		try {
			State = 5332;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case INCLUDE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 5326;
				Match(INCLUDE);
				State = 5327;
				Match(OPEN_PAREN);
				State = 5328;
				index_including_params();
				State = 5329;
				Match(CLOSE_PAREN);
				}
				break;
			case Eof:
			case OPEN_PAREN:
			case SEMI:
			case ANALYSE:
			case ANALYZE:
			case CREATE:
			case DO:
			case FETCH:
			case GRANT:
			case INTO:
			case SELECT:
			case TABLE:
			case WHERE:
			case WITH:
			case ABORT_P:
			case ALTER:
			case BEGIN_P:
			case CHECKPOINT:
			case CLOSE:
			case CLUSTER:
			case COMMENT:
			case COMMIT:
			case COPY:
			case DEALLOCATE:
			case DECLARE:
			case DELETE_P:
			case DISCARD:
			case DROP:
			case EXECUTE:
			case EXPLAIN:
			case INSERT:
			case LISTEN:
			case LOAD:
			case LOCK_P:
			case MERGE:
			case MOVE:
			case NOTIFY:
			case PREPARE:
			case REASSIGN:
			case REFRESH:
			case REINDEX:
			case RELEASE:
			case RESET:
			case REVOKE:
			case ROLLBACK:
			case SAVEPOINT:
			case SECURITY:
			case SET:
			case SHOW:
			case START:
			case TABLESPACE:
			case TRUNCATE:
			case UNLISTEN:
			case UPDATE:
			case VACUUM:
			case VALUES:
			case CALL:
			case IMPORT_P:
			case END_P:
			case MetaCommand:
				EnterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Index_including_paramsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Index_elemContext[] index_elem() {
			return GetRuleContexts<Index_elemContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Index_elemContext index_elem(int i) {
			return GetRuleContext<Index_elemContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(PostgreSQLParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(PostgreSQLParser.COMMA, i);
		}
		public Index_including_paramsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_index_including_params; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterIndex_including_params(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitIndex_including_params(this);
		}
	}

	[RuleVersion(0)]
	public Index_including_paramsContext index_including_params() {
		Index_including_paramsContext _localctx = new Index_including_paramsContext(Context, State);
		EnterRule(_localctx, 606, RULE_index_including_params);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5334;
			index_elem();
			State = 5339;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 5335;
				Match(COMMA);
				State = 5336;
				index_elem();
				}
				}
				State = 5341;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Opt_collateContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLLATE() { return GetToken(PostgreSQLParser.COLLATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Any_nameContext any_name() {
			return GetRuleContext<Any_nameContext>(0);
		}
		public Opt_collateContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_opt_collate; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterOpt_collate(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitOpt_collate(this);
		}
	}

	[RuleVersion(0)]
	public Opt_collateContext opt_collate() {
		Opt_collateContext _localctx = new Opt_collateContext(Context, State);
		EnterRule(_localctx, 608, RULE_opt_collate);
		try {
			State = 5345;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,259,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 5342;
				Match(COLLATE);
				State = 5343;
				any_name();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Opt_classContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Any_nameContext any_name() {
			return GetRuleContext<Any_nameContext>(0);
		}
		public Opt_classContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_opt_class; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterOpt_class(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitOpt_class(this);
		}
	}

	[RuleVersion(0)]
	public Opt_classContext opt_class() {
		Opt_classContext _localctx = new Opt_classContext(Context, State);
		EnterRule(_localctx, 610, RULE_opt_class);
		try {
			State = 5349;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,260,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 5347;
				any_name();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Opt_asc_descContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASC() { return GetToken(PostgreSQLParser.ASC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DESC() { return GetToken(PostgreSQLParser.DESC, 0); }
		public Opt_asc_descContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_opt_asc_desc; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterOpt_asc_desc(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitOpt_asc_desc(this);
		}
	}

	[RuleVersion(0)]
	public Opt_asc_descContext opt_asc_desc() {
		Opt_asc_descContext _localctx = new Opt_asc_descContext(Context, State);
		EnterRule(_localctx, 612, RULE_opt_asc_desc);
		try {
			State = 5354;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ASC:
				EnterOuterAlt(_localctx, 1);
				{
				State = 5351;
				Match(ASC);
				}
				break;
			case DESC:
				EnterOuterAlt(_localctx, 2);
				{
				State = 5352;
				Match(DESC);
				}
				break;
			case Eof:
			case OPEN_PAREN:
			case CLOSE_PAREN:
			case COMMA:
			case SEMI:
			case ANALYSE:
			case ANALYZE:
			case CREATE:
			case DO:
			case FETCH:
			case FOR:
			case GRANT:
			case INTO:
			case LIMIT:
			case OFFSET:
			case ON:
			case RETURNING:
			case SELECT:
			case TABLE:
			case WITH:
			case ABORT_P:
			case ALTER:
			case BEGIN_P:
			case CHECKPOINT:
			case CLOSE:
			case CLUSTER:
			case COMMENT:
			case COMMIT:
			case COPY:
			case DEALLOCATE:
			case DECLARE:
			case DELETE_P:
			case DISCARD:
			case DROP:
			case EXECUTE:
			case EXPLAIN:
			case INSERT:
			case LISTEN:
			case LOAD:
			case LOCK_P:
			case MERGE:
			case MOVE:
			case NOTIFY:
			case NULLS_P:
			case PREPARE:
			case RANGE:
			case REASSIGN:
			case REFRESH:
			case REINDEX:
			case RELEASE:
			case RESET:
			case REVOKE:
			case ROLLBACK:
			case ROWS:
			case SAVEPOINT:
			case SECURITY:
			case SET:
			case SHOW:
			case START:
			case TRUNCATE:
			case UNLISTEN:
			case UPDATE:
			case VACUUM:
			case VALUES:
			case CALL:
			case IMPORT_P:
			case END_P:
			case GROUPS:
			case LOOP:
			case MetaCommand:
				EnterOuterAlt(_localctx, 3);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Opt_nulls_orderContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NULLS_P() { return GetToken(PostgreSQLParser.NULLS_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FIRST_P() { return GetToken(PostgreSQLParser.FIRST_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LAST_P() { return GetToken(PostgreSQLParser.LAST_P, 0); }
		public Opt_nulls_orderContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_opt_nulls_order; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterOpt_nulls_order(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitOpt_nulls_order(this);
		}
	}

	[RuleVersion(0)]
	public Opt_nulls_orderContext opt_nulls_order() {
		Opt_nulls_orderContext _localctx = new Opt_nulls_orderContext(Context, State);
		EnterRule(_localctx, 614, RULE_opt_nulls_order);
		try {
			State = 5361;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,262,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 5356;
				Match(NULLS_P);
				State = 5357;
				Match(FIRST_P);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 5358;
				Match(NULLS_P);
				State = 5359;
				Match(LAST_P);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CreatefunctionstmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CREATE() { return GetToken(PostgreSQLParser.CREATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Opt_or_replaceContext opt_or_replace() {
			return GetRuleContext<Opt_or_replaceContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Func_nameContext func_name() {
			return GetRuleContext<Func_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Func_args_with_defaultsContext func_args_with_defaults() {
			return GetRuleContext<Func_args_with_defaultsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Createfunc_opt_listContext createfunc_opt_list() {
			return GetRuleContext<Createfunc_opt_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FUNCTION() { return GetToken(PostgreSQLParser.FUNCTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PROCEDURE() { return GetToken(PostgreSQLParser.PROCEDURE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RETURNS() { return GetToken(PostgreSQLParser.RETURNS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Func_returnContext func_return() {
			return GetRuleContext<Func_returnContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLE() { return GetToken(PostgreSQLParser.TABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAREN() { return GetToken(PostgreSQLParser.OPEN_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Table_func_column_listContext table_func_column_list() {
			return GetRuleContext<Table_func_column_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAREN() { return GetToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public CreatefunctionstmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_createfunctionstmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterCreatefunctionstmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitCreatefunctionstmt(this);
		}
	}

	[RuleVersion(0)]
	public CreatefunctionstmtContext createfunctionstmt() {
		CreatefunctionstmtContext _localctx = new CreatefunctionstmtContext(Context, State);
		EnterRule(_localctx, 616, RULE_createfunctionstmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5363;
			Match(CREATE);
			State = 5364;
			opt_or_replace();
			State = 5365;
			_la = TokenStream.LA(1);
			if ( !(_la==FUNCTION || _la==PROCEDURE) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 5366;
			func_name();
			State = 5367;
			func_args_with_defaults();
			State = 5377;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,264,Context) ) {
			case 1:
				{
				State = 5368;
				Match(RETURNS);
				State = 5375;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,263,Context) ) {
				case 1:
					{
					State = 5369;
					func_return();
					}
					break;
				case 2:
					{
					State = 5370;
					Match(TABLE);
					State = 5371;
					Match(OPEN_PAREN);
					State = 5372;
					table_func_column_list();
					State = 5373;
					Match(CLOSE_PAREN);
					}
					break;
				}
				}
				break;
			}
			State = 5379;
			createfunc_opt_list();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Opt_or_replaceContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OR() { return GetToken(PostgreSQLParser.OR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REPLACE() { return GetToken(PostgreSQLParser.REPLACE, 0); }
		public Opt_or_replaceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_opt_or_replace; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterOpt_or_replace(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitOpt_or_replace(this);
		}
	}

	[RuleVersion(0)]
	public Opt_or_replaceContext opt_or_replace() {
		Opt_or_replaceContext _localctx = new Opt_or_replaceContext(Context, State);
		EnterRule(_localctx, 618, RULE_opt_or_replace);
		try {
			State = 5384;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case OR:
				EnterOuterAlt(_localctx, 1);
				{
				State = 5381;
				Match(OR);
				State = 5382;
				Match(REPLACE);
				}
				break;
			case AGGREGATE:
			case FUNCTION:
			case LANGUAGE:
			case PROCEDURAL:
			case PROCEDURE:
			case RULE:
			case TRUSTED:
			case TRANSFORM:
				EnterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Func_argsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAREN() { return GetToken(PostgreSQLParser.OPEN_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAREN() { return GetToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Func_args_listContext func_args_list() {
			return GetRuleContext<Func_args_listContext>(0);
		}
		public Func_argsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_func_args; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterFunc_args(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitFunc_args(this);
		}
	}

	[RuleVersion(0)]
	public Func_argsContext func_args() {
		Func_argsContext _localctx = new Func_argsContext(Context, State);
		EnterRule(_localctx, 620, RULE_func_args);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5386;
			Match(OPEN_PAREN);
			State = 5388;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la - 33)) & ~0x3f) == 0 && ((1L << (_la - 33)) & 576460786949430277L) != 0 || (((_la - 101)) & ~0x3f) == 0 && ((1L << (_la - 101)) & -4398046511135L) != 0 || (((_la - 165)) & ~0x3f) == 0 && ((1L << (_la - 165)) & -1L) != 0 || (((_la - 229)) & ~0x3f) == 0 && ((1L << (_la - 229)) & -37748737L) != 0 || (((_la - 293)) & ~0x3f) == 0 && ((1L << (_la - 293)) & -1L) != 0 || (((_la - 357)) & ~0x3f) == 0 && ((1L << (_la - 357)) & -1L) != 0 || (((_la - 421)) & ~0x3f) == 0 && ((1L << (_la - 421)) & -17179869185L) != 0 || (((_la - 485)) & ~0x3f) == 0 && ((1L << (_la - 485)) & -34362359809L) != 0 || (((_la - 549)) & ~0x3f) == 0 && ((1L << (_la - 549)) & -1L) != 0 || (((_la - 613)) & ~0x3f) == 0 && ((1L << (_la - 613)) & 1688850464243711L) != 0) {
				{
				State = 5387;
				func_args_list();
				}
			}

			State = 5390;
			Match(CLOSE_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Func_args_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Func_argContext[] func_arg() {
			return GetRuleContexts<Func_argContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Func_argContext func_arg(int i) {
			return GetRuleContext<Func_argContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(PostgreSQLParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(PostgreSQLParser.COMMA, i);
		}
		public Func_args_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_func_args_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterFunc_args_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitFunc_args_list(this);
		}
	}

	[RuleVersion(0)]
	public Func_args_listContext func_args_list() {
		Func_args_listContext _localctx = new Func_args_listContext(Context, State);
		EnterRule(_localctx, 622, RULE_func_args_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5392;
			func_arg();
			State = 5397;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 5393;
				Match(COMMA);
				State = 5394;
				func_arg();
				}
				}
				State = 5399;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Function_with_argtypes_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Function_with_argtypesContext[] function_with_argtypes() {
			return GetRuleContexts<Function_with_argtypesContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Function_with_argtypesContext function_with_argtypes(int i) {
			return GetRuleContext<Function_with_argtypesContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(PostgreSQLParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(PostgreSQLParser.COMMA, i);
		}
		public Function_with_argtypes_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_function_with_argtypes_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterFunction_with_argtypes_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitFunction_with_argtypes_list(this);
		}
	}

	[RuleVersion(0)]
	public Function_with_argtypes_listContext function_with_argtypes_list() {
		Function_with_argtypes_listContext _localctx = new Function_with_argtypes_listContext(Context, State);
		EnterRule(_localctx, 624, RULE_function_with_argtypes_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5400;
			function_with_argtypes();
			State = 5405;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 5401;
				Match(COMMA);
				State = 5402;
				function_with_argtypes();
				}
				}
				State = 5407;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Function_with_argtypesContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Func_nameContext func_name() {
			return GetRuleContext<Func_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Func_argsContext func_args() {
			return GetRuleContext<Func_argsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Type_func_name_keywordContext type_func_name_keyword() {
			return GetRuleContext<Type_func_name_keywordContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ColidContext colid() {
			return GetRuleContext<ColidContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IndirectionContext indirection() {
			return GetRuleContext<IndirectionContext>(0);
		}
		public Function_with_argtypesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_function_with_argtypes; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterFunction_with_argtypes(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitFunction_with_argtypes(this);
		}
	}

	[RuleVersion(0)]
	public Function_with_argtypesContext function_with_argtypes() {
		Function_with_argtypesContext _localctx = new Function_with_argtypesContext(Context, State);
		EnterRule(_localctx, 626, RULE_function_with_argtypes);
		int _la;
		try {
			State = 5416;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,270,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 5408;
				func_name();
				State = 5409;
				func_args();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 5411;
				type_func_name_keyword();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 5412;
				colid();
				State = 5414;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==OPEN_BRACKET || _la==DOT) {
					{
					State = 5413;
					indirection();
					}
				}

				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Func_args_with_defaultsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAREN() { return GetToken(PostgreSQLParser.OPEN_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAREN() { return GetToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Func_args_with_defaults_listContext func_args_with_defaults_list() {
			return GetRuleContext<Func_args_with_defaults_listContext>(0);
		}
		public Func_args_with_defaultsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_func_args_with_defaults; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterFunc_args_with_defaults(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitFunc_args_with_defaults(this);
		}
	}

	[RuleVersion(0)]
	public Func_args_with_defaultsContext func_args_with_defaults() {
		Func_args_with_defaultsContext _localctx = new Func_args_with_defaultsContext(Context, State);
		EnterRule(_localctx, 628, RULE_func_args_with_defaults);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5418;
			Match(OPEN_PAREN);
			State = 5420;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la - 33)) & ~0x3f) == 0 && ((1L << (_la - 33)) & 576460786949430277L) != 0 || (((_la - 101)) & ~0x3f) == 0 && ((1L << (_la - 101)) & -4398046511135L) != 0 || (((_la - 165)) & ~0x3f) == 0 && ((1L << (_la - 165)) & -1L) != 0 || (((_la - 229)) & ~0x3f) == 0 && ((1L << (_la - 229)) & -37748737L) != 0 || (((_la - 293)) & ~0x3f) == 0 && ((1L << (_la - 293)) & -1L) != 0 || (((_la - 357)) & ~0x3f) == 0 && ((1L << (_la - 357)) & -1L) != 0 || (((_la - 421)) & ~0x3f) == 0 && ((1L << (_la - 421)) & -17179869185L) != 0 || (((_la - 485)) & ~0x3f) == 0 && ((1L << (_la - 485)) & -34362359809L) != 0 || (((_la - 549)) & ~0x3f) == 0 && ((1L << (_la - 549)) & -1L) != 0 || (((_la - 613)) & ~0x3f) == 0 && ((1L << (_la - 613)) & 1688850464243711L) != 0) {
				{
				State = 5419;
				func_args_with_defaults_list();
				}
			}

			State = 5422;
			Match(CLOSE_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Func_args_with_defaults_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Func_arg_with_defaultContext[] func_arg_with_default() {
			return GetRuleContexts<Func_arg_with_defaultContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Func_arg_with_defaultContext func_arg_with_default(int i) {
			return GetRuleContext<Func_arg_with_defaultContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(PostgreSQLParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(PostgreSQLParser.COMMA, i);
		}
		public Func_args_with_defaults_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_func_args_with_defaults_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterFunc_args_with_defaults_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitFunc_args_with_defaults_list(this);
		}
	}

	[RuleVersion(0)]
	public Func_args_with_defaults_listContext func_args_with_defaults_list() {
		Func_args_with_defaults_listContext _localctx = new Func_args_with_defaults_listContext(Context, State);
		EnterRule(_localctx, 630, RULE_func_args_with_defaults_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5424;
			func_arg_with_default();
			State = 5429;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 5425;
				Match(COMMA);
				State = 5426;
				func_arg_with_default();
				}
				}
				State = 5431;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Func_argContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Arg_classContext arg_class() {
			return GetRuleContext<Arg_classContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Func_typeContext func_type() {
			return GetRuleContext<Func_typeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Param_nameContext param_name() {
			return GetRuleContext<Param_nameContext>(0);
		}
		public Func_argContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_func_arg; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterFunc_arg(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitFunc_arg(this);
		}
	}

	[RuleVersion(0)]
	public Func_argContext func_arg() {
		Func_argContext _localctx = new Func_argContext(Context, State);
		EnterRule(_localctx, 632, RULE_func_arg);
		try {
			State = 5445;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,275,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 5432;
				arg_class();
				State = 5434;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,273,Context) ) {
				case 1:
					{
					State = 5433;
					param_name();
					}
					break;
				}
				State = 5436;
				func_type();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 5438;
				param_name();
				State = 5440;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,274,Context) ) {
				case 1:
					{
					State = 5439;
					arg_class();
					}
					break;
				}
				State = 5442;
				func_type();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 5444;
				func_type();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Arg_classContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IN_P() { return GetToken(PostgreSQLParser.IN_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OUT_P() { return GetToken(PostgreSQLParser.OUT_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INOUT() { return GetToken(PostgreSQLParser.INOUT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARIADIC() { return GetToken(PostgreSQLParser.VARIADIC, 0); }
		public Arg_classContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arg_class; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterArg_class(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitArg_class(this);
		}
	}

	[RuleVersion(0)]
	public Arg_classContext arg_class() {
		Arg_classContext _localctx = new Arg_classContext(Context, State);
		EnterRule(_localctx, 634, RULE_arg_class);
		try {
			State = 5454;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case IN_P:
				EnterOuterAlt(_localctx, 1);
				{
				State = 5447;
				Match(IN_P);
				State = 5449;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,276,Context) ) {
				case 1:
					{
					State = 5448;
					Match(OUT_P);
					}
					break;
				}
				}
				break;
			case OUT_P:
				EnterOuterAlt(_localctx, 2);
				{
				State = 5451;
				Match(OUT_P);
				}
				break;
			case INOUT:
				EnterOuterAlt(_localctx, 3);
				{
				State = 5452;
				Match(INOUT);
				}
				break;
			case VARIADIC:
				EnterOuterAlt(_localctx, 4);
				{
				State = 5453;
				Match(VARIADIC);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Param_nameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Type_function_nameContext type_function_name() {
			return GetRuleContext<Type_function_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Builtin_function_nameContext builtin_function_name() {
			return GetRuleContext<Builtin_function_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFT() { return GetToken(PostgreSQLParser.LEFT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHT() { return GetToken(PostgreSQLParser.RIGHT, 0); }
		public Param_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_param_name; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterParam_name(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitParam_name(this);
		}
	}

	[RuleVersion(0)]
	public Param_nameContext param_name() {
		Param_nameContext _localctx = new Param_nameContext(Context, State);
		EnterRule(_localctx, 636, RULE_param_name);
		try {
			State = 5460;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case AND:
			case ARRAY:
			case COLLATE:
			case COLUMN:
			case CONSTRAINT:
			case DEFAULT:
			case DO:
			case FETCH:
			case TABLE:
			case AUTHORIZATION:
			case BINARY:
			case COLLATION:
			case CONCURRENTLY:
			case CROSS:
			case CURRENT_SCHEMA:
			case FREEZE:
			case FULL:
			case ILIKE:
			case INNER_P:
			case IS:
			case ISNULL:
			case JOIN:
			case LIKE:
			case NATURAL:
			case NOTNULL:
			case OUTER_P:
			case OVER:
			case OVERLAPS:
			case SIMILAR:
			case VERBOSE:
			case ABORT_P:
			case ABSOLUTE_P:
			case ACCESS:
			case ACTION:
			case ADD_P:
			case ADMIN:
			case AFTER:
			case AGGREGATE:
			case ALSO:
			case ALTER:
			case ALWAYS:
			case ASSERTION:
			case ASSIGNMENT:
			case AT:
			case ATTRIBUTE:
			case BACKWARD:
			case BEFORE:
			case BEGIN_P:
			case BY:
			case CACHE:
			case CALLED:
			case CASCADE:
			case CASCADED:
			case CATALOG:
			case CHAIN:
			case CHARACTERISTICS:
			case CHECKPOINT:
			case CLASS:
			case CLOSE:
			case CLUSTER:
			case COMMENT:
			case COMMENTS:
			case COMMIT:
			case COMMITTED:
			case CONFIGURATION:
			case CONNECTION:
			case CONSTRAINTS:
			case CONTENT_P:
			case CONTINUE_P:
			case CONVERSION_P:
			case COPY:
			case COST:
			case CSV:
			case CURSOR:
			case CYCLE:
			case DATA_P:
			case DATABASE:
			case DAY_P:
			case DEALLOCATE:
			case DECLARE:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE_P:
			case DELIMITER:
			case DELIMITERS:
			case DICTIONARY:
			case DISABLE_P:
			case DISCARD:
			case DOCUMENT_P:
			case DOMAIN_P:
			case DOUBLE_P:
			case DROP:
			case EACH:
			case ENABLE_P:
			case ENCODING:
			case ENCRYPTED:
			case ENUM_P:
			case ESCAPE:
			case EVENT:
			case EXCLUDE:
			case EXCLUDING:
			case EXCLUSIVE:
			case EXECUTE:
			case EXPLAIN:
			case EXTENSION:
			case EXTERNAL:
			case FAMILY:
			case FIRST_P:
			case FOLLOWING:
			case FORCE:
			case FORWARD:
			case FUNCTION:
			case FUNCTIONS:
			case GLOBAL:
			case GRANTED:
			case HANDLER:
			case HEADER_P:
			case HOLD:
			case HOUR_P:
			case IDENTITY_P:
			case IF_P:
			case IMMEDIATE:
			case IMMUTABLE:
			case IMPLICIT_P:
			case INCLUDING:
			case INCREMENT:
			case INDEX:
			case INDEXES:
			case INHERIT:
			case INHERITS:
			case INLINE_P:
			case INSENSITIVE:
			case INSERT:
			case INSTEAD:
			case INVOKER:
			case ISOLATION:
			case KEY:
			case LABEL:
			case LANGUAGE:
			case LARGE_P:
			case LAST_P:
			case LEAKPROOF:
			case LEVEL:
			case LISTEN:
			case LOAD:
			case LOCAL:
			case LOCATION:
			case LOCK_P:
			case MAPPING:
			case MATCH:
			case MATERIALIZED:
			case MAXVALUE:
			case MINUTE_P:
			case MINVALUE:
			case MODE:
			case MONTH_P:
			case MOVE:
			case NAME_P:
			case NAMES:
			case NEXT:
			case NO:
			case NOTHING:
			case NOTIFY:
			case NOWAIT:
			case NULLS_P:
			case OBJECT_P:
			case OF:
			case OFF:
			case OIDS:
			case OPERATOR:
			case OPTION:
			case OPTIONS:
			case OWNED:
			case OWNER:
			case PARSER:
			case PARTIAL:
			case PARTITION:
			case PASSING:
			case PASSWORD:
			case PLANS:
			case PRECEDING:
			case PREPARE:
			case PREPARED:
			case PRESERVE:
			case PRIOR:
			case PRIVILEGES:
			case PROCEDURAL:
			case PROCEDURE:
			case PROGRAM:
			case QUOTE:
			case RANGE:
			case READ:
			case REASSIGN:
			case RECHECK:
			case RECURSIVE:
			case REF:
			case REFRESH:
			case REINDEX:
			case RELATIVE_P:
			case RELEASE:
			case RENAME:
			case REPEATABLE:
			case REPLICA:
			case RESET:
			case RESTART:
			case RESTRICT:
			case RETURNS:
			case REVOKE:
			case ROLE:
			case ROLLBACK:
			case ROWS:
			case RULE:
			case SAVEPOINT:
			case SCHEMA:
			case SCROLL:
			case SEARCH:
			case SECOND_P:
			case SECURITY:
			case SEQUENCE:
			case SEQUENCES:
			case SERIALIZABLE:
			case SERVER:
			case SESSION:
			case SET:
			case SHARE:
			case SHOW:
			case SIMPLE:
			case SNAPSHOT:
			case STABLE:
			case STANDALONE_P:
			case START:
			case STATEMENT:
			case STATISTICS:
			case STDIN:
			case STDOUT:
			case STORAGE:
			case STRICT_P:
			case STRIP_P:
			case SYSID:
			case SYSTEM_P:
			case TABLES:
			case TABLESPACE:
			case TEMP:
			case TEMPLATE:
			case TEMPORARY:
			case TEXT_P:
			case TRANSACTION:
			case TRIGGER:
			case TRUNCATE:
			case TRUSTED:
			case TYPE_P:
			case TYPES_P:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNENCRYPTED:
			case UNKNOWN:
			case UNLISTEN:
			case UNLOGGED:
			case UNTIL:
			case UPDATE:
			case VACUUM:
			case VALID:
			case VALIDATE:
			case VALIDATOR:
			case VARYING:
			case VERSION_P:
			case VIEW:
			case VOLATILE:
			case WHITESPACE_P:
			case WITHOUT:
			case WORK:
			case WRAPPER:
			case WRITE:
			case XML_P:
			case YEAR_P:
			case YES_P:
			case ZONE:
			case CALL:
			case CURRENT_P:
			case ATTACH:
			case DETACH:
			case EXPRESSION:
			case GENERATED:
			case LOGGED:
			case STORED:
			case INCLUDE:
			case ROUTINE:
			case TRANSFORM:
			case IMPORT_P:
			case POLICY:
			case METHOD:
			case REFERENCING:
			case NEW:
			case OLD:
			case VALUE_P:
			case SUBSCRIPTION:
			case PUBLICATION:
			case ROUTINES:
			case SCHEMAS:
			case PROCEDURES:
			case INPUT_P:
			case SUPPORT:
			case PARALLEL:
			case SQL_P:
			case DEPENDS:
			case OVERRIDING:
			case CONFLICT:
			case SKIP_P:
			case LOCKED:
			case TIES:
			case ROLLUP:
			case CUBE:
			case SETS:
			case TABLESAMPLE:
			case ORDINALITY:
			case COLUMNS:
			case ROWTYPE:
			case NORMALIZED:
			case WITHIN:
			case FILTER:
			case GROUPS:
			case OTHERS:
			case NFC:
			case NFD:
			case NFKC:
			case NFKD:
			case UESCAPE:
			case VIEWS:
			case DUMP:
			case PRINT_STRICT_PARAMS:
			case VARIABLE_CONFLICT:
			case ERROR:
			case USE_VARIABLE:
			case USE_COLUMN:
			case ALIAS:
			case CONSTANT:
			case PERFORM:
			case GET:
			case DIAGNOSTICS:
			case STACKED:
			case ELSIF:
			case SLICE:
			case EXIT:
			case RETURN:
			case QUERY:
			case RAISE:
			case SQLSTATE:
			case DEBUG:
			case INFO:
			case NOTICE:
			case WARNING:
			case EXCEPTION:
			case ASSERT:
			case OPEN:
			case Identifier:
			case QuotedIdentifier:
			case UnicodeQuotedIdentifier:
			case PLSQLVARIABLENAME:
			case PLSQLIDENTIFIER:
				EnterOuterAlt(_localctx, 1);
				{
				State = 5456;
				type_function_name();
				}
				break;
			case REPLACE:
			case XMLCOMMENT:
			case XMLAGG:
			case XML_IS_WELL_FORMED:
			case XML_IS_WELL_FORMED_DOCUMENT:
			case XML_IS_WELL_FORMED_CONTENT:
			case XPATH:
			case XPATH_EXISTS:
			case REVERSE:
			case LOG:
			case ABS:
			case CBRT:
			case CEIL:
			case CEILING:
			case DEGREES:
			case DIV:
			case EXP:
			case FACTORIAL:
			case FLOOR:
			case GCD:
			case LCM:
			case LN:
			case LOG10:
			case MIN_SCALE:
			case MOD:
			case PI:
			case POWER:
			case RADIANS:
			case ROUND:
			case SCALE:
			case SIGN:
			case SQRT:
			case TRIM_SCALE:
			case TRUNC:
			case WIDTH_BUCKET:
			case RANDOM:
			case SETSEED:
			case ACOS:
			case ACOSD:
			case ASIN:
			case ASIND:
			case ATAN:
			case ATAND:
			case ATAN2:
			case ATAN2D:
			case COS:
			case COSD:
			case COT:
			case COTD:
			case SIN:
			case SIND:
			case TAN:
			case TAND:
			case SINH:
			case COSH:
			case TANH:
			case ASINH:
			case ACOSH:
			case ATANH:
			case BIT_LENGTH:
			case CHAR_LENGTH:
			case CHARACTER_LENGTH:
			case LOWER:
			case OCTET_LENGTH:
			case UPPER:
			case ASCII:
			case BTRIM:
			case CHR:
			case CONCAT:
			case CONCAT_WS:
			case FORMAT:
			case INITCAP:
			case LENGTH:
			case LPAD:
			case LTRIM:
			case MD5:
			case PARSE_IDENT:
			case PG_CLIENT_ENCODING:
			case QUOTE_IDENT:
			case QUOTE_LITERAL:
			case QUOTE_NULLABLE:
			case REGEXP_COUNT:
			case REGEXP_INSTR:
			case REGEXP_LIKE:
			case REGEXP_MATCH:
			case REGEXP_MATCHES:
			case REGEXP_REPLACE:
			case REGEXP_SPLIT_TO_ARRAY:
			case REGEXP_SPLIT_TO_TABLE:
			case REGEXP_SUBSTR:
			case REPEAT:
			case RPAD:
			case RTRIM:
			case SPLIT_PART:
			case STARTS_WITH:
			case STRING_TO_ARRAY:
			case STRING_TO_TABLE:
			case STRPOS:
			case SUBSTR:
			case TO_ASCII:
			case TO_HEX:
			case TRANSLATE:
			case UNISTR:
			case AGE:
			case CLOCK_TIMESTAMP:
			case DATE_BIN:
			case DATE_PART:
			case DATE_TRUNC:
			case ISFINITE:
			case JUSTIFY_DAYS:
			case JUSTIFY_HOURS:
			case JUSTIFY_INTERVAL:
			case MAKE_DATE:
			case MAKE_INTERVAL:
			case MAKE_TIME:
			case MAKE_TIMESTAMP:
			case MAKE_TIMESTAMPTZ:
			case NOW:
			case STATEMENT_TIMESTAMP:
			case TIMEOFDAY:
			case TRANSACTION_TIMESTAMP:
			case TO_TIMESTAMP:
			case TO_CHAR:
			case TO_DATE:
			case TO_NUMBER:
				EnterOuterAlt(_localctx, 2);
				{
				State = 5457;
				builtin_function_name();
				}
				break;
			case LEFT:
				EnterOuterAlt(_localctx, 3);
				{
				State = 5458;
				Match(LEFT);
				}
				break;
			case RIGHT:
				EnterOuterAlt(_localctx, 4);
				{
				State = 5459;
				Match(RIGHT);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Func_returnContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Func_typeContext func_type() {
			return GetRuleContext<Func_typeContext>(0);
		}
		public Func_returnContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_func_return; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterFunc_return(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitFunc_return(this);
		}
	}

	[RuleVersion(0)]
	public Func_returnContext func_return() {
		Func_returnContext _localctx = new Func_returnContext(Context, State);
		EnterRule(_localctx, 638, RULE_func_return);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5462;
			func_type();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Func_typeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypenameContext typename() {
			return GetRuleContext<TypenameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AttrsContext attrs() {
			return GetRuleContext<AttrsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PERCENT() { return GetToken(PostgreSQLParser.PERCENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TYPE_P() { return GetToken(PostgreSQLParser.TYPE_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Builtin_function_nameContext builtin_function_name() {
			return GetRuleContext<Builtin_function_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Type_function_nameContext type_function_name() {
			return GetRuleContext<Type_function_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFT() { return GetToken(PostgreSQLParser.LEFT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHT() { return GetToken(PostgreSQLParser.RIGHT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SETOF() { return GetToken(PostgreSQLParser.SETOF, 0); }
		public Func_typeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_func_type; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterFunc_type(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitFunc_type(this);
		}
	}

	[RuleVersion(0)]
	public Func_typeContext func_type() {
		Func_typeContext _localctx = new Func_typeContext(Context, State);
		EnterRule(_localctx, 640, RULE_func_type);
		int _la;
		try {
			State = 5478;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,281,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 5464;
				typename();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 5466;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==SETOF) {
					{
					State = 5465;
					Match(SETOF);
					}
				}

				State = 5472;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case REPLACE:
				case XMLCOMMENT:
				case XMLAGG:
				case XML_IS_WELL_FORMED:
				case XML_IS_WELL_FORMED_DOCUMENT:
				case XML_IS_WELL_FORMED_CONTENT:
				case XPATH:
				case XPATH_EXISTS:
				case REVERSE:
				case LOG:
				case ABS:
				case CBRT:
				case CEIL:
				case CEILING:
				case DEGREES:
				case DIV:
				case EXP:
				case FACTORIAL:
				case FLOOR:
				case GCD:
				case LCM:
				case LN:
				case LOG10:
				case MIN_SCALE:
				case MOD:
				case PI:
				case POWER:
				case RADIANS:
				case ROUND:
				case SCALE:
				case SIGN:
				case SQRT:
				case TRIM_SCALE:
				case TRUNC:
				case WIDTH_BUCKET:
				case RANDOM:
				case SETSEED:
				case ACOS:
				case ACOSD:
				case ASIN:
				case ASIND:
				case ATAN:
				case ATAND:
				case ATAN2:
				case ATAN2D:
				case COS:
				case COSD:
				case COT:
				case COTD:
				case SIN:
				case SIND:
				case TAN:
				case TAND:
				case SINH:
				case COSH:
				case TANH:
				case ASINH:
				case ACOSH:
				case ATANH:
				case BIT_LENGTH:
				case CHAR_LENGTH:
				case CHARACTER_LENGTH:
				case LOWER:
				case OCTET_LENGTH:
				case UPPER:
				case ASCII:
				case BTRIM:
				case CHR:
				case CONCAT:
				case CONCAT_WS:
				case FORMAT:
				case INITCAP:
				case LENGTH:
				case LPAD:
				case LTRIM:
				case MD5:
				case PARSE_IDENT:
				case PG_CLIENT_ENCODING:
				case QUOTE_IDENT:
				case QUOTE_LITERAL:
				case QUOTE_NULLABLE:
				case REGEXP_COUNT:
				case REGEXP_INSTR:
				case REGEXP_LIKE:
				case REGEXP_MATCH:
				case REGEXP_MATCHES:
				case REGEXP_REPLACE:
				case REGEXP_SPLIT_TO_ARRAY:
				case REGEXP_SPLIT_TO_TABLE:
				case REGEXP_SUBSTR:
				case REPEAT:
				case RPAD:
				case RTRIM:
				case SPLIT_PART:
				case STARTS_WITH:
				case STRING_TO_ARRAY:
				case STRING_TO_TABLE:
				case STRPOS:
				case SUBSTR:
				case TO_ASCII:
				case TO_HEX:
				case TRANSLATE:
				case UNISTR:
				case AGE:
				case CLOCK_TIMESTAMP:
				case DATE_BIN:
				case DATE_PART:
				case DATE_TRUNC:
				case ISFINITE:
				case JUSTIFY_DAYS:
				case JUSTIFY_HOURS:
				case JUSTIFY_INTERVAL:
				case MAKE_DATE:
				case MAKE_INTERVAL:
				case MAKE_TIME:
				case MAKE_TIMESTAMP:
				case MAKE_TIMESTAMPTZ:
				case NOW:
				case STATEMENT_TIMESTAMP:
				case TIMEOFDAY:
				case TRANSACTION_TIMESTAMP:
				case TO_TIMESTAMP:
				case TO_CHAR:
				case TO_DATE:
				case TO_NUMBER:
					{
					State = 5468;
					builtin_function_name();
					}
					break;
				case AND:
				case ARRAY:
				case COLLATE:
				case COLUMN:
				case CONSTRAINT:
				case DEFAULT:
				case DO:
				case FETCH:
				case TABLE:
				case AUTHORIZATION:
				case BINARY:
				case COLLATION:
				case CONCURRENTLY:
				case CROSS:
				case CURRENT_SCHEMA:
				case FREEZE:
				case FULL:
				case ILIKE:
				case INNER_P:
				case IS:
				case ISNULL:
				case JOIN:
				case LIKE:
				case NATURAL:
				case NOTNULL:
				case OUTER_P:
				case OVER:
				case OVERLAPS:
				case SIMILAR:
				case VERBOSE:
				case ABORT_P:
				case ABSOLUTE_P:
				case ACCESS:
				case ACTION:
				case ADD_P:
				case ADMIN:
				case AFTER:
				case AGGREGATE:
				case ALSO:
				case ALTER:
				case ALWAYS:
				case ASSERTION:
				case ASSIGNMENT:
				case AT:
				case ATTRIBUTE:
				case BACKWARD:
				case BEFORE:
				case BEGIN_P:
				case BY:
				case CACHE:
				case CALLED:
				case CASCADE:
				case CASCADED:
				case CATALOG:
				case CHAIN:
				case CHARACTERISTICS:
				case CHECKPOINT:
				case CLASS:
				case CLOSE:
				case CLUSTER:
				case COMMENT:
				case COMMENTS:
				case COMMIT:
				case COMMITTED:
				case CONFIGURATION:
				case CONNECTION:
				case CONSTRAINTS:
				case CONTENT_P:
				case CONTINUE_P:
				case CONVERSION_P:
				case COPY:
				case COST:
				case CSV:
				case CURSOR:
				case CYCLE:
				case DATA_P:
				case DATABASE:
				case DAY_P:
				case DEALLOCATE:
				case DECLARE:
				case DEFAULTS:
				case DEFERRED:
				case DEFINER:
				case DELETE_P:
				case DELIMITER:
				case DELIMITERS:
				case DICTIONARY:
				case DISABLE_P:
				case DISCARD:
				case DOCUMENT_P:
				case DOMAIN_P:
				case DOUBLE_P:
				case DROP:
				case EACH:
				case ENABLE_P:
				case ENCODING:
				case ENCRYPTED:
				case ENUM_P:
				case ESCAPE:
				case EVENT:
				case EXCLUDE:
				case EXCLUDING:
				case EXCLUSIVE:
				case EXECUTE:
				case EXPLAIN:
				case EXTENSION:
				case EXTERNAL:
				case FAMILY:
				case FIRST_P:
				case FOLLOWING:
				case FORCE:
				case FORWARD:
				case FUNCTION:
				case FUNCTIONS:
				case GLOBAL:
				case GRANTED:
				case HANDLER:
				case HEADER_P:
				case HOLD:
				case HOUR_P:
				case IDENTITY_P:
				case IF_P:
				case IMMEDIATE:
				case IMMUTABLE:
				case IMPLICIT_P:
				case INCLUDING:
				case INCREMENT:
				case INDEX:
				case INDEXES:
				case INHERIT:
				case INHERITS:
				case INLINE_P:
				case INSENSITIVE:
				case INSERT:
				case INSTEAD:
				case INVOKER:
				case ISOLATION:
				case KEY:
				case LABEL:
				case LANGUAGE:
				case LARGE_P:
				case LAST_P:
				case LEAKPROOF:
				case LEVEL:
				case LISTEN:
				case LOAD:
				case LOCAL:
				case LOCATION:
				case LOCK_P:
				case MAPPING:
				case MATCH:
				case MATERIALIZED:
				case MAXVALUE:
				case MINUTE_P:
				case MINVALUE:
				case MODE:
				case MONTH_P:
				case MOVE:
				case NAME_P:
				case NAMES:
				case NEXT:
				case NO:
				case NOTHING:
				case NOTIFY:
				case NOWAIT:
				case NULLS_P:
				case OBJECT_P:
				case OF:
				case OFF:
				case OIDS:
				case OPERATOR:
				case OPTION:
				case OPTIONS:
				case OWNED:
				case OWNER:
				case PARSER:
				case PARTIAL:
				case PARTITION:
				case PASSING:
				case PASSWORD:
				case PLANS:
				case PRECEDING:
				case PREPARE:
				case PREPARED:
				case PRESERVE:
				case PRIOR:
				case PRIVILEGES:
				case PROCEDURAL:
				case PROCEDURE:
				case PROGRAM:
				case QUOTE:
				case RANGE:
				case READ:
				case REASSIGN:
				case RECHECK:
				case RECURSIVE:
				case REF:
				case REFRESH:
				case REINDEX:
				case RELATIVE_P:
				case RELEASE:
				case RENAME:
				case REPEATABLE:
				case REPLICA:
				case RESET:
				case RESTART:
				case RESTRICT:
				case RETURNS:
				case REVOKE:
				case ROLE:
				case ROLLBACK:
				case ROWS:
				case RULE:
				case SAVEPOINT:
				case SCHEMA:
				case SCROLL:
				case SEARCH:
				case SECOND_P:
				case SECURITY:
				case SEQUENCE:
				case SEQUENCES:
				case SERIALIZABLE:
				case SERVER:
				case SESSION:
				case SET:
				case SHARE:
				case SHOW:
				case SIMPLE:
				case SNAPSHOT:
				case STABLE:
				case STANDALONE_P:
				case START:
				case STATEMENT:
				case STATISTICS:
				case STDIN:
				case STDOUT:
				case STORAGE:
				case STRICT_P:
				case STRIP_P:
				case SYSID:
				case SYSTEM_P:
				case TABLES:
				case TABLESPACE:
				case TEMP:
				case TEMPLATE:
				case TEMPORARY:
				case TEXT_P:
				case TRANSACTION:
				case TRIGGER:
				case TRUNCATE:
				case TRUSTED:
				case TYPE_P:
				case TYPES_P:
				case UNBOUNDED:
				case UNCOMMITTED:
				case UNENCRYPTED:
				case UNKNOWN:
				case UNLISTEN:
				case UNLOGGED:
				case UNTIL:
				case UPDATE:
				case VACUUM:
				case VALID:
				case VALIDATE:
				case VALIDATOR:
				case VARYING:
				case VERSION_P:
				case VIEW:
				case VOLATILE:
				case WHITESPACE_P:
				case WITHOUT:
				case WORK:
				case WRAPPER:
				case WRITE:
				case XML_P:
				case YEAR_P:
				case YES_P:
				case ZONE:
				case CALL:
				case CURRENT_P:
				case ATTACH:
				case DETACH:
				case EXPRESSION:
				case GENERATED:
				case LOGGED:
				case STORED:
				case INCLUDE:
				case ROUTINE:
				case TRANSFORM:
				case IMPORT_P:
				case POLICY:
				case METHOD:
				case REFERENCING:
				case NEW:
				case OLD:
				case VALUE_P:
				case SUBSCRIPTION:
				case PUBLICATION:
				case ROUTINES:
				case SCHEMAS:
				case PROCEDURES:
				case INPUT_P:
				case SUPPORT:
				case PARALLEL:
				case SQL_P:
				case DEPENDS:
				case OVERRIDING:
				case CONFLICT:
				case SKIP_P:
				case LOCKED:
				case TIES:
				case ROLLUP:
				case CUBE:
				case SETS:
				case TABLESAMPLE:
				case ORDINALITY:
				case COLUMNS:
				case ROWTYPE:
				case NORMALIZED:
				case WITHIN:
				case FILTER:
				case GROUPS:
				case OTHERS:
				case NFC:
				case NFD:
				case NFKC:
				case NFKD:
				case UESCAPE:
				case VIEWS:
				case DUMP:
				case PRINT_STRICT_PARAMS:
				case VARIABLE_CONFLICT:
				case ERROR:
				case USE_VARIABLE:
				case USE_COLUMN:
				case ALIAS:
				case CONSTANT:
				case PERFORM:
				case GET:
				case DIAGNOSTICS:
				case STACKED:
				case ELSIF:
				case SLICE:
				case EXIT:
				case RETURN:
				case QUERY:
				case RAISE:
				case SQLSTATE:
				case DEBUG:
				case INFO:
				case NOTICE:
				case WARNING:
				case EXCEPTION:
				case ASSERT:
				case OPEN:
				case Identifier:
				case QuotedIdentifier:
				case UnicodeQuotedIdentifier:
				case PLSQLVARIABLENAME:
				case PLSQLIDENTIFIER:
					{
					State = 5469;
					type_function_name();
					}
					break;
				case LEFT:
					{
					State = 5470;
					Match(LEFT);
					}
					break;
				case RIGHT:
					{
					State = 5471;
					Match(RIGHT);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 5474;
				attrs();
				State = 5475;
				Match(PERCENT);
				State = 5476;
				Match(TYPE_P);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Func_arg_with_defaultContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Func_argContext func_arg() {
			return GetRuleContext<Func_argContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public A_exprContext a_expr() {
			return GetRuleContext<A_exprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFAULT() { return GetToken(PostgreSQLParser.DEFAULT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL() { return GetToken(PostgreSQLParser.EQUAL, 0); }
		public Func_arg_with_defaultContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_func_arg_with_default; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterFunc_arg_with_default(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitFunc_arg_with_default(this);
		}
	}

	[RuleVersion(0)]
	public Func_arg_with_defaultContext func_arg_with_default() {
		Func_arg_with_defaultContext _localctx = new Func_arg_with_defaultContext(Context, State);
		EnterRule(_localctx, 642, RULE_func_arg_with_default);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5480;
			func_arg();
			State = 5483;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==EQUAL || _la==DEFAULT) {
				{
				State = 5481;
				_la = TokenStream.LA(1);
				if ( !(_la==EQUAL || _la==DEFAULT) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 5482;
				a_expr();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Aggr_argContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Func_argContext func_arg() {
			return GetRuleContext<Func_argContext>(0);
		}
		public Aggr_argContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_aggr_arg; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterAggr_arg(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitAggr_arg(this);
		}
	}

	[RuleVersion(0)]
	public Aggr_argContext aggr_arg() {
		Aggr_argContext _localctx = new Aggr_argContext(Context, State);
		EnterRule(_localctx, 644, RULE_aggr_arg);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5485;
			func_arg();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Aggr_argsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAREN() { return GetToken(PostgreSQLParser.OPEN_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAREN() { return GetToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STAR() { return GetToken(PostgreSQLParser.STAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Aggr_args_listContext[] aggr_args_list() {
			return GetRuleContexts<Aggr_args_listContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Aggr_args_listContext aggr_args_list(int i) {
			return GetRuleContext<Aggr_args_listContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ORDER() { return GetToken(PostgreSQLParser.ORDER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BY() { return GetToken(PostgreSQLParser.BY, 0); }
		public Aggr_argsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_aggr_args; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterAggr_args(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitAggr_args(this);
		}
	}

	[RuleVersion(0)]
	public Aggr_argsContext aggr_args() {
		Aggr_argsContext _localctx = new Aggr_argsContext(Context, State);
		EnterRule(_localctx, 646, RULE_aggr_args);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5487;
			Match(OPEN_PAREN);
			State = 5498;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,283,Context) ) {
			case 1:
				{
				State = 5488;
				Match(STAR);
				}
				break;
			case 2:
				{
				State = 5489;
				aggr_args_list();
				}
				break;
			case 3:
				{
				State = 5490;
				Match(ORDER);
				State = 5491;
				Match(BY);
				State = 5492;
				aggr_args_list();
				}
				break;
			case 4:
				{
				State = 5493;
				aggr_args_list();
				State = 5494;
				Match(ORDER);
				State = 5495;
				Match(BY);
				State = 5496;
				aggr_args_list();
				}
				break;
			}
			State = 5500;
			Match(CLOSE_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Aggr_args_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Aggr_argContext[] aggr_arg() {
			return GetRuleContexts<Aggr_argContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Aggr_argContext aggr_arg(int i) {
			return GetRuleContext<Aggr_argContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(PostgreSQLParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(PostgreSQLParser.COMMA, i);
		}
		public Aggr_args_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_aggr_args_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterAggr_args_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitAggr_args_list(this);
		}
	}

	[RuleVersion(0)]
	public Aggr_args_listContext aggr_args_list() {
		Aggr_args_listContext _localctx = new Aggr_args_listContext(Context, State);
		EnterRule(_localctx, 648, RULE_aggr_args_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5502;
			aggr_arg();
			State = 5507;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 5503;
				Match(COMMA);
				State = 5504;
				aggr_arg();
				}
				}
				State = 5509;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Aggregate_with_argtypesContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Func_nameContext func_name() {
			return GetRuleContext<Func_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Aggr_argsContext aggr_args() {
			return GetRuleContext<Aggr_argsContext>(0);
		}
		public Aggregate_with_argtypesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_aggregate_with_argtypes; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterAggregate_with_argtypes(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitAggregate_with_argtypes(this);
		}
	}

	[RuleVersion(0)]
	public Aggregate_with_argtypesContext aggregate_with_argtypes() {
		Aggregate_with_argtypesContext _localctx = new Aggregate_with_argtypesContext(Context, State);
		EnterRule(_localctx, 650, RULE_aggregate_with_argtypes);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5510;
			func_name();
			State = 5511;
			aggr_args();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Aggregate_with_argtypes_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Aggregate_with_argtypesContext[] aggregate_with_argtypes() {
			return GetRuleContexts<Aggregate_with_argtypesContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Aggregate_with_argtypesContext aggregate_with_argtypes(int i) {
			return GetRuleContext<Aggregate_with_argtypesContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(PostgreSQLParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(PostgreSQLParser.COMMA, i);
		}
		public Aggregate_with_argtypes_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_aggregate_with_argtypes_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterAggregate_with_argtypes_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitAggregate_with_argtypes_list(this);
		}
	}

	[RuleVersion(0)]
	public Aggregate_with_argtypes_listContext aggregate_with_argtypes_list() {
		Aggregate_with_argtypes_listContext _localctx = new Aggregate_with_argtypes_listContext(Context, State);
		EnterRule(_localctx, 652, RULE_aggregate_with_argtypes_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5513;
			aggregate_with_argtypes();
			State = 5518;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 5514;
				Match(COMMA);
				State = 5515;
				aggregate_with_argtypes();
				}
				}
				State = 5520;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Createfunc_opt_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Createfunc_opt_itemContext[] createfunc_opt_item() {
			return GetRuleContexts<Createfunc_opt_itemContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Createfunc_opt_itemContext createfunc_opt_item(int i) {
			return GetRuleContext<Createfunc_opt_itemContext>(i);
		}
		public Createfunc_opt_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_createfunc_opt_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterCreatefunc_opt_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitCreatefunc_opt_list(this);
		}
	}

	[RuleVersion(0)]
	public Createfunc_opt_listContext createfunc_opt_list() {
		Createfunc_opt_listContext _localctx = new Createfunc_opt_listContext(Context, State);
		EnterRule(_localctx, 654, RULE_createfunc_opt_list);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 5522;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 5521;
					createfunc_opt_item();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 5524;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,286,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );

			                ParseRoutineBody(_localctx);
			            
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Common_func_opt_itemContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CALLED() { return GetToken(PostgreSQLParser.CALLED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ON() { return GetToken(PostgreSQLParser.ON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NULL_P() { return GetTokens(PostgreSQLParser.NULL_P); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NULL_P(int i) {
			return GetToken(PostgreSQLParser.NULL_P, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INPUT_P() { return GetToken(PostgreSQLParser.INPUT_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RETURNS() { return GetToken(PostgreSQLParser.RETURNS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRICT_P() { return GetToken(PostgreSQLParser.STRICT_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IMMUTABLE() { return GetToken(PostgreSQLParser.IMMUTABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STABLE() { return GetToken(PostgreSQLParser.STABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VOLATILE() { return GetToken(PostgreSQLParser.VOLATILE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXTERNAL() { return GetToken(PostgreSQLParser.EXTERNAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SECURITY() { return GetToken(PostgreSQLParser.SECURITY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFINER() { return GetToken(PostgreSQLParser.DEFINER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INVOKER() { return GetToken(PostgreSQLParser.INVOKER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEAKPROOF() { return GetToken(PostgreSQLParser.LEAKPROOF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT() { return GetToken(PostgreSQLParser.NOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COST() { return GetToken(PostgreSQLParser.COST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NumericonlyContext numericonly() {
			return GetRuleContext<NumericonlyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROWS() { return GetToken(PostgreSQLParser.ROWS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SUPPORT() { return GetToken(PostgreSQLParser.SUPPORT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Any_nameContext any_name() {
			return GetRuleContext<Any_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionsetresetclauseContext functionsetresetclause() {
			return GetRuleContext<FunctionsetresetclauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARALLEL() { return GetToken(PostgreSQLParser.PARALLEL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ColidContext colid() {
			return GetRuleContext<ColidContext>(0);
		}
		public Common_func_opt_itemContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_common_func_opt_item; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterCommon_func_opt_item(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitCommon_func_opt_item(this);
		}
	}

	[RuleVersion(0)]
	public Common_func_opt_itemContext common_func_opt_item() {
		Common_func_opt_itemContext _localctx = new Common_func_opt_itemContext(Context, State);
		EnterRule(_localctx, 656, RULE_common_func_opt_item);
		try {
			State = 5563;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,287,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 5528;
				Match(CALLED);
				State = 5529;
				Match(ON);
				State = 5530;
				Match(NULL_P);
				State = 5531;
				Match(INPUT_P);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 5532;
				Match(RETURNS);
				State = 5533;
				Match(NULL_P);
				State = 5534;
				Match(ON);
				State = 5535;
				Match(NULL_P);
				State = 5536;
				Match(INPUT_P);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 5537;
				Match(STRICT_P);
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 5538;
				Match(IMMUTABLE);
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 5539;
				Match(STABLE);
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 5540;
				Match(VOLATILE);
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 5541;
				Match(EXTERNAL);
				State = 5542;
				Match(SECURITY);
				State = 5543;
				Match(DEFINER);
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 5544;
				Match(EXTERNAL);
				State = 5545;
				Match(SECURITY);
				State = 5546;
				Match(INVOKER);
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 5547;
				Match(SECURITY);
				State = 5548;
				Match(DEFINER);
				}
				break;
			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 5549;
				Match(SECURITY);
				State = 5550;
				Match(INVOKER);
				}
				break;
			case 11:
				EnterOuterAlt(_localctx, 11);
				{
				State = 5551;
				Match(LEAKPROOF);
				}
				break;
			case 12:
				EnterOuterAlt(_localctx, 12);
				{
				State = 5552;
				Match(NOT);
				State = 5553;
				Match(LEAKPROOF);
				}
				break;
			case 13:
				EnterOuterAlt(_localctx, 13);
				{
				State = 5554;
				Match(COST);
				State = 5555;
				numericonly();
				}
				break;
			case 14:
				EnterOuterAlt(_localctx, 14);
				{
				State = 5556;
				Match(ROWS);
				State = 5557;
				numericonly();
				}
				break;
			case 15:
				EnterOuterAlt(_localctx, 15);
				{
				State = 5558;
				Match(SUPPORT);
				State = 5559;
				any_name();
				}
				break;
			case 16:
				EnterOuterAlt(_localctx, 16);
				{
				State = 5560;
				functionsetresetclause();
				}
				break;
			case 17:
				EnterOuterAlt(_localctx, 17);
				{
				State = 5561;
				Match(PARALLEL);
				State = 5562;
				colid();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Createfunc_opt_itemContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS() { return GetToken(PostgreSQLParser.AS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Func_asContext func_as() {
			return GetRuleContext<Func_asContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LANGUAGE() { return GetToken(PostgreSQLParser.LANGUAGE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Nonreservedword_or_sconstContext nonreservedword_or_sconst() {
			return GetRuleContext<Nonreservedword_or_sconstContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRANSFORM() { return GetToken(PostgreSQLParser.TRANSFORM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Transform_type_listContext transform_type_list() {
			return GetRuleContext<Transform_type_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WINDOW() { return GetToken(PostgreSQLParser.WINDOW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Common_func_opt_itemContext common_func_opt_item() {
			return GetRuleContext<Common_func_opt_itemContext>(0);
		}
		public Createfunc_opt_itemContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_createfunc_opt_item; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterCreatefunc_opt_item(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitCreatefunc_opt_item(this);
		}
	}

	[RuleVersion(0)]
	public Createfunc_opt_itemContext createfunc_opt_item() {
		Createfunc_opt_itemContext _localctx = new Createfunc_opt_itemContext(Context, State);
		EnterRule(_localctx, 658, RULE_createfunc_opt_item);
		try {
			State = 5573;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case AS:
				EnterOuterAlt(_localctx, 1);
				{
				State = 5565;
				Match(AS);
				State = 5566;
				func_as();
				}
				break;
			case LANGUAGE:
				EnterOuterAlt(_localctx, 2);
				{
				State = 5567;
				Match(LANGUAGE);
				State = 5568;
				nonreservedword_or_sconst();
				}
				break;
			case TRANSFORM:
				EnterOuterAlt(_localctx, 3);
				{
				State = 5569;
				Match(TRANSFORM);
				State = 5570;
				transform_type_list();
				}
				break;
			case WINDOW:
				EnterOuterAlt(_localctx, 4);
				{
				State = 5571;
				Match(WINDOW);
				}
				break;
			case NOT:
			case CALLED:
			case COST:
			case EXTERNAL:
			case IMMUTABLE:
			case LEAKPROOF:
			case RESET:
			case RETURNS:
			case ROWS:
			case SECURITY:
			case SET:
			case STABLE:
			case STRICT_P:
			case VOLATILE:
			case SUPPORT:
			case PARALLEL:
				EnterOuterAlt(_localctx, 5);
				{
				State = 5572;
				common_func_opt_item();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Func_asContext : ParserRuleContext {
		public ParserRuleContext Definition;
		public SconstContext def;
		[System.Diagnostics.DebuggerNonUserCode] public SconstContext[] sconst() {
			return GetRuleContexts<SconstContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SconstContext sconst(int i) {
			return GetRuleContext<SconstContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(PostgreSQLParser.COMMA, 0); }
		public Func_asContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_func_as; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterFunc_as(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitFunc_as(this);
		}
	}

	[RuleVersion(0)]
	public Func_asContext func_as() {
		Func_asContext _localctx = new Func_asContext(Context, State);
		EnterRule(_localctx, 660, RULE_func_as);
		try {
			State = 5580;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,289,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 5575;
				_localctx.def = sconst();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 5576;
				sconst();
				State = 5577;
				Match(COMMA);
				State = 5578;
				sconst();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Transform_type_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] FOR() { return GetTokens(PostgreSQLParser.FOR); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOR(int i) {
			return GetToken(PostgreSQLParser.FOR, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] TYPE_P() { return GetTokens(PostgreSQLParser.TYPE_P); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TYPE_P(int i) {
			return GetToken(PostgreSQLParser.TYPE_P, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypenameContext[] typename() {
			return GetRuleContexts<TypenameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypenameContext typename(int i) {
			return GetRuleContext<TypenameContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(PostgreSQLParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(PostgreSQLParser.COMMA, i);
		}
		public Transform_type_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_transform_type_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterTransform_type_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitTransform_type_list(this);
		}
	}

	[RuleVersion(0)]
	public Transform_type_listContext transform_type_list() {
		Transform_type_listContext _localctx = new Transform_type_listContext(Context, State);
		EnterRule(_localctx, 662, RULE_transform_type_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5582;
			Match(FOR);
			State = 5583;
			Match(TYPE_P);
			State = 5584;
			typename();
			State = 5591;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 5585;
				Match(COMMA);
				State = 5586;
				Match(FOR);
				State = 5587;
				Match(TYPE_P);
				State = 5588;
				typename();
				}
				}
				State = 5593;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Opt_definitionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WITH() { return GetToken(PostgreSQLParser.WITH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public DefinitionContext definition() {
			return GetRuleContext<DefinitionContext>(0);
		}
		public Opt_definitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_opt_definition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterOpt_definition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitOpt_definition(this);
		}
	}

	[RuleVersion(0)]
	public Opt_definitionContext opt_definition() {
		Opt_definitionContext _localctx = new Opt_definitionContext(Context, State);
		EnterRule(_localctx, 664, RULE_opt_definition);
		try {
			State = 5597;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,291,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 5594;
				Match(WITH);
				State = 5595;
				definition();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Table_func_columnContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Param_nameContext param_name() {
			return GetRuleContext<Param_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Func_typeContext func_type() {
			return GetRuleContext<Func_typeContext>(0);
		}
		public Table_func_columnContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_table_func_column; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterTable_func_column(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitTable_func_column(this);
		}
	}

	[RuleVersion(0)]
	public Table_func_columnContext table_func_column() {
		Table_func_columnContext _localctx = new Table_func_columnContext(Context, State);
		EnterRule(_localctx, 666, RULE_table_func_column);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5599;
			param_name();
			State = 5600;
			func_type();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Table_func_column_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Table_func_columnContext[] table_func_column() {
			return GetRuleContexts<Table_func_columnContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Table_func_columnContext table_func_column(int i) {
			return GetRuleContext<Table_func_columnContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(PostgreSQLParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(PostgreSQLParser.COMMA, i);
		}
		public Table_func_column_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_table_func_column_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterTable_func_column_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitTable_func_column_list(this);
		}
	}

	[RuleVersion(0)]
	public Table_func_column_listContext table_func_column_list() {
		Table_func_column_listContext _localctx = new Table_func_column_listContext(Context, State);
		EnterRule(_localctx, 668, RULE_table_func_column_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5602;
			table_func_column();
			State = 5607;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 5603;
				Match(COMMA);
				State = 5604;
				table_func_column();
				}
				}
				State = 5609;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AlterfunctionstmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALTER() { return GetToken(PostgreSQLParser.ALTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Function_with_argtypesContext function_with_argtypes() {
			return GetRuleContext<Function_with_argtypesContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Alterfunc_opt_listContext alterfunc_opt_list() {
			return GetRuleContext<Alterfunc_opt_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Opt_restrictContext opt_restrict() {
			return GetRuleContext<Opt_restrictContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FUNCTION() { return GetToken(PostgreSQLParser.FUNCTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PROCEDURE() { return GetToken(PostgreSQLParser.PROCEDURE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROUTINE() { return GetToken(PostgreSQLParser.ROUTINE, 0); }
		public AlterfunctionstmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alterfunctionstmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterAlterfunctionstmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitAlterfunctionstmt(this);
		}
	}

	[RuleVersion(0)]
	public AlterfunctionstmtContext alterfunctionstmt() {
		AlterfunctionstmtContext _localctx = new AlterfunctionstmtContext(Context, State);
		EnterRule(_localctx, 670, RULE_alterfunctionstmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5610;
			Match(ALTER);
			State = 5611;
			_la = TokenStream.LA(1);
			if ( !(_la==FUNCTION || _la==PROCEDURE || _la==ROUTINE) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 5612;
			function_with_argtypes();
			State = 5613;
			alterfunc_opt_list();
			State = 5614;
			opt_restrict();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alterfunc_opt_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Common_func_opt_itemContext[] common_func_opt_item() {
			return GetRuleContexts<Common_func_opt_itemContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Common_func_opt_itemContext common_func_opt_item(int i) {
			return GetRuleContext<Common_func_opt_itemContext>(i);
		}
		public Alterfunc_opt_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alterfunc_opt_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterAlterfunc_opt_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitAlterfunc_opt_list(this);
		}
	}

	[RuleVersion(0)]
	public Alterfunc_opt_listContext alterfunc_opt_list() {
		Alterfunc_opt_listContext _localctx = new Alterfunc_opt_listContext(Context, State);
		EnterRule(_localctx, 672, RULE_alterfunc_opt_list);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 5617;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 5616;
					common_func_opt_item();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 5619;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,293,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Opt_restrictContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RESTRICT() { return GetToken(PostgreSQLParser.RESTRICT, 0); }
		public Opt_restrictContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_opt_restrict; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterOpt_restrict(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitOpt_restrict(this);
		}
	}

	[RuleVersion(0)]
	public Opt_restrictContext opt_restrict() {
		Opt_restrictContext _localctx = new Opt_restrictContext(Context, State);
		EnterRule(_localctx, 674, RULE_opt_restrict);
		try {
			State = 5623;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case RESTRICT:
				EnterOuterAlt(_localctx, 1);
				{
				State = 5621;
				Match(RESTRICT);
				}
				break;
			case Eof:
			case OPEN_PAREN:
			case SEMI:
			case ANALYSE:
			case ANALYZE:
			case CREATE:
			case DO:
			case FETCH:
			case GRANT:
			case INTO:
			case SELECT:
			case TABLE:
			case WITH:
			case ABORT_P:
			case ALTER:
			case BEGIN_P:
			case CHECKPOINT:
			case CLOSE:
			case CLUSTER:
			case COMMENT:
			case COMMIT:
			case COPY:
			case DEALLOCATE:
			case DECLARE:
			case DELETE_P:
			case DISCARD:
			case DROP:
			case EXECUTE:
			case EXPLAIN:
			case INSERT:
			case LISTEN:
			case LOAD:
			case LOCK_P:
			case MERGE:
			case MOVE:
			case NOTIFY:
			case PREPARE:
			case REASSIGN:
			case REFRESH:
			case REINDEX:
			case RELEASE:
			case RESET:
			case REVOKE:
			case ROLLBACK:
			case SAVEPOINT:
			case SECURITY:
			case SET:
			case SHOW:
			case START:
			case TRUNCATE:
			case UNLISTEN:
			case UPDATE:
			case VACUUM:
			case VALUES:
			case CALL:
			case IMPORT_P:
			case END_P:
			case MetaCommand:
				EnterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RemovefuncstmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DROP() { return GetToken(PostgreSQLParser.DROP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FUNCTION() { return GetToken(PostgreSQLParser.FUNCTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Function_with_argtypes_listContext function_with_argtypes_list() {
			return GetRuleContext<Function_with_argtypes_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Opt_drop_behaviorContext opt_drop_behavior() {
			return GetRuleContext<Opt_drop_behaviorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF_P() { return GetToken(PostgreSQLParser.IF_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXISTS() { return GetToken(PostgreSQLParser.EXISTS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PROCEDURE() { return GetToken(PostgreSQLParser.PROCEDURE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROUTINE() { return GetToken(PostgreSQLParser.ROUTINE, 0); }
		public RemovefuncstmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_removefuncstmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterRemovefuncstmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitRemovefuncstmt(this);
		}
	}

	[RuleVersion(0)]
	public RemovefuncstmtContext removefuncstmt() {
		RemovefuncstmtContext _localctx = new RemovefuncstmtContext(Context, State);
		EnterRule(_localctx, 676, RULE_removefuncstmt);
		try {
			State = 5661;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,295,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 5625;
				Match(DROP);
				State = 5626;
				Match(FUNCTION);
				State = 5627;
				function_with_argtypes_list();
				State = 5628;
				opt_drop_behavior();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 5630;
				Match(DROP);
				State = 5631;
				Match(FUNCTION);
				State = 5632;
				Match(IF_P);
				State = 5633;
				Match(EXISTS);
				State = 5634;
				function_with_argtypes_list();
				State = 5635;
				opt_drop_behavior();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 5637;
				Match(DROP);
				State = 5638;
				Match(PROCEDURE);
				State = 5639;
				function_with_argtypes_list();
				State = 5640;
				opt_drop_behavior();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 5642;
				Match(DROP);
				State = 5643;
				Match(PROCEDURE);
				State = 5644;
				Match(IF_P);
				State = 5645;
				Match(EXISTS);
				State = 5646;
				function_with_argtypes_list();
				State = 5647;
				opt_drop_behavior();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 5649;
				Match(DROP);
				State = 5650;
				Match(ROUTINE);
				State = 5651;
				function_with_argtypes_list();
				State = 5652;
				opt_drop_behavior();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 5654;
				Match(DROP);
				State = 5655;
				Match(ROUTINE);
				State = 5656;
				Match(IF_P);
				State = 5657;
				Match(EXISTS);
				State = 5658;
				function_with_argtypes_list();
				State = 5659;
				opt_drop_behavior();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RemoveaggrstmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DROP() { return GetToken(PostgreSQLParser.DROP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AGGREGATE() { return GetToken(PostgreSQLParser.AGGREGATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Aggregate_with_argtypes_listContext aggregate_with_argtypes_list() {
			return GetRuleContext<Aggregate_with_argtypes_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Opt_drop_behaviorContext opt_drop_behavior() {
			return GetRuleContext<Opt_drop_behaviorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF_P() { return GetToken(PostgreSQLParser.IF_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXISTS() { return GetToken(PostgreSQLParser.EXISTS, 0); }
		public RemoveaggrstmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_removeaggrstmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterRemoveaggrstmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitRemoveaggrstmt(this);
		}
	}

	[RuleVersion(0)]
	public RemoveaggrstmtContext removeaggrstmt() {
		RemoveaggrstmtContext _localctx = new RemoveaggrstmtContext(Context, State);
		EnterRule(_localctx, 678, RULE_removeaggrstmt);
		try {
			State = 5675;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,296,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 5663;
				Match(DROP);
				State = 5664;
				Match(AGGREGATE);
				State = 5665;
				aggregate_with_argtypes_list();
				State = 5666;
				opt_drop_behavior();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 5668;
				Match(DROP);
				State = 5669;
				Match(AGGREGATE);
				State = 5670;
				Match(IF_P);
				State = 5671;
				Match(EXISTS);
				State = 5672;
				aggregate_with_argtypes_list();
				State = 5673;
				opt_drop_behavior();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RemoveoperstmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DROP() { return GetToken(PostgreSQLParser.DROP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPERATOR() { return GetToken(PostgreSQLParser.OPERATOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Operator_with_argtypes_listContext operator_with_argtypes_list() {
			return GetRuleContext<Operator_with_argtypes_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Opt_drop_behaviorContext opt_drop_behavior() {
			return GetRuleContext<Opt_drop_behaviorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF_P() { return GetToken(PostgreSQLParser.IF_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXISTS() { return GetToken(PostgreSQLParser.EXISTS, 0); }
		public RemoveoperstmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_removeoperstmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterRemoveoperstmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitRemoveoperstmt(this);
		}
	}

	[RuleVersion(0)]
	public RemoveoperstmtContext removeoperstmt() {
		RemoveoperstmtContext _localctx = new RemoveoperstmtContext(Context, State);
		EnterRule(_localctx, 680, RULE_removeoperstmt);
		try {
			State = 5689;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,297,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 5677;
				Match(DROP);
				State = 5678;
				Match(OPERATOR);
				State = 5679;
				operator_with_argtypes_list();
				State = 5680;
				opt_drop_behavior();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 5682;
				Match(DROP);
				State = 5683;
				Match(OPERATOR);
				State = 5684;
				Match(IF_P);
				State = 5685;
				Match(EXISTS);
				State = 5686;
				operator_with_argtypes_list();
				State = 5687;
				opt_drop_behavior();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Oper_argtypesContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAREN() { return GetToken(PostgreSQLParser.OPEN_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypenameContext[] typename() {
			return GetRuleContexts<TypenameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypenameContext typename(int i) {
			return GetRuleContext<TypenameContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAREN() { return GetToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(PostgreSQLParser.COMMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NONE() { return GetToken(PostgreSQLParser.NONE, 0); }
		public Oper_argtypesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_oper_argtypes; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterOper_argtypes(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitOper_argtypes(this);
		}
	}

	[RuleVersion(0)]
	public Oper_argtypesContext oper_argtypes() {
		Oper_argtypesContext _localctx = new Oper_argtypesContext(Context, State);
		EnterRule(_localctx, 682, RULE_oper_argtypes);
		try {
			State = 5713;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,298,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 5691;
				Match(OPEN_PAREN);
				State = 5692;
				typename();
				State = 5693;
				Match(CLOSE_PAREN);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 5695;
				Match(OPEN_PAREN);
				State = 5696;
				typename();
				State = 5697;
				Match(COMMA);
				State = 5698;
				typename();
				State = 5699;
				Match(CLOSE_PAREN);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 5701;
				Match(OPEN_PAREN);
				State = 5702;
				Match(NONE);
				State = 5703;
				Match(COMMA);
				State = 5704;
				typename();
				State = 5705;
				Match(CLOSE_PAREN);
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 5707;
				Match(OPEN_PAREN);
				State = 5708;
				typename();
				State = 5709;
				Match(COMMA);
				State = 5710;
				Match(NONE);
				State = 5711;
				Match(CLOSE_PAREN);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Any_operatorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public All_opContext all_op() {
			return GetRuleContext<All_opContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ColidContext[] colid() {
			return GetRuleContexts<ColidContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ColidContext colid(int i) {
			return GetRuleContext<ColidContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] DOT() { return GetTokens(PostgreSQLParser.DOT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT(int i) {
			return GetToken(PostgreSQLParser.DOT, i);
		}
		public Any_operatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_any_operator; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterAny_operator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitAny_operator(this);
		}
	}

	[RuleVersion(0)]
	public Any_operatorContext any_operator() {
		Any_operatorContext _localctx = new Any_operatorContext(Context, State);
		EnterRule(_localctx, 684, RULE_any_operator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5720;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (((_la) & ~0x3f) == 0 && ((1L << _la) & 2459027012145119232L) != 0 || (((_la - 92)) & ~0x3f) == 0 && ((1L << (_la - 92)) & -2251913479323647L) != 0 || (((_la - 156)) & ~0x3f) == 0 && ((1L << (_la - 156)) & -1L) != 0 || (((_la - 220)) & ~0x3f) == 0 && ((1L << (_la - 220)) & -19327352833L) != 0 || (((_la - 284)) & ~0x3f) == 0 && ((1L << (_la - 284)) & -1L) != 0 || (((_la - 348)) & ~0x3f) == 0 && ((1L << (_la - 348)) & -1L) != 0 || (((_la - 412)) & ~0x3f) == 0 && ((1L << (_la - 412)) & -2305851805306716161L) != 0 || (((_la - 476)) & ~0x3f) == 0 && ((1L << (_la - 476)) & -17593528221697L) != 0 || (((_la - 540)) & ~0x3f) == 0 && ((1L << (_la - 540)) & -1L) != 0 || (((_la - 604)) & ~0x3f) == 0 && ((1L << (_la - 604)) & 864691437692780543L) != 0) {
				{
				{
				State = 5715;
				colid();
				State = 5716;
				Match(DOT);
				}
				}
				State = 5722;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 5723;
			all_op();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Operator_with_argtypes_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Operator_with_argtypesContext[] operator_with_argtypes() {
			return GetRuleContexts<Operator_with_argtypesContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Operator_with_argtypesContext operator_with_argtypes(int i) {
			return GetRuleContext<Operator_with_argtypesContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(PostgreSQLParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(PostgreSQLParser.COMMA, i);
		}
		public Operator_with_argtypes_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_operator_with_argtypes_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterOperator_with_argtypes_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitOperator_with_argtypes_list(this);
		}
	}

	[RuleVersion(0)]
	public Operator_with_argtypes_listContext operator_with_argtypes_list() {
		Operator_with_argtypes_listContext _localctx = new Operator_with_argtypes_listContext(Context, State);
		EnterRule(_localctx, 686, RULE_operator_with_argtypes_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5725;
			operator_with_argtypes();
			State = 5730;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 5726;
				Match(COMMA);
				State = 5727;
				operator_with_argtypes();
				}
				}
				State = 5732;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Operator_with_argtypesContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Any_operatorContext any_operator() {
			return GetRuleContext<Any_operatorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Oper_argtypesContext oper_argtypes() {
			return GetRuleContext<Oper_argtypesContext>(0);
		}
		public Operator_with_argtypesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_operator_with_argtypes; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterOperator_with_argtypes(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitOperator_with_argtypes(this);
		}
	}

	[RuleVersion(0)]
	public Operator_with_argtypesContext operator_with_argtypes() {
		Operator_with_argtypesContext _localctx = new Operator_with_argtypesContext(Context, State);
		EnterRule(_localctx, 688, RULE_operator_with_argtypes);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5733;
			any_operator();
			State = 5734;
			oper_argtypes();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DostmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DO() { return GetToken(PostgreSQLParser.DO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Dostmt_opt_listContext dostmt_opt_list() {
			return GetRuleContext<Dostmt_opt_listContext>(0);
		}
		public DostmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dostmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterDostmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitDostmt(this);
		}
	}

	[RuleVersion(0)]
	public DostmtContext dostmt() {
		DostmtContext _localctx = new DostmtContext(Context, State);
		EnterRule(_localctx, 690, RULE_dostmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5736;
			Match(DO);
			State = 5737;
			dostmt_opt_list();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Dostmt_opt_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Dostmt_opt_itemContext[] dostmt_opt_item() {
			return GetRuleContexts<Dostmt_opt_itemContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Dostmt_opt_itemContext dostmt_opt_item(int i) {
			return GetRuleContext<Dostmt_opt_itemContext>(i);
		}
		public Dostmt_opt_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dostmt_opt_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterDostmt_opt_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitDostmt_opt_list(this);
		}
	}

	[RuleVersion(0)]
	public Dostmt_opt_listContext dostmt_opt_list() {
		Dostmt_opt_listContext _localctx = new Dostmt_opt_listContext(Context, State);
		EnterRule(_localctx, 692, RULE_dostmt_opt_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5740;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 5739;
				dostmt_opt_item();
				}
				}
				State = 5742;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==LANGUAGE || (((_la - 646)) & ~0x3f) == 0 && ((1L << (_la - 646)) & 67108885L) != 0 );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Dostmt_opt_itemContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SconstContext sconst() {
			return GetRuleContext<SconstContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LANGUAGE() { return GetToken(PostgreSQLParser.LANGUAGE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Nonreservedword_or_sconstContext nonreservedword_or_sconst() {
			return GetRuleContext<Nonreservedword_or_sconstContext>(0);
		}
		public Dostmt_opt_itemContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dostmt_opt_item; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterDostmt_opt_item(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitDostmt_opt_item(this);
		}
	}

	[RuleVersion(0)]
	public Dostmt_opt_itemContext dostmt_opt_item() {
		Dostmt_opt_itemContext _localctx = new Dostmt_opt_itemContext(Context, State);
		EnterRule(_localctx, 694, RULE_dostmt_opt_item);
		try {
			State = 5747;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case StringConstant:
			case UnicodeEscapeStringConstant:
			case BeginDollarStringConstant:
			case EscapeStringConstant:
				EnterOuterAlt(_localctx, 1);
				{
				State = 5744;
				sconst();
				}
				break;
			case LANGUAGE:
				EnterOuterAlt(_localctx, 2);
				{
				State = 5745;
				Match(LANGUAGE);
				State = 5746;
				nonreservedword_or_sconst();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CreatecaststmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CREATE() { return GetToken(PostgreSQLParser.CREATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CAST() { return GetToken(PostgreSQLParser.CAST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAREN() { return GetToken(PostgreSQLParser.OPEN_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypenameContext[] typename() {
			return GetRuleContexts<TypenameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypenameContext typename(int i) {
			return GetRuleContext<TypenameContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS() { return GetToken(PostgreSQLParser.AS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAREN() { return GetToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WITH() { return GetToken(PostgreSQLParser.WITH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FUNCTION() { return GetToken(PostgreSQLParser.FUNCTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Function_with_argtypesContext function_with_argtypes() {
			return GetRuleContext<Function_with_argtypesContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Cast_contextContext cast_context() {
			return GetRuleContext<Cast_contextContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WITHOUT() { return GetToken(PostgreSQLParser.WITHOUT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INOUT() { return GetToken(PostgreSQLParser.INOUT, 0); }
		public CreatecaststmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_createcaststmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterCreatecaststmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitCreatecaststmt(this);
		}
	}

	[RuleVersion(0)]
	public CreatecaststmtContext createcaststmt() {
		CreatecaststmtContext _localctx = new CreatecaststmtContext(Context, State);
		EnterRule(_localctx, 696, RULE_createcaststmt);
		try {
			State = 5783;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,303,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 5749;
				Match(CREATE);
				State = 5750;
				Match(CAST);
				State = 5751;
				Match(OPEN_PAREN);
				State = 5752;
				typename();
				State = 5753;
				Match(AS);
				State = 5754;
				typename();
				State = 5755;
				Match(CLOSE_PAREN);
				State = 5756;
				Match(WITH);
				State = 5757;
				Match(FUNCTION);
				State = 5758;
				function_with_argtypes();
				State = 5759;
				cast_context();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 5761;
				Match(CREATE);
				State = 5762;
				Match(CAST);
				State = 5763;
				Match(OPEN_PAREN);
				State = 5764;
				typename();
				State = 5765;
				Match(AS);
				State = 5766;
				typename();
				State = 5767;
				Match(CLOSE_PAREN);
				State = 5768;
				Match(WITHOUT);
				State = 5769;
				Match(FUNCTION);
				State = 5770;
				cast_context();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 5772;
				Match(CREATE);
				State = 5773;
				Match(CAST);
				State = 5774;
				Match(OPEN_PAREN);
				State = 5775;
				typename();
				State = 5776;
				Match(AS);
				State = 5777;
				typename();
				State = 5778;
				Match(CLOSE_PAREN);
				State = 5779;
				Match(WITH);
				State = 5780;
				Match(INOUT);
				State = 5781;
				cast_context();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Cast_contextContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS() { return GetToken(PostgreSQLParser.AS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IMPLICIT_P() { return GetToken(PostgreSQLParser.IMPLICIT_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGNMENT() { return GetToken(PostgreSQLParser.ASSIGNMENT, 0); }
		public Cast_contextContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_cast_context; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterCast_context(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitCast_context(this);
		}
	}

	[RuleVersion(0)]
	public Cast_contextContext cast_context() {
		Cast_contextContext _localctx = new Cast_contextContext(Context, State);
		EnterRule(_localctx, 698, RULE_cast_context);
		try {
			State = 5790;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,304,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 5785;
				Match(AS);
				State = 5786;
				Match(IMPLICIT_P);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 5787;
				Match(AS);
				State = 5788;
				Match(ASSIGNMENT);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DropcaststmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DROP() { return GetToken(PostgreSQLParser.DROP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CAST() { return GetToken(PostgreSQLParser.CAST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Opt_if_existsContext opt_if_exists() {
			return GetRuleContext<Opt_if_existsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAREN() { return GetToken(PostgreSQLParser.OPEN_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypenameContext[] typename() {
			return GetRuleContexts<TypenameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypenameContext typename(int i) {
			return GetRuleContext<TypenameContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS() { return GetToken(PostgreSQLParser.AS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAREN() { return GetToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Opt_drop_behaviorContext opt_drop_behavior() {
			return GetRuleContext<Opt_drop_behaviorContext>(0);
		}
		public DropcaststmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dropcaststmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterDropcaststmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitDropcaststmt(this);
		}
	}

	[RuleVersion(0)]
	public DropcaststmtContext dropcaststmt() {
		DropcaststmtContext _localctx = new DropcaststmtContext(Context, State);
		EnterRule(_localctx, 700, RULE_dropcaststmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5792;
			Match(DROP);
			State = 5793;
			Match(CAST);
			State = 5794;
			opt_if_exists();
			State = 5795;
			Match(OPEN_PAREN);
			State = 5796;
			typename();
			State = 5797;
			Match(AS);
			State = 5798;
			typename();
			State = 5799;
			Match(CLOSE_PAREN);
			State = 5800;
			opt_drop_behavior();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Opt_if_existsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF_P() { return GetToken(PostgreSQLParser.IF_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXISTS() { return GetToken(PostgreSQLParser.EXISTS, 0); }
		public Opt_if_existsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_opt_if_exists; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterOpt_if_exists(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitOpt_if_exists(this);
		}
	}

	[RuleVersion(0)]
	public Opt_if_existsContext opt_if_exists() {
		Opt_if_existsContext _localctx = new Opt_if_existsContext(Context, State);
		EnterRule(_localctx, 702, RULE_opt_if_exists);
		try {
			State = 5805;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case IF_P:
				EnterOuterAlt(_localctx, 1);
				{
				State = 5802;
				Match(IF_P);
				State = 5803;
				Match(EXISTS);
				}
				break;
			case OPEN_PAREN:
			case FOR:
				EnterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CreatetransformstmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CREATE() { return GetToken(PostgreSQLParser.CREATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Opt_or_replaceContext opt_or_replace() {
			return GetRuleContext<Opt_or_replaceContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRANSFORM() { return GetToken(PostgreSQLParser.TRANSFORM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOR() { return GetToken(PostgreSQLParser.FOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypenameContext typename() {
			return GetRuleContext<TypenameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LANGUAGE() { return GetToken(PostgreSQLParser.LANGUAGE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAREN() { return GetToken(PostgreSQLParser.OPEN_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Transform_element_listContext transform_element_list() {
			return GetRuleContext<Transform_element_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAREN() { return GetToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public CreatetransformstmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_createtransformstmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterCreatetransformstmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitCreatetransformstmt(this);
		}
	}

	[RuleVersion(0)]
	public CreatetransformstmtContext createtransformstmt() {
		CreatetransformstmtContext _localctx = new CreatetransformstmtContext(Context, State);
		EnterRule(_localctx, 704, RULE_createtransformstmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5807;
			Match(CREATE);
			State = 5808;
			opt_or_replace();
			State = 5809;
			Match(TRANSFORM);
			State = 5810;
			Match(FOR);
			State = 5811;
			typename();
			State = 5812;
			Match(LANGUAGE);
			State = 5813;
			name();
			State = 5814;
			Match(OPEN_PAREN);
			State = 5815;
			transform_element_list();
			State = 5816;
			Match(CLOSE_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Transform_element_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FROM() { return GetToken(PostgreSQLParser.FROM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SQL_P() { return GetTokens(PostgreSQLParser.SQL_P); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SQL_P(int i) {
			return GetToken(PostgreSQLParser.SQL_P, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] WITH() { return GetTokens(PostgreSQLParser.WITH); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WITH(int i) {
			return GetToken(PostgreSQLParser.WITH, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] FUNCTION() { return GetTokens(PostgreSQLParser.FUNCTION); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FUNCTION(int i) {
			return GetToken(PostgreSQLParser.FUNCTION, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Function_with_argtypesContext[] function_with_argtypes() {
			return GetRuleContexts<Function_with_argtypesContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Function_with_argtypesContext function_with_argtypes(int i) {
			return GetRuleContext<Function_with_argtypesContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(PostgreSQLParser.COMMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TO() { return GetToken(PostgreSQLParser.TO, 0); }
		public Transform_element_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_transform_element_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterTransform_element_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitTransform_element_list(this);
		}
	}

	[RuleVersion(0)]
	public Transform_element_listContext transform_element_list() {
		Transform_element_listContext _localctx = new Transform_element_listContext(Context, State);
		EnterRule(_localctx, 706, RULE_transform_element_list);
		try {
			State = 5852;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,306,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 5818;
				Match(FROM);
				State = 5819;
				Match(SQL_P);
				State = 5820;
				Match(WITH);
				State = 5821;
				Match(FUNCTION);
				State = 5822;
				function_with_argtypes();
				State = 5823;
				Match(COMMA);
				State = 5824;
				Match(TO);
				State = 5825;
				Match(SQL_P);
				State = 5826;
				Match(WITH);
				State = 5827;
				Match(FUNCTION);
				State = 5828;
				function_with_argtypes();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 5830;
				Match(TO);
				State = 5831;
				Match(SQL_P);
				State = 5832;
				Match(WITH);
				State = 5833;
				Match(FUNCTION);
				State = 5834;
				function_with_argtypes();
				State = 5835;
				Match(COMMA);
				State = 5836;
				Match(FROM);
				State = 5837;
				Match(SQL_P);
				State = 5838;
				Match(WITH);
				State = 5839;
				Match(FUNCTION);
				State = 5840;
				function_with_argtypes();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 5842;
				Match(FROM);
				State = 5843;
				Match(SQL_P);
				State = 5844;
				Match(WITH);
				State = 5845;
				Match(FUNCTION);
				State = 5846;
				function_with_argtypes();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 5847;
				Match(TO);
				State = 5848;
				Match(SQL_P);
				State = 5849;
				Match(WITH);
				State = 5850;
				Match(FUNCTION);
				State = 5851;
				function_with_argtypes();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DroptransformstmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DROP() { return GetToken(PostgreSQLParser.DROP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRANSFORM() { return GetToken(PostgreSQLParser.TRANSFORM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Opt_if_existsContext opt_if_exists() {
			return GetRuleContext<Opt_if_existsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOR() { return GetToken(PostgreSQLParser.FOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypenameContext typename() {
			return GetRuleContext<TypenameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LANGUAGE() { return GetToken(PostgreSQLParser.LANGUAGE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Opt_drop_behaviorContext opt_drop_behavior() {
			return GetRuleContext<Opt_drop_behaviorContext>(0);
		}
		public DroptransformstmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_droptransformstmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterDroptransformstmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitDroptransformstmt(this);
		}
	}

	[RuleVersion(0)]
	public DroptransformstmtContext droptransformstmt() {
		DroptransformstmtContext _localctx = new DroptransformstmtContext(Context, State);
		EnterRule(_localctx, 708, RULE_droptransformstmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5854;
			Match(DROP);
			State = 5855;
			Match(TRANSFORM);
			State = 5856;
			opt_if_exists();
			State = 5857;
			Match(FOR);
			State = 5858;
			typename();
			State = 5859;
			Match(LANGUAGE);
			State = 5860;
			name();
			State = 5861;
			opt_drop_behavior();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReindexstmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REINDEX() { return GetToken(PostgreSQLParser.REINDEX, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Reindex_target_typeContext reindex_target_type() {
			return GetRuleContext<Reindex_target_typeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Opt_concurrentlyContext opt_concurrently() {
			return GetRuleContext<Opt_concurrentlyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Qualified_nameContext qualified_name() {
			return GetRuleContext<Qualified_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Reindex_target_multitableContext reindex_target_multitable() {
			return GetRuleContext<Reindex_target_multitableContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAREN() { return GetToken(PostgreSQLParser.OPEN_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Reindex_option_listContext reindex_option_list() {
			return GetRuleContext<Reindex_option_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAREN() { return GetToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public ReindexstmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_reindexstmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterReindexstmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitReindexstmt(this);
		}
	}

	[RuleVersion(0)]
	public ReindexstmtContext reindexstmt() {
		ReindexstmtContext _localctx = new ReindexstmtContext(Context, State);
		EnterRule(_localctx, 710, RULE_reindexstmt);
		try {
			State = 5889;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,307,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 5863;
				Match(REINDEX);
				State = 5864;
				reindex_target_type();
				State = 5865;
				opt_concurrently();
				State = 5866;
				qualified_name();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 5868;
				Match(REINDEX);
				State = 5869;
				reindex_target_multitable();
				State = 5870;
				opt_concurrently();
				State = 5871;
				name();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 5873;
				Match(REINDEX);
				State = 5874;
				Match(OPEN_PAREN);
				State = 5875;
				reindex_option_list();
				State = 5876;
				Match(CLOSE_PAREN);
				State = 5877;
				reindex_target_type();
				State = 5878;
				opt_concurrently();
				State = 5879;
				qualified_name();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 5881;
				Match(REINDEX);
				State = 5882;
				Match(OPEN_PAREN);
				State = 5883;
				reindex_option_list();
				State = 5884;
				Match(CLOSE_PAREN);
				State = 5885;
				reindex_target_multitable();
				State = 5886;
				opt_concurrently();
				State = 5887;
				name();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Reindex_target_typeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INDEX() { return GetToken(PostgreSQLParser.INDEX, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLE() { return GetToken(PostgreSQLParser.TABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SCHEMA() { return GetToken(PostgreSQLParser.SCHEMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DATABASE() { return GetToken(PostgreSQLParser.DATABASE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SYSTEM_P() { return GetToken(PostgreSQLParser.SYSTEM_P, 0); }
		public Reindex_target_typeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_reindex_target_type; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterReindex_target_type(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitReindex_target_type(this);
		}
	}

	[RuleVersion(0)]
	public Reindex_target_typeContext reindex_target_type() {
		Reindex_target_typeContext _localctx = new Reindex_target_typeContext(Context, State);
		EnterRule(_localctx, 712, RULE_reindex_target_type);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5891;
			_la = TokenStream.LA(1);
			if ( !(_la==TABLE || _la==DATABASE || _la==INDEX || _la==SCHEMA || _la==SYSTEM_P) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Reindex_target_multitableContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SCHEMA() { return GetToken(PostgreSQLParser.SCHEMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SYSTEM_P() { return GetToken(PostgreSQLParser.SYSTEM_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DATABASE() { return GetToken(PostgreSQLParser.DATABASE, 0); }
		public Reindex_target_multitableContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_reindex_target_multitable; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterReindex_target_multitable(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitReindex_target_multitable(this);
		}
	}

	[RuleVersion(0)]
	public Reindex_target_multitableContext reindex_target_multitable() {
		Reindex_target_multitableContext _localctx = new Reindex_target_multitableContext(Context, State);
		EnterRule(_localctx, 714, RULE_reindex_target_multitable);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5893;
			_la = TokenStream.LA(1);
			if ( !(_la==DATABASE || _la==SCHEMA || _la==SYSTEM_P) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Reindex_option_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Reindex_option_elemContext[] reindex_option_elem() {
			return GetRuleContexts<Reindex_option_elemContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Reindex_option_elemContext reindex_option_elem(int i) {
			return GetRuleContext<Reindex_option_elemContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(PostgreSQLParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(PostgreSQLParser.COMMA, i);
		}
		public Reindex_option_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_reindex_option_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterReindex_option_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitReindex_option_list(this);
		}
	}

	[RuleVersion(0)]
	public Reindex_option_listContext reindex_option_list() {
		Reindex_option_listContext _localctx = new Reindex_option_listContext(Context, State);
		EnterRule(_localctx, 716, RULE_reindex_option_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5895;
			reindex_option_elem();
			State = 5900;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 5896;
				Match(COMMA);
				State = 5897;
				reindex_option_elem();
				}
				}
				State = 5902;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Reindex_option_elemContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VERBOSE() { return GetToken(PostgreSQLParser.VERBOSE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLESPACE() { return GetToken(PostgreSQLParser.TABLESPACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONCURRENTLY() { return GetToken(PostgreSQLParser.CONCURRENTLY, 0); }
		public Reindex_option_elemContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_reindex_option_elem; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterReindex_option_elem(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitReindex_option_elem(this);
		}
	}

	[RuleVersion(0)]
	public Reindex_option_elemContext reindex_option_elem() {
		Reindex_option_elemContext _localctx = new Reindex_option_elemContext(Context, State);
		EnterRule(_localctx, 718, RULE_reindex_option_elem);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5903;
			_la = TokenStream.LA(1);
			if ( !(_la==CONCURRENTLY || _la==VERBOSE || _la==TABLESPACE) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AltertblspcstmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALTER() { return GetToken(PostgreSQLParser.ALTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLESPACE() { return GetToken(PostgreSQLParser.TABLESPACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SET() { return GetToken(PostgreSQLParser.SET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ReloptionsContext reloptions() {
			return GetRuleContext<ReloptionsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RESET() { return GetToken(PostgreSQLParser.RESET, 0); }
		public AltertblspcstmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_altertblspcstmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterAltertblspcstmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitAltertblspcstmt(this);
		}
	}

	[RuleVersion(0)]
	public AltertblspcstmtContext altertblspcstmt() {
		AltertblspcstmtContext _localctx = new AltertblspcstmtContext(Context, State);
		EnterRule(_localctx, 720, RULE_altertblspcstmt);
		try {
			State = 5917;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,309,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 5905;
				Match(ALTER);
				State = 5906;
				Match(TABLESPACE);
				State = 5907;
				name();
				State = 5908;
				Match(SET);
				State = 5909;
				reloptions();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 5911;
				Match(ALTER);
				State = 5912;
				Match(TABLESPACE);
				State = 5913;
				name();
				State = 5914;
				Match(RESET);
				State = 5915;
				reloptions();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RenamestmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALTER() { return GetToken(PostgreSQLParser.ALTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AGGREGATE() { return GetToken(PostgreSQLParser.AGGREGATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Aggregate_with_argtypesContext aggregate_with_argtypes() {
			return GetRuleContext<Aggregate_with_argtypesContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RENAME() { return GetToken(PostgreSQLParser.RENAME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TO() { return GetToken(PostgreSQLParser.TO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NameContext[] name() {
			return GetRuleContexts<NameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public NameContext name(int i) {
			return GetRuleContext<NameContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLLATION() { return GetToken(PostgreSQLParser.COLLATION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Any_nameContext any_name() {
			return GetRuleContext<Any_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONVERSION_P() { return GetToken(PostgreSQLParser.CONVERSION_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DATABASE() { return GetToken(PostgreSQLParser.DATABASE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOMAIN_P() { return GetToken(PostgreSQLParser.DOMAIN_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONSTRAINT() { return GetToken(PostgreSQLParser.CONSTRAINT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOREIGN() { return GetToken(PostgreSQLParser.FOREIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DATA_P() { return GetToken(PostgreSQLParser.DATA_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WRAPPER() { return GetToken(PostgreSQLParser.WRAPPER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FUNCTION() { return GetToken(PostgreSQLParser.FUNCTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Function_with_argtypesContext function_with_argtypes() {
			return GetRuleContext<Function_with_argtypesContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GROUP_P() { return GetToken(PostgreSQLParser.GROUP_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public RoleidContext[] roleid() {
			return GetRuleContexts<RoleidContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public RoleidContext roleid(int i) {
			return GetRuleContext<RoleidContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Opt_proceduralContext opt_procedural() {
			return GetRuleContext<Opt_proceduralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LANGUAGE() { return GetToken(PostgreSQLParser.LANGUAGE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPERATOR() { return GetToken(PostgreSQLParser.OPERATOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLASS() { return GetToken(PostgreSQLParser.CLASS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode USING() { return GetToken(PostgreSQLParser.USING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FAMILY() { return GetToken(PostgreSQLParser.FAMILY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode POLICY() { return GetToken(PostgreSQLParser.POLICY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ON() { return GetToken(PostgreSQLParser.ON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Qualified_nameContext qualified_name() {
			return GetRuleContext<Qualified_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF_P() { return GetToken(PostgreSQLParser.IF_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXISTS() { return GetToken(PostgreSQLParser.EXISTS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PROCEDURE() { return GetToken(PostgreSQLParser.PROCEDURE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PUBLICATION() { return GetToken(PostgreSQLParser.PUBLICATION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROUTINE() { return GetToken(PostgreSQLParser.ROUTINE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SCHEMA() { return GetToken(PostgreSQLParser.SCHEMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SERVER() { return GetToken(PostgreSQLParser.SERVER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SUBSCRIPTION() { return GetToken(PostgreSQLParser.SUBSCRIPTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLE() { return GetToken(PostgreSQLParser.TABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Relation_exprContext relation_expr() {
			return GetRuleContext<Relation_exprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEQUENCE() { return GetToken(PostgreSQLParser.SEQUENCE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VIEW() { return GetToken(PostgreSQLParser.VIEW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MATERIALIZED() { return GetToken(PostgreSQLParser.MATERIALIZED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INDEX() { return GetToken(PostgreSQLParser.INDEX, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Opt_columnContext opt_column() {
			return GetRuleContext<Opt_columnContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RULE() { return GetToken(PostgreSQLParser.RULE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRIGGER() { return GetToken(PostgreSQLParser.TRIGGER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EVENT() { return GetToken(PostgreSQLParser.EVENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROLE() { return GetToken(PostgreSQLParser.ROLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode USER() { return GetToken(PostgreSQLParser.USER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLESPACE() { return GetToken(PostgreSQLParser.TABLESPACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STATISTICS() { return GetToken(PostgreSQLParser.STATISTICS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TEXT_P() { return GetToken(PostgreSQLParser.TEXT_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEARCH() { return GetToken(PostgreSQLParser.SEARCH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARSER() { return GetToken(PostgreSQLParser.PARSER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DICTIONARY() { return GetToken(PostgreSQLParser.DICTIONARY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TEMPLATE() { return GetToken(PostgreSQLParser.TEMPLATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONFIGURATION() { return GetToken(PostgreSQLParser.CONFIGURATION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TYPE_P() { return GetToken(PostgreSQLParser.TYPE_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ATTRIBUTE() { return GetToken(PostgreSQLParser.ATTRIBUTE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Opt_drop_behaviorContext opt_drop_behavior() {
			return GetRuleContext<Opt_drop_behaviorContext>(0);
		}
		public RenamestmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_renamestmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterRenamestmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitRenamestmt(this);
		}
	}

	[RuleVersion(0)]
	public RenamestmtContext renamestmt() {
		RenamestmtContext _localctx = new RenamestmtContext(Context, State);
		EnterRule(_localctx, 722, RULE_renamestmt);
		try {
			State = 6387;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,310,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 5919;
				Match(ALTER);
				State = 5920;
				Match(AGGREGATE);
				State = 5921;
				aggregate_with_argtypes();
				State = 5922;
				Match(RENAME);
				State = 5923;
				Match(TO);
				State = 5924;
				name();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 5926;
				Match(ALTER);
				State = 5927;
				Match(COLLATION);
				State = 5928;
				any_name();
				State = 5929;
				Match(RENAME);
				State = 5930;
				Match(TO);
				State = 5931;
				name();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 5933;
				Match(ALTER);
				State = 5934;
				Match(CONVERSION_P);
				State = 5935;
				any_name();
				State = 5936;
				Match(RENAME);
				State = 5937;
				Match(TO);
				State = 5938;
				name();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 5940;
				Match(ALTER);
				State = 5941;
				Match(DATABASE);
				State = 5942;
				name();
				State = 5943;
				Match(RENAME);
				State = 5944;
				Match(TO);
				State = 5945;
				name();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 5947;
				Match(ALTER);
				State = 5948;
				Match(DOMAIN_P);
				State = 5949;
				any_name();
				State = 5950;
				Match(RENAME);
				State = 5951;
				Match(TO);
				State = 5952;
				name();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 5954;
				Match(ALTER);
				State = 5955;
				Match(DOMAIN_P);
				State = 5956;
				any_name();
				State = 5957;
				Match(RENAME);
				State = 5958;
				Match(CONSTRAINT);
				State = 5959;
				name();
				State = 5960;
				Match(TO);
				State = 5961;
				name();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 5963;
				Match(ALTER);
				State = 5964;
				Match(FOREIGN);
				State = 5965;
				Match(DATA_P);
				State = 5966;
				Match(WRAPPER);
				State = 5967;
				name();
				State = 5968;
				Match(RENAME);
				State = 5969;
				Match(TO);
				State = 5970;
				name();
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 5972;
				Match(ALTER);
				State = 5973;
				Match(FUNCTION);
				State = 5974;
				function_with_argtypes();
				State = 5975;
				Match(RENAME);
				State = 5976;
				Match(TO);
				State = 5977;
				name();
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 5979;
				Match(ALTER);
				State = 5980;
				Match(GROUP_P);
				State = 5981;
				roleid();
				State = 5982;
				Match(RENAME);
				State = 5983;
				Match(TO);
				State = 5984;
				roleid();
				}
				break;
			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 5986;
				Match(ALTER);
				State = 5987;
				opt_procedural();
				State = 5988;
				Match(LANGUAGE);
				State = 5989;
				name();
				State = 5990;
				Match(RENAME);
				State = 5991;
				Match(TO);
				State = 5992;
				name();
				}
				break;
			case 11:
				EnterOuterAlt(_localctx, 11);
				{
				State = 5994;
				Match(ALTER);
				State = 5995;
				Match(OPERATOR);
				State = 5996;
				Match(CLASS);
				State = 5997;
				any_name();
				State = 5998;
				Match(USING);
				State = 5999;
				name();
				State = 6000;
				Match(RENAME);
				State = 6001;
				Match(TO);
				State = 6002;
				name();
				}
				break;
			case 12:
				EnterOuterAlt(_localctx, 12);
				{
				State = 6004;
				Match(ALTER);
				State = 6005;
				Match(OPERATOR);
				State = 6006;
				Match(FAMILY);
				State = 6007;
				any_name();
				State = 6008;
				Match(USING);
				State = 6009;
				name();
				State = 6010;
				Match(RENAME);
				State = 6011;
				Match(TO);
				State = 6012;
				name();
				}
				break;
			case 13:
				EnterOuterAlt(_localctx, 13);
				{
				State = 6014;
				Match(ALTER);
				State = 6015;
				Match(POLICY);
				State = 6016;
				name();
				State = 6017;
				Match(ON);
				State = 6018;
				qualified_name();
				State = 6019;
				Match(RENAME);
				State = 6020;
				Match(TO);
				State = 6021;
				name();
				}
				break;
			case 14:
				EnterOuterAlt(_localctx, 14);
				{
				State = 6023;
				Match(ALTER);
				State = 6024;
				Match(POLICY);
				State = 6025;
				Match(IF_P);
				State = 6026;
				Match(EXISTS);
				State = 6027;
				name();
				State = 6028;
				Match(ON);
				State = 6029;
				qualified_name();
				State = 6030;
				Match(RENAME);
				State = 6031;
				Match(TO);
				State = 6032;
				name();
				}
				break;
			case 15:
				EnterOuterAlt(_localctx, 15);
				{
				State = 6034;
				Match(ALTER);
				State = 6035;
				Match(PROCEDURE);
				State = 6036;
				function_with_argtypes();
				State = 6037;
				Match(RENAME);
				State = 6038;
				Match(TO);
				State = 6039;
				name();
				}
				break;
			case 16:
				EnterOuterAlt(_localctx, 16);
				{
				State = 6041;
				Match(ALTER);
				State = 6042;
				Match(PUBLICATION);
				State = 6043;
				name();
				State = 6044;
				Match(RENAME);
				State = 6045;
				Match(TO);
				State = 6046;
				name();
				}
				break;
			case 17:
				EnterOuterAlt(_localctx, 17);
				{
				State = 6048;
				Match(ALTER);
				State = 6049;
				Match(ROUTINE);
				State = 6050;
				function_with_argtypes();
				State = 6051;
				Match(RENAME);
				State = 6052;
				Match(TO);
				State = 6053;
				name();
				}
				break;
			case 18:
				EnterOuterAlt(_localctx, 18);
				{
				State = 6055;
				Match(ALTER);
				State = 6056;
				Match(SCHEMA);
				State = 6057;
				name();
				State = 6058;
				Match(RENAME);
				State = 6059;
				Match(TO);
				State = 6060;
				name();
				}
				break;
			case 19:
				EnterOuterAlt(_localctx, 19);
				{
				State = 6062;
				Match(ALTER);
				State = 6063;
				Match(SERVER);
				State = 6064;
				name();
				State = 6065;
				Match(RENAME);
				State = 6066;
				Match(TO);
				State = 6067;
				name();
				}
				break;
			case 20:
				EnterOuterAlt(_localctx, 20);
				{
				State = 6069;
				Match(ALTER);
				State = 6070;
				Match(SUBSCRIPTION);
				State = 6071;
				name();
				State = 6072;
				Match(RENAME);
				State = 6073;
				Match(TO);
				State = 6074;
				name();
				}
				break;
			case 21:
				EnterOuterAlt(_localctx, 21);
				{
				State = 6076;
				Match(ALTER);
				State = 6077;
				Match(TABLE);
				State = 6078;
				relation_expr();
				State = 6079;
				Match(RENAME);
				State = 6080;
				Match(TO);
				State = 6081;
				name();
				}
				break;
			case 22:
				EnterOuterAlt(_localctx, 22);
				{
				State = 6083;
				Match(ALTER);
				State = 6084;
				Match(TABLE);
				State = 6085;
				Match(IF_P);
				State = 6086;
				Match(EXISTS);
				State = 6087;
				relation_expr();
				State = 6088;
				Match(RENAME);
				State = 6089;
				Match(TO);
				State = 6090;
				name();
				}
				break;
			case 23:
				EnterOuterAlt(_localctx, 23);
				{
				State = 6092;
				Match(ALTER);
				State = 6093;
				Match(SEQUENCE);
				State = 6094;
				qualified_name();
				State = 6095;
				Match(RENAME);
				State = 6096;
				Match(TO);
				State = 6097;
				name();
				}
				break;
			case 24:
				EnterOuterAlt(_localctx, 24);
				{
				State = 6099;
				Match(ALTER);
				State = 6100;
				Match(SEQUENCE);
				State = 6101;
				Match(IF_P);
				State = 6102;
				Match(EXISTS);
				State = 6103;
				qualified_name();
				State = 6104;
				Match(RENAME);
				State = 6105;
				Match(TO);
				State = 6106;
				name();
				}
				break;
			case 25:
				EnterOuterAlt(_localctx, 25);
				{
				State = 6108;
				Match(ALTER);
				State = 6109;
				Match(VIEW);
				State = 6110;
				qualified_name();
				State = 6111;
				Match(RENAME);
				State = 6112;
				Match(TO);
				State = 6113;
				name();
				}
				break;
			case 26:
				EnterOuterAlt(_localctx, 26);
				{
				State = 6115;
				Match(ALTER);
				State = 6116;
				Match(VIEW);
				State = 6117;
				Match(IF_P);
				State = 6118;
				Match(EXISTS);
				State = 6119;
				qualified_name();
				State = 6120;
				Match(RENAME);
				State = 6121;
				Match(TO);
				State = 6122;
				name();
				}
				break;
			case 27:
				EnterOuterAlt(_localctx, 27);
				{
				State = 6124;
				Match(ALTER);
				State = 6125;
				Match(MATERIALIZED);
				State = 6126;
				Match(VIEW);
				State = 6127;
				qualified_name();
				State = 6128;
				Match(RENAME);
				State = 6129;
				Match(TO);
				State = 6130;
				name();
				}
				break;
			case 28:
				EnterOuterAlt(_localctx, 28);
				{
				State = 6132;
				Match(ALTER);
				State = 6133;
				Match(MATERIALIZED);
				State = 6134;
				Match(VIEW);
				State = 6135;
				Match(IF_P);
				State = 6136;
				Match(EXISTS);
				State = 6137;
				qualified_name();
				State = 6138;
				Match(RENAME);
				State = 6139;
				Match(TO);
				State = 6140;
				name();
				}
				break;
			case 29:
				EnterOuterAlt(_localctx, 29);
				{
				State = 6142;
				Match(ALTER);
				State = 6143;
				Match(INDEX);
				State = 6144;
				qualified_name();
				State = 6145;
				Match(RENAME);
				State = 6146;
				Match(TO);
				State = 6147;
				name();
				}
				break;
			case 30:
				EnterOuterAlt(_localctx, 30);
				{
				State = 6149;
				Match(ALTER);
				State = 6150;
				Match(INDEX);
				State = 6151;
				Match(IF_P);
				State = 6152;
				Match(EXISTS);
				State = 6153;
				qualified_name();
				State = 6154;
				Match(RENAME);
				State = 6155;
				Match(TO);
				State = 6156;
				name();
				}
				break;
			case 31:
				EnterOuterAlt(_localctx, 31);
				{
				State = 6158;
				Match(ALTER);
				State = 6159;
				Match(FOREIGN);
				State = 6160;
				Match(TABLE);
				State = 6161;
				relation_expr();
				State = 6162;
				Match(RENAME);
				State = 6163;
				Match(TO);
				State = 6164;
				name();
				}
				break;
			case 32:
				EnterOuterAlt(_localctx, 32);
				{
				State = 6166;
				Match(ALTER);
				State = 6167;
				Match(FOREIGN);
				State = 6168;
				Match(TABLE);
				State = 6169;
				Match(IF_P);
				State = 6170;
				Match(EXISTS);
				State = 6171;
				relation_expr();
				State = 6172;
				Match(RENAME);
				State = 6173;
				Match(TO);
				State = 6174;
				name();
				}
				break;
			case 33:
				EnterOuterAlt(_localctx, 33);
				{
				State = 6176;
				Match(ALTER);
				State = 6177;
				Match(TABLE);
				State = 6178;
				relation_expr();
				State = 6179;
				Match(RENAME);
				State = 6180;
				opt_column();
				State = 6181;
				name();
				State = 6182;
				Match(TO);
				State = 6183;
				name();
				}
				break;
			case 34:
				EnterOuterAlt(_localctx, 34);
				{
				State = 6185;
				Match(ALTER);
				State = 6186;
				Match(TABLE);
				State = 6187;
				Match(IF_P);
				State = 6188;
				Match(EXISTS);
				State = 6189;
				relation_expr();
				State = 6190;
				Match(RENAME);
				State = 6191;
				opt_column();
				State = 6192;
				name();
				State = 6193;
				Match(TO);
				State = 6194;
				name();
				}
				break;
			case 35:
				EnterOuterAlt(_localctx, 35);
				{
				State = 6196;
				Match(ALTER);
				State = 6197;
				Match(VIEW);
				State = 6198;
				qualified_name();
				State = 6199;
				Match(RENAME);
				State = 6200;
				opt_column();
				State = 6201;
				name();
				State = 6202;
				Match(TO);
				State = 6203;
				name();
				}
				break;
			case 36:
				EnterOuterAlt(_localctx, 36);
				{
				State = 6205;
				Match(ALTER);
				State = 6206;
				Match(VIEW);
				State = 6207;
				Match(IF_P);
				State = 6208;
				Match(EXISTS);
				State = 6209;
				qualified_name();
				State = 6210;
				Match(RENAME);
				State = 6211;
				opt_column();
				State = 6212;
				name();
				State = 6213;
				Match(TO);
				State = 6214;
				name();
				}
				break;
			case 37:
				EnterOuterAlt(_localctx, 37);
				{
				State = 6216;
				Match(ALTER);
				State = 6217;
				Match(MATERIALIZED);
				State = 6218;
				Match(VIEW);
				State = 6219;
				qualified_name();
				State = 6220;
				Match(RENAME);
				State = 6221;
				opt_column();
				State = 6222;
				name();
				State = 6223;
				Match(TO);
				State = 6224;
				name();
				}
				break;
			case 38:
				EnterOuterAlt(_localctx, 38);
				{
				State = 6226;
				Match(ALTER);
				State = 6227;
				Match(MATERIALIZED);
				State = 6228;
				Match(VIEW);
				State = 6229;
				Match(IF_P);
				State = 6230;
				Match(EXISTS);
				State = 6231;
				qualified_name();
				State = 6232;
				Match(RENAME);
				State = 6233;
				opt_column();
				State = 6234;
				name();
				State = 6235;
				Match(TO);
				State = 6236;
				name();
				}
				break;
			case 39:
				EnterOuterAlt(_localctx, 39);
				{
				State = 6238;
				Match(ALTER);
				State = 6239;
				Match(TABLE);
				State = 6240;
				relation_expr();
				State = 6241;
				Match(RENAME);
				State = 6242;
				Match(CONSTRAINT);
				State = 6243;
				name();
				State = 6244;
				Match(TO);
				State = 6245;
				name();
				}
				break;
			case 40:
				EnterOuterAlt(_localctx, 40);
				{
				State = 6247;
				Match(ALTER);
				State = 6248;
				Match(TABLE);
				State = 6249;
				Match(IF_P);
				State = 6250;
				Match(EXISTS);
				State = 6251;
				relation_expr();
				State = 6252;
				Match(RENAME);
				State = 6253;
				Match(CONSTRAINT);
				State = 6254;
				name();
				State = 6255;
				Match(TO);
				State = 6256;
				name();
				}
				break;
			case 41:
				EnterOuterAlt(_localctx, 41);
				{
				State = 6258;
				Match(ALTER);
				State = 6259;
				Match(FOREIGN);
				State = 6260;
				Match(TABLE);
				State = 6261;
				relation_expr();
				State = 6262;
				Match(RENAME);
				State = 6263;
				opt_column();
				State = 6264;
				name();
				State = 6265;
				Match(TO);
				State = 6266;
				name();
				}
				break;
			case 42:
				EnterOuterAlt(_localctx, 42);
				{
				State = 6268;
				Match(ALTER);
				State = 6269;
				Match(FOREIGN);
				State = 6270;
				Match(TABLE);
				State = 6271;
				Match(IF_P);
				State = 6272;
				Match(EXISTS);
				State = 6273;
				relation_expr();
				State = 6274;
				Match(RENAME);
				State = 6275;
				opt_column();
				State = 6276;
				name();
				State = 6277;
				Match(TO);
				State = 6278;
				name();
				}
				break;
			case 43:
				EnterOuterAlt(_localctx, 43);
				{
				State = 6280;
				Match(ALTER);
				State = 6281;
				Match(RULE);
				State = 6282;
				name();
				State = 6283;
				Match(ON);
				State = 6284;
				qualified_name();
				State = 6285;
				Match(RENAME);
				State = 6286;
				Match(TO);
				State = 6287;
				name();
				}
				break;
			case 44:
				EnterOuterAlt(_localctx, 44);
				{
				State = 6289;
				Match(ALTER);
				State = 6290;
				Match(TRIGGER);
				State = 6291;
				name();
				State = 6292;
				Match(ON);
				State = 6293;
				qualified_name();
				State = 6294;
				Match(RENAME);
				State = 6295;
				Match(TO);
				State = 6296;
				name();
				}
				break;
			case 45:
				EnterOuterAlt(_localctx, 45);
				{
				State = 6298;
				Match(ALTER);
				State = 6299;
				Match(EVENT);
				State = 6300;
				Match(TRIGGER);
				State = 6301;
				name();
				State = 6302;
				Match(RENAME);
				State = 6303;
				Match(TO);
				State = 6304;
				name();
				}
				break;
			case 46:
				EnterOuterAlt(_localctx, 46);
				{
				State = 6306;
				Match(ALTER);
				State = 6307;
				Match(ROLE);
				State = 6308;
				roleid();
				State = 6309;
				Match(RENAME);
				State = 6310;
				Match(TO);
				State = 6311;
				roleid();
				}
				break;
			case 47:
				EnterOuterAlt(_localctx, 47);
				{
				State = 6313;
				Match(ALTER);
				State = 6314;
				Match(USER);
				State = 6315;
				roleid();
				State = 6316;
				Match(RENAME);
				State = 6317;
				Match(TO);
				State = 6318;
				roleid();
				}
				break;
			case 48:
				EnterOuterAlt(_localctx, 48);
				{
				State = 6320;
				Match(ALTER);
				State = 6321;
				Match(TABLESPACE);
				State = 6322;
				name();
				State = 6323;
				Match(RENAME);
				State = 6324;
				Match(TO);
				State = 6325;
				name();
				}
				break;
			case 49:
				EnterOuterAlt(_localctx, 49);
				{
				State = 6327;
				Match(ALTER);
				State = 6328;
				Match(STATISTICS);
				State = 6329;
				any_name();
				State = 6330;
				Match(RENAME);
				State = 6331;
				Match(TO);
				State = 6332;
				name();
				}
				break;
			case 50:
				EnterOuterAlt(_localctx, 50);
				{
				State = 6334;
				Match(ALTER);
				State = 6335;
				Match(TEXT_P);
				State = 6336;
				Match(SEARCH);
				State = 6337;
				Match(PARSER);
				State = 6338;
				any_name();
				State = 6339;
				Match(RENAME);
				State = 6340;
				Match(TO);
				State = 6341;
				name();
				}
				break;
			case 51:
				EnterOuterAlt(_localctx, 51);
				{
				State = 6343;
				Match(ALTER);
				State = 6344;
				Match(TEXT_P);
				State = 6345;
				Match(SEARCH);
				State = 6346;
				Match(DICTIONARY);
				State = 6347;
				any_name();
				State = 6348;
				Match(RENAME);
				State = 6349;
				Match(TO);
				State = 6350;
				name();
				}
				break;
			case 52:
				EnterOuterAlt(_localctx, 52);
				{
				State = 6352;
				Match(ALTER);
				State = 6353;
				Match(TEXT_P);
				State = 6354;
				Match(SEARCH);
				State = 6355;
				Match(TEMPLATE);
				State = 6356;
				any_name();
				State = 6357;
				Match(RENAME);
				State = 6358;
				Match(TO);
				State = 6359;
				name();
				}
				break;
			case 53:
				EnterOuterAlt(_localctx, 53);
				{
				State = 6361;
				Match(ALTER);
				State = 6362;
				Match(TEXT_P);
				State = 6363;
				Match(SEARCH);
				State = 6364;
				Match(CONFIGURATION);
				State = 6365;
				any_name();
				State = 6366;
				Match(RENAME);
				State = 6367;
				Match(TO);
				State = 6368;
				name();
				}
				break;
			case 54:
				EnterOuterAlt(_localctx, 54);
				{
				State = 6370;
				Match(ALTER);
				State = 6371;
				Match(TYPE_P);
				State = 6372;
				any_name();
				State = 6373;
				Match(RENAME);
				State = 6374;
				Match(TO);
				State = 6375;
				name();
				}
				break;
			case 55:
				EnterOuterAlt(_localctx, 55);
				{
				State = 6377;
				Match(ALTER);
				State = 6378;
				Match(TYPE_P);
				State = 6379;
				any_name();
				State = 6380;
				Match(RENAME);
				State = 6381;
				Match(ATTRIBUTE);
				State = 6382;
				name();
				State = 6383;
				Match(TO);
				State = 6384;
				name();
				State = 6385;
				opt_drop_behavior();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Opt_columnContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLUMN() { return GetToken(PostgreSQLParser.COLUMN, 0); }
		public Opt_columnContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_opt_column; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterOpt_column(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitOpt_column(this);
		}
	}

	[RuleVersion(0)]
	public Opt_columnContext opt_column() {
		Opt_columnContext _localctx = new Opt_columnContext(Context, State);
		EnterRule(_localctx, 724, RULE_opt_column);
		try {
			State = 6391;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,311,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 6389;
				Match(COLUMN);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Opt_set_dataContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SET() { return GetToken(PostgreSQLParser.SET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DATA_P() { return GetToken(PostgreSQLParser.DATA_P, 0); }
		public Opt_set_dataContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_opt_set_data; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterOpt_set_data(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitOpt_set_data(this);
		}
	}

	[RuleVersion(0)]
	public Opt_set_dataContext opt_set_data() {
		Opt_set_dataContext _localctx = new Opt_set_dataContext(Context, State);
		EnterRule(_localctx, 726, RULE_opt_set_data);
		try {
			State = 6396;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case SET:
				EnterOuterAlt(_localctx, 1);
				{
				State = 6393;
				Match(SET);
				State = 6394;
				Match(DATA_P);
				}
				break;
			case TYPE_P:
				EnterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AlterobjectdependsstmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALTER() { return GetToken(PostgreSQLParser.ALTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FUNCTION() { return GetToken(PostgreSQLParser.FUNCTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Function_with_argtypesContext function_with_argtypes() {
			return GetRuleContext<Function_with_argtypesContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Opt_noContext opt_no() {
			return GetRuleContext<Opt_noContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEPENDS() { return GetToken(PostgreSQLParser.DEPENDS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] ON() { return GetTokens(PostgreSQLParser.ON); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ON(int i) {
			return GetToken(PostgreSQLParser.ON, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXTENSION() { return GetToken(PostgreSQLParser.EXTENSION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NameContext[] name() {
			return GetRuleContexts<NameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public NameContext name(int i) {
			return GetRuleContext<NameContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PROCEDURE() { return GetToken(PostgreSQLParser.PROCEDURE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROUTINE() { return GetToken(PostgreSQLParser.ROUTINE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRIGGER() { return GetToken(PostgreSQLParser.TRIGGER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Qualified_nameContext qualified_name() {
			return GetRuleContext<Qualified_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MATERIALIZED() { return GetToken(PostgreSQLParser.MATERIALIZED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VIEW() { return GetToken(PostgreSQLParser.VIEW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INDEX() { return GetToken(PostgreSQLParser.INDEX, 0); }
		public AlterobjectdependsstmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alterobjectdependsstmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterAlterobjectdependsstmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitAlterobjectdependsstmt(this);
		}
	}

	[RuleVersion(0)]
	public AlterobjectdependsstmtContext alterobjectdependsstmt() {
		AlterobjectdependsstmtContext _localctx = new AlterobjectdependsstmtContext(Context, State);
		EnterRule(_localctx, 728, RULE_alterobjectdependsstmt);
		try {
			State = 6455;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,313,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 6398;
				Match(ALTER);
				State = 6399;
				Match(FUNCTION);
				State = 6400;
				function_with_argtypes();
				State = 6401;
				opt_no();
				State = 6402;
				Match(DEPENDS);
				State = 6403;
				Match(ON);
				State = 6404;
				Match(EXTENSION);
				State = 6405;
				name();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 6407;
				Match(ALTER);
				State = 6408;
				Match(PROCEDURE);
				State = 6409;
				function_with_argtypes();
				State = 6410;
				opt_no();
				State = 6411;
				Match(DEPENDS);
				State = 6412;
				Match(ON);
				State = 6413;
				Match(EXTENSION);
				State = 6414;
				name();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 6416;
				Match(ALTER);
				State = 6417;
				Match(ROUTINE);
				State = 6418;
				function_with_argtypes();
				State = 6419;
				opt_no();
				State = 6420;
				Match(DEPENDS);
				State = 6421;
				Match(ON);
				State = 6422;
				Match(EXTENSION);
				State = 6423;
				name();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 6425;
				Match(ALTER);
				State = 6426;
				Match(TRIGGER);
				State = 6427;
				name();
				State = 6428;
				Match(ON);
				State = 6429;
				qualified_name();
				State = 6430;
				opt_no();
				State = 6431;
				Match(DEPENDS);
				State = 6432;
				Match(ON);
				State = 6433;
				Match(EXTENSION);
				State = 6434;
				name();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 6436;
				Match(ALTER);
				State = 6437;
				Match(MATERIALIZED);
				State = 6438;
				Match(VIEW);
				State = 6439;
				qualified_name();
				State = 6440;
				opt_no();
				State = 6441;
				Match(DEPENDS);
				State = 6442;
				Match(ON);
				State = 6443;
				Match(EXTENSION);
				State = 6444;
				name();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 6446;
				Match(ALTER);
				State = 6447;
				Match(INDEX);
				State = 6448;
				qualified_name();
				State = 6449;
				opt_no();
				State = 6450;
				Match(DEPENDS);
				State = 6451;
				Match(ON);
				State = 6452;
				Match(EXTENSION);
				State = 6453;
				name();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Opt_noContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NO() { return GetToken(PostgreSQLParser.NO, 0); }
		public Opt_noContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_opt_no; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterOpt_no(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitOpt_no(this);
		}
	}

	[RuleVersion(0)]
	public Opt_noContext opt_no() {
		Opt_noContext _localctx = new Opt_noContext(Context, State);
		EnterRule(_localctx, 730, RULE_opt_no);
		try {
			State = 6459;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case NO:
				EnterOuterAlt(_localctx, 1);
				{
				State = 6457;
				Match(NO);
				}
				break;
			case DEPENDS:
				EnterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AlterobjectschemastmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALTER() { return GetToken(PostgreSQLParser.ALTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AGGREGATE() { return GetToken(PostgreSQLParser.AGGREGATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Aggregate_with_argtypesContext aggregate_with_argtypes() {
			return GetRuleContext<Aggregate_with_argtypesContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SET() { return GetToken(PostgreSQLParser.SET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SCHEMA() { return GetToken(PostgreSQLParser.SCHEMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NameContext[] name() {
			return GetRuleContexts<NameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public NameContext name(int i) {
			return GetRuleContext<NameContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLLATION() { return GetToken(PostgreSQLParser.COLLATION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Any_nameContext any_name() {
			return GetRuleContext<Any_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONVERSION_P() { return GetToken(PostgreSQLParser.CONVERSION_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOMAIN_P() { return GetToken(PostgreSQLParser.DOMAIN_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXTENSION() { return GetToken(PostgreSQLParser.EXTENSION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FUNCTION() { return GetToken(PostgreSQLParser.FUNCTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Function_with_argtypesContext function_with_argtypes() {
			return GetRuleContext<Function_with_argtypesContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPERATOR() { return GetToken(PostgreSQLParser.OPERATOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Operator_with_argtypesContext operator_with_argtypes() {
			return GetRuleContext<Operator_with_argtypesContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLASS() { return GetToken(PostgreSQLParser.CLASS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode USING() { return GetToken(PostgreSQLParser.USING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FAMILY() { return GetToken(PostgreSQLParser.FAMILY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PROCEDURE() { return GetToken(PostgreSQLParser.PROCEDURE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROUTINE() { return GetToken(PostgreSQLParser.ROUTINE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLE() { return GetToken(PostgreSQLParser.TABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Relation_exprContext relation_expr() {
			return GetRuleContext<Relation_exprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF_P() { return GetToken(PostgreSQLParser.IF_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXISTS() { return GetToken(PostgreSQLParser.EXISTS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STATISTICS() { return GetToken(PostgreSQLParser.STATISTICS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TEXT_P() { return GetToken(PostgreSQLParser.TEXT_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEARCH() { return GetToken(PostgreSQLParser.SEARCH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARSER() { return GetToken(PostgreSQLParser.PARSER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DICTIONARY() { return GetToken(PostgreSQLParser.DICTIONARY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TEMPLATE() { return GetToken(PostgreSQLParser.TEMPLATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONFIGURATION() { return GetToken(PostgreSQLParser.CONFIGURATION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEQUENCE() { return GetToken(PostgreSQLParser.SEQUENCE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Qualified_nameContext qualified_name() {
			return GetRuleContext<Qualified_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VIEW() { return GetToken(PostgreSQLParser.VIEW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MATERIALIZED() { return GetToken(PostgreSQLParser.MATERIALIZED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOREIGN() { return GetToken(PostgreSQLParser.FOREIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TYPE_P() { return GetToken(PostgreSQLParser.TYPE_P, 0); }
		public AlterobjectschemastmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alterobjectschemastmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterAlterobjectschemastmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitAlterobjectschemastmt(this);
		}
	}

	[RuleVersion(0)]
	public AlterobjectschemastmtContext alterobjectschemastmt() {
		AlterobjectschemastmtContext _localctx = new AlterobjectschemastmtContext(Context, State);
		EnterRule(_localctx, 732, RULE_alterobjectschemastmt);
		try {
			State = 6678;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,315,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 6461;
				Match(ALTER);
				State = 6462;
				Match(AGGREGATE);
				State = 6463;
				aggregate_with_argtypes();
				State = 6464;
				Match(SET);
				State = 6465;
				Match(SCHEMA);
				State = 6466;
				name();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 6468;
				Match(ALTER);
				State = 6469;
				Match(COLLATION);
				State = 6470;
				any_name();
				State = 6471;
				Match(SET);
				State = 6472;
				Match(SCHEMA);
				State = 6473;
				name();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 6475;
				Match(ALTER);
				State = 6476;
				Match(CONVERSION_P);
				State = 6477;
				any_name();
				State = 6478;
				Match(SET);
				State = 6479;
				Match(SCHEMA);
				State = 6480;
				name();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 6482;
				Match(ALTER);
				State = 6483;
				Match(DOMAIN_P);
				State = 6484;
				any_name();
				State = 6485;
				Match(SET);
				State = 6486;
				Match(SCHEMA);
				State = 6487;
				name();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 6489;
				Match(ALTER);
				State = 6490;
				Match(EXTENSION);
				State = 6491;
				name();
				State = 6492;
				Match(SET);
				State = 6493;
				Match(SCHEMA);
				State = 6494;
				name();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 6496;
				Match(ALTER);
				State = 6497;
				Match(FUNCTION);
				State = 6498;
				function_with_argtypes();
				State = 6499;
				Match(SET);
				State = 6500;
				Match(SCHEMA);
				State = 6501;
				name();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 6503;
				Match(ALTER);
				State = 6504;
				Match(OPERATOR);
				State = 6505;
				operator_with_argtypes();
				State = 6506;
				Match(SET);
				State = 6507;
				Match(SCHEMA);
				State = 6508;
				name();
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 6510;
				Match(ALTER);
				State = 6511;
				Match(OPERATOR);
				State = 6512;
				Match(CLASS);
				State = 6513;
				any_name();
				State = 6514;
				Match(USING);
				State = 6515;
				name();
				State = 6516;
				Match(SET);
				State = 6517;
				Match(SCHEMA);
				State = 6518;
				name();
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 6520;
				Match(ALTER);
				State = 6521;
				Match(OPERATOR);
				State = 6522;
				Match(FAMILY);
				State = 6523;
				any_name();
				State = 6524;
				Match(USING);
				State = 6525;
				name();
				State = 6526;
				Match(SET);
				State = 6527;
				Match(SCHEMA);
				State = 6528;
				name();
				}
				break;
			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 6530;
				Match(ALTER);
				State = 6531;
				Match(PROCEDURE);
				State = 6532;
				function_with_argtypes();
				State = 6533;
				Match(SET);
				State = 6534;
				Match(SCHEMA);
				State = 6535;
				name();
				}
				break;
			case 11:
				EnterOuterAlt(_localctx, 11);
				{
				State = 6537;
				Match(ALTER);
				State = 6538;
				Match(ROUTINE);
				State = 6539;
				function_with_argtypes();
				State = 6540;
				Match(SET);
				State = 6541;
				Match(SCHEMA);
				State = 6542;
				name();
				}
				break;
			case 12:
				EnterOuterAlt(_localctx, 12);
				{
				State = 6544;
				Match(ALTER);
				State = 6545;
				Match(TABLE);
				State = 6546;
				relation_expr();
				State = 6547;
				Match(SET);
				State = 6548;
				Match(SCHEMA);
				State = 6549;
				name();
				}
				break;
			case 13:
				EnterOuterAlt(_localctx, 13);
				{
				State = 6551;
				Match(ALTER);
				State = 6552;
				Match(TABLE);
				State = 6553;
				Match(IF_P);
				State = 6554;
				Match(EXISTS);
				State = 6555;
				relation_expr();
				State = 6556;
				Match(SET);
				State = 6557;
				Match(SCHEMA);
				State = 6558;
				name();
				}
				break;
			case 14:
				EnterOuterAlt(_localctx, 14);
				{
				State = 6560;
				Match(ALTER);
				State = 6561;
				Match(STATISTICS);
				State = 6562;
				any_name();
				State = 6563;
				Match(SET);
				State = 6564;
				Match(SCHEMA);
				State = 6565;
				name();
				}
				break;
			case 15:
				EnterOuterAlt(_localctx, 15);
				{
				State = 6567;
				Match(ALTER);
				State = 6568;
				Match(TEXT_P);
				State = 6569;
				Match(SEARCH);
				State = 6570;
				Match(PARSER);
				State = 6571;
				any_name();
				State = 6572;
				Match(SET);
				State = 6573;
				Match(SCHEMA);
				State = 6574;
				name();
				}
				break;
			case 16:
				EnterOuterAlt(_localctx, 16);
				{
				State = 6576;
				Match(ALTER);
				State = 6577;
				Match(TEXT_P);
				State = 6578;
				Match(SEARCH);
				State = 6579;
				Match(DICTIONARY);
				State = 6580;
				any_name();
				State = 6581;
				Match(SET);
				State = 6582;
				Match(SCHEMA);
				State = 6583;
				name();
				}
				break;
			case 17:
				EnterOuterAlt(_localctx, 17);
				{
				State = 6585;
				Match(ALTER);
				State = 6586;
				Match(TEXT_P);
				State = 6587;
				Match(SEARCH);
				State = 6588;
				Match(TEMPLATE);
				State = 6589;
				any_name();
				State = 6590;
				Match(SET);
				State = 6591;
				Match(SCHEMA);
				State = 6592;
				name();
				}
				break;
			case 18:
				EnterOuterAlt(_localctx, 18);
				{
				State = 6594;
				Match(ALTER);
				State = 6595;
				Match(TEXT_P);
				State = 6596;
				Match(SEARCH);
				State = 6597;
				Match(CONFIGURATION);
				State = 6598;
				any_name();
				State = 6599;
				Match(SET);
				State = 6600;
				Match(SCHEMA);
				State = 6601;
				name();
				}
				break;
			case 19:
				EnterOuterAlt(_localctx, 19);
				{
				State = 6603;
				Match(ALTER);
				State = 6604;
				Match(SEQUENCE);
				State = 6605;
				qualified_name();
				State = 6606;
				Match(SET);
				State = 6607;
				Match(SCHEMA);
				State = 6608;
				name();
				}
				break;
			case 20:
				EnterOuterAlt(_localctx, 20);
				{
				State = 6610;
				Match(ALTER);
				State = 6611;
				Match(SEQUENCE);
				State = 6612;
				Match(IF_P);
				State = 6613;
				Match(EXISTS);
				State = 6614;
				qualified_name();
				State = 6615;
				Match(SET);
				State = 6616;
				Match(SCHEMA);
				State = 6617;
				name();
				}
				break;
			case 21:
				EnterOuterAlt(_localctx, 21);
				{
				State = 6619;
				Match(ALTER);
				State = 6620;
				Match(VIEW);
				State = 6621;
				qualified_name();
				State = 6622;
				Match(SET);
				State = 6623;
				Match(SCHEMA);
				State = 6624;
				name();
				}
				break;
			case 22:
				EnterOuterAlt(_localctx, 22);
				{
				State = 6626;
				Match(ALTER);
				State = 6627;
				Match(VIEW);
				State = 6628;
				Match(IF_P);
				State = 6629;
				Match(EXISTS);
				State = 6630;
				qualified_name();
				State = 6631;
				Match(SET);
				State = 6632;
				Match(SCHEMA);
				State = 6633;
				name();
				}
				break;
			case 23:
				EnterOuterAlt(_localctx, 23);
				{
				State = 6635;
				Match(ALTER);
				State = 6636;
				Match(MATERIALIZED);
				State = 6637;
				Match(VIEW);
				State = 6638;
				qualified_name();
				State = 6639;
				Match(SET);
				State = 6640;
				Match(SCHEMA);
				State = 6641;
				name();
				}
				break;
			case 24:
				EnterOuterAlt(_localctx, 24);
				{
				State = 6643;
				Match(ALTER);
				State = 6644;
				Match(MATERIALIZED);
				State = 6645;
				Match(VIEW);
				State = 6646;
				Match(IF_P);
				State = 6647;
				Match(EXISTS);
				State = 6648;
				qualified_name();
				State = 6649;
				Match(SET);
				State = 6650;
				Match(SCHEMA);
				State = 6651;
				name();
				}
				break;
			case 25:
				EnterOuterAlt(_localctx, 25);
				{
				State = 6653;
				Match(ALTER);
				State = 6654;
				Match(FOREIGN);
				State = 6655;
				Match(TABLE);
				State = 6656;
				relation_expr();
				State = 6657;
				Match(SET);
				State = 6658;
				Match(SCHEMA);
				State = 6659;
				name();
				}
				break;
			case 26:
				EnterOuterAlt(_localctx, 26);
				{
				State = 6661;
				Match(ALTER);
				State = 6662;
				Match(FOREIGN);
				State = 6663;
				Match(TABLE);
				State = 6664;
				Match(IF_P);
				State = 6665;
				Match(EXISTS);
				State = 6666;
				relation_expr();
				State = 6667;
				Match(SET);
				State = 6668;
				Match(SCHEMA);
				State = 6669;
				name();
				}
				break;
			case 27:
				EnterOuterAlt(_localctx, 27);
				{
				State = 6671;
				Match(ALTER);
				State = 6672;
				Match(TYPE_P);
				State = 6673;
				any_name();
				State = 6674;
				Match(SET);
				State = 6675;
				Match(SCHEMA);
				State = 6676;
				name();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AlteroperatorstmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALTER() { return GetToken(PostgreSQLParser.ALTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPERATOR() { return GetToken(PostgreSQLParser.OPERATOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Operator_with_argtypesContext operator_with_argtypes() {
			return GetRuleContext<Operator_with_argtypesContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SET() { return GetToken(PostgreSQLParser.SET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAREN() { return GetToken(PostgreSQLParser.OPEN_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Operator_def_listContext operator_def_list() {
			return GetRuleContext<Operator_def_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAREN() { return GetToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public AlteroperatorstmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alteroperatorstmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterAlteroperatorstmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitAlteroperatorstmt(this);
		}
	}

	[RuleVersion(0)]
	public AlteroperatorstmtContext alteroperatorstmt() {
		AlteroperatorstmtContext _localctx = new AlteroperatorstmtContext(Context, State);
		EnterRule(_localctx, 734, RULE_alteroperatorstmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6680;
			Match(ALTER);
			State = 6681;
			Match(OPERATOR);
			State = 6682;
			operator_with_argtypes();
			State = 6683;
			Match(SET);
			State = 6684;
			Match(OPEN_PAREN);
			State = 6685;
			operator_def_list();
			State = 6686;
			Match(CLOSE_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Operator_def_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Operator_def_elemContext[] operator_def_elem() {
			return GetRuleContexts<Operator_def_elemContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Operator_def_elemContext operator_def_elem(int i) {
			return GetRuleContext<Operator_def_elemContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(PostgreSQLParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(PostgreSQLParser.COMMA, i);
		}
		public Operator_def_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_operator_def_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterOperator_def_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitOperator_def_list(this);
		}
	}

	[RuleVersion(0)]
	public Operator_def_listContext operator_def_list() {
		Operator_def_listContext _localctx = new Operator_def_listContext(Context, State);
		EnterRule(_localctx, 736, RULE_operator_def_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6688;
			operator_def_elem();
			State = 6693;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 6689;
				Match(COMMA);
				State = 6690;
				operator_def_elem();
				}
				}
				State = 6695;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Operator_def_elemContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public CollabelContext collabel() {
			return GetRuleContext<CollabelContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL() { return GetToken(PostgreSQLParser.EQUAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NONE() { return GetToken(PostgreSQLParser.NONE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Operator_def_argContext operator_def_arg() {
			return GetRuleContext<Operator_def_argContext>(0);
		}
		public Operator_def_elemContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_operator_def_elem; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterOperator_def_elem(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitOperator_def_elem(this);
		}
	}

	[RuleVersion(0)]
	public Operator_def_elemContext operator_def_elem() {
		Operator_def_elemContext _localctx = new Operator_def_elemContext(Context, State);
		EnterRule(_localctx, 738, RULE_operator_def_elem);
		try {
			State = 6704;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,317,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 6696;
				collabel();
				State = 6697;
				Match(EQUAL);
				State = 6698;
				Match(NONE);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 6700;
				collabel();
				State = 6701;
				Match(EQUAL);
				State = 6702;
				operator_def_arg();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Operator_def_argContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Func_typeContext func_type() {
			return GetRuleContext<Func_typeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Reserved_keywordContext reserved_keyword() {
			return GetRuleContext<Reserved_keywordContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Qual_all_opContext qual_all_op() {
			return GetRuleContext<Qual_all_opContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NumericonlyContext numericonly() {
			return GetRuleContext<NumericonlyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SconstContext sconst() {
			return GetRuleContext<SconstContext>(0);
		}
		public Operator_def_argContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_operator_def_arg; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterOperator_def_arg(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitOperator_def_arg(this);
		}
	}

	[RuleVersion(0)]
	public Operator_def_argContext operator_def_arg() {
		Operator_def_argContext _localctx = new Operator_def_argContext(Context, State);
		EnterRule(_localctx, 740, RULE_operator_def_arg);
		try {
			State = 6711;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,318,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 6706;
				func_type();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 6707;
				reserved_keyword();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 6708;
				qual_all_op();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 6709;
				numericonly();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 6710;
				sconst();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AltertypestmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALTER() { return GetToken(PostgreSQLParser.ALTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TYPE_P() { return GetToken(PostgreSQLParser.TYPE_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Any_nameContext any_name() {
			return GetRuleContext<Any_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SET() { return GetToken(PostgreSQLParser.SET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAREN() { return GetToken(PostgreSQLParser.OPEN_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Operator_def_listContext operator_def_list() {
			return GetRuleContext<Operator_def_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAREN() { return GetToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public AltertypestmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_altertypestmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterAltertypestmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitAltertypestmt(this);
		}
	}

	[RuleVersion(0)]
	public AltertypestmtContext altertypestmt() {
		AltertypestmtContext _localctx = new AltertypestmtContext(Context, State);
		EnterRule(_localctx, 742, RULE_altertypestmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6713;
			Match(ALTER);
			State = 6714;
			Match(TYPE_P);
			State = 6715;
			any_name();
			State = 6716;
			Match(SET);
			State = 6717;
			Match(OPEN_PAREN);
			State = 6718;
			operator_def_list();
			State = 6719;
			Match(CLOSE_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AlterownerstmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALTER() { return GetToken(PostgreSQLParser.ALTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AGGREGATE() { return GetToken(PostgreSQLParser.AGGREGATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Aggregate_with_argtypesContext aggregate_with_argtypes() {
			return GetRuleContext<Aggregate_with_argtypesContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OWNER() { return GetToken(PostgreSQLParser.OWNER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TO() { return GetToken(PostgreSQLParser.TO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public RolespecContext rolespec() {
			return GetRuleContext<RolespecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLLATION() { return GetToken(PostgreSQLParser.COLLATION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Any_nameContext any_name() {
			return GetRuleContext<Any_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONVERSION_P() { return GetToken(PostgreSQLParser.CONVERSION_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DATABASE() { return GetToken(PostgreSQLParser.DATABASE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOMAIN_P() { return GetToken(PostgreSQLParser.DOMAIN_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FUNCTION() { return GetToken(PostgreSQLParser.FUNCTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Function_with_argtypesContext function_with_argtypes() {
			return GetRuleContext<Function_with_argtypesContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Opt_proceduralContext opt_procedural() {
			return GetRuleContext<Opt_proceduralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LANGUAGE() { return GetToken(PostgreSQLParser.LANGUAGE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LARGE_P() { return GetToken(PostgreSQLParser.LARGE_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OBJECT_P() { return GetToken(PostgreSQLParser.OBJECT_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NumericonlyContext numericonly() {
			return GetRuleContext<NumericonlyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPERATOR() { return GetToken(PostgreSQLParser.OPERATOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Operator_with_argtypesContext operator_with_argtypes() {
			return GetRuleContext<Operator_with_argtypesContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLASS() { return GetToken(PostgreSQLParser.CLASS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode USING() { return GetToken(PostgreSQLParser.USING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FAMILY() { return GetToken(PostgreSQLParser.FAMILY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PROCEDURE() { return GetToken(PostgreSQLParser.PROCEDURE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROUTINE() { return GetToken(PostgreSQLParser.ROUTINE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SCHEMA() { return GetToken(PostgreSQLParser.SCHEMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TYPE_P() { return GetToken(PostgreSQLParser.TYPE_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLESPACE() { return GetToken(PostgreSQLParser.TABLESPACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STATISTICS() { return GetToken(PostgreSQLParser.STATISTICS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TEXT_P() { return GetToken(PostgreSQLParser.TEXT_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEARCH() { return GetToken(PostgreSQLParser.SEARCH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DICTIONARY() { return GetToken(PostgreSQLParser.DICTIONARY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONFIGURATION() { return GetToken(PostgreSQLParser.CONFIGURATION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOREIGN() { return GetToken(PostgreSQLParser.FOREIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DATA_P() { return GetToken(PostgreSQLParser.DATA_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WRAPPER() { return GetToken(PostgreSQLParser.WRAPPER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SERVER() { return GetToken(PostgreSQLParser.SERVER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EVENT() { return GetToken(PostgreSQLParser.EVENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRIGGER() { return GetToken(PostgreSQLParser.TRIGGER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PUBLICATION() { return GetToken(PostgreSQLParser.PUBLICATION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SUBSCRIPTION() { return GetToken(PostgreSQLParser.SUBSCRIPTION, 0); }
		public AlterownerstmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alterownerstmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterAlterownerstmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitAlterownerstmt(this);
		}
	}

	[RuleVersion(0)]
	public AlterownerstmtContext alterownerstmt() {
		AlterownerstmtContext _localctx = new AlterownerstmtContext(Context, State);
		EnterRule(_localctx, 744, RULE_alterownerstmt);
		try {
			State = 6904;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,319,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 6721;
				Match(ALTER);
				State = 6722;
				Match(AGGREGATE);
				State = 6723;
				aggregate_with_argtypes();
				State = 6724;
				Match(OWNER);
				State = 6725;
				Match(TO);
				State = 6726;
				rolespec();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 6728;
				Match(ALTER);
				State = 6729;
				Match(COLLATION);
				State = 6730;
				any_name();
				State = 6731;
				Match(OWNER);
				State = 6732;
				Match(TO);
				State = 6733;
				rolespec();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 6735;
				Match(ALTER);
				State = 6736;
				Match(CONVERSION_P);
				State = 6737;
				any_name();
				State = 6738;
				Match(OWNER);
				State = 6739;
				Match(TO);
				State = 6740;
				rolespec();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 6742;
				Match(ALTER);
				State = 6743;
				Match(DATABASE);
				State = 6744;
				name();
				State = 6745;
				Match(OWNER);
				State = 6746;
				Match(TO);
				State = 6747;
				rolespec();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 6749;
				Match(ALTER);
				State = 6750;
				Match(DOMAIN_P);
				State = 6751;
				any_name();
				State = 6752;
				Match(OWNER);
				State = 6753;
				Match(TO);
				State = 6754;
				rolespec();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 6756;
				Match(ALTER);
				State = 6757;
				Match(FUNCTION);
				State = 6758;
				function_with_argtypes();
				State = 6759;
				Match(OWNER);
				State = 6760;
				Match(TO);
				State = 6761;
				rolespec();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 6763;
				Match(ALTER);
				State = 6764;
				opt_procedural();
				State = 6765;
				Match(LANGUAGE);
				State = 6766;
				name();
				State = 6767;
				Match(OWNER);
				State = 6768;
				Match(TO);
				State = 6769;
				rolespec();
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 6771;
				Match(ALTER);
				State = 6772;
				Match(LARGE_P);
				State = 6773;
				Match(OBJECT_P);
				State = 6774;
				numericonly();
				State = 6775;
				Match(OWNER);
				State = 6776;
				Match(TO);
				State = 6777;
				rolespec();
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 6779;
				Match(ALTER);
				State = 6780;
				Match(OPERATOR);
				State = 6781;
				operator_with_argtypes();
				State = 6782;
				Match(OWNER);
				State = 6783;
				Match(TO);
				State = 6784;
				rolespec();
				}
				break;
			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 6786;
				Match(ALTER);
				State = 6787;
				Match(OPERATOR);
				State = 6788;
				Match(CLASS);
				State = 6789;
				any_name();
				State = 6790;
				Match(USING);
				State = 6791;
				name();
				State = 6792;
				Match(OWNER);
				State = 6793;
				Match(TO);
				State = 6794;
				rolespec();
				}
				break;
			case 11:
				EnterOuterAlt(_localctx, 11);
				{
				State = 6796;
				Match(ALTER);
				State = 6797;
				Match(OPERATOR);
				State = 6798;
				Match(FAMILY);
				State = 6799;
				any_name();
				State = 6800;
				Match(USING);
				State = 6801;
				name();
				State = 6802;
				Match(OWNER);
				State = 6803;
				Match(TO);
				State = 6804;
				rolespec();
				}
				break;
			case 12:
				EnterOuterAlt(_localctx, 12);
				{
				State = 6806;
				Match(ALTER);
				State = 6807;
				Match(PROCEDURE);
				State = 6808;
				function_with_argtypes();
				State = 6809;
				Match(OWNER);
				State = 6810;
				Match(TO);
				State = 6811;
				rolespec();
				}
				break;
			case 13:
				EnterOuterAlt(_localctx, 13);
				{
				State = 6813;
				Match(ALTER);
				State = 6814;
				Match(ROUTINE);
				State = 6815;
				function_with_argtypes();
				State = 6816;
				Match(OWNER);
				State = 6817;
				Match(TO);
				State = 6818;
				rolespec();
				}
				break;
			case 14:
				EnterOuterAlt(_localctx, 14);
				{
				State = 6820;
				Match(ALTER);
				State = 6821;
				Match(SCHEMA);
				State = 6822;
				name();
				State = 6823;
				Match(OWNER);
				State = 6824;
				Match(TO);
				State = 6825;
				rolespec();
				}
				break;
			case 15:
				EnterOuterAlt(_localctx, 15);
				{
				State = 6827;
				Match(ALTER);
				State = 6828;
				Match(TYPE_P);
				State = 6829;
				any_name();
				State = 6830;
				Match(OWNER);
				State = 6831;
				Match(TO);
				State = 6832;
				rolespec();
				}
				break;
			case 16:
				EnterOuterAlt(_localctx, 16);
				{
				State = 6834;
				Match(ALTER);
				State = 6835;
				Match(TABLESPACE);
				State = 6836;
				name();
				State = 6837;
				Match(OWNER);
				State = 6838;
				Match(TO);
				State = 6839;
				rolespec();
				}
				break;
			case 17:
				EnterOuterAlt(_localctx, 17);
				{
				State = 6841;
				Match(ALTER);
				State = 6842;
				Match(STATISTICS);
				State = 6843;
				any_name();
				State = 6844;
				Match(OWNER);
				State = 6845;
				Match(TO);
				State = 6846;
				rolespec();
				}
				break;
			case 18:
				EnterOuterAlt(_localctx, 18);
				{
				State = 6848;
				Match(ALTER);
				State = 6849;
				Match(TEXT_P);
				State = 6850;
				Match(SEARCH);
				State = 6851;
				Match(DICTIONARY);
				State = 6852;
				any_name();
				State = 6853;
				Match(OWNER);
				State = 6854;
				Match(TO);
				State = 6855;
				rolespec();
				}
				break;
			case 19:
				EnterOuterAlt(_localctx, 19);
				{
				State = 6857;
				Match(ALTER);
				State = 6858;
				Match(TEXT_P);
				State = 6859;
				Match(SEARCH);
				State = 6860;
				Match(CONFIGURATION);
				State = 6861;
				any_name();
				State = 6862;
				Match(OWNER);
				State = 6863;
				Match(TO);
				State = 6864;
				rolespec();
				}
				break;
			case 20:
				EnterOuterAlt(_localctx, 20);
				{
				State = 6866;
				Match(ALTER);
				State = 6867;
				Match(FOREIGN);
				State = 6868;
				Match(DATA_P);
				State = 6869;
				Match(WRAPPER);
				State = 6870;
				name();
				State = 6871;
				Match(OWNER);
				State = 6872;
				Match(TO);
				State = 6873;
				rolespec();
				}
				break;
			case 21:
				EnterOuterAlt(_localctx, 21);
				{
				State = 6875;
				Match(ALTER);
				State = 6876;
				Match(SERVER);
				State = 6877;
				name();
				State = 6878;
				Match(OWNER);
				State = 6879;
				Match(TO);
				State = 6880;
				rolespec();
				}
				break;
			case 22:
				EnterOuterAlt(_localctx, 22);
				{
				State = 6882;
				Match(ALTER);
				State = 6883;
				Match(EVENT);
				State = 6884;
				Match(TRIGGER);
				State = 6885;
				name();
				State = 6886;
				Match(OWNER);
				State = 6887;
				Match(TO);
				State = 6888;
				rolespec();
				}
				break;
			case 23:
				EnterOuterAlt(_localctx, 23);
				{
				State = 6890;
				Match(ALTER);
				State = 6891;
				Match(PUBLICATION);
				State = 6892;
				name();
				State = 6893;
				Match(OWNER);
				State = 6894;
				Match(TO);
				State = 6895;
				rolespec();
				}
				break;
			case 24:
				EnterOuterAlt(_localctx, 24);
				{
				State = 6897;
				Match(ALTER);
				State = 6898;
				Match(SUBSCRIPTION);
				State = 6899;
				name();
				State = 6900;
				Match(OWNER);
				State = 6901;
				Match(TO);
				State = 6902;
				rolespec();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CreatepublicationstmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CREATE() { return GetToken(PostgreSQLParser.CREATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PUBLICATION() { return GetToken(PostgreSQLParser.PUBLICATION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Opt_publication_for_tablesContext opt_publication_for_tables() {
			return GetRuleContext<Opt_publication_for_tablesContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Opt_definitionContext opt_definition() {
			return GetRuleContext<Opt_definitionContext>(0);
		}
		public CreatepublicationstmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_createpublicationstmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterCreatepublicationstmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitCreatepublicationstmt(this);
		}
	}

	[RuleVersion(0)]
	public CreatepublicationstmtContext createpublicationstmt() {
		CreatepublicationstmtContext _localctx = new CreatepublicationstmtContext(Context, State);
		EnterRule(_localctx, 746, RULE_createpublicationstmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6906;
			Match(CREATE);
			State = 6907;
			Match(PUBLICATION);
			State = 6908;
			name();
			State = 6909;
			opt_publication_for_tables();
			State = 6910;
			opt_definition();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Opt_publication_for_tablesContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Publication_for_tablesContext publication_for_tables() {
			return GetRuleContext<Publication_for_tablesContext>(0);
		}
		public Opt_publication_for_tablesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_opt_publication_for_tables; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterOpt_publication_for_tables(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitOpt_publication_for_tables(this);
		}
	}

	[RuleVersion(0)]
	public Opt_publication_for_tablesContext opt_publication_for_tables() {
		Opt_publication_for_tablesContext _localctx = new Opt_publication_for_tablesContext(Context, State);
		EnterRule(_localctx, 748, RULE_opt_publication_for_tables);
		try {
			State = 6914;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case FOR:
				EnterOuterAlt(_localctx, 1);
				{
				State = 6912;
				publication_for_tables();
				}
				break;
			case Eof:
			case OPEN_PAREN:
			case SEMI:
			case ANALYSE:
			case ANALYZE:
			case CREATE:
			case DO:
			case FETCH:
			case GRANT:
			case INTO:
			case SELECT:
			case TABLE:
			case WITH:
			case ABORT_P:
			case ALTER:
			case BEGIN_P:
			case CHECKPOINT:
			case CLOSE:
			case CLUSTER:
			case COMMENT:
			case COMMIT:
			case COPY:
			case DEALLOCATE:
			case DECLARE:
			case DELETE_P:
			case DISCARD:
			case DROP:
			case EXECUTE:
			case EXPLAIN:
			case INSERT:
			case LISTEN:
			case LOAD:
			case LOCK_P:
			case MERGE:
			case MOVE:
			case NOTIFY:
			case PREPARE:
			case REASSIGN:
			case REFRESH:
			case REINDEX:
			case RELEASE:
			case RESET:
			case REVOKE:
			case ROLLBACK:
			case SAVEPOINT:
			case SECURITY:
			case SET:
			case SHOW:
			case START:
			case TRUNCATE:
			case UNLISTEN:
			case UPDATE:
			case VACUUM:
			case VALUES:
			case CALL:
			case IMPORT_P:
			case END_P:
			case MetaCommand:
				EnterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Publication_for_tablesContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOR() { return GetToken(PostgreSQLParser.FOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLE() { return GetToken(PostgreSQLParser.TABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Relation_expr_listContext relation_expr_list() {
			return GetRuleContext<Relation_expr_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALL() { return GetToken(PostgreSQLParser.ALL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLES() { return GetToken(PostgreSQLParser.TABLES, 0); }
		public Publication_for_tablesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_publication_for_tables; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterPublication_for_tables(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitPublication_for_tables(this);
		}
	}

	[RuleVersion(0)]
	public Publication_for_tablesContext publication_for_tables() {
		Publication_for_tablesContext _localctx = new Publication_for_tablesContext(Context, State);
		EnterRule(_localctx, 750, RULE_publication_for_tables);
		try {
			State = 6922;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,321,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 6916;
				Match(FOR);
				State = 6917;
				Match(TABLE);
				State = 6918;
				relation_expr_list();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 6919;
				Match(FOR);
				State = 6920;
				Match(ALL);
				State = 6921;
				Match(TABLES);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AlterpublicationstmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALTER() { return GetToken(PostgreSQLParser.ALTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PUBLICATION() { return GetToken(PostgreSQLParser.PUBLICATION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SET() { return GetToken(PostgreSQLParser.SET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public DefinitionContext definition() {
			return GetRuleContext<DefinitionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ADD_P() { return GetToken(PostgreSQLParser.ADD_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLE() { return GetToken(PostgreSQLParser.TABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Relation_expr_listContext relation_expr_list() {
			return GetRuleContext<Relation_expr_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DROP() { return GetToken(PostgreSQLParser.DROP, 0); }
		public AlterpublicationstmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alterpublicationstmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterAlterpublicationstmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitAlterpublicationstmt(this);
		}
	}

	[RuleVersion(0)]
	public AlterpublicationstmtContext alterpublicationstmt() {
		AlterpublicationstmtContext _localctx = new AlterpublicationstmtContext(Context, State);
		EnterRule(_localctx, 752, RULE_alterpublicationstmt);
		try {
			State = 6951;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,322,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 6924;
				Match(ALTER);
				State = 6925;
				Match(PUBLICATION);
				State = 6926;
				name();
				State = 6927;
				Match(SET);
				State = 6928;
				definition();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 6930;
				Match(ALTER);
				State = 6931;
				Match(PUBLICATION);
				State = 6932;
				name();
				State = 6933;
				Match(ADD_P);
				State = 6934;
				Match(TABLE);
				State = 6935;
				relation_expr_list();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 6937;
				Match(ALTER);
				State = 6938;
				Match(PUBLICATION);
				State = 6939;
				name();
				State = 6940;
				Match(SET);
				State = 6941;
				Match(TABLE);
				State = 6942;
				relation_expr_list();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 6944;
				Match(ALTER);
				State = 6945;
				Match(PUBLICATION);
				State = 6946;
				name();
				State = 6947;
				Match(DROP);
				State = 6948;
				Match(TABLE);
				State = 6949;
				relation_expr_list();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CreatesubscriptionstmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CREATE() { return GetToken(PostgreSQLParser.CREATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SUBSCRIPTION() { return GetToken(PostgreSQLParser.SUBSCRIPTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONNECTION() { return GetToken(PostgreSQLParser.CONNECTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SconstContext sconst() {
			return GetRuleContext<SconstContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PUBLICATION() { return GetToken(PostgreSQLParser.PUBLICATION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Publication_name_listContext publication_name_list() {
			return GetRuleContext<Publication_name_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Opt_definitionContext opt_definition() {
			return GetRuleContext<Opt_definitionContext>(0);
		}
		public CreatesubscriptionstmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_createsubscriptionstmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterCreatesubscriptionstmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitCreatesubscriptionstmt(this);
		}
	}

	[RuleVersion(0)]
	public CreatesubscriptionstmtContext createsubscriptionstmt() {
		CreatesubscriptionstmtContext _localctx = new CreatesubscriptionstmtContext(Context, State);
		EnterRule(_localctx, 754, RULE_createsubscriptionstmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6953;
			Match(CREATE);
			State = 6954;
			Match(SUBSCRIPTION);
			State = 6955;
			name();
			State = 6956;
			Match(CONNECTION);
			State = 6957;
			sconst();
			State = 6958;
			Match(PUBLICATION);
			State = 6959;
			publication_name_list();
			State = 6960;
			opt_definition();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Publication_name_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Publication_name_itemContext[] publication_name_item() {
			return GetRuleContexts<Publication_name_itemContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Publication_name_itemContext publication_name_item(int i) {
			return GetRuleContext<Publication_name_itemContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(PostgreSQLParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(PostgreSQLParser.COMMA, i);
		}
		public Publication_name_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_publication_name_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterPublication_name_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitPublication_name_list(this);
		}
	}

	[RuleVersion(0)]
	public Publication_name_listContext publication_name_list() {
		Publication_name_listContext _localctx = new Publication_name_listContext(Context, State);
		EnterRule(_localctx, 756, RULE_publication_name_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6962;
			publication_name_item();
			State = 6967;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 6963;
				Match(COMMA);
				State = 6964;
				publication_name_item();
				}
				}
				State = 6969;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Publication_name_itemContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public CollabelContext collabel() {
			return GetRuleContext<CollabelContext>(0);
		}
		public Publication_name_itemContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_publication_name_item; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterPublication_name_item(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitPublication_name_item(this);
		}
	}

	[RuleVersion(0)]
	public Publication_name_itemContext publication_name_item() {
		Publication_name_itemContext _localctx = new Publication_name_itemContext(Context, State);
		EnterRule(_localctx, 758, RULE_publication_name_item);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6970;
			collabel();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AltersubscriptionstmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALTER() { return GetToken(PostgreSQLParser.ALTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SUBSCRIPTION() { return GetToken(PostgreSQLParser.SUBSCRIPTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SET() { return GetToken(PostgreSQLParser.SET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public DefinitionContext definition() {
			return GetRuleContext<DefinitionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONNECTION() { return GetToken(PostgreSQLParser.CONNECTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SconstContext sconst() {
			return GetRuleContext<SconstContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REFRESH() { return GetToken(PostgreSQLParser.REFRESH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PUBLICATION() { return GetToken(PostgreSQLParser.PUBLICATION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Opt_definitionContext opt_definition() {
			return GetRuleContext<Opt_definitionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Publication_name_listContext publication_name_list() {
			return GetRuleContext<Publication_name_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ENABLE_P() { return GetToken(PostgreSQLParser.ENABLE_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DISABLE_P() { return GetToken(PostgreSQLParser.DISABLE_P, 0); }
		public AltersubscriptionstmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_altersubscriptionstmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterAltersubscriptionstmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitAltersubscriptionstmt(this);
		}
	}

	[RuleVersion(0)]
	public AltersubscriptionstmtContext altersubscriptionstmt() {
		AltersubscriptionstmtContext _localctx = new AltersubscriptionstmtContext(Context, State);
		EnterRule(_localctx, 760, RULE_altersubscriptionstmt);
		try {
			State = 7009;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,324,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 6972;
				Match(ALTER);
				State = 6973;
				Match(SUBSCRIPTION);
				State = 6974;
				name();
				State = 6975;
				Match(SET);
				State = 6976;
				definition();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 6978;
				Match(ALTER);
				State = 6979;
				Match(SUBSCRIPTION);
				State = 6980;
				name();
				State = 6981;
				Match(CONNECTION);
				State = 6982;
				sconst();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 6984;
				Match(ALTER);
				State = 6985;
				Match(SUBSCRIPTION);
				State = 6986;
				name();
				State = 6987;
				Match(REFRESH);
				State = 6988;
				Match(PUBLICATION);
				State = 6989;
				opt_definition();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 6991;
				Match(ALTER);
				State = 6992;
				Match(SUBSCRIPTION);
				State = 6993;
				name();
				State = 6994;
				Match(SET);
				State = 6995;
				Match(PUBLICATION);
				State = 6996;
				publication_name_list();
				State = 6997;
				opt_definition();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 6999;
				Match(ALTER);
				State = 7000;
				Match(SUBSCRIPTION);
				State = 7001;
				name();
				State = 7002;
				Match(ENABLE_P);
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 7004;
				Match(ALTER);
				State = 7005;
				Match(SUBSCRIPTION);
				State = 7006;
				name();
				State = 7007;
				Match(DISABLE_P);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DropsubscriptionstmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DROP() { return GetToken(PostgreSQLParser.DROP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SUBSCRIPTION() { return GetToken(PostgreSQLParser.SUBSCRIPTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Opt_drop_behaviorContext opt_drop_behavior() {
			return GetRuleContext<Opt_drop_behaviorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF_P() { return GetToken(PostgreSQLParser.IF_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXISTS() { return GetToken(PostgreSQLParser.EXISTS, 0); }
		public DropsubscriptionstmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dropsubscriptionstmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterDropsubscriptionstmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitDropsubscriptionstmt(this);
		}
	}

	[RuleVersion(0)]
	public DropsubscriptionstmtContext dropsubscriptionstmt() {
		DropsubscriptionstmtContext _localctx = new DropsubscriptionstmtContext(Context, State);
		EnterRule(_localctx, 762, RULE_dropsubscriptionstmt);
		try {
			State = 7023;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,325,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 7011;
				Match(DROP);
				State = 7012;
				Match(SUBSCRIPTION);
				State = 7013;
				name();
				State = 7014;
				opt_drop_behavior();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 7016;
				Match(DROP);
				State = 7017;
				Match(SUBSCRIPTION);
				State = 7018;
				Match(IF_P);
				State = 7019;
				Match(EXISTS);
				State = 7020;
				name();
				State = 7021;
				opt_drop_behavior();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RulestmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CREATE() { return GetToken(PostgreSQLParser.CREATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Opt_or_replaceContext opt_or_replace() {
			return GetRuleContext<Opt_or_replaceContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RULE() { return GetToken(PostgreSQLParser.RULE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS() { return GetToken(PostgreSQLParser.AS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ON() { return GetToken(PostgreSQLParser.ON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public EventContext @event() {
			return GetRuleContext<EventContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TO() { return GetToken(PostgreSQLParser.TO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Qualified_nameContext qualified_name() {
			return GetRuleContext<Qualified_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Where_clauseContext where_clause() {
			return GetRuleContext<Where_clauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DO() { return GetToken(PostgreSQLParser.DO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Opt_insteadContext opt_instead() {
			return GetRuleContext<Opt_insteadContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RuleactionlistContext ruleactionlist() {
			return GetRuleContext<RuleactionlistContext>(0);
		}
		public RulestmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rulestmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterRulestmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitRulestmt(this);
		}
	}

	[RuleVersion(0)]
	public RulestmtContext rulestmt() {
		RulestmtContext _localctx = new RulestmtContext(Context, State);
		EnterRule(_localctx, 764, RULE_rulestmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7025;
			Match(CREATE);
			State = 7026;
			opt_or_replace();
			State = 7027;
			Match(RULE);
			State = 7028;
			name();
			State = 7029;
			Match(AS);
			State = 7030;
			Match(ON);
			State = 7031;
			@event();
			State = 7032;
			Match(TO);
			State = 7033;
			qualified_name();
			State = 7034;
			where_clause();
			State = 7035;
			Match(DO);
			State = 7036;
			opt_instead();
			State = 7037;
			ruleactionlist();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RuleactionlistContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOTHING() { return GetToken(PostgreSQLParser.NOTHING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public RuleactionstmtContext ruleactionstmt() {
			return GetRuleContext<RuleactionstmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAREN() { return GetToken(PostgreSQLParser.OPEN_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public RuleactionmultiContext ruleactionmulti() {
			return GetRuleContext<RuleactionmultiContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAREN() { return GetToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public RuleactionlistContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ruleactionlist; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterRuleactionlist(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitRuleactionlist(this);
		}
	}

	[RuleVersion(0)]
	public RuleactionlistContext ruleactionlist() {
		RuleactionlistContext _localctx = new RuleactionlistContext(Context, State);
		EnterRule(_localctx, 766, RULE_ruleactionlist);
		try {
			State = 7045;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,326,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 7039;
				Match(NOTHING);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 7040;
				ruleactionstmt();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 7041;
				Match(OPEN_PAREN);
				State = 7042;
				ruleactionmulti();
				State = 7043;
				Match(CLOSE_PAREN);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RuleactionmultiContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public RuleactionstmtOrEmptyContext[] ruleactionstmtOrEmpty() {
			return GetRuleContexts<RuleactionstmtOrEmptyContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public RuleactionstmtOrEmptyContext ruleactionstmtOrEmpty(int i) {
			return GetRuleContext<RuleactionstmtOrEmptyContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SEMI() { return GetTokens(PostgreSQLParser.SEMI); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI(int i) {
			return GetToken(PostgreSQLParser.SEMI, i);
		}
		public RuleactionmultiContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ruleactionmulti; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterRuleactionmulti(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitRuleactionmulti(this);
		}
	}

	[RuleVersion(0)]
	public RuleactionmultiContext ruleactionmulti() {
		RuleactionmultiContext _localctx = new RuleactionmultiContext(Context, State);
		EnterRule(_localctx, 768, RULE_ruleactionmulti);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7047;
			ruleactionstmtOrEmpty();
			State = 7052;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==SEMI) {
				{
				{
				State = 7048;
				Match(SEMI);
				State = 7049;
				ruleactionstmtOrEmpty();
				}
				}
				State = 7054;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RuleactionstmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SelectstmtContext selectstmt() {
			return GetRuleContext<SelectstmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public InsertstmtContext insertstmt() {
			return GetRuleContext<InsertstmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UpdatestmtContext updatestmt() {
			return GetRuleContext<UpdatestmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DeletestmtContext deletestmt() {
			return GetRuleContext<DeletestmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NotifystmtContext notifystmt() {
			return GetRuleContext<NotifystmtContext>(0);
		}
		public RuleactionstmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ruleactionstmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterRuleactionstmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitRuleactionstmt(this);
		}
	}

	[RuleVersion(0)]
	public RuleactionstmtContext ruleactionstmt() {
		RuleactionstmtContext _localctx = new RuleactionstmtContext(Context, State);
		EnterRule(_localctx, 770, RULE_ruleactionstmt);
		try {
			State = 7060;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,328,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 7055;
				selectstmt();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 7056;
				insertstmt();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 7057;
				updatestmt();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 7058;
				deletestmt();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 7059;
				notifystmt();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RuleactionstmtOrEmptyContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public RuleactionstmtContext ruleactionstmt() {
			return GetRuleContext<RuleactionstmtContext>(0);
		}
		public RuleactionstmtOrEmptyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ruleactionstmtOrEmpty; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterRuleactionstmtOrEmpty(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitRuleactionstmtOrEmpty(this);
		}
	}

	[RuleVersion(0)]
	public RuleactionstmtOrEmptyContext ruleactionstmtOrEmpty() {
		RuleactionstmtOrEmptyContext _localctx = new RuleactionstmtOrEmptyContext(Context, State);
		EnterRule(_localctx, 772, RULE_ruleactionstmtOrEmpty);
		try {
			State = 7064;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case OPEN_PAREN:
			case SELECT:
			case TABLE:
			case WITH:
			case DELETE_P:
			case INSERT:
			case NOTIFY:
			case UPDATE:
			case VALUES:
				EnterOuterAlt(_localctx, 1);
				{
				State = 7062;
				ruleactionstmt();
				}
				break;
			case CLOSE_PAREN:
			case SEMI:
				EnterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EventContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SELECT() { return GetToken(PostgreSQLParser.SELECT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UPDATE() { return GetToken(PostgreSQLParser.UPDATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DELETE_P() { return GetToken(PostgreSQLParser.DELETE_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INSERT() { return GetToken(PostgreSQLParser.INSERT, 0); }
		public EventContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_event; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterEvent(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitEvent(this);
		}
	}

	[RuleVersion(0)]
	public EventContext @event() {
		EventContext _localctx = new EventContext(Context, State);
		EnterRule(_localctx, 774, RULE_event);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7066;
			_la = TokenStream.LA(1);
			if ( !(_la==SELECT || _la==DELETE_P || _la==INSERT || _la==UPDATE) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Opt_insteadContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INSTEAD() { return GetToken(PostgreSQLParser.INSTEAD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALSO() { return GetToken(PostgreSQLParser.ALSO, 0); }
		public Opt_insteadContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_opt_instead; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterOpt_instead(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitOpt_instead(this);
		}
	}

	[RuleVersion(0)]
	public Opt_insteadContext opt_instead() {
		Opt_insteadContext _localctx = new Opt_insteadContext(Context, State);
		EnterRule(_localctx, 776, RULE_opt_instead);
		try {
			State = 7071;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case INSTEAD:
				EnterOuterAlt(_localctx, 1);
				{
				State = 7068;
				Match(INSTEAD);
				}
				break;
			case ALSO:
				EnterOuterAlt(_localctx, 2);
				{
				State = 7069;
				Match(ALSO);
				}
				break;
			case OPEN_PAREN:
			case SELECT:
			case TABLE:
			case WITH:
			case DELETE_P:
			case INSERT:
			case NOTHING:
			case NOTIFY:
			case UPDATE:
			case VALUES:
				EnterOuterAlt(_localctx, 3);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NotifystmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOTIFY() { return GetToken(PostgreSQLParser.NOTIFY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ColidContext colid() {
			return GetRuleContext<ColidContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Notify_payloadContext notify_payload() {
			return GetRuleContext<Notify_payloadContext>(0);
		}
		public NotifystmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_notifystmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterNotifystmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitNotifystmt(this);
		}
	}

	[RuleVersion(0)]
	public NotifystmtContext notifystmt() {
		NotifystmtContext _localctx = new NotifystmtContext(Context, State);
		EnterRule(_localctx, 778, RULE_notifystmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7073;
			Match(NOTIFY);
			State = 7074;
			colid();
			State = 7075;
			notify_payload();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Notify_payloadContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(PostgreSQLParser.COMMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SconstContext sconst() {
			return GetRuleContext<SconstContext>(0);
		}
		public Notify_payloadContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_notify_payload; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterNotify_payload(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitNotify_payload(this);
		}
	}

	[RuleVersion(0)]
	public Notify_payloadContext notify_payload() {
		Notify_payloadContext _localctx = new Notify_payloadContext(Context, State);
		EnterRule(_localctx, 780, RULE_notify_payload);
		try {
			State = 7080;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case COMMA:
				EnterOuterAlt(_localctx, 1);
				{
				State = 7077;
				Match(COMMA);
				State = 7078;
				sconst();
				}
				break;
			case Eof:
			case OPEN_PAREN:
			case CLOSE_PAREN:
			case SEMI:
			case ANALYSE:
			case ANALYZE:
			case CREATE:
			case DO:
			case FETCH:
			case GRANT:
			case INTO:
			case SELECT:
			case TABLE:
			case WITH:
			case ABORT_P:
			case ALTER:
			case BEGIN_P:
			case CHECKPOINT:
			case CLOSE:
			case CLUSTER:
			case COMMENT:
			case COMMIT:
			case COPY:
			case DEALLOCATE:
			case DECLARE:
			case DELETE_P:
			case DISCARD:
			case DROP:
			case EXECUTE:
			case EXPLAIN:
			case INSERT:
			case LISTEN:
			case LOAD:
			case LOCK_P:
			case MERGE:
			case MOVE:
			case NOTIFY:
			case PREPARE:
			case REASSIGN:
			case REFRESH:
			case REINDEX:
			case RELEASE:
			case RESET:
			case REVOKE:
			case ROLLBACK:
			case SAVEPOINT:
			case SECURITY:
			case SET:
			case SHOW:
			case START:
			case TRUNCATE:
			case UNLISTEN:
			case UPDATE:
			case VACUUM:
			case VALUES:
			case CALL:
			case IMPORT_P:
			case END_P:
			case MetaCommand:
				EnterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ListenstmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LISTEN() { return GetToken(PostgreSQLParser.LISTEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ColidContext colid() {
			return GetRuleContext<ColidContext>(0);
		}
		public ListenstmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_listenstmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterListenstmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitListenstmt(this);
		}
	}

	[RuleVersion(0)]
	public ListenstmtContext listenstmt() {
		ListenstmtContext _localctx = new ListenstmtContext(Context, State);
		EnterRule(_localctx, 782, RULE_listenstmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7082;
			Match(LISTEN);
			State = 7083;
			colid();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UnlistenstmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNLISTEN() { return GetToken(PostgreSQLParser.UNLISTEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ColidContext colid() {
			return GetRuleContext<ColidContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STAR() { return GetToken(PostgreSQLParser.STAR, 0); }
		public UnlistenstmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unlistenstmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterUnlistenstmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitUnlistenstmt(this);
		}
	}

	[RuleVersion(0)]
	public UnlistenstmtContext unlistenstmt() {
		UnlistenstmtContext _localctx = new UnlistenstmtContext(Context, State);
		EnterRule(_localctx, 784, RULE_unlistenstmt);
		try {
			State = 7089;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,332,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 7085;
				Match(UNLISTEN);
				State = 7086;
				colid();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 7087;
				Match(UNLISTEN);
				State = 7088;
				Match(STAR);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TransactionstmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ABORT_P() { return GetToken(PostgreSQLParser.ABORT_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Opt_transactionContext opt_transaction() {
			return GetRuleContext<Opt_transactionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Opt_transaction_chainContext opt_transaction_chain() {
			return GetRuleContext<Opt_transaction_chainContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BEGIN_P() { return GetToken(PostgreSQLParser.BEGIN_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Transaction_mode_list_or_emptyContext transaction_mode_list_or_empty() {
			return GetRuleContext<Transaction_mode_list_or_emptyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode START() { return GetToken(PostgreSQLParser.START, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRANSACTION() { return GetToken(PostgreSQLParser.TRANSACTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMIT() { return GetToken(PostgreSQLParser.COMMIT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END_P() { return GetToken(PostgreSQLParser.END_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROLLBACK() { return GetToken(PostgreSQLParser.ROLLBACK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SAVEPOINT() { return GetToken(PostgreSQLParser.SAVEPOINT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ColidContext colid() {
			return GetRuleContext<ColidContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RELEASE() { return GetToken(PostgreSQLParser.RELEASE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TO() { return GetToken(PostgreSQLParser.TO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PREPARE() { return GetToken(PostgreSQLParser.PREPARE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SconstContext sconst() {
			return GetRuleContext<SconstContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PREPARED() { return GetToken(PostgreSQLParser.PREPARED, 0); }
		public TransactionstmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_transactionstmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterTransactionstmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitTransactionstmt(this);
		}
	}

	[RuleVersion(0)]
	public TransactionstmtContext transactionstmt() {
		TransactionstmtContext _localctx = new TransactionstmtContext(Context, State);
		EnterRule(_localctx, 786, RULE_transactionstmt);
		try {
			State = 7141;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,333,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 7091;
				Match(ABORT_P);
				State = 7092;
				opt_transaction();
				State = 7093;
				opt_transaction_chain();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 7095;
				Match(BEGIN_P);
				State = 7096;
				opt_transaction();
				State = 7097;
				transaction_mode_list_or_empty();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 7099;
				Match(START);
				State = 7100;
				Match(TRANSACTION);
				State = 7101;
				transaction_mode_list_or_empty();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 7102;
				Match(COMMIT);
				State = 7103;
				opt_transaction();
				State = 7104;
				opt_transaction_chain();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 7106;
				Match(END_P);
				State = 7107;
				opt_transaction();
				State = 7108;
				opt_transaction_chain();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 7110;
				Match(ROLLBACK);
				State = 7111;
				opt_transaction();
				State = 7112;
				opt_transaction_chain();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 7114;
				Match(SAVEPOINT);
				State = 7115;
				colid();
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 7116;
				Match(RELEASE);
				State = 7117;
				Match(SAVEPOINT);
				State = 7118;
				colid();
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 7119;
				Match(RELEASE);
				State = 7120;
				colid();
				}
				break;
			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 7121;
				Match(ROLLBACK);
				State = 7122;
				opt_transaction();
				State = 7123;
				Match(TO);
				State = 7124;
				Match(SAVEPOINT);
				State = 7125;
				colid();
				}
				break;
			case 11:
				EnterOuterAlt(_localctx, 11);
				{
				State = 7127;
				Match(ROLLBACK);
				State = 7128;
				opt_transaction();
				State = 7129;
				Match(TO);
				State = 7130;
				colid();
				}
				break;
			case 12:
				EnterOuterAlt(_localctx, 12);
				{
				State = 7132;
				Match(PREPARE);
				State = 7133;
				Match(TRANSACTION);
				State = 7134;
				sconst();
				}
				break;
			case 13:
				EnterOuterAlt(_localctx, 13);
				{
				State = 7135;
				Match(COMMIT);
				State = 7136;
				Match(PREPARED);
				State = 7137;
				sconst();
				}
				break;
			case 14:
				EnterOuterAlt(_localctx, 14);
				{
				State = 7138;
				Match(ROLLBACK);
				State = 7139;
				Match(PREPARED);
				State = 7140;
				sconst();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Opt_transactionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WORK() { return GetToken(PostgreSQLParser.WORK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRANSACTION() { return GetToken(PostgreSQLParser.TRANSACTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ATOMIC() { return GetToken(PostgreSQLParser.ATOMIC, 0); }
		public Opt_transactionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_opt_transaction; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterOpt_transaction(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitOpt_transaction(this);
		}
	}

	[RuleVersion(0)]
	public Opt_transactionContext opt_transaction() {
		Opt_transactionContext _localctx = new Opt_transactionContext(Context, State);
		EnterRule(_localctx, 788, RULE_opt_transaction);
		try {
			State = 7147;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case WORK:
				EnterOuterAlt(_localctx, 1);
				{
				State = 7143;
				Match(WORK);
				}
				break;
			case TRANSACTION:
				EnterOuterAlt(_localctx, 2);
				{
				State = 7144;
				Match(TRANSACTION);
				}
				break;
			case ATOMIC:
				EnterOuterAlt(_localctx, 3);
				{
				State = 7145;
				Match(ATOMIC);
				}
				break;
			case Eof:
			case OPEN_PAREN:
			case SEMI:
			case ANALYSE:
			case ANALYZE:
			case AND:
			case CREATE:
			case DEFERRABLE:
			case DO:
			case FETCH:
			case GRANT:
			case INTO:
			case NOT:
			case SELECT:
			case TABLE:
			case TO:
			case WITH:
			case ABORT_P:
			case ALTER:
			case BEGIN_P:
			case CHECKPOINT:
			case CLOSE:
			case CLUSTER:
			case COMMENT:
			case COMMIT:
			case COPY:
			case DEALLOCATE:
			case DECLARE:
			case DELETE_P:
			case DISCARD:
			case DROP:
			case EXECUTE:
			case EXPLAIN:
			case INSERT:
			case ISOLATION:
			case LISTEN:
			case LOAD:
			case LOCK_P:
			case MERGE:
			case MOVE:
			case NOTIFY:
			case PREPARE:
			case READ:
			case REASSIGN:
			case REFRESH:
			case REINDEX:
			case RELEASE:
			case RESET:
			case REVOKE:
			case ROLLBACK:
			case SAVEPOINT:
			case SECURITY:
			case SET:
			case SHOW:
			case START:
			case TRUNCATE:
			case UNLISTEN:
			case UPDATE:
			case VACUUM:
			case VALUES:
			case CALL:
			case IMPORT_P:
			case END_P:
			case MetaCommand:
				EnterOuterAlt(_localctx, 4);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Transaction_mode_itemContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ISOLATION() { return GetToken(PostgreSQLParser.ISOLATION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEVEL() { return GetToken(PostgreSQLParser.LEVEL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Iso_levelContext iso_level() {
			return GetRuleContext<Iso_levelContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode READ() { return GetToken(PostgreSQLParser.READ, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ONLY() { return GetToken(PostgreSQLParser.ONLY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WRITE() { return GetToken(PostgreSQLParser.WRITE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFERRABLE() { return GetToken(PostgreSQLParser.DEFERRABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT() { return GetToken(PostgreSQLParser.NOT, 0); }
		public Transaction_mode_itemContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_transaction_mode_item; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterTransaction_mode_item(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitTransaction_mode_item(this);
		}
	}

	[RuleVersion(0)]
	public Transaction_mode_itemContext transaction_mode_item() {
		Transaction_mode_itemContext _localctx = new Transaction_mode_itemContext(Context, State);
		EnterRule(_localctx, 790, RULE_transaction_mode_item);
		try {
			State = 7159;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,335,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 7149;
				Match(ISOLATION);
				State = 7150;
				Match(LEVEL);
				State = 7151;
				iso_level();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 7152;
				Match(READ);
				State = 7153;
				Match(ONLY);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 7154;
				Match(READ);
				State = 7155;
				Match(WRITE);
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 7156;
				Match(DEFERRABLE);
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 7157;
				Match(NOT);
				State = 7158;
				Match(DEFERRABLE);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Transaction_mode_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Transaction_mode_itemContext[] transaction_mode_item() {
			return GetRuleContexts<Transaction_mode_itemContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Transaction_mode_itemContext transaction_mode_item(int i) {
			return GetRuleContext<Transaction_mode_itemContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(PostgreSQLParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(PostgreSQLParser.COMMA, i);
		}
		public Transaction_mode_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_transaction_mode_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterTransaction_mode_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitTransaction_mode_list(this);
		}
	}

	[RuleVersion(0)]
	public Transaction_mode_listContext transaction_mode_list() {
		Transaction_mode_listContext _localctx = new Transaction_mode_listContext(Context, State);
		EnterRule(_localctx, 792, RULE_transaction_mode_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7161;
			transaction_mode_item();
			State = 7168;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA || _la==DEFERRABLE || _la==NOT || _la==ISOLATION || _la==READ) {
				{
				{
				State = 7163;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COMMA) {
					{
					State = 7162;
					Match(COMMA);
					}
				}

				State = 7165;
				transaction_mode_item();
				}
				}
				State = 7170;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Transaction_mode_list_or_emptyContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Transaction_mode_listContext transaction_mode_list() {
			return GetRuleContext<Transaction_mode_listContext>(0);
		}
		public Transaction_mode_list_or_emptyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_transaction_mode_list_or_empty; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterTransaction_mode_list_or_empty(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitTransaction_mode_list_or_empty(this);
		}
	}

	[RuleVersion(0)]
	public Transaction_mode_list_or_emptyContext transaction_mode_list_or_empty() {
		Transaction_mode_list_or_emptyContext _localctx = new Transaction_mode_list_or_emptyContext(Context, State);
		EnterRule(_localctx, 794, RULE_transaction_mode_list_or_empty);
		try {
			State = 7173;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case DEFERRABLE:
			case NOT:
			case ISOLATION:
			case READ:
				EnterOuterAlt(_localctx, 1);
				{
				State = 7171;
				transaction_mode_list();
				}
				break;
			case Eof:
			case OPEN_PAREN:
			case SEMI:
			case ANALYSE:
			case ANALYZE:
			case CREATE:
			case DO:
			case FETCH:
			case GRANT:
			case INTO:
			case SELECT:
			case TABLE:
			case WITH:
			case ABORT_P:
			case ALTER:
			case BEGIN_P:
			case CHECKPOINT:
			case CLOSE:
			case CLUSTER:
			case COMMENT:
			case COMMIT:
			case COPY:
			case DEALLOCATE:
			case DECLARE:
			case DELETE_P:
			case DISCARD:
			case DROP:
			case EXECUTE:
			case EXPLAIN:
			case INSERT:
			case LISTEN:
			case LOAD:
			case LOCK_P:
			case MERGE:
			case MOVE:
			case NOTIFY:
			case PREPARE:
			case REASSIGN:
			case REFRESH:
			case REINDEX:
			case RELEASE:
			case RESET:
			case REVOKE:
			case ROLLBACK:
			case SAVEPOINT:
			case SECURITY:
			case SET:
			case SHOW:
			case START:
			case TRUNCATE:
			case UNLISTEN:
			case UPDATE:
			case VACUUM:
			case VALUES:
			case CALL:
			case IMPORT_P:
			case END_P:
			case MetaCommand:
				EnterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Opt_transaction_chainContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AND() { return GetToken(PostgreSQLParser.AND, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHAIN() { return GetToken(PostgreSQLParser.CHAIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NO() { return GetToken(PostgreSQLParser.NO, 0); }
		public Opt_transaction_chainContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_opt_transaction_chain; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterOpt_transaction_chain(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitOpt_transaction_chain(this);
		}
	}

	[RuleVersion(0)]
	public Opt_transaction_chainContext opt_transaction_chain() {
		Opt_transaction_chainContext _localctx = new Opt_transaction_chainContext(Context, State);
		EnterRule(_localctx, 796, RULE_opt_transaction_chain);
		int _la;
		try {
			State = 7181;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case AND:
				EnterOuterAlt(_localctx, 1);
				{
				State = 7175;
				Match(AND);
				State = 7177;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==NO) {
					{
					State = 7176;
					Match(NO);
					}
				}

				State = 7179;
				Match(CHAIN);
				}
				break;
			case Eof:
			case OPEN_PAREN:
			case SEMI:
			case ANALYSE:
			case ANALYZE:
			case CREATE:
			case DO:
			case FETCH:
			case GRANT:
			case INTO:
			case SELECT:
			case TABLE:
			case WITH:
			case ABORT_P:
			case ALTER:
			case BEGIN_P:
			case CHECKPOINT:
			case CLOSE:
			case CLUSTER:
			case COMMENT:
			case COMMIT:
			case COPY:
			case DEALLOCATE:
			case DECLARE:
			case DELETE_P:
			case DISCARD:
			case DROP:
			case EXECUTE:
			case EXPLAIN:
			case INSERT:
			case LISTEN:
			case LOAD:
			case LOCK_P:
			case MERGE:
			case MOVE:
			case NOTIFY:
			case PREPARE:
			case REASSIGN:
			case REFRESH:
			case REINDEX:
			case RELEASE:
			case RESET:
			case REVOKE:
			case ROLLBACK:
			case SAVEPOINT:
			case SECURITY:
			case SET:
			case SHOW:
			case START:
			case TRUNCATE:
			case UNLISTEN:
			case UPDATE:
			case VACUUM:
			case VALUES:
			case CALL:
			case IMPORT_P:
			case END_P:
			case MetaCommand:
				EnterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ViewstmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CREATE() { return GetToken(PostgreSQLParser.CREATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public OpttempContext opttemp() {
			return GetRuleContext<OpttempContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS() { return GetToken(PostgreSQLParser.AS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SelectstmtContext selectstmt() {
			return GetRuleContext<SelectstmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Opt_check_optionContext opt_check_option() {
			return GetRuleContext<Opt_check_optionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VIEW() { return GetToken(PostgreSQLParser.VIEW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Qualified_nameContext qualified_name() {
			return GetRuleContext<Qualified_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Opt_column_listContext opt_column_list() {
			return GetRuleContext<Opt_column_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Opt_reloptionsContext opt_reloptions() {
			return GetRuleContext<Opt_reloptionsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RECURSIVE() { return GetToken(PostgreSQLParser.RECURSIVE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAREN() { return GetToken(PostgreSQLParser.OPEN_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ColumnlistContext columnlist() {
			return GetRuleContext<ColumnlistContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAREN() { return GetToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OR() { return GetToken(PostgreSQLParser.OR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REPLACE() { return GetToken(PostgreSQLParser.REPLACE, 0); }
		public ViewstmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_viewstmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterViewstmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitViewstmt(this);
		}
	}

	[RuleVersion(0)]
	public ViewstmtContext viewstmt() {
		ViewstmtContext _localctx = new ViewstmtContext(Context, State);
		EnterRule(_localctx, 798, RULE_viewstmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7183;
			Match(CREATE);
			State = 7186;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==OR) {
				{
				State = 7184;
				Match(OR);
				State = 7185;
				Match(REPLACE);
				}
			}

			State = 7188;
			opttemp();
			State = 7202;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case VIEW:
				{
				State = 7189;
				Match(VIEW);
				State = 7190;
				qualified_name();
				State = 7191;
				opt_column_list();
				State = 7192;
				opt_reloptions();
				}
				break;
			case RECURSIVE:
				{
				State = 7194;
				Match(RECURSIVE);
				State = 7195;
				Match(VIEW);
				State = 7196;
				qualified_name();
				State = 7197;
				Match(OPEN_PAREN);
				State = 7198;
				columnlist();
				State = 7199;
				Match(CLOSE_PAREN);
				State = 7200;
				opt_reloptions();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 7204;
			Match(AS);
			State = 7205;
			selectstmt();
			State = 7206;
			opt_check_option();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Opt_check_optionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WITH() { return GetToken(PostgreSQLParser.WITH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHECK() { return GetToken(PostgreSQLParser.CHECK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPTION() { return GetToken(PostgreSQLParser.OPTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CASCADED() { return GetToken(PostgreSQLParser.CASCADED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOCAL() { return GetToken(PostgreSQLParser.LOCAL, 0); }
		public Opt_check_optionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_opt_check_option; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterOpt_check_option(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitOpt_check_option(this);
		}
	}

	[RuleVersion(0)]
	public Opt_check_optionContext opt_check_option() {
		Opt_check_optionContext _localctx = new Opt_check_optionContext(Context, State);
		EnterRule(_localctx, 800, RULE_opt_check_option);
		int _la;
		try {
			State = 7215;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,344,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 7208;
				Match(WITH);
				State = 7210;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==CASCADED || _la==LOCAL) {
					{
					State = 7209;
					_la = TokenStream.LA(1);
					if ( !(_la==CASCADED || _la==LOCAL) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
				}

				State = 7212;
				Match(CHECK);
				State = 7213;
				Match(OPTION);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LoadstmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOAD() { return GetToken(PostgreSQLParser.LOAD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public File_nameContext file_name() {
			return GetRuleContext<File_nameContext>(0);
		}
		public LoadstmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_loadstmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterLoadstmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitLoadstmt(this);
		}
	}

	[RuleVersion(0)]
	public LoadstmtContext loadstmt() {
		LoadstmtContext _localctx = new LoadstmtContext(Context, State);
		EnterRule(_localctx, 802, RULE_loadstmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7217;
			Match(LOAD);
			State = 7218;
			file_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CreatedbstmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CREATE() { return GetToken(PostgreSQLParser.CREATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DATABASE() { return GetToken(PostgreSQLParser.DATABASE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Opt_withContext opt_with() {
			return GetRuleContext<Opt_withContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Createdb_opt_listContext createdb_opt_list() {
			return GetRuleContext<Createdb_opt_listContext>(0);
		}
		public CreatedbstmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_createdbstmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterCreatedbstmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitCreatedbstmt(this);
		}
	}

	[RuleVersion(0)]
	public CreatedbstmtContext createdbstmt() {
		CreatedbstmtContext _localctx = new CreatedbstmtContext(Context, State);
		EnterRule(_localctx, 804, RULE_createdbstmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7220;
			Match(CREATE);
			State = 7221;
			Match(DATABASE);
			State = 7222;
			name();
			State = 7223;
			opt_with();
			State = 7224;
			createdb_opt_list();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Createdb_opt_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Createdb_opt_itemsContext createdb_opt_items() {
			return GetRuleContext<Createdb_opt_itemsContext>(0);
		}
		public Createdb_opt_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_createdb_opt_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterCreatedb_opt_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitCreatedb_opt_list(this);
		}
	}

	[RuleVersion(0)]
	public Createdb_opt_listContext createdb_opt_list() {
		Createdb_opt_listContext _localctx = new Createdb_opt_listContext(Context, State);
		EnterRule(_localctx, 806, RULE_createdb_opt_list);
		try {
			State = 7228;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,345,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 7226;
				createdb_opt_items();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Createdb_opt_itemsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Createdb_opt_itemContext[] createdb_opt_item() {
			return GetRuleContexts<Createdb_opt_itemContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Createdb_opt_itemContext createdb_opt_item(int i) {
			return GetRuleContext<Createdb_opt_itemContext>(i);
		}
		public Createdb_opt_itemsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_createdb_opt_items; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterCreatedb_opt_items(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitCreatedb_opt_items(this);
		}
	}

	[RuleVersion(0)]
	public Createdb_opt_itemsContext createdb_opt_items() {
		Createdb_opt_itemsContext _localctx = new Createdb_opt_itemsContext(Context, State);
		EnterRule(_localctx, 808, RULE_createdb_opt_items);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 7231;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 7230;
					createdb_opt_item();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 7233;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,346,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Createdb_opt_itemContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Createdb_opt_nameContext createdb_opt_name() {
			return GetRuleContext<Createdb_opt_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Opt_equalContext opt_equal() {
			return GetRuleContext<Opt_equalContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SignediconstContext signediconst() {
			return GetRuleContext<SignediconstContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Opt_boolean_or_stringContext opt_boolean_or_string() {
			return GetRuleContext<Opt_boolean_or_stringContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFAULT() { return GetToken(PostgreSQLParser.DEFAULT, 0); }
		public Createdb_opt_itemContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_createdb_opt_item; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterCreatedb_opt_item(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitCreatedb_opt_item(this);
		}
	}

	[RuleVersion(0)]
	public Createdb_opt_itemContext createdb_opt_item() {
		Createdb_opt_itemContext _localctx = new Createdb_opt_itemContext(Context, State);
		EnterRule(_localctx, 810, RULE_createdb_opt_item);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7235;
			createdb_opt_name();
			State = 7236;
			opt_equal();
			State = 7240;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,347,Context) ) {
			case 1:
				{
				State = 7237;
				signediconst();
				}
				break;
			case 2:
				{
				State = 7238;
				opt_boolean_or_string();
				}
				break;
			case 3:
				{
				State = 7239;
				Match(DEFAULT);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Createdb_opt_nameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONNECTION() { return GetToken(PostgreSQLParser.CONNECTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LIMIT() { return GetToken(PostgreSQLParser.LIMIT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ENCODING() { return GetToken(PostgreSQLParser.ENCODING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOCATION() { return GetToken(PostgreSQLParser.LOCATION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OWNER() { return GetToken(PostgreSQLParser.OWNER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLESPACE() { return GetToken(PostgreSQLParser.TABLESPACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TEMPLATE() { return GetToken(PostgreSQLParser.TEMPLATE, 0); }
		public Createdb_opt_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_createdb_opt_name; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterCreatedb_opt_name(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitCreatedb_opt_name(this);
		}
	}

	[RuleVersion(0)]
	public Createdb_opt_nameContext createdb_opt_name() {
		Createdb_opt_nameContext _localctx = new Createdb_opt_nameContext(Context, State);
		EnterRule(_localctx, 812, RULE_createdb_opt_name);
		try {
			State = 7250;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case AND:
			case ARRAY:
			case COLLATE:
			case COLUMN:
			case CONSTRAINT:
			case DEFAULT:
			case DO:
			case FETCH:
			case TABLE:
			case IS:
			case OUTER_P:
			case ABSOLUTE_P:
			case BACKWARD:
			case CHAIN:
			case CLOSE:
			case COMMIT:
			case CONTINUE_P:
			case CURSOR:
			case FIRST_P:
			case FORWARD:
			case INSERT:
			case LAST_P:
			case MOVE:
			case NEXT:
			case NO:
			case OPTION:
			case PRIOR:
			case RELATIVE_P:
			case RESET:
			case ROLLBACK:
			case SCHEMA:
			case SCROLL:
			case SET:
			case TYPE_P:
			case CALL:
			case CURRENT_P:
			case ROWTYPE:
			case DUMP:
			case PRINT_STRICT_PARAMS:
			case VARIABLE_CONFLICT:
			case ERROR:
			case USE_VARIABLE:
			case USE_COLUMN:
			case ALIAS:
			case CONSTANT:
			case PERFORM:
			case GET:
			case DIAGNOSTICS:
			case STACKED:
			case ELSIF:
			case SLICE:
			case EXIT:
			case RETURN:
			case QUERY:
			case RAISE:
			case SQLSTATE:
			case DEBUG:
			case INFO:
			case NOTICE:
			case WARNING:
			case EXCEPTION:
			case ASSERT:
			case OPEN:
			case Identifier:
			case QuotedIdentifier:
			case UnicodeQuotedIdentifier:
			case PLSQLVARIABLENAME:
			case PLSQLIDENTIFIER:
				EnterOuterAlt(_localctx, 1);
				{
				State = 7242;
				identifier();
				}
				break;
			case CONNECTION:
				EnterOuterAlt(_localctx, 2);
				{
				State = 7243;
				Match(CONNECTION);
				State = 7244;
				Match(LIMIT);
				}
				break;
			case ENCODING:
				EnterOuterAlt(_localctx, 3);
				{
				State = 7245;
				Match(ENCODING);
				}
				break;
			case LOCATION:
				EnterOuterAlt(_localctx, 4);
				{
				State = 7246;
				Match(LOCATION);
				}
				break;
			case OWNER:
				EnterOuterAlt(_localctx, 5);
				{
				State = 7247;
				Match(OWNER);
				}
				break;
			case TABLESPACE:
				EnterOuterAlt(_localctx, 6);
				{
				State = 7248;
				Match(TABLESPACE);
				}
				break;
			case TEMPLATE:
				EnterOuterAlt(_localctx, 7);
				{
				State = 7249;
				Match(TEMPLATE);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Opt_equalContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL() { return GetToken(PostgreSQLParser.EQUAL, 0); }
		public Opt_equalContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_opt_equal; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterOpt_equal(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitOpt_equal(this);
		}
	}

	[RuleVersion(0)]
	public Opt_equalContext opt_equal() {
		Opt_equalContext _localctx = new Opt_equalContext(Context, State);
		EnterRule(_localctx, 814, RULE_opt_equal);
		try {
			State = 7254;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case EQUAL:
				EnterOuterAlt(_localctx, 1);
				{
				State = 7252;
				Match(EQUAL);
				}
				break;
			case PLUS:
			case MINUS:
			case AND:
			case ARRAY:
			case COLLATE:
			case COLUMN:
			case CONSTRAINT:
			case DEFAULT:
			case DO:
			case FALSE_P:
			case FETCH:
			case ON:
			case TABLE:
			case TRUE_P:
			case AUTHORIZATION:
			case BINARY:
			case COLLATION:
			case CONCURRENTLY:
			case CROSS:
			case CURRENT_SCHEMA:
			case FREEZE:
			case FULL:
			case ILIKE:
			case INNER_P:
			case IS:
			case ISNULL:
			case JOIN:
			case LIKE:
			case NATURAL:
			case NOTNULL:
			case OUTER_P:
			case OVER:
			case OVERLAPS:
			case SIMILAR:
			case VERBOSE:
			case ABORT_P:
			case ABSOLUTE_P:
			case ACCESS:
			case ACTION:
			case ADD_P:
			case ADMIN:
			case AFTER:
			case AGGREGATE:
			case ALSO:
			case ALTER:
			case ALWAYS:
			case ASSERTION:
			case ASSIGNMENT:
			case AT:
			case ATTRIBUTE:
			case BACKWARD:
			case BEFORE:
			case BEGIN_P:
			case BY:
			case CACHE:
			case CALLED:
			case CASCADE:
			case CASCADED:
			case CATALOG:
			case CHAIN:
			case CHARACTERISTICS:
			case CHECKPOINT:
			case CLASS:
			case CLOSE:
			case CLUSTER:
			case COMMENT:
			case COMMENTS:
			case COMMIT:
			case COMMITTED:
			case CONFIGURATION:
			case CONNECTION:
			case CONSTRAINTS:
			case CONTENT_P:
			case CONTINUE_P:
			case CONVERSION_P:
			case COPY:
			case COST:
			case CSV:
			case CURSOR:
			case CYCLE:
			case DATA_P:
			case DATABASE:
			case DAY_P:
			case DEALLOCATE:
			case DECLARE:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE_P:
			case DELIMITER:
			case DELIMITERS:
			case DICTIONARY:
			case DISABLE_P:
			case DISCARD:
			case DOCUMENT_P:
			case DOMAIN_P:
			case DOUBLE_P:
			case DROP:
			case EACH:
			case ENABLE_P:
			case ENCODING:
			case ENCRYPTED:
			case ENUM_P:
			case ESCAPE:
			case EVENT:
			case EXCLUDE:
			case EXCLUDING:
			case EXCLUSIVE:
			case EXECUTE:
			case EXPLAIN:
			case EXTENSION:
			case EXTERNAL:
			case FAMILY:
			case FIRST_P:
			case FOLLOWING:
			case FORCE:
			case FORWARD:
			case FUNCTION:
			case FUNCTIONS:
			case GLOBAL:
			case GRANTED:
			case HANDLER:
			case HEADER_P:
			case HOLD:
			case HOUR_P:
			case IDENTITY_P:
			case IF_P:
			case IMMEDIATE:
			case IMMUTABLE:
			case IMPLICIT_P:
			case INCLUDING:
			case INCREMENT:
			case INDEX:
			case INDEXES:
			case INHERIT:
			case INHERITS:
			case INLINE_P:
			case INSENSITIVE:
			case INSERT:
			case INSTEAD:
			case INVOKER:
			case ISOLATION:
			case KEY:
			case LABEL:
			case LANGUAGE:
			case LARGE_P:
			case LAST_P:
			case LEAKPROOF:
			case LEVEL:
			case LISTEN:
			case LOAD:
			case LOCAL:
			case LOCATION:
			case LOCK_P:
			case MAPPING:
			case MATCH:
			case MATERIALIZED:
			case MAXVALUE:
			case MINUTE_P:
			case MINVALUE:
			case MODE:
			case MONTH_P:
			case MOVE:
			case NAME_P:
			case NAMES:
			case NEXT:
			case NO:
			case NOTHING:
			case NOTIFY:
			case NOWAIT:
			case NULLS_P:
			case OBJECT_P:
			case OF:
			case OFF:
			case OIDS:
			case OPERATOR:
			case OPTION:
			case OPTIONS:
			case OWNED:
			case OWNER:
			case PARSER:
			case PARTIAL:
			case PARTITION:
			case PASSING:
			case PASSWORD:
			case PLANS:
			case PRECEDING:
			case PREPARE:
			case PREPARED:
			case PRESERVE:
			case PRIOR:
			case PRIVILEGES:
			case PROCEDURAL:
			case PROCEDURE:
			case PROGRAM:
			case QUOTE:
			case RANGE:
			case READ:
			case REASSIGN:
			case RECHECK:
			case RECURSIVE:
			case REF:
			case REFRESH:
			case REINDEX:
			case RELATIVE_P:
			case RELEASE:
			case RENAME:
			case REPEATABLE:
			case REPLACE:
			case REPLICA:
			case RESET:
			case RESTART:
			case RESTRICT:
			case RETURNS:
			case REVOKE:
			case ROLE:
			case ROLLBACK:
			case ROWS:
			case RULE:
			case SAVEPOINT:
			case SCHEMA:
			case SCROLL:
			case SEARCH:
			case SECOND_P:
			case SECURITY:
			case SEQUENCE:
			case SEQUENCES:
			case SERIALIZABLE:
			case SERVER:
			case SESSION:
			case SET:
			case SHARE:
			case SHOW:
			case SIMPLE:
			case SNAPSHOT:
			case STABLE:
			case STANDALONE_P:
			case START:
			case STATEMENT:
			case STATISTICS:
			case STDIN:
			case STDOUT:
			case STORAGE:
			case STRICT_P:
			case STRIP_P:
			case SYSID:
			case SYSTEM_P:
			case TABLES:
			case TABLESPACE:
			case TEMP:
			case TEMPLATE:
			case TEMPORARY:
			case TEXT_P:
			case TRANSACTION:
			case TRIGGER:
			case TRUNCATE:
			case TRUSTED:
			case TYPE_P:
			case TYPES_P:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNENCRYPTED:
			case UNKNOWN:
			case UNLISTEN:
			case UNLOGGED:
			case UNTIL:
			case UPDATE:
			case VACUUM:
			case VALID:
			case VALIDATE:
			case VALIDATOR:
			case VARYING:
			case VERSION_P:
			case VIEW:
			case VOLATILE:
			case WHITESPACE_P:
			case WITHOUT:
			case WORK:
			case WRAPPER:
			case WRITE:
			case XML_P:
			case YEAR_P:
			case YES_P:
			case ZONE:
			case BETWEEN:
			case BIGINT:
			case BIT:
			case BOOLEAN_P:
			case CHAR_P:
			case CHARACTER:
			case COALESCE:
			case DEC:
			case DECIMAL_P:
			case EXISTS:
			case EXTRACT:
			case FLOAT_P:
			case GREATEST:
			case INOUT:
			case INT_P:
			case INTEGER:
			case INTERVAL:
			case LEAST:
			case NATIONAL:
			case NCHAR:
			case NONE:
			case NULLIF:
			case NUMERIC:
			case OVERLAY:
			case POSITION:
			case PRECISION:
			case REAL:
			case ROW:
			case SETOF:
			case SMALLINT:
			case SUBSTRING:
			case TIME:
			case TIMESTAMP:
			case TREAT:
			case TRIM:
			case VALUES:
			case VARCHAR:
			case XMLATTRIBUTES:
			case XMLCOMMENT:
			case XMLAGG:
			case XML_IS_WELL_FORMED:
			case XML_IS_WELL_FORMED_DOCUMENT:
			case XML_IS_WELL_FORMED_CONTENT:
			case XPATH:
			case XPATH_EXISTS:
			case XMLCONCAT:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLPARSE:
			case XMLPI:
			case XMLROOT:
			case XMLSERIALIZE:
			case CALL:
			case CURRENT_P:
			case ATTACH:
			case DETACH:
			case EXPRESSION:
			case GENERATED:
			case LOGGED:
			case STORED:
			case INCLUDE:
			case ROUTINE:
			case TRANSFORM:
			case IMPORT_P:
			case POLICY:
			case METHOD:
			case REFERENCING:
			case NEW:
			case OLD:
			case VALUE_P:
			case SUBSCRIPTION:
			case PUBLICATION:
			case OUT_P:
			case ROUTINES:
			case SCHEMAS:
			case PROCEDURES:
			case INPUT_P:
			case SUPPORT:
			case PARALLEL:
			case SQL_P:
			case DEPENDS:
			case OVERRIDING:
			case CONFLICT:
			case SKIP_P:
			case LOCKED:
			case TIES:
			case ROLLUP:
			case CUBE:
			case GROUPING:
			case SETS:
			case TABLESAMPLE:
			case ORDINALITY:
			case XMLTABLE:
			case COLUMNS:
			case XMLNAMESPACES:
			case ROWTYPE:
			case NORMALIZED:
			case WITHIN:
			case FILTER:
			case GROUPS:
			case OTHERS:
			case NFC:
			case NFD:
			case NFKC:
			case NFKD:
			case UESCAPE:
			case VIEWS:
			case NORMALIZE:
			case DUMP:
			case PRINT_STRICT_PARAMS:
			case VARIABLE_CONFLICT:
			case ERROR:
			case USE_VARIABLE:
			case USE_COLUMN:
			case ALIAS:
			case CONSTANT:
			case PERFORM:
			case GET:
			case DIAGNOSTICS:
			case STACKED:
			case ELSIF:
			case REVERSE:
			case SLICE:
			case EXIT:
			case RETURN:
			case QUERY:
			case RAISE:
			case SQLSTATE:
			case DEBUG:
			case LOG:
			case INFO:
			case NOTICE:
			case WARNING:
			case EXCEPTION:
			case ASSERT:
			case OPEN:
			case ABS:
			case CBRT:
			case CEIL:
			case CEILING:
			case DEGREES:
			case DIV:
			case EXP:
			case FACTORIAL:
			case FLOOR:
			case GCD:
			case LCM:
			case LN:
			case LOG10:
			case MIN_SCALE:
			case MOD:
			case PI:
			case POWER:
			case RADIANS:
			case ROUND:
			case SCALE:
			case SIGN:
			case SQRT:
			case TRIM_SCALE:
			case TRUNC:
			case WIDTH_BUCKET:
			case RANDOM:
			case SETSEED:
			case ACOS:
			case ACOSD:
			case ASIN:
			case ASIND:
			case ATAN:
			case ATAND:
			case ATAN2:
			case ATAN2D:
			case COS:
			case COSD:
			case COT:
			case COTD:
			case SIN:
			case SIND:
			case TAN:
			case TAND:
			case SINH:
			case COSH:
			case TANH:
			case ASINH:
			case ACOSH:
			case ATANH:
			case BIT_LENGTH:
			case CHAR_LENGTH:
			case CHARACTER_LENGTH:
			case LOWER:
			case OCTET_LENGTH:
			case UPPER:
			case ASCII:
			case BTRIM:
			case CHR:
			case CONCAT:
			case CONCAT_WS:
			case FORMAT:
			case INITCAP:
			case LENGTH:
			case LPAD:
			case LTRIM:
			case MD5:
			case PARSE_IDENT:
			case PG_CLIENT_ENCODING:
			case QUOTE_IDENT:
			case QUOTE_LITERAL:
			case QUOTE_NULLABLE:
			case REGEXP_COUNT:
			case REGEXP_INSTR:
			case REGEXP_LIKE:
			case REGEXP_MATCH:
			case REGEXP_MATCHES:
			case REGEXP_REPLACE:
			case REGEXP_SPLIT_TO_ARRAY:
			case REGEXP_SPLIT_TO_TABLE:
			case REGEXP_SUBSTR:
			case REPEAT:
			case RPAD:
			case RTRIM:
			case SPLIT_PART:
			case STARTS_WITH:
			case STRING_TO_ARRAY:
			case STRING_TO_TABLE:
			case STRPOS:
			case SUBSTR:
			case TO_ASCII:
			case TO_HEX:
			case TRANSLATE:
			case UNISTR:
			case AGE:
			case CLOCK_TIMESTAMP:
			case DATE_BIN:
			case DATE_PART:
			case DATE_TRUNC:
			case ISFINITE:
			case JUSTIFY_DAYS:
			case JUSTIFY_HOURS:
			case JUSTIFY_INTERVAL:
			case MAKE_DATE:
			case MAKE_INTERVAL:
			case MAKE_TIME:
			case MAKE_TIMESTAMP:
			case MAKE_TIMESTAMPTZ:
			case NOW:
			case STATEMENT_TIMESTAMP:
			case TIMEOFDAY:
			case TRANSACTION_TIMESTAMP:
			case TO_TIMESTAMP:
			case TO_CHAR:
			case TO_DATE:
			case TO_NUMBER:
			case Identifier:
			case QuotedIdentifier:
			case UnicodeQuotedIdentifier:
			case StringConstant:
			case UnicodeEscapeStringConstant:
			case BeginDollarStringConstant:
			case Integral:
			case PLSQLVARIABLENAME:
			case PLSQLIDENTIFIER:
			case EscapeStringConstant:
				EnterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AlterdatabasestmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALTER() { return GetToken(PostgreSQLParser.ALTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DATABASE() { return GetToken(PostgreSQLParser.DATABASE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NameContext[] name() {
			return GetRuleContexts<NameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public NameContext name(int i) {
			return GetRuleContext<NameContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WITH() { return GetToken(PostgreSQLParser.WITH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Createdb_opt_listContext createdb_opt_list() {
			return GetRuleContext<Createdb_opt_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SET() { return GetToken(PostgreSQLParser.SET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLESPACE() { return GetToken(PostgreSQLParser.TABLESPACE, 0); }
		public AlterdatabasestmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alterdatabasestmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterAlterdatabasestmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitAlterdatabasestmt(this);
		}
	}

	[RuleVersion(0)]
	public AlterdatabasestmtContext alterdatabasestmt() {
		AlterdatabasestmtContext _localctx = new AlterdatabasestmtContext(Context, State);
		EnterRule(_localctx, 816, RULE_alterdatabasestmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7256;
			Match(ALTER);
			State = 7257;
			Match(DATABASE);
			State = 7258;
			name();
			State = 7265;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,350,Context) ) {
			case 1:
				{
				State = 7259;
				Match(WITH);
				State = 7260;
				createdb_opt_list();
				}
				break;
			case 2:
				{
				State = 7261;
				createdb_opt_list();
				}
				break;
			case 3:
				{
				State = 7262;
				Match(SET);
				State = 7263;
				Match(TABLESPACE);
				State = 7264;
				name();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AlterdatabasesetstmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALTER() { return GetToken(PostgreSQLParser.ALTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DATABASE() { return GetToken(PostgreSQLParser.DATABASE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SetresetclauseContext setresetclause() {
			return GetRuleContext<SetresetclauseContext>(0);
		}
		public AlterdatabasesetstmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alterdatabasesetstmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterAlterdatabasesetstmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitAlterdatabasesetstmt(this);
		}
	}

	[RuleVersion(0)]
	public AlterdatabasesetstmtContext alterdatabasesetstmt() {
		AlterdatabasesetstmtContext _localctx = new AlterdatabasesetstmtContext(Context, State);
		EnterRule(_localctx, 818, RULE_alterdatabasesetstmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7267;
			Match(ALTER);
			State = 7268;
			Match(DATABASE);
			State = 7269;
			name();
			State = 7270;
			setresetclause();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DropdbstmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DROP() { return GetToken(PostgreSQLParser.DROP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DATABASE() { return GetToken(PostgreSQLParser.DATABASE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF_P() { return GetToken(PostgreSQLParser.IF_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXISTS() { return GetToken(PostgreSQLParser.EXISTS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Opt_withContext opt_with() {
			return GetRuleContext<Opt_withContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAREN() { return GetToken(PostgreSQLParser.OPEN_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Drop_option_listContext drop_option_list() {
			return GetRuleContext<Drop_option_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAREN() { return GetToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public DropdbstmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dropdbstmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterDropdbstmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitDropdbstmt(this);
		}
	}

	[RuleVersion(0)]
	public DropdbstmtContext dropdbstmt() {
		DropdbstmtContext _localctx = new DropdbstmtContext(Context, State);
		EnterRule(_localctx, 820, RULE_dropdbstmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7272;
			Match(DROP);
			State = 7273;
			Match(DATABASE);
			State = 7276;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,351,Context) ) {
			case 1:
				{
				State = 7274;
				Match(IF_P);
				State = 7275;
				Match(EXISTS);
				}
				break;
			}
			State = 7278;
			name();
			State = 7284;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,352,Context) ) {
			case 1:
				{
				State = 7279;
				opt_with();
				State = 7280;
				Match(OPEN_PAREN);
				State = 7281;
				drop_option_list();
				State = 7282;
				Match(CLOSE_PAREN);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Drop_option_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Drop_optionContext[] drop_option() {
			return GetRuleContexts<Drop_optionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Drop_optionContext drop_option(int i) {
			return GetRuleContext<Drop_optionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(PostgreSQLParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(PostgreSQLParser.COMMA, i);
		}
		public Drop_option_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_drop_option_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterDrop_option_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitDrop_option_list(this);
		}
	}

	[RuleVersion(0)]
	public Drop_option_listContext drop_option_list() {
		Drop_option_listContext _localctx = new Drop_option_listContext(Context, State);
		EnterRule(_localctx, 822, RULE_drop_option_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7286;
			drop_option();
			State = 7291;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 7287;
				Match(COMMA);
				State = 7288;
				drop_option();
				}
				}
				State = 7293;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Drop_optionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FORCE() { return GetToken(PostgreSQLParser.FORCE, 0); }
		public Drop_optionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_drop_option; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterDrop_option(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitDrop_option(this);
		}
	}

	[RuleVersion(0)]
	public Drop_optionContext drop_option() {
		Drop_optionContext _localctx = new Drop_optionContext(Context, State);
		EnterRule(_localctx, 824, RULE_drop_option);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7294;
			Match(FORCE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AltercollationstmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALTER() { return GetToken(PostgreSQLParser.ALTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLLATION() { return GetToken(PostgreSQLParser.COLLATION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Any_nameContext any_name() {
			return GetRuleContext<Any_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REFRESH() { return GetToken(PostgreSQLParser.REFRESH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VERSION_P() { return GetToken(PostgreSQLParser.VERSION_P, 0); }
		public AltercollationstmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_altercollationstmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterAltercollationstmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitAltercollationstmt(this);
		}
	}

	[RuleVersion(0)]
	public AltercollationstmtContext altercollationstmt() {
		AltercollationstmtContext _localctx = new AltercollationstmtContext(Context, State);
		EnterRule(_localctx, 826, RULE_altercollationstmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7296;
			Match(ALTER);
			State = 7297;
			Match(COLLATION);
			State = 7298;
			any_name();
			State = 7299;
			Match(REFRESH);
			State = 7300;
			Match(VERSION_P);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AltersystemstmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALTER() { return GetToken(PostgreSQLParser.ALTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SYSTEM_P() { return GetToken(PostgreSQLParser.SYSTEM_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Generic_setContext generic_set() {
			return GetRuleContext<Generic_setContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SET() { return GetToken(PostgreSQLParser.SET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RESET() { return GetToken(PostgreSQLParser.RESET, 0); }
		public AltersystemstmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_altersystemstmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterAltersystemstmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitAltersystemstmt(this);
		}
	}

	[RuleVersion(0)]
	public AltersystemstmtContext altersystemstmt() {
		AltersystemstmtContext _localctx = new AltersystemstmtContext(Context, State);
		EnterRule(_localctx, 828, RULE_altersystemstmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7302;
			Match(ALTER);
			State = 7303;
			Match(SYSTEM_P);
			State = 7304;
			_la = TokenStream.LA(1);
			if ( !(_la==RESET || _la==SET) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 7305;
			generic_set();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CreatedomainstmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CREATE() { return GetToken(PostgreSQLParser.CREATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOMAIN_P() { return GetToken(PostgreSQLParser.DOMAIN_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Any_nameContext any_name() {
			return GetRuleContext<Any_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Opt_asContext opt_as() {
			return GetRuleContext<Opt_asContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypenameContext typename() {
			return GetRuleContext<TypenameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ColquallistContext colquallist() {
			return GetRuleContext<ColquallistContext>(0);
		}
		public CreatedomainstmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_createdomainstmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterCreatedomainstmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitCreatedomainstmt(this);
		}
	}

	[RuleVersion(0)]
	public CreatedomainstmtContext createdomainstmt() {
		CreatedomainstmtContext _localctx = new CreatedomainstmtContext(Context, State);
		EnterRule(_localctx, 830, RULE_createdomainstmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7307;
			Match(CREATE);
			State = 7308;
			Match(DOMAIN_P);
			State = 7309;
			any_name();
			State = 7310;
			opt_as();
			State = 7311;
			typename();
			State = 7312;
			colquallist();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AlterdomainstmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALTER() { return GetToken(PostgreSQLParser.ALTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOMAIN_P() { return GetToken(PostgreSQLParser.DOMAIN_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Any_nameContext any_name() {
			return GetRuleContext<Any_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Alter_column_defaultContext alter_column_default() {
			return GetRuleContext<Alter_column_defaultContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DROP() { return GetToken(PostgreSQLParser.DROP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT() { return GetToken(PostgreSQLParser.NOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NULL_P() { return GetToken(PostgreSQLParser.NULL_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SET() { return GetToken(PostgreSQLParser.SET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ADD_P() { return GetToken(PostgreSQLParser.ADD_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TableconstraintContext tableconstraint() {
			return GetRuleContext<TableconstraintContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONSTRAINT() { return GetToken(PostgreSQLParser.CONSTRAINT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Opt_drop_behaviorContext opt_drop_behavior() {
			return GetRuleContext<Opt_drop_behaviorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VALIDATE() { return GetToken(PostgreSQLParser.VALIDATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF_P() { return GetToken(PostgreSQLParser.IF_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXISTS() { return GetToken(PostgreSQLParser.EXISTS, 0); }
		public AlterdomainstmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alterdomainstmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterAlterdomainstmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitAlterdomainstmt(this);
		}
	}

	[RuleVersion(0)]
	public AlterdomainstmtContext alterdomainstmt() {
		AlterdomainstmtContext _localctx = new AlterdomainstmtContext(Context, State);
		EnterRule(_localctx, 832, RULE_alterdomainstmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7314;
			Match(ALTER);
			State = 7315;
			Match(DOMAIN_P);
			State = 7316;
			any_name();
			State = 7338;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,355,Context) ) {
			case 1:
				{
				State = 7317;
				alter_column_default();
				}
				break;
			case 2:
				{
				State = 7318;
				Match(DROP);
				State = 7319;
				Match(NOT);
				State = 7320;
				Match(NULL_P);
				}
				break;
			case 3:
				{
				State = 7321;
				Match(SET);
				State = 7322;
				Match(NOT);
				State = 7323;
				Match(NULL_P);
				}
				break;
			case 4:
				{
				State = 7324;
				Match(ADD_P);
				State = 7325;
				tableconstraint();
				}
				break;
			case 5:
				{
				State = 7326;
				Match(DROP);
				State = 7327;
				Match(CONSTRAINT);
				State = 7330;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,354,Context) ) {
				case 1:
					{
					State = 7328;
					Match(IF_P);
					State = 7329;
					Match(EXISTS);
					}
					break;
				}
				State = 7332;
				name();
				State = 7333;
				opt_drop_behavior();
				}
				break;
			case 6:
				{
				State = 7335;
				Match(VALIDATE);
				State = 7336;
				Match(CONSTRAINT);
				State = 7337;
				name();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Opt_asContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS() { return GetToken(PostgreSQLParser.AS, 0); }
		public Opt_asContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_opt_as; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterOpt_as(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitOpt_as(this);
		}
	}

	[RuleVersion(0)]
	public Opt_asContext opt_as() {
		Opt_asContext _localctx = new Opt_asContext(Context, State);
		EnterRule(_localctx, 834, RULE_opt_as);
		try {
			State = 7342;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case AS:
				EnterOuterAlt(_localctx, 1);
				{
				State = 7340;
				Match(AS);
				}
				break;
			case AND:
			case ARRAY:
			case COLLATE:
			case COLUMN:
			case CONSTRAINT:
			case DEFAULT:
			case DO:
			case FETCH:
			case TABLE:
			case AUTHORIZATION:
			case BINARY:
			case COLLATION:
			case CONCURRENTLY:
			case CROSS:
			case CURRENT_SCHEMA:
			case FREEZE:
			case FULL:
			case ILIKE:
			case INNER_P:
			case IS:
			case ISNULL:
			case JOIN:
			case LEFT:
			case LIKE:
			case NATURAL:
			case NOTNULL:
			case OUTER_P:
			case OVER:
			case OVERLAPS:
			case RIGHT:
			case SIMILAR:
			case VERBOSE:
			case ABORT_P:
			case ABSOLUTE_P:
			case ACCESS:
			case ACTION:
			case ADD_P:
			case ADMIN:
			case AFTER:
			case AGGREGATE:
			case ALSO:
			case ALTER:
			case ALWAYS:
			case ASSERTION:
			case ASSIGNMENT:
			case AT:
			case ATTRIBUTE:
			case BACKWARD:
			case BEFORE:
			case BEGIN_P:
			case BY:
			case CACHE:
			case CALLED:
			case CASCADE:
			case CASCADED:
			case CATALOG:
			case CHAIN:
			case CHARACTERISTICS:
			case CHECKPOINT:
			case CLASS:
			case CLOSE:
			case CLUSTER:
			case COMMENT:
			case COMMENTS:
			case COMMIT:
			case COMMITTED:
			case CONFIGURATION:
			case CONNECTION:
			case CONSTRAINTS:
			case CONTENT_P:
			case CONTINUE_P:
			case CONVERSION_P:
			case COPY:
			case COST:
			case CSV:
			case CURSOR:
			case CYCLE:
			case DATA_P:
			case DATABASE:
			case DAY_P:
			case DEALLOCATE:
			case DECLARE:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE_P:
			case DELIMITER:
			case DELIMITERS:
			case DICTIONARY:
			case DISABLE_P:
			case DISCARD:
			case DOCUMENT_P:
			case DOMAIN_P:
			case DOUBLE_P:
			case DROP:
			case EACH:
			case ENABLE_P:
			case ENCODING:
			case ENCRYPTED:
			case ENUM_P:
			case ESCAPE:
			case EVENT:
			case EXCLUDE:
			case EXCLUDING:
			case EXCLUSIVE:
			case EXECUTE:
			case EXPLAIN:
			case EXTENSION:
			case EXTERNAL:
			case FAMILY:
			case FIRST_P:
			case FOLLOWING:
			case FORCE:
			case FORWARD:
			case FUNCTION:
			case FUNCTIONS:
			case GLOBAL:
			case GRANTED:
			case HANDLER:
			case HEADER_P:
			case HOLD:
			case HOUR_P:
			case IDENTITY_P:
			case IF_P:
			case IMMEDIATE:
			case IMMUTABLE:
			case IMPLICIT_P:
			case INCLUDING:
			case INCREMENT:
			case INDEX:
			case INDEXES:
			case INHERIT:
			case INHERITS:
			case INLINE_P:
			case INSENSITIVE:
			case INSERT:
			case INSTEAD:
			case INVOKER:
			case ISOLATION:
			case KEY:
			case LABEL:
			case LANGUAGE:
			case LARGE_P:
			case LAST_P:
			case LEAKPROOF:
			case LEVEL:
			case LISTEN:
			case LOAD:
			case LOCAL:
			case LOCATION:
			case LOCK_P:
			case MAPPING:
			case MATCH:
			case MATERIALIZED:
			case MAXVALUE:
			case MINUTE_P:
			case MINVALUE:
			case MODE:
			case MONTH_P:
			case MOVE:
			case NAME_P:
			case NAMES:
			case NEXT:
			case NO:
			case NOTHING:
			case NOTIFY:
			case NOWAIT:
			case NULLS_P:
			case OBJECT_P:
			case OF:
			case OFF:
			case OIDS:
			case OPERATOR:
			case OPTION:
			case OPTIONS:
			case OWNED:
			case OWNER:
			case PARSER:
			case PARTIAL:
			case PARTITION:
			case PASSING:
			case PASSWORD:
			case PLANS:
			case PRECEDING:
			case PREPARE:
			case PREPARED:
			case PRESERVE:
			case PRIOR:
			case PRIVILEGES:
			case PROCEDURAL:
			case PROCEDURE:
			case PROGRAM:
			case QUOTE:
			case RANGE:
			case READ:
			case REASSIGN:
			case RECHECK:
			case RECURSIVE:
			case REF:
			case REFRESH:
			case REINDEX:
			case RELATIVE_P:
			case RELEASE:
			case RENAME:
			case REPEATABLE:
			case REPLACE:
			case REPLICA:
			case RESET:
			case RESTART:
			case RESTRICT:
			case RETURNS:
			case REVOKE:
			case ROLE:
			case ROLLBACK:
			case ROWS:
			case RULE:
			case SAVEPOINT:
			case SCHEMA:
			case SCROLL:
			case SEARCH:
			case SECOND_P:
			case SECURITY:
			case SEQUENCE:
			case SEQUENCES:
			case SERIALIZABLE:
			case SERVER:
			case SESSION:
			case SET:
			case SHARE:
			case SHOW:
			case SIMPLE:
			case SNAPSHOT:
			case STABLE:
			case STANDALONE_P:
			case START:
			case STATEMENT:
			case STATISTICS:
			case STDIN:
			case STDOUT:
			case STORAGE:
			case STRICT_P:
			case STRIP_P:
			case SYSID:
			case SYSTEM_P:
			case TABLES:
			case TABLESPACE:
			case TEMP:
			case TEMPLATE:
			case TEMPORARY:
			case TEXT_P:
			case TRANSACTION:
			case TRIGGER:
			case TRUNCATE:
			case TRUSTED:
			case TYPE_P:
			case TYPES_P:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNENCRYPTED:
			case UNKNOWN:
			case UNLISTEN:
			case UNLOGGED:
			case UNTIL:
			case UPDATE:
			case VACUUM:
			case VALID:
			case VALIDATE:
			case VALIDATOR:
			case VARYING:
			case VERSION_P:
			case VIEW:
			case VOLATILE:
			case WHITESPACE_P:
			case WITHOUT:
			case WORK:
			case WRAPPER:
			case WRITE:
			case XML_P:
			case YEAR_P:
			case YES_P:
			case ZONE:
			case BETWEEN:
			case BIGINT:
			case BIT:
			case BOOLEAN_P:
			case CHAR_P:
			case CHARACTER:
			case COALESCE:
			case DEC:
			case DECIMAL_P:
			case EXISTS:
			case EXTRACT:
			case FLOAT_P:
			case GREATEST:
			case INOUT:
			case INT_P:
			case INTEGER:
			case INTERVAL:
			case LEAST:
			case NATIONAL:
			case NCHAR:
			case NONE:
			case NULLIF:
			case NUMERIC:
			case OVERLAY:
			case POSITION:
			case PRECISION:
			case REAL:
			case ROW:
			case SETOF:
			case SMALLINT:
			case SUBSTRING:
			case TIME:
			case TIMESTAMP:
			case TREAT:
			case TRIM:
			case VALUES:
			case VARCHAR:
			case XMLATTRIBUTES:
			case XMLCOMMENT:
			case XMLAGG:
			case XML_IS_WELL_FORMED:
			case XML_IS_WELL_FORMED_DOCUMENT:
			case XML_IS_WELL_FORMED_CONTENT:
			case XPATH:
			case XPATH_EXISTS:
			case XMLCONCAT:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLPARSE:
			case XMLPI:
			case XMLROOT:
			case XMLSERIALIZE:
			case CALL:
			case CURRENT_P:
			case ATTACH:
			case DETACH:
			case EXPRESSION:
			case GENERATED:
			case LOGGED:
			case STORED:
			case INCLUDE:
			case ROUTINE:
			case TRANSFORM:
			case IMPORT_P:
			case POLICY:
			case METHOD:
			case REFERENCING:
			case NEW:
			case OLD:
			case VALUE_P:
			case SUBSCRIPTION:
			case PUBLICATION:
			case OUT_P:
			case ROUTINES:
			case SCHEMAS:
			case PROCEDURES:
			case INPUT_P:
			case SUPPORT:
			case PARALLEL:
			case SQL_P:
			case DEPENDS:
			case OVERRIDING:
			case CONFLICT:
			case SKIP_P:
			case LOCKED:
			case TIES:
			case ROLLUP:
			case CUBE:
			case GROUPING:
			case SETS:
			case TABLESAMPLE:
			case ORDINALITY:
			case XMLTABLE:
			case COLUMNS:
			case XMLNAMESPACES:
			case ROWTYPE:
			case NORMALIZED:
			case WITHIN:
			case FILTER:
			case GROUPS:
			case OTHERS:
			case NFC:
			case NFD:
			case NFKC:
			case NFKD:
			case UESCAPE:
			case VIEWS:
			case NORMALIZE:
			case DUMP:
			case PRINT_STRICT_PARAMS:
			case VARIABLE_CONFLICT:
			case ERROR:
			case USE_VARIABLE:
			case USE_COLUMN:
			case ALIAS:
			case CONSTANT:
			case PERFORM:
			case GET:
			case DIAGNOSTICS:
			case STACKED:
			case ELSIF:
			case REVERSE:
			case SLICE:
			case EXIT:
			case RETURN:
			case QUERY:
			case RAISE:
			case SQLSTATE:
			case DEBUG:
			case LOG:
			case INFO:
			case NOTICE:
			case WARNING:
			case EXCEPTION:
			case ASSERT:
			case OPEN:
			case ABS:
			case CBRT:
			case CEIL:
			case CEILING:
			case DEGREES:
			case DIV:
			case EXP:
			case FACTORIAL:
			case FLOOR:
			case GCD:
			case LCM:
			case LN:
			case LOG10:
			case MIN_SCALE:
			case MOD:
			case PI:
			case POWER:
			case RADIANS:
			case ROUND:
			case SCALE:
			case SIGN:
			case SQRT:
			case TRIM_SCALE:
			case TRUNC:
			case WIDTH_BUCKET:
			case RANDOM:
			case SETSEED:
			case ACOS:
			case ACOSD:
			case ASIN:
			case ASIND:
			case ATAN:
			case ATAND:
			case ATAN2:
			case ATAN2D:
			case COS:
			case COSD:
			case COT:
			case COTD:
			case SIN:
			case SIND:
			case TAN:
			case TAND:
			case SINH:
			case COSH:
			case TANH:
			case ASINH:
			case ACOSH:
			case ATANH:
			case BIT_LENGTH:
			case CHAR_LENGTH:
			case CHARACTER_LENGTH:
			case LOWER:
			case OCTET_LENGTH:
			case UPPER:
			case ASCII:
			case BTRIM:
			case CHR:
			case CONCAT:
			case CONCAT_WS:
			case FORMAT:
			case INITCAP:
			case LENGTH:
			case LPAD:
			case LTRIM:
			case MD5:
			case PARSE_IDENT:
			case PG_CLIENT_ENCODING:
			case QUOTE_IDENT:
			case QUOTE_LITERAL:
			case QUOTE_NULLABLE:
			case REGEXP_COUNT:
			case REGEXP_INSTR:
			case REGEXP_LIKE:
			case REGEXP_MATCH:
			case REGEXP_MATCHES:
			case REGEXP_REPLACE:
			case REGEXP_SPLIT_TO_ARRAY:
			case REGEXP_SPLIT_TO_TABLE:
			case REGEXP_SUBSTR:
			case REPEAT:
			case RPAD:
			case RTRIM:
			case SPLIT_PART:
			case STARTS_WITH:
			case STRING_TO_ARRAY:
			case STRING_TO_TABLE:
			case STRPOS:
			case SUBSTR:
			case TO_ASCII:
			case TO_HEX:
			case TRANSLATE:
			case UNISTR:
			case AGE:
			case CLOCK_TIMESTAMP:
			case DATE_BIN:
			case DATE_PART:
			case DATE_TRUNC:
			case ISFINITE:
			case JUSTIFY_DAYS:
			case JUSTIFY_HOURS:
			case JUSTIFY_INTERVAL:
			case MAKE_DATE:
			case MAKE_INTERVAL:
			case MAKE_TIME:
			case MAKE_TIMESTAMP:
			case MAKE_TIMESTAMPTZ:
			case NOW:
			case STATEMENT_TIMESTAMP:
			case TIMEOFDAY:
			case TRANSACTION_TIMESTAMP:
			case TO_TIMESTAMP:
			case TO_CHAR:
			case TO_DATE:
			case TO_NUMBER:
			case Identifier:
			case QuotedIdentifier:
			case UnicodeQuotedIdentifier:
			case StringConstant:
			case UnicodeEscapeStringConstant:
			case BeginDollarStringConstant:
			case PLSQLVARIABLENAME:
			case PLSQLIDENTIFIER:
			case EscapeStringConstant:
				EnterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AltertsdictionarystmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALTER() { return GetToken(PostgreSQLParser.ALTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TEXT_P() { return GetToken(PostgreSQLParser.TEXT_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEARCH() { return GetToken(PostgreSQLParser.SEARCH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DICTIONARY() { return GetToken(PostgreSQLParser.DICTIONARY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Any_nameContext any_name() {
			return GetRuleContext<Any_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DefinitionContext definition() {
			return GetRuleContext<DefinitionContext>(0);
		}
		public AltertsdictionarystmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_altertsdictionarystmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterAltertsdictionarystmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitAltertsdictionarystmt(this);
		}
	}

	[RuleVersion(0)]
	public AltertsdictionarystmtContext altertsdictionarystmt() {
		AltertsdictionarystmtContext _localctx = new AltertsdictionarystmtContext(Context, State);
		EnterRule(_localctx, 836, RULE_altertsdictionarystmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7344;
			Match(ALTER);
			State = 7345;
			Match(TEXT_P);
			State = 7346;
			Match(SEARCH);
			State = 7347;
			Match(DICTIONARY);
			State = 7348;
			any_name();
			State = 7349;
			definition();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AltertsconfigurationstmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] ALTER() { return GetTokens(PostgreSQLParser.ALTER); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALTER(int i) {
			return GetToken(PostgreSQLParser.ALTER, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TEXT_P() { return GetToken(PostgreSQLParser.TEXT_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEARCH() { return GetToken(PostgreSQLParser.SEARCH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONFIGURATION() { return GetToken(PostgreSQLParser.CONFIGURATION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Any_nameContext[] any_name() {
			return GetRuleContexts<Any_nameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Any_nameContext any_name(int i) {
			return GetRuleContext<Any_nameContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ADD_P() { return GetToken(PostgreSQLParser.ADD_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MAPPING() { return GetToken(PostgreSQLParser.MAPPING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOR() { return GetToken(PostgreSQLParser.FOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Name_listContext name_list() {
			return GetRuleContext<Name_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Any_withContext any_with() {
			return GetRuleContext<Any_withContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Any_name_listContext any_name_list() {
			return GetRuleContext<Any_name_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REPLACE() { return GetToken(PostgreSQLParser.REPLACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DROP() { return GetToken(PostgreSQLParser.DROP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF_P() { return GetToken(PostgreSQLParser.IF_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXISTS() { return GetToken(PostgreSQLParser.EXISTS, 0); }
		public AltertsconfigurationstmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_altertsconfigurationstmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterAltertsconfigurationstmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitAltertsconfigurationstmt(this);
		}
	}

	[RuleVersion(0)]
	public AltertsconfigurationstmtContext altertsconfigurationstmt() {
		AltertsconfigurationstmtContext _localctx = new AltertsconfigurationstmtContext(Context, State);
		EnterRule(_localctx, 838, RULE_altertsconfigurationstmt);
		try {
			State = 7423;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,357,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 7351;
				Match(ALTER);
				State = 7352;
				Match(TEXT_P);
				State = 7353;
				Match(SEARCH);
				State = 7354;
				Match(CONFIGURATION);
				State = 7355;
				any_name();
				State = 7356;
				Match(ADD_P);
				State = 7357;
				Match(MAPPING);
				State = 7358;
				Match(FOR);
				State = 7359;
				name_list();
				State = 7360;
				any_with();
				State = 7361;
				any_name_list();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 7363;
				Match(ALTER);
				State = 7364;
				Match(TEXT_P);
				State = 7365;
				Match(SEARCH);
				State = 7366;
				Match(CONFIGURATION);
				State = 7367;
				any_name();
				State = 7368;
				Match(ALTER);
				State = 7369;
				Match(MAPPING);
				State = 7370;
				Match(FOR);
				State = 7371;
				name_list();
				State = 7372;
				any_with();
				State = 7373;
				any_name_list();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 7375;
				Match(ALTER);
				State = 7376;
				Match(TEXT_P);
				State = 7377;
				Match(SEARCH);
				State = 7378;
				Match(CONFIGURATION);
				State = 7379;
				any_name();
				State = 7380;
				Match(ALTER);
				State = 7381;
				Match(MAPPING);
				State = 7382;
				Match(REPLACE);
				State = 7383;
				any_name();
				State = 7384;
				any_with();
				State = 7385;
				any_name();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 7387;
				Match(ALTER);
				State = 7388;
				Match(TEXT_P);
				State = 7389;
				Match(SEARCH);
				State = 7390;
				Match(CONFIGURATION);
				State = 7391;
				any_name();
				State = 7392;
				Match(ALTER);
				State = 7393;
				Match(MAPPING);
				State = 7394;
				Match(FOR);
				State = 7395;
				name_list();
				State = 7396;
				Match(REPLACE);
				State = 7397;
				any_name();
				State = 7398;
				any_with();
				State = 7399;
				any_name();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 7401;
				Match(ALTER);
				State = 7402;
				Match(TEXT_P);
				State = 7403;
				Match(SEARCH);
				State = 7404;
				Match(CONFIGURATION);
				State = 7405;
				any_name();
				State = 7406;
				Match(DROP);
				State = 7407;
				Match(MAPPING);
				State = 7408;
				Match(FOR);
				State = 7409;
				name_list();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 7411;
				Match(ALTER);
				State = 7412;
				Match(TEXT_P);
				State = 7413;
				Match(SEARCH);
				State = 7414;
				Match(CONFIGURATION);
				State = 7415;
				any_name();
				State = 7416;
				Match(DROP);
				State = 7417;
				Match(MAPPING);
				State = 7418;
				Match(IF_P);
				State = 7419;
				Match(EXISTS);
				State = 7420;
				Match(FOR);
				State = 7421;
				name_list();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Any_withContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WITH() { return GetToken(PostgreSQLParser.WITH, 0); }
		public Any_withContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_any_with; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterAny_with(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitAny_with(this);
		}
	}

	[RuleVersion(0)]
	public Any_withContext any_with() {
		Any_withContext _localctx = new Any_withContext(Context, State);
		EnterRule(_localctx, 840, RULE_any_with);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7425;
			Match(WITH);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CreateconversionstmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CREATE() { return GetToken(PostgreSQLParser.CREATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Opt_defaultContext opt_default() {
			return GetRuleContext<Opt_defaultContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONVERSION_P() { return GetToken(PostgreSQLParser.CONVERSION_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Any_nameContext[] any_name() {
			return GetRuleContexts<Any_nameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Any_nameContext any_name(int i) {
			return GetRuleContext<Any_nameContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOR() { return GetToken(PostgreSQLParser.FOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SconstContext[] sconst() {
			return GetRuleContexts<SconstContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SconstContext sconst(int i) {
			return GetRuleContext<SconstContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TO() { return GetToken(PostgreSQLParser.TO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FROM() { return GetToken(PostgreSQLParser.FROM, 0); }
		public CreateconversionstmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_createconversionstmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterCreateconversionstmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitCreateconversionstmt(this);
		}
	}

	[RuleVersion(0)]
	public CreateconversionstmtContext createconversionstmt() {
		CreateconversionstmtContext _localctx = new CreateconversionstmtContext(Context, State);
		EnterRule(_localctx, 842, RULE_createconversionstmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7427;
			Match(CREATE);
			State = 7428;
			opt_default();
			State = 7429;
			Match(CONVERSION_P);
			State = 7430;
			any_name();
			State = 7431;
			Match(FOR);
			State = 7432;
			sconst();
			State = 7433;
			Match(TO);
			State = 7434;
			sconst();
			State = 7435;
			Match(FROM);
			State = 7436;
			any_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClusterstmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLUSTER() { return GetToken(PostgreSQLParser.CLUSTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Opt_verboseContext opt_verbose() {
			return GetRuleContext<Opt_verboseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Qualified_nameContext qualified_name() {
			return GetRuleContext<Qualified_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Cluster_index_specificationContext cluster_index_specification() {
			return GetRuleContext<Cluster_index_specificationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ON() { return GetToken(PostgreSQLParser.ON, 0); }
		public ClusterstmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_clusterstmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterClusterstmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitClusterstmt(this);
		}
	}

	[RuleVersion(0)]
	public ClusterstmtContext clusterstmt() {
		ClusterstmtContext _localctx = new ClusterstmtContext(Context, State);
		EnterRule(_localctx, 844, RULE_clusterstmt);
		try {
			State = 7451;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,358,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 7438;
				Match(CLUSTER);
				State = 7439;
				opt_verbose();
				State = 7440;
				qualified_name();
				State = 7441;
				cluster_index_specification();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 7443;
				Match(CLUSTER);
				State = 7444;
				opt_verbose();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 7445;
				Match(CLUSTER);
				State = 7446;
				opt_verbose();
				State = 7447;
				name();
				State = 7448;
				Match(ON);
				State = 7449;
				qualified_name();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Cluster_index_specificationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode USING() { return GetToken(PostgreSQLParser.USING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		public Cluster_index_specificationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_cluster_index_specification; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterCluster_index_specification(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitCluster_index_specification(this);
		}
	}

	[RuleVersion(0)]
	public Cluster_index_specificationContext cluster_index_specification() {
		Cluster_index_specificationContext _localctx = new Cluster_index_specificationContext(Context, State);
		EnterRule(_localctx, 846, RULE_cluster_index_specification);
		try {
			State = 7456;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case USING:
				EnterOuterAlt(_localctx, 1);
				{
				State = 7453;
				Match(USING);
				State = 7454;
				name();
				}
				break;
			case Eof:
			case OPEN_PAREN:
			case SEMI:
			case ANALYSE:
			case ANALYZE:
			case CREATE:
			case DO:
			case FETCH:
			case GRANT:
			case INTO:
			case SELECT:
			case TABLE:
			case WITH:
			case ABORT_P:
			case ALTER:
			case BEGIN_P:
			case CHECKPOINT:
			case CLOSE:
			case CLUSTER:
			case COMMENT:
			case COMMIT:
			case COPY:
			case DEALLOCATE:
			case DECLARE:
			case DELETE_P:
			case DISCARD:
			case DROP:
			case EXECUTE:
			case EXPLAIN:
			case INSERT:
			case LISTEN:
			case LOAD:
			case LOCK_P:
			case MERGE:
			case MOVE:
			case NOTIFY:
			case PREPARE:
			case REASSIGN:
			case REFRESH:
			case REINDEX:
			case RELEASE:
			case RESET:
			case REVOKE:
			case ROLLBACK:
			case SAVEPOINT:
			case SECURITY:
			case SET:
			case SHOW:
			case START:
			case TRUNCATE:
			case UNLISTEN:
			case UPDATE:
			case VACUUM:
			case VALUES:
			case CALL:
			case IMPORT_P:
			case END_P:
			case MetaCommand:
				EnterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VacuumstmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VACUUM() { return GetToken(PostgreSQLParser.VACUUM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Opt_fullContext opt_full() {
			return GetRuleContext<Opt_fullContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Opt_freezeContext opt_freeze() {
			return GetRuleContext<Opt_freezeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Opt_verboseContext opt_verbose() {
			return GetRuleContext<Opt_verboseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Opt_analyzeContext opt_analyze() {
			return GetRuleContext<Opt_analyzeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Opt_vacuum_relation_listContext opt_vacuum_relation_list() {
			return GetRuleContext<Opt_vacuum_relation_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAREN() { return GetToken(PostgreSQLParser.OPEN_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Vac_analyze_option_listContext vac_analyze_option_list() {
			return GetRuleContext<Vac_analyze_option_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAREN() { return GetToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public VacuumstmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_vacuumstmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterVacuumstmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitVacuumstmt(this);
		}
	}

	[RuleVersion(0)]
	public VacuumstmtContext vacuumstmt() {
		VacuumstmtContext _localctx = new VacuumstmtContext(Context, State);
		EnterRule(_localctx, 848, RULE_vacuumstmt);
		try {
			State = 7471;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,360,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 7458;
				Match(VACUUM);
				State = 7459;
				opt_full();
				State = 7460;
				opt_freeze();
				State = 7461;
				opt_verbose();
				State = 7462;
				opt_analyze();
				State = 7463;
				opt_vacuum_relation_list();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 7465;
				Match(VACUUM);
				State = 7466;
				Match(OPEN_PAREN);
				State = 7467;
				vac_analyze_option_list();
				State = 7468;
				Match(CLOSE_PAREN);
				State = 7469;
				opt_vacuum_relation_list();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AnalyzestmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Analyze_keywordContext analyze_keyword() {
			return GetRuleContext<Analyze_keywordContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Opt_verboseContext opt_verbose() {
			return GetRuleContext<Opt_verboseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Opt_vacuum_relation_listContext opt_vacuum_relation_list() {
			return GetRuleContext<Opt_vacuum_relation_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAREN() { return GetToken(PostgreSQLParser.OPEN_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Vac_analyze_option_listContext vac_analyze_option_list() {
			return GetRuleContext<Vac_analyze_option_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAREN() { return GetToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public AnalyzestmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_analyzestmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterAnalyzestmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitAnalyzestmt(this);
		}
	}

	[RuleVersion(0)]
	public AnalyzestmtContext analyzestmt() {
		AnalyzestmtContext _localctx = new AnalyzestmtContext(Context, State);
		EnterRule(_localctx, 850, RULE_analyzestmt);
		try {
			State = 7483;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,361,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 7473;
				analyze_keyword();
				State = 7474;
				opt_verbose();
				State = 7475;
				opt_vacuum_relation_list();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 7477;
				analyze_keyword();
				State = 7478;
				Match(OPEN_PAREN);
				State = 7479;
				vac_analyze_option_list();
				State = 7480;
				Match(CLOSE_PAREN);
				State = 7481;
				opt_vacuum_relation_list();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Vac_analyze_option_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Vac_analyze_option_elemContext[] vac_analyze_option_elem() {
			return GetRuleContexts<Vac_analyze_option_elemContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Vac_analyze_option_elemContext vac_analyze_option_elem(int i) {
			return GetRuleContext<Vac_analyze_option_elemContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(PostgreSQLParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(PostgreSQLParser.COMMA, i);
		}
		public Vac_analyze_option_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_vac_analyze_option_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterVac_analyze_option_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitVac_analyze_option_list(this);
		}
	}

	[RuleVersion(0)]
	public Vac_analyze_option_listContext vac_analyze_option_list() {
		Vac_analyze_option_listContext _localctx = new Vac_analyze_option_listContext(Context, State);
		EnterRule(_localctx, 852, RULE_vac_analyze_option_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7485;
			vac_analyze_option_elem();
			State = 7490;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 7486;
				Match(COMMA);
				State = 7487;
				vac_analyze_option_elem();
				}
				}
				State = 7492;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Analyze_keywordContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ANALYZE() { return GetToken(PostgreSQLParser.ANALYZE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ANALYSE() { return GetToken(PostgreSQLParser.ANALYSE, 0); }
		public Analyze_keywordContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_analyze_keyword; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterAnalyze_keyword(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitAnalyze_keyword(this);
		}
	}

	[RuleVersion(0)]
	public Analyze_keywordContext analyze_keyword() {
		Analyze_keywordContext _localctx = new Analyze_keywordContext(Context, State);
		EnterRule(_localctx, 854, RULE_analyze_keyword);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7493;
			_la = TokenStream.LA(1);
			if ( !(_la==ANALYSE || _la==ANALYZE) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Vac_analyze_option_elemContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Vac_analyze_option_nameContext vac_analyze_option_name() {
			return GetRuleContext<Vac_analyze_option_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Vac_analyze_option_argContext vac_analyze_option_arg() {
			return GetRuleContext<Vac_analyze_option_argContext>(0);
		}
		public Vac_analyze_option_elemContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_vac_analyze_option_elem; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterVac_analyze_option_elem(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitVac_analyze_option_elem(this);
		}
	}

	[RuleVersion(0)]
	public Vac_analyze_option_elemContext vac_analyze_option_elem() {
		Vac_analyze_option_elemContext _localctx = new Vac_analyze_option_elemContext(Context, State);
		EnterRule(_localctx, 856, RULE_vac_analyze_option_elem);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7495;
			vac_analyze_option_name();
			State = 7496;
			vac_analyze_option_arg();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Vac_analyze_option_nameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NonreservedwordContext nonreservedword() {
			return GetRuleContext<NonreservedwordContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Analyze_keywordContext analyze_keyword() {
			return GetRuleContext<Analyze_keywordContext>(0);
		}
		public Vac_analyze_option_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_vac_analyze_option_name; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterVac_analyze_option_name(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitVac_analyze_option_name(this);
		}
	}

	[RuleVersion(0)]
	public Vac_analyze_option_nameContext vac_analyze_option_name() {
		Vac_analyze_option_nameContext _localctx = new Vac_analyze_option_nameContext(Context, State);
		EnterRule(_localctx, 858, RULE_vac_analyze_option_name);
		try {
			State = 7500;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case AND:
			case ARRAY:
			case COLLATE:
			case COLUMN:
			case CONSTRAINT:
			case DEFAULT:
			case DO:
			case FETCH:
			case TABLE:
			case AUTHORIZATION:
			case BINARY:
			case COLLATION:
			case CONCURRENTLY:
			case CROSS:
			case CURRENT_SCHEMA:
			case FREEZE:
			case FULL:
			case ILIKE:
			case INNER_P:
			case IS:
			case ISNULL:
			case JOIN:
			case LIKE:
			case NATURAL:
			case NOTNULL:
			case OUTER_P:
			case OVER:
			case OVERLAPS:
			case SIMILAR:
			case VERBOSE:
			case ABORT_P:
			case ABSOLUTE_P:
			case ACCESS:
			case ACTION:
			case ADD_P:
			case ADMIN:
			case AFTER:
			case AGGREGATE:
			case ALSO:
			case ALTER:
			case ALWAYS:
			case ASSERTION:
			case ASSIGNMENT:
			case AT:
			case ATTRIBUTE:
			case BACKWARD:
			case BEFORE:
			case BEGIN_P:
			case BY:
			case CACHE:
			case CALLED:
			case CASCADE:
			case CASCADED:
			case CATALOG:
			case CHAIN:
			case CHARACTERISTICS:
			case CHECKPOINT:
			case CLASS:
			case CLOSE:
			case CLUSTER:
			case COMMENT:
			case COMMENTS:
			case COMMIT:
			case COMMITTED:
			case CONFIGURATION:
			case CONNECTION:
			case CONSTRAINTS:
			case CONTENT_P:
			case CONTINUE_P:
			case CONVERSION_P:
			case COPY:
			case COST:
			case CSV:
			case CURSOR:
			case CYCLE:
			case DATA_P:
			case DATABASE:
			case DAY_P:
			case DEALLOCATE:
			case DECLARE:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE_P:
			case DELIMITER:
			case DELIMITERS:
			case DICTIONARY:
			case DISABLE_P:
			case DISCARD:
			case DOCUMENT_P:
			case DOMAIN_P:
			case DOUBLE_P:
			case DROP:
			case EACH:
			case ENABLE_P:
			case ENCODING:
			case ENCRYPTED:
			case ENUM_P:
			case ESCAPE:
			case EVENT:
			case EXCLUDE:
			case EXCLUDING:
			case EXCLUSIVE:
			case EXECUTE:
			case EXPLAIN:
			case EXTENSION:
			case EXTERNAL:
			case FAMILY:
			case FIRST_P:
			case FOLLOWING:
			case FORCE:
			case FORWARD:
			case FUNCTION:
			case FUNCTIONS:
			case GLOBAL:
			case GRANTED:
			case HANDLER:
			case HEADER_P:
			case HOLD:
			case HOUR_P:
			case IDENTITY_P:
			case IF_P:
			case IMMEDIATE:
			case IMMUTABLE:
			case IMPLICIT_P:
			case INCLUDING:
			case INCREMENT:
			case INDEX:
			case INDEXES:
			case INHERIT:
			case INHERITS:
			case INLINE_P:
			case INSENSITIVE:
			case INSERT:
			case INSTEAD:
			case INVOKER:
			case ISOLATION:
			case KEY:
			case LABEL:
			case LANGUAGE:
			case LARGE_P:
			case LAST_P:
			case LEAKPROOF:
			case LEVEL:
			case LISTEN:
			case LOAD:
			case LOCAL:
			case LOCATION:
			case LOCK_P:
			case MAPPING:
			case MATCH:
			case MATERIALIZED:
			case MAXVALUE:
			case MINUTE_P:
			case MINVALUE:
			case MODE:
			case MONTH_P:
			case MOVE:
			case NAME_P:
			case NAMES:
			case NEXT:
			case NO:
			case NOTHING:
			case NOTIFY:
			case NOWAIT:
			case NULLS_P:
			case OBJECT_P:
			case OF:
			case OFF:
			case OIDS:
			case OPERATOR:
			case OPTION:
			case OPTIONS:
			case OWNED:
			case OWNER:
			case PARSER:
			case PARTIAL:
			case PARTITION:
			case PASSING:
			case PASSWORD:
			case PLANS:
			case PRECEDING:
			case PREPARE:
			case PREPARED:
			case PRESERVE:
			case PRIOR:
			case PRIVILEGES:
			case PROCEDURAL:
			case PROCEDURE:
			case PROGRAM:
			case QUOTE:
			case RANGE:
			case READ:
			case REASSIGN:
			case RECHECK:
			case RECURSIVE:
			case REF:
			case REFRESH:
			case REINDEX:
			case RELATIVE_P:
			case RELEASE:
			case RENAME:
			case REPEATABLE:
			case REPLACE:
			case REPLICA:
			case RESET:
			case RESTART:
			case RESTRICT:
			case RETURNS:
			case REVOKE:
			case ROLE:
			case ROLLBACK:
			case ROWS:
			case RULE:
			case SAVEPOINT:
			case SCHEMA:
			case SCROLL:
			case SEARCH:
			case SECOND_P:
			case SECURITY:
			case SEQUENCE:
			case SEQUENCES:
			case SERIALIZABLE:
			case SERVER:
			case SESSION:
			case SET:
			case SHARE:
			case SHOW:
			case SIMPLE:
			case SNAPSHOT:
			case STABLE:
			case STANDALONE_P:
			case START:
			case STATEMENT:
			case STATISTICS:
			case STDIN:
			case STDOUT:
			case STORAGE:
			case STRICT_P:
			case STRIP_P:
			case SYSID:
			case SYSTEM_P:
			case TABLES:
			case TABLESPACE:
			case TEMP:
			case TEMPLATE:
			case TEMPORARY:
			case TEXT_P:
			case TRANSACTION:
			case TRIGGER:
			case TRUNCATE:
			case TRUSTED:
			case TYPE_P:
			case TYPES_P:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNENCRYPTED:
			case UNKNOWN:
			case UNLISTEN:
			case UNLOGGED:
			case UNTIL:
			case UPDATE:
			case VACUUM:
			case VALID:
			case VALIDATE:
			case VALIDATOR:
			case VARYING:
			case VERSION_P:
			case VIEW:
			case VOLATILE:
			case WHITESPACE_P:
			case WITHOUT:
			case WORK:
			case WRAPPER:
			case WRITE:
			case XML_P:
			case YEAR_P:
			case YES_P:
			case ZONE:
			case BETWEEN:
			case BIGINT:
			case BIT:
			case BOOLEAN_P:
			case CHAR_P:
			case CHARACTER:
			case COALESCE:
			case DEC:
			case DECIMAL_P:
			case EXISTS:
			case EXTRACT:
			case FLOAT_P:
			case GREATEST:
			case INOUT:
			case INT_P:
			case INTEGER:
			case INTERVAL:
			case LEAST:
			case NATIONAL:
			case NCHAR:
			case NONE:
			case NULLIF:
			case NUMERIC:
			case OVERLAY:
			case POSITION:
			case PRECISION:
			case REAL:
			case ROW:
			case SETOF:
			case SMALLINT:
			case SUBSTRING:
			case TIME:
			case TIMESTAMP:
			case TREAT:
			case TRIM:
			case VALUES:
			case VARCHAR:
			case XMLATTRIBUTES:
			case XMLCOMMENT:
			case XMLAGG:
			case XML_IS_WELL_FORMED:
			case XML_IS_WELL_FORMED_DOCUMENT:
			case XML_IS_WELL_FORMED_CONTENT:
			case XPATH:
			case XPATH_EXISTS:
			case XMLCONCAT:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLPARSE:
			case XMLPI:
			case XMLROOT:
			case XMLSERIALIZE:
			case CALL:
			case CURRENT_P:
			case ATTACH:
			case DETACH:
			case EXPRESSION:
			case GENERATED:
			case LOGGED:
			case STORED:
			case INCLUDE:
			case ROUTINE:
			case TRANSFORM:
			case IMPORT_P:
			case POLICY:
			case METHOD:
			case REFERENCING:
			case NEW:
			case OLD:
			case VALUE_P:
			case SUBSCRIPTION:
			case PUBLICATION:
			case OUT_P:
			case ROUTINES:
			case SCHEMAS:
			case PROCEDURES:
			case INPUT_P:
			case SUPPORT:
			case PARALLEL:
			case SQL_P:
			case DEPENDS:
			case OVERRIDING:
			case CONFLICT:
			case SKIP_P:
			case LOCKED:
			case TIES:
			case ROLLUP:
			case CUBE:
			case GROUPING:
			case SETS:
			case TABLESAMPLE:
			case ORDINALITY:
			case XMLTABLE:
			case COLUMNS:
			case XMLNAMESPACES:
			case ROWTYPE:
			case NORMALIZED:
			case WITHIN:
			case FILTER:
			case GROUPS:
			case OTHERS:
			case NFC:
			case NFD:
			case NFKC:
			case NFKD:
			case UESCAPE:
			case VIEWS:
			case NORMALIZE:
			case DUMP:
			case PRINT_STRICT_PARAMS:
			case VARIABLE_CONFLICT:
			case ERROR:
			case USE_VARIABLE:
			case USE_COLUMN:
			case ALIAS:
			case CONSTANT:
			case PERFORM:
			case GET:
			case DIAGNOSTICS:
			case STACKED:
			case ELSIF:
			case REVERSE:
			case SLICE:
			case EXIT:
			case RETURN:
			case QUERY:
			case RAISE:
			case SQLSTATE:
			case DEBUG:
			case LOG:
			case INFO:
			case NOTICE:
			case WARNING:
			case EXCEPTION:
			case ASSERT:
			case OPEN:
			case ABS:
			case CBRT:
			case CEIL:
			case CEILING:
			case DEGREES:
			case DIV:
			case EXP:
			case FACTORIAL:
			case FLOOR:
			case GCD:
			case LCM:
			case LN:
			case LOG10:
			case MIN_SCALE:
			case MOD:
			case PI:
			case POWER:
			case RADIANS:
			case ROUND:
			case SCALE:
			case SIGN:
			case SQRT:
			case TRIM_SCALE:
			case TRUNC:
			case WIDTH_BUCKET:
			case RANDOM:
			case SETSEED:
			case ACOS:
			case ACOSD:
			case ASIN:
			case ASIND:
			case ATAN:
			case ATAND:
			case ATAN2:
			case ATAN2D:
			case COS:
			case COSD:
			case COT:
			case COTD:
			case SIN:
			case SIND:
			case TAN:
			case TAND:
			case SINH:
			case COSH:
			case TANH:
			case ASINH:
			case ACOSH:
			case ATANH:
			case BIT_LENGTH:
			case CHAR_LENGTH:
			case CHARACTER_LENGTH:
			case LOWER:
			case OCTET_LENGTH:
			case UPPER:
			case ASCII:
			case BTRIM:
			case CHR:
			case CONCAT:
			case CONCAT_WS:
			case FORMAT:
			case INITCAP:
			case LENGTH:
			case LPAD:
			case LTRIM:
			case MD5:
			case PARSE_IDENT:
			case PG_CLIENT_ENCODING:
			case QUOTE_IDENT:
			case QUOTE_LITERAL:
			case QUOTE_NULLABLE:
			case REGEXP_COUNT:
			case REGEXP_INSTR:
			case REGEXP_LIKE:
			case REGEXP_MATCH:
			case REGEXP_MATCHES:
			case REGEXP_REPLACE:
			case REGEXP_SPLIT_TO_ARRAY:
			case REGEXP_SPLIT_TO_TABLE:
			case REGEXP_SUBSTR:
			case REPEAT:
			case RPAD:
			case RTRIM:
			case SPLIT_PART:
			case STARTS_WITH:
			case STRING_TO_ARRAY:
			case STRING_TO_TABLE:
			case STRPOS:
			case SUBSTR:
			case TO_ASCII:
			case TO_HEX:
			case TRANSLATE:
			case UNISTR:
			case AGE:
			case CLOCK_TIMESTAMP:
			case DATE_BIN:
			case DATE_PART:
			case DATE_TRUNC:
			case ISFINITE:
			case JUSTIFY_DAYS:
			case JUSTIFY_HOURS:
			case JUSTIFY_INTERVAL:
			case MAKE_DATE:
			case MAKE_INTERVAL:
			case MAKE_TIME:
			case MAKE_TIMESTAMP:
			case MAKE_TIMESTAMPTZ:
			case NOW:
			case STATEMENT_TIMESTAMP:
			case TIMEOFDAY:
			case TRANSACTION_TIMESTAMP:
			case TO_TIMESTAMP:
			case TO_CHAR:
			case TO_DATE:
			case TO_NUMBER:
			case Identifier:
			case QuotedIdentifier:
			case UnicodeQuotedIdentifier:
			case PLSQLVARIABLENAME:
			case PLSQLIDENTIFIER:
				EnterOuterAlt(_localctx, 1);
				{
				State = 7498;
				nonreservedword();
				}
				break;
			case ANALYSE:
			case ANALYZE:
				EnterOuterAlt(_localctx, 2);
				{
				State = 7499;
				analyze_keyword();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Vac_analyze_option_argContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Opt_boolean_or_stringContext opt_boolean_or_string() {
			return GetRuleContext<Opt_boolean_or_stringContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NumericonlyContext numericonly() {
			return GetRuleContext<NumericonlyContext>(0);
		}
		public Vac_analyze_option_argContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_vac_analyze_option_arg; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterVac_analyze_option_arg(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitVac_analyze_option_arg(this);
		}
	}

	[RuleVersion(0)]
	public Vac_analyze_option_argContext vac_analyze_option_arg() {
		Vac_analyze_option_argContext _localctx = new Vac_analyze_option_argContext(Context, State);
		EnterRule(_localctx, 860, RULE_vac_analyze_option_arg);
		try {
			State = 7505;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case AND:
			case ARRAY:
			case COLLATE:
			case COLUMN:
			case CONSTRAINT:
			case DEFAULT:
			case DO:
			case FALSE_P:
			case FETCH:
			case ON:
			case TABLE:
			case TRUE_P:
			case AUTHORIZATION:
			case BINARY:
			case COLLATION:
			case CONCURRENTLY:
			case CROSS:
			case CURRENT_SCHEMA:
			case FREEZE:
			case FULL:
			case ILIKE:
			case INNER_P:
			case IS:
			case ISNULL:
			case JOIN:
			case LIKE:
			case NATURAL:
			case NOTNULL:
			case OUTER_P:
			case OVER:
			case OVERLAPS:
			case SIMILAR:
			case VERBOSE:
			case ABORT_P:
			case ABSOLUTE_P:
			case ACCESS:
			case ACTION:
			case ADD_P:
			case ADMIN:
			case AFTER:
			case AGGREGATE:
			case ALSO:
			case ALTER:
			case ALWAYS:
			case ASSERTION:
			case ASSIGNMENT:
			case AT:
			case ATTRIBUTE:
			case BACKWARD:
			case BEFORE:
			case BEGIN_P:
			case BY:
			case CACHE:
			case CALLED:
			case CASCADE:
			case CASCADED:
			case CATALOG:
			case CHAIN:
			case CHARACTERISTICS:
			case CHECKPOINT:
			case CLASS:
			case CLOSE:
			case CLUSTER:
			case COMMENT:
			case COMMENTS:
			case COMMIT:
			case COMMITTED:
			case CONFIGURATION:
			case CONNECTION:
			case CONSTRAINTS:
			case CONTENT_P:
			case CONTINUE_P:
			case CONVERSION_P:
			case COPY:
			case COST:
			case CSV:
			case CURSOR:
			case CYCLE:
			case DATA_P:
			case DATABASE:
			case DAY_P:
			case DEALLOCATE:
			case DECLARE:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE_P:
			case DELIMITER:
			case DELIMITERS:
			case DICTIONARY:
			case DISABLE_P:
			case DISCARD:
			case DOCUMENT_P:
			case DOMAIN_P:
			case DOUBLE_P:
			case DROP:
			case EACH:
			case ENABLE_P:
			case ENCODING:
			case ENCRYPTED:
			case ENUM_P:
			case ESCAPE:
			case EVENT:
			case EXCLUDE:
			case EXCLUDING:
			case EXCLUSIVE:
			case EXECUTE:
			case EXPLAIN:
			case EXTENSION:
			case EXTERNAL:
			case FAMILY:
			case FIRST_P:
			case FOLLOWING:
			case FORCE:
			case FORWARD:
			case FUNCTION:
			case FUNCTIONS:
			case GLOBAL:
			case GRANTED:
			case HANDLER:
			case HEADER_P:
			case HOLD:
			case HOUR_P:
			case IDENTITY_P:
			case IF_P:
			case IMMEDIATE:
			case IMMUTABLE:
			case IMPLICIT_P:
			case INCLUDING:
			case INCREMENT:
			case INDEX:
			case INDEXES:
			case INHERIT:
			case INHERITS:
			case INLINE_P:
			case INSENSITIVE:
			case INSERT:
			case INSTEAD:
			case INVOKER:
			case ISOLATION:
			case KEY:
			case LABEL:
			case LANGUAGE:
			case LARGE_P:
			case LAST_P:
			case LEAKPROOF:
			case LEVEL:
			case LISTEN:
			case LOAD:
			case LOCAL:
			case LOCATION:
			case LOCK_P:
			case MAPPING:
			case MATCH:
			case MATERIALIZED:
			case MAXVALUE:
			case MINUTE_P:
			case MINVALUE:
			case MODE:
			case MONTH_P:
			case MOVE:
			case NAME_P:
			case NAMES:
			case NEXT:
			case NO:
			case NOTHING:
			case NOTIFY:
			case NOWAIT:
			case NULLS_P:
			case OBJECT_P:
			case OF:
			case OFF:
			case OIDS:
			case OPERATOR:
			case OPTION:
			case OPTIONS:
			case OWNED:
			case OWNER:
			case PARSER:
			case PARTIAL:
			case PARTITION:
			case PASSING:
			case PASSWORD:
			case PLANS:
			case PRECEDING:
			case PREPARE:
			case PREPARED:
			case PRESERVE:
			case PRIOR:
			case PRIVILEGES:
			case PROCEDURAL:
			case PROCEDURE:
			case PROGRAM:
			case QUOTE:
			case RANGE:
			case READ:
			case REASSIGN:
			case RECHECK:
			case RECURSIVE:
			case REF:
			case REFRESH:
			case REINDEX:
			case RELATIVE_P:
			case RELEASE:
			case RENAME:
			case REPEATABLE:
			case REPLACE:
			case REPLICA:
			case RESET:
			case RESTART:
			case RESTRICT:
			case RETURNS:
			case REVOKE:
			case ROLE:
			case ROLLBACK:
			case ROWS:
			case RULE:
			case SAVEPOINT:
			case SCHEMA:
			case SCROLL:
			case SEARCH:
			case SECOND_P:
			case SECURITY:
			case SEQUENCE:
			case SEQUENCES:
			case SERIALIZABLE:
			case SERVER:
			case SESSION:
			case SET:
			case SHARE:
			case SHOW:
			case SIMPLE:
			case SNAPSHOT:
			case STABLE:
			case STANDALONE_P:
			case START:
			case STATEMENT:
			case STATISTICS:
			case STDIN:
			case STDOUT:
			case STORAGE:
			case STRICT_P:
			case STRIP_P:
			case SYSID:
			case SYSTEM_P:
			case TABLES:
			case TABLESPACE:
			case TEMP:
			case TEMPLATE:
			case TEMPORARY:
			case TEXT_P:
			case TRANSACTION:
			case TRIGGER:
			case TRUNCATE:
			case TRUSTED:
			case TYPE_P:
			case TYPES_P:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNENCRYPTED:
			case UNKNOWN:
			case UNLISTEN:
			case UNLOGGED:
			case UNTIL:
			case UPDATE:
			case VACUUM:
			case VALID:
			case VALIDATE:
			case VALIDATOR:
			case VARYING:
			case VERSION_P:
			case VIEW:
			case VOLATILE:
			case WHITESPACE_P:
			case WITHOUT:
			case WORK:
			case WRAPPER:
			case WRITE:
			case XML_P:
			case YEAR_P:
			case YES_P:
			case ZONE:
			case BETWEEN:
			case BIGINT:
			case BIT:
			case BOOLEAN_P:
			case CHAR_P:
			case CHARACTER:
			case COALESCE:
			case DEC:
			case DECIMAL_P:
			case EXISTS:
			case EXTRACT:
			case FLOAT_P:
			case GREATEST:
			case INOUT:
			case INT_P:
			case INTEGER:
			case INTERVAL:
			case LEAST:
			case NATIONAL:
			case NCHAR:
			case NONE:
			case NULLIF:
			case NUMERIC:
			case OVERLAY:
			case POSITION:
			case PRECISION:
			case REAL:
			case ROW:
			case SETOF:
			case SMALLINT:
			case SUBSTRING:
			case TIME:
			case TIMESTAMP:
			case TREAT:
			case TRIM:
			case VALUES:
			case VARCHAR:
			case XMLATTRIBUTES:
			case XMLCOMMENT:
			case XMLAGG:
			case XML_IS_WELL_FORMED:
			case XML_IS_WELL_FORMED_DOCUMENT:
			case XML_IS_WELL_FORMED_CONTENT:
			case XPATH:
			case XPATH_EXISTS:
			case XMLCONCAT:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLPARSE:
			case XMLPI:
			case XMLROOT:
			case XMLSERIALIZE:
			case CALL:
			case CURRENT_P:
			case ATTACH:
			case DETACH:
			case EXPRESSION:
			case GENERATED:
			case LOGGED:
			case STORED:
			case INCLUDE:
			case ROUTINE:
			case TRANSFORM:
			case IMPORT_P:
			case POLICY:
			case METHOD:
			case REFERENCING:
			case NEW:
			case OLD:
			case VALUE_P:
			case SUBSCRIPTION:
			case PUBLICATION:
			case OUT_P:
			case ROUTINES:
			case SCHEMAS:
			case PROCEDURES:
			case INPUT_P:
			case SUPPORT:
			case PARALLEL:
			case SQL_P:
			case DEPENDS:
			case OVERRIDING:
			case CONFLICT:
			case SKIP_P:
			case LOCKED:
			case TIES:
			case ROLLUP:
			case CUBE:
			case GROUPING:
			case SETS:
			case TABLESAMPLE:
			case ORDINALITY:
			case XMLTABLE:
			case COLUMNS:
			case XMLNAMESPACES:
			case ROWTYPE:
			case NORMALIZED:
			case WITHIN:
			case FILTER:
			case GROUPS:
			case OTHERS:
			case NFC:
			case NFD:
			case NFKC:
			case NFKD:
			case UESCAPE:
			case VIEWS:
			case NORMALIZE:
			case DUMP:
			case PRINT_STRICT_PARAMS:
			case VARIABLE_CONFLICT:
			case ERROR:
			case USE_VARIABLE:
			case USE_COLUMN:
			case ALIAS:
			case CONSTANT:
			case PERFORM:
			case GET:
			case DIAGNOSTICS:
			case STACKED:
			case ELSIF:
			case REVERSE:
			case SLICE:
			case EXIT:
			case RETURN:
			case QUERY:
			case RAISE:
			case SQLSTATE:
			case DEBUG:
			case LOG:
			case INFO:
			case NOTICE:
			case WARNING:
			case EXCEPTION:
			case ASSERT:
			case OPEN:
			case ABS:
			case CBRT:
			case CEIL:
			case CEILING:
			case DEGREES:
			case DIV:
			case EXP:
			case FACTORIAL:
			case FLOOR:
			case GCD:
			case LCM:
			case LN:
			case LOG10:
			case MIN_SCALE:
			case MOD:
			case PI:
			case POWER:
			case RADIANS:
			case ROUND:
			case SCALE:
			case SIGN:
			case SQRT:
			case TRIM_SCALE:
			case TRUNC:
			case WIDTH_BUCKET:
			case RANDOM:
			case SETSEED:
			case ACOS:
			case ACOSD:
			case ASIN:
			case ASIND:
			case ATAN:
			case ATAND:
			case ATAN2:
			case ATAN2D:
			case COS:
			case COSD:
			case COT:
			case COTD:
			case SIN:
			case SIND:
			case TAN:
			case TAND:
			case SINH:
			case COSH:
			case TANH:
			case ASINH:
			case ACOSH:
			case ATANH:
			case BIT_LENGTH:
			case CHAR_LENGTH:
			case CHARACTER_LENGTH:
			case LOWER:
			case OCTET_LENGTH:
			case UPPER:
			case ASCII:
			case BTRIM:
			case CHR:
			case CONCAT:
			case CONCAT_WS:
			case FORMAT:
			case INITCAP:
			case LENGTH:
			case LPAD:
			case LTRIM:
			case MD5:
			case PARSE_IDENT:
			case PG_CLIENT_ENCODING:
			case QUOTE_IDENT:
			case QUOTE_LITERAL:
			case QUOTE_NULLABLE:
			case REGEXP_COUNT:
			case REGEXP_INSTR:
			case REGEXP_LIKE:
			case REGEXP_MATCH:
			case REGEXP_MATCHES:
			case REGEXP_REPLACE:
			case REGEXP_SPLIT_TO_ARRAY:
			case REGEXP_SPLIT_TO_TABLE:
			case REGEXP_SUBSTR:
			case REPEAT:
			case RPAD:
			case RTRIM:
			case SPLIT_PART:
			case STARTS_WITH:
			case STRING_TO_ARRAY:
			case STRING_TO_TABLE:
			case STRPOS:
			case SUBSTR:
			case TO_ASCII:
			case TO_HEX:
			case TRANSLATE:
			case UNISTR:
			case AGE:
			case CLOCK_TIMESTAMP:
			case DATE_BIN:
			case DATE_PART:
			case DATE_TRUNC:
			case ISFINITE:
			case JUSTIFY_DAYS:
			case JUSTIFY_HOURS:
			case JUSTIFY_INTERVAL:
			case MAKE_DATE:
			case MAKE_INTERVAL:
			case MAKE_TIME:
			case MAKE_TIMESTAMP:
			case MAKE_TIMESTAMPTZ:
			case NOW:
			case STATEMENT_TIMESTAMP:
			case TIMEOFDAY:
			case TRANSACTION_TIMESTAMP:
			case TO_TIMESTAMP:
			case TO_CHAR:
			case TO_DATE:
			case TO_NUMBER:
			case Identifier:
			case QuotedIdentifier:
			case UnicodeQuotedIdentifier:
			case StringConstant:
			case UnicodeEscapeStringConstant:
			case BeginDollarStringConstant:
			case PLSQLVARIABLENAME:
			case PLSQLIDENTIFIER:
			case EscapeStringConstant:
				EnterOuterAlt(_localctx, 1);
				{
				State = 7502;
				opt_boolean_or_string();
				}
				break;
			case PLUS:
			case MINUS:
			case Integral:
			case Numeric:
				EnterOuterAlt(_localctx, 2);
				{
				State = 7503;
				numericonly();
				}
				break;
			case CLOSE_PAREN:
			case COMMA:
				EnterOuterAlt(_localctx, 3);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Opt_analyzeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Analyze_keywordContext analyze_keyword() {
			return GetRuleContext<Analyze_keywordContext>(0);
		}
		public Opt_analyzeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_opt_analyze; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterOpt_analyze(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitOpt_analyze(this);
		}
	}

	[RuleVersion(0)]
	public Opt_analyzeContext opt_analyze() {
		Opt_analyzeContext _localctx = new Opt_analyzeContext(Context, State);
		EnterRule(_localctx, 862, RULE_opt_analyze);
		try {
			State = 7509;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,365,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 7507;
				analyze_keyword();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Opt_verboseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VERBOSE() { return GetToken(PostgreSQLParser.VERBOSE, 0); }
		public Opt_verboseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_opt_verbose; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterOpt_verbose(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitOpt_verbose(this);
		}
	}

	[RuleVersion(0)]
	public Opt_verboseContext opt_verbose() {
		Opt_verboseContext _localctx = new Opt_verboseContext(Context, State);
		EnterRule(_localctx, 864, RULE_opt_verbose);
		try {
			State = 7513;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case VERBOSE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 7511;
				Match(VERBOSE);
				}
				break;
			case Eof:
			case OPEN_PAREN:
			case SEMI:
			case ANALYSE:
			case ANALYZE:
			case AND:
			case ARRAY:
			case COLLATE:
			case COLUMN:
			case CONSTRAINT:
			case CREATE:
			case DEFAULT:
			case DO:
			case FETCH:
			case GRANT:
			case INTO:
			case SELECT:
			case TABLE:
			case WITH:
			case IS:
			case LEFT:
			case OUTER_P:
			case OVER:
			case RIGHT:
			case ABORT_P:
			case ABSOLUTE_P:
			case ACCESS:
			case ACTION:
			case ADD_P:
			case ADMIN:
			case AFTER:
			case AGGREGATE:
			case ALSO:
			case ALTER:
			case ALWAYS:
			case ASSERTION:
			case ASSIGNMENT:
			case AT:
			case ATTRIBUTE:
			case BACKWARD:
			case BEFORE:
			case BEGIN_P:
			case BY:
			case CACHE:
			case CALLED:
			case CASCADE:
			case CASCADED:
			case CATALOG:
			case CHAIN:
			case CHARACTERISTICS:
			case CHECKPOINT:
			case CLASS:
			case CLOSE:
			case CLUSTER:
			case COMMENT:
			case COMMENTS:
			case COMMIT:
			case COMMITTED:
			case CONFIGURATION:
			case CONNECTION:
			case CONSTRAINTS:
			case CONTENT_P:
			case CONTINUE_P:
			case CONVERSION_P:
			case COPY:
			case COST:
			case CSV:
			case CURSOR:
			case CYCLE:
			case DATA_P:
			case DATABASE:
			case DAY_P:
			case DEALLOCATE:
			case DECLARE:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE_P:
			case DELIMITER:
			case DELIMITERS:
			case DICTIONARY:
			case DISABLE_P:
			case DISCARD:
			case DOCUMENT_P:
			case DOMAIN_P:
			case DOUBLE_P:
			case DROP:
			case EACH:
			case ENABLE_P:
			case ENCODING:
			case ENCRYPTED:
			case ENUM_P:
			case ESCAPE:
			case EVENT:
			case EXCLUDE:
			case EXCLUDING:
			case EXCLUSIVE:
			case EXECUTE:
			case EXPLAIN:
			case EXTENSION:
			case EXTERNAL:
			case FAMILY:
			case FIRST_P:
			case FOLLOWING:
			case FORCE:
			case FORWARD:
			case FUNCTION:
			case FUNCTIONS:
			case GLOBAL:
			case GRANTED:
			case HANDLER:
			case HEADER_P:
			case HOLD:
			case HOUR_P:
			case IDENTITY_P:
			case IF_P:
			case IMMEDIATE:
			case IMMUTABLE:
			case IMPLICIT_P:
			case INCLUDING:
			case INCREMENT:
			case INDEX:
			case INDEXES:
			case INHERIT:
			case INHERITS:
			case INLINE_P:
			case INSENSITIVE:
			case INSERT:
			case INSTEAD:
			case INVOKER:
			case ISOLATION:
			case KEY:
			case LABEL:
			case LANGUAGE:
			case LARGE_P:
			case LAST_P:
			case LEAKPROOF:
			case LEVEL:
			case LISTEN:
			case LOAD:
			case LOCAL:
			case LOCATION:
			case LOCK_P:
			case MAPPING:
			case MATCH:
			case MATERIALIZED:
			case MAXVALUE:
			case MERGE:
			case MINUTE_P:
			case MINVALUE:
			case MODE:
			case MONTH_P:
			case MOVE:
			case NAME_P:
			case NAMES:
			case NEXT:
			case NO:
			case NOTHING:
			case NOTIFY:
			case NOWAIT:
			case NULLS_P:
			case OBJECT_P:
			case OF:
			case OFF:
			case OIDS:
			case OPERATOR:
			case OPTION:
			case OPTIONS:
			case OWNED:
			case OWNER:
			case PARSER:
			case PARTIAL:
			case PARTITION:
			case PASSING:
			case PASSWORD:
			case PLANS:
			case PRECEDING:
			case PREPARE:
			case PREPARED:
			case PRESERVE:
			case PRIOR:
			case PRIVILEGES:
			case PROCEDURAL:
			case PROCEDURE:
			case PROGRAM:
			case QUOTE:
			case RANGE:
			case READ:
			case REASSIGN:
			case RECHECK:
			case RECURSIVE:
			case REF:
			case REFRESH:
			case REINDEX:
			case RELATIVE_P:
			case RELEASE:
			case RENAME:
			case REPEATABLE:
			case REPLACE:
			case REPLICA:
			case RESET:
			case RESTART:
			case RESTRICT:
			case RETURNS:
			case REVOKE:
			case ROLE:
			case ROLLBACK:
			case ROWS:
			case RULE:
			case SAVEPOINT:
			case SCHEMA:
			case SCROLL:
			case SEARCH:
			case SECOND_P:
			case SECURITY:
			case SEQUENCE:
			case SEQUENCES:
			case SERIALIZABLE:
			case SERVER:
			case SESSION:
			case SET:
			case SHARE:
			case SHOW:
			case SIMPLE:
			case SNAPSHOT:
			case STABLE:
			case STANDALONE_P:
			case START:
			case STATEMENT:
			case STATISTICS:
			case STDIN:
			case STDOUT:
			case STORAGE:
			case STRICT_P:
			case STRIP_P:
			case SYSID:
			case SYSTEM_P:
			case TABLES:
			case TABLESPACE:
			case TEMP:
			case TEMPLATE:
			case TEMPORARY:
			case TEXT_P:
			case TRANSACTION:
			case TRIGGER:
			case TRUNCATE:
			case TRUSTED:
			case TYPE_P:
			case TYPES_P:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNENCRYPTED:
			case UNKNOWN:
			case UNLISTEN:
			case UNLOGGED:
			case UNTIL:
			case UPDATE:
			case VACUUM:
			case VALID:
			case VALIDATE:
			case VALIDATOR:
			case VARYING:
			case VERSION_P:
			case VIEW:
			case VOLATILE:
			case WHITESPACE_P:
			case WITHOUT:
			case WORK:
			case WRAPPER:
			case WRITE:
			case XML_P:
			case YEAR_P:
			case YES_P:
			case ZONE:
			case BETWEEN:
			case BIGINT:
			case BIT:
			case BOOLEAN_P:
			case CHAR_P:
			case CHARACTER:
			case COALESCE:
			case DEC:
			case DECIMAL_P:
			case EXISTS:
			case EXTRACT:
			case FLOAT_P:
			case GREATEST:
			case INOUT:
			case INT_P:
			case INTEGER:
			case INTERVAL:
			case LEAST:
			case NATIONAL:
			case NCHAR:
			case NONE:
			case NULLIF:
			case NUMERIC:
			case OVERLAY:
			case POSITION:
			case PRECISION:
			case REAL:
			case ROW:
			case SETOF:
			case SMALLINT:
			case SUBSTRING:
			case TIME:
			case TIMESTAMP:
			case TREAT:
			case TRIM:
			case VALUES:
			case VARCHAR:
			case XMLATTRIBUTES:
			case XMLCOMMENT:
			case XMLAGG:
			case XML_IS_WELL_FORMED:
			case XML_IS_WELL_FORMED_DOCUMENT:
			case XML_IS_WELL_FORMED_CONTENT:
			case XPATH:
			case XPATH_EXISTS:
			case XMLCONCAT:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLPARSE:
			case XMLPI:
			case XMLROOT:
			case XMLSERIALIZE:
			case CALL:
			case CURRENT_P:
			case ATTACH:
			case DETACH:
			case EXPRESSION:
			case GENERATED:
			case LOGGED:
			case STORED:
			case INCLUDE:
			case ROUTINE:
			case TRANSFORM:
			case IMPORT_P:
			case POLICY:
			case METHOD:
			case REFERENCING:
			case NEW:
			case OLD:
			case VALUE_P:
			case SUBSCRIPTION:
			case PUBLICATION:
			case OUT_P:
			case END_P:
			case ROUTINES:
			case SCHEMAS:
			case PROCEDURES:
			case INPUT_P:
			case SUPPORT:
			case PARALLEL:
			case SQL_P:
			case DEPENDS:
			case OVERRIDING:
			case CONFLICT:
			case SKIP_P:
			case LOCKED:
			case TIES:
			case ROLLUP:
			case CUBE:
			case GROUPING:
			case SETS:
			case ORDINALITY:
			case XMLTABLE:
			case COLUMNS:
			case XMLNAMESPACES:
			case ROWTYPE:
			case NORMALIZED:
			case WITHIN:
			case FILTER:
			case GROUPS:
			case OTHERS:
			case NFC:
			case NFD:
			case NFKC:
			case NFKD:
			case UESCAPE:
			case VIEWS:
			case NORMALIZE:
			case DUMP:
			case PRINT_STRICT_PARAMS:
			case VARIABLE_CONFLICT:
			case ERROR:
			case USE_VARIABLE:
			case USE_COLUMN:
			case ALIAS:
			case CONSTANT:
			case PERFORM:
			case GET:
			case DIAGNOSTICS:
			case STACKED:
			case ELSIF:
			case REVERSE:
			case SLICE:
			case EXIT:
			case RETURN:
			case QUERY:
			case RAISE:
			case SQLSTATE:
			case DEBUG:
			case LOG:
			case INFO:
			case NOTICE:
			case WARNING:
			case EXCEPTION:
			case ASSERT:
			case OPEN:
			case ABS:
			case CBRT:
			case CEIL:
			case CEILING:
			case DEGREES:
			case DIV:
			case EXP:
			case FACTORIAL:
			case FLOOR:
			case GCD:
			case LCM:
			case LN:
			case LOG10:
			case MIN_SCALE:
			case MOD:
			case PI:
			case POWER:
			case RADIANS:
			case ROUND:
			case SCALE:
			case SIGN:
			case SQRT:
			case TRIM_SCALE:
			case TRUNC:
			case WIDTH_BUCKET:
			case RANDOM:
			case SETSEED:
			case ACOS:
			case ACOSD:
			case ASIN:
			case ASIND:
			case ATAN:
			case ATAND:
			case ATAN2:
			case ATAN2D:
			case COS:
			case COSD:
			case COT:
			case COTD:
			case SIN:
			case SIND:
			case TAN:
			case TAND:
			case SINH:
			case COSH:
			case TANH:
			case ASINH:
			case ACOSH:
			case ATANH:
			case BIT_LENGTH:
			case CHAR_LENGTH:
			case CHARACTER_LENGTH:
			case LOWER:
			case OCTET_LENGTH:
			case UPPER:
			case ASCII:
			case BTRIM:
			case CHR:
			case CONCAT:
			case CONCAT_WS:
			case FORMAT:
			case INITCAP:
			case LENGTH:
			case LPAD:
			case LTRIM:
			case MD5:
			case PARSE_IDENT:
			case PG_CLIENT_ENCODING:
			case QUOTE_IDENT:
			case QUOTE_LITERAL:
			case QUOTE_NULLABLE:
			case REGEXP_COUNT:
			case REGEXP_INSTR:
			case REGEXP_LIKE:
			case REGEXP_MATCH:
			case REGEXP_MATCHES:
			case REGEXP_REPLACE:
			case REGEXP_SPLIT_TO_ARRAY:
			case REGEXP_SPLIT_TO_TABLE:
			case REGEXP_SUBSTR:
			case REPEAT:
			case RPAD:
			case RTRIM:
			case SPLIT_PART:
			case STARTS_WITH:
			case STRING_TO_ARRAY:
			case STRING_TO_TABLE:
			case STRPOS:
			case SUBSTR:
			case TO_ASCII:
			case TO_HEX:
			case TRANSLATE:
			case UNISTR:
			case AGE:
			case CLOCK_TIMESTAMP:
			case DATE_BIN:
			case DATE_PART:
			case DATE_TRUNC:
			case ISFINITE:
			case JUSTIFY_DAYS:
			case JUSTIFY_HOURS:
			case JUSTIFY_INTERVAL:
			case MAKE_DATE:
			case MAKE_INTERVAL:
			case MAKE_TIME:
			case MAKE_TIMESTAMP:
			case MAKE_TIMESTAMPTZ:
			case NOW:
			case STATEMENT_TIMESTAMP:
			case TIMEOFDAY:
			case TRANSACTION_TIMESTAMP:
			case TO_TIMESTAMP:
			case TO_CHAR:
			case TO_DATE:
			case TO_NUMBER:
			case Identifier:
			case QuotedIdentifier:
			case UnicodeQuotedIdentifier:
			case PLSQLVARIABLENAME:
			case PLSQLIDENTIFIER:
			case MetaCommand:
				EnterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Opt_fullContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FULL() { return GetToken(PostgreSQLParser.FULL, 0); }
		public Opt_fullContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_opt_full; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterOpt_full(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitOpt_full(this);
		}
	}

	[RuleVersion(0)]
	public Opt_fullContext opt_full() {
		Opt_fullContext _localctx = new Opt_fullContext(Context, State);
		EnterRule(_localctx, 866, RULE_opt_full);
		try {
			State = 7517;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case FULL:
				EnterOuterAlt(_localctx, 1);
				{
				State = 7515;
				Match(FULL);
				}
				break;
			case Eof:
			case OPEN_PAREN:
			case SEMI:
			case ANALYSE:
			case ANALYZE:
			case AND:
			case ARRAY:
			case COLLATE:
			case COLUMN:
			case CONSTRAINT:
			case CREATE:
			case DEFAULT:
			case DO:
			case FETCH:
			case GRANT:
			case INTO:
			case SELECT:
			case TABLE:
			case WITH:
			case FREEZE:
			case IS:
			case LEFT:
			case OUTER_P:
			case OVER:
			case RIGHT:
			case VERBOSE:
			case ABORT_P:
			case ABSOLUTE_P:
			case ACCESS:
			case ACTION:
			case ADD_P:
			case ADMIN:
			case AFTER:
			case AGGREGATE:
			case ALSO:
			case ALTER:
			case ALWAYS:
			case ASSERTION:
			case ASSIGNMENT:
			case AT:
			case ATTRIBUTE:
			case BACKWARD:
			case BEFORE:
			case BEGIN_P:
			case BY:
			case CACHE:
			case CALLED:
			case CASCADE:
			case CASCADED:
			case CATALOG:
			case CHAIN:
			case CHARACTERISTICS:
			case CHECKPOINT:
			case CLASS:
			case CLOSE:
			case CLUSTER:
			case COMMENT:
			case COMMENTS:
			case COMMIT:
			case COMMITTED:
			case CONFIGURATION:
			case CONNECTION:
			case CONSTRAINTS:
			case CONTENT_P:
			case CONTINUE_P:
			case CONVERSION_P:
			case COPY:
			case COST:
			case CSV:
			case CURSOR:
			case CYCLE:
			case DATA_P:
			case DATABASE:
			case DAY_P:
			case DEALLOCATE:
			case DECLARE:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE_P:
			case DELIMITER:
			case DELIMITERS:
			case DICTIONARY:
			case DISABLE_P:
			case DISCARD:
			case DOCUMENT_P:
			case DOMAIN_P:
			case DOUBLE_P:
			case DROP:
			case EACH:
			case ENABLE_P:
			case ENCODING:
			case ENCRYPTED:
			case ENUM_P:
			case ESCAPE:
			case EVENT:
			case EXCLUDE:
			case EXCLUDING:
			case EXCLUSIVE:
			case EXECUTE:
			case EXPLAIN:
			case EXTENSION:
			case EXTERNAL:
			case FAMILY:
			case FIRST_P:
			case FOLLOWING:
			case FORCE:
			case FORWARD:
			case FUNCTION:
			case FUNCTIONS:
			case GLOBAL:
			case GRANTED:
			case HANDLER:
			case HEADER_P:
			case HOLD:
			case HOUR_P:
			case IDENTITY_P:
			case IF_P:
			case IMMEDIATE:
			case IMMUTABLE:
			case IMPLICIT_P:
			case INCLUDING:
			case INCREMENT:
			case INDEX:
			case INDEXES:
			case INHERIT:
			case INHERITS:
			case INLINE_P:
			case INSENSITIVE:
			case INSERT:
			case INSTEAD:
			case INVOKER:
			case ISOLATION:
			case KEY:
			case LABEL:
			case LANGUAGE:
			case LARGE_P:
			case LAST_P:
			case LEAKPROOF:
			case LEVEL:
			case LISTEN:
			case LOAD:
			case LOCAL:
			case LOCATION:
			case LOCK_P:
			case MAPPING:
			case MATCH:
			case MATERIALIZED:
			case MAXVALUE:
			case MERGE:
			case MINUTE_P:
			case MINVALUE:
			case MODE:
			case MONTH_P:
			case MOVE:
			case NAME_P:
			case NAMES:
			case NEXT:
			case NO:
			case NOTHING:
			case NOTIFY:
			case NOWAIT:
			case NULLS_P:
			case OBJECT_P:
			case OF:
			case OFF:
			case OIDS:
			case OPERATOR:
			case OPTION:
			case OPTIONS:
			case OWNED:
			case OWNER:
			case PARSER:
			case PARTIAL:
			case PARTITION:
			case PASSING:
			case PASSWORD:
			case PLANS:
			case PRECEDING:
			case PREPARE:
			case PREPARED:
			case PRESERVE:
			case PRIOR:
			case PRIVILEGES:
			case PROCEDURAL:
			case PROCEDURE:
			case PROGRAM:
			case QUOTE:
			case RANGE:
			case READ:
			case REASSIGN:
			case RECHECK:
			case RECURSIVE:
			case REF:
			case REFRESH:
			case REINDEX:
			case RELATIVE_P:
			case RELEASE:
			case RENAME:
			case REPEATABLE:
			case REPLACE:
			case REPLICA:
			case RESET:
			case RESTART:
			case RESTRICT:
			case RETURNS:
			case REVOKE:
			case ROLE:
			case ROLLBACK:
			case ROWS:
			case RULE:
			case SAVEPOINT:
			case SCHEMA:
			case SCROLL:
			case SEARCH:
			case SECOND_P:
			case SECURITY:
			case SEQUENCE:
			case SEQUENCES:
			case SERIALIZABLE:
			case SERVER:
			case SESSION:
			case SET:
			case SHARE:
			case SHOW:
			case SIMPLE:
			case SNAPSHOT:
			case STABLE:
			case STANDALONE_P:
			case START:
			case STATEMENT:
			case STATISTICS:
			case STDIN:
			case STDOUT:
			case STORAGE:
			case STRICT_P:
			case STRIP_P:
			case SYSID:
			case SYSTEM_P:
			case TABLES:
			case TABLESPACE:
			case TEMP:
			case TEMPLATE:
			case TEMPORARY:
			case TEXT_P:
			case TRANSACTION:
			case TRIGGER:
			case TRUNCATE:
			case TRUSTED:
			case TYPE_P:
			case TYPES_P:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNENCRYPTED:
			case UNKNOWN:
			case UNLISTEN:
			case UNLOGGED:
			case UNTIL:
			case UPDATE:
			case VACUUM:
			case VALID:
			case VALIDATE:
			case VALIDATOR:
			case VARYING:
			case VERSION_P:
			case VIEW:
			case VOLATILE:
			case WHITESPACE_P:
			case WITHOUT:
			case WORK:
			case WRAPPER:
			case WRITE:
			case XML_P:
			case YEAR_P:
			case YES_P:
			case ZONE:
			case BETWEEN:
			case BIGINT:
			case BIT:
			case BOOLEAN_P:
			case CHAR_P:
			case CHARACTER:
			case COALESCE:
			case DEC:
			case DECIMAL_P:
			case EXISTS:
			case EXTRACT:
			case FLOAT_P:
			case GREATEST:
			case INOUT:
			case INT_P:
			case INTEGER:
			case INTERVAL:
			case LEAST:
			case NATIONAL:
			case NCHAR:
			case NONE:
			case NULLIF:
			case NUMERIC:
			case OVERLAY:
			case POSITION:
			case PRECISION:
			case REAL:
			case ROW:
			case SETOF:
			case SMALLINT:
			case SUBSTRING:
			case TIME:
			case TIMESTAMP:
			case TREAT:
			case TRIM:
			case VALUES:
			case VARCHAR:
			case XMLATTRIBUTES:
			case XMLCOMMENT:
			case XMLAGG:
			case XML_IS_WELL_FORMED:
			case XML_IS_WELL_FORMED_DOCUMENT:
			case XML_IS_WELL_FORMED_CONTENT:
			case XPATH:
			case XPATH_EXISTS:
			case XMLCONCAT:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLPARSE:
			case XMLPI:
			case XMLROOT:
			case XMLSERIALIZE:
			case CALL:
			case CURRENT_P:
			case ATTACH:
			case DETACH:
			case EXPRESSION:
			case GENERATED:
			case LOGGED:
			case STORED:
			case INCLUDE:
			case ROUTINE:
			case TRANSFORM:
			case IMPORT_P:
			case POLICY:
			case METHOD:
			case REFERENCING:
			case NEW:
			case OLD:
			case VALUE_P:
			case SUBSCRIPTION:
			case PUBLICATION:
			case OUT_P:
			case END_P:
			case ROUTINES:
			case SCHEMAS:
			case PROCEDURES:
			case INPUT_P:
			case SUPPORT:
			case PARALLEL:
			case SQL_P:
			case DEPENDS:
			case OVERRIDING:
			case CONFLICT:
			case SKIP_P:
			case LOCKED:
			case TIES:
			case ROLLUP:
			case CUBE:
			case GROUPING:
			case SETS:
			case ORDINALITY:
			case XMLTABLE:
			case COLUMNS:
			case XMLNAMESPACES:
			case ROWTYPE:
			case NORMALIZED:
			case WITHIN:
			case FILTER:
			case GROUPS:
			case OTHERS:
			case NFC:
			case NFD:
			case NFKC:
			case NFKD:
			case UESCAPE:
			case VIEWS:
			case NORMALIZE:
			case DUMP:
			case PRINT_STRICT_PARAMS:
			case VARIABLE_CONFLICT:
			case ERROR:
			case USE_VARIABLE:
			case USE_COLUMN:
			case ALIAS:
			case CONSTANT:
			case PERFORM:
			case GET:
			case DIAGNOSTICS:
			case STACKED:
			case ELSIF:
			case REVERSE:
			case SLICE:
			case EXIT:
			case RETURN:
			case QUERY:
			case RAISE:
			case SQLSTATE:
			case DEBUG:
			case LOG:
			case INFO:
			case NOTICE:
			case WARNING:
			case EXCEPTION:
			case ASSERT:
			case OPEN:
			case ABS:
			case CBRT:
			case CEIL:
			case CEILING:
			case DEGREES:
			case DIV:
			case EXP:
			case FACTORIAL:
			case FLOOR:
			case GCD:
			case LCM:
			case LN:
			case LOG10:
			case MIN_SCALE:
			case MOD:
			case PI:
			case POWER:
			case RADIANS:
			case ROUND:
			case SCALE:
			case SIGN:
			case SQRT:
			case TRIM_SCALE:
			case TRUNC:
			case WIDTH_BUCKET:
			case RANDOM:
			case SETSEED:
			case ACOS:
			case ACOSD:
			case ASIN:
			case ASIND:
			case ATAN:
			case ATAND:
			case ATAN2:
			case ATAN2D:
			case COS:
			case COSD:
			case COT:
			case COTD:
			case SIN:
			case SIND:
			case TAN:
			case TAND:
			case SINH:
			case COSH:
			case TANH:
			case ASINH:
			case ACOSH:
			case ATANH:
			case BIT_LENGTH:
			case CHAR_LENGTH:
			case CHARACTER_LENGTH:
			case LOWER:
			case OCTET_LENGTH:
			case UPPER:
			case ASCII:
			case BTRIM:
			case CHR:
			case CONCAT:
			case CONCAT_WS:
			case FORMAT:
			case INITCAP:
			case LENGTH:
			case LPAD:
			case LTRIM:
			case MD5:
			case PARSE_IDENT:
			case PG_CLIENT_ENCODING:
			case QUOTE_IDENT:
			case QUOTE_LITERAL:
			case QUOTE_NULLABLE:
			case REGEXP_COUNT:
			case REGEXP_INSTR:
			case REGEXP_LIKE:
			case REGEXP_MATCH:
			case REGEXP_MATCHES:
			case REGEXP_REPLACE:
			case REGEXP_SPLIT_TO_ARRAY:
			case REGEXP_SPLIT_TO_TABLE:
			case REGEXP_SUBSTR:
			case REPEAT:
			case RPAD:
			case RTRIM:
			case SPLIT_PART:
			case STARTS_WITH:
			case STRING_TO_ARRAY:
			case STRING_TO_TABLE:
			case STRPOS:
			case SUBSTR:
			case TO_ASCII:
			case TO_HEX:
			case TRANSLATE:
			case UNISTR:
			case AGE:
			case CLOCK_TIMESTAMP:
			case DATE_BIN:
			case DATE_PART:
			case DATE_TRUNC:
			case ISFINITE:
			case JUSTIFY_DAYS:
			case JUSTIFY_HOURS:
			case JUSTIFY_INTERVAL:
			case MAKE_DATE:
			case MAKE_INTERVAL:
			case MAKE_TIME:
			case MAKE_TIMESTAMP:
			case MAKE_TIMESTAMPTZ:
			case NOW:
			case STATEMENT_TIMESTAMP:
			case TIMEOFDAY:
			case TRANSACTION_TIMESTAMP:
			case TO_TIMESTAMP:
			case TO_CHAR:
			case TO_DATE:
			case TO_NUMBER:
			case Identifier:
			case QuotedIdentifier:
			case UnicodeQuotedIdentifier:
			case PLSQLVARIABLENAME:
			case PLSQLIDENTIFIER:
			case MetaCommand:
				EnterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Opt_freezeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FREEZE() { return GetToken(PostgreSQLParser.FREEZE, 0); }
		public Opt_freezeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_opt_freeze; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterOpt_freeze(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitOpt_freeze(this);
		}
	}

	[RuleVersion(0)]
	public Opt_freezeContext opt_freeze() {
		Opt_freezeContext _localctx = new Opt_freezeContext(Context, State);
		EnterRule(_localctx, 868, RULE_opt_freeze);
		try {
			State = 7521;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case FREEZE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 7519;
				Match(FREEZE);
				}
				break;
			case Eof:
			case OPEN_PAREN:
			case SEMI:
			case ANALYSE:
			case ANALYZE:
			case AND:
			case ARRAY:
			case COLLATE:
			case COLUMN:
			case CONSTRAINT:
			case CREATE:
			case DEFAULT:
			case DO:
			case FETCH:
			case GRANT:
			case INTO:
			case SELECT:
			case TABLE:
			case WITH:
			case IS:
			case LEFT:
			case OUTER_P:
			case OVER:
			case RIGHT:
			case VERBOSE:
			case ABORT_P:
			case ABSOLUTE_P:
			case ACCESS:
			case ACTION:
			case ADD_P:
			case ADMIN:
			case AFTER:
			case AGGREGATE:
			case ALSO:
			case ALTER:
			case ALWAYS:
			case ASSERTION:
			case ASSIGNMENT:
			case AT:
			case ATTRIBUTE:
			case BACKWARD:
			case BEFORE:
			case BEGIN_P:
			case BY:
			case CACHE:
			case CALLED:
			case CASCADE:
			case CASCADED:
			case CATALOG:
			case CHAIN:
			case CHARACTERISTICS:
			case CHECKPOINT:
			case CLASS:
			case CLOSE:
			case CLUSTER:
			case COMMENT:
			case COMMENTS:
			case COMMIT:
			case COMMITTED:
			case CONFIGURATION:
			case CONNECTION:
			case CONSTRAINTS:
			case CONTENT_P:
			case CONTINUE_P:
			case CONVERSION_P:
			case COPY:
			case COST:
			case CSV:
			case CURSOR:
			case CYCLE:
			case DATA_P:
			case DATABASE:
			case DAY_P:
			case DEALLOCATE:
			case DECLARE:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE_P:
			case DELIMITER:
			case DELIMITERS:
			case DICTIONARY:
			case DISABLE_P:
			case DISCARD:
			case DOCUMENT_P:
			case DOMAIN_P:
			case DOUBLE_P:
			case DROP:
			case EACH:
			case ENABLE_P:
			case ENCODING:
			case ENCRYPTED:
			case ENUM_P:
			case ESCAPE:
			case EVENT:
			case EXCLUDE:
			case EXCLUDING:
			case EXCLUSIVE:
			case EXECUTE:
			case EXPLAIN:
			case EXTENSION:
			case EXTERNAL:
			case FAMILY:
			case FIRST_P:
			case FOLLOWING:
			case FORCE:
			case FORWARD:
			case FUNCTION:
			case FUNCTIONS:
			case GLOBAL:
			case GRANTED:
			case HANDLER:
			case HEADER_P:
			case HOLD:
			case HOUR_P:
			case IDENTITY_P:
			case IF_P:
			case IMMEDIATE:
			case IMMUTABLE:
			case IMPLICIT_P:
			case INCLUDING:
			case INCREMENT:
			case INDEX:
			case INDEXES:
			case INHERIT:
			case INHERITS:
			case INLINE_P:
			case INSENSITIVE:
			case INSERT:
			case INSTEAD:
			case INVOKER:
			case ISOLATION:
			case KEY:
			case LABEL:
			case LANGUAGE:
			case LARGE_P:
			case LAST_P:
			case LEAKPROOF:
			case LEVEL:
			case LISTEN:
			case LOAD:
			case LOCAL:
			case LOCATION:
			case LOCK_P:
			case MAPPING:
			case MATCH:
			case MATERIALIZED:
			case MAXVALUE:
			case MERGE:
			case MINUTE_P:
			case MINVALUE:
			case MODE:
			case MONTH_P:
			case MOVE:
			case NAME_P:
			case NAMES:
			case NEXT:
			case NO:
			case NOTHING:
			case NOTIFY:
			case NOWAIT:
			case NULLS_P:
			case OBJECT_P:
			case OF:
			case OFF:
			case OIDS:
			case OPERATOR:
			case OPTION:
			case OPTIONS:
			case OWNED:
			case OWNER:
			case PARSER:
			case PARTIAL:
			case PARTITION:
			case PASSING:
			case PASSWORD:
			case PLANS:
			case PRECEDING:
			case PREPARE:
			case PREPARED:
			case PRESERVE:
			case PRIOR:
			case PRIVILEGES:
			case PROCEDURAL:
			case PROCEDURE:
			case PROGRAM:
			case QUOTE:
			case RANGE:
			case READ:
			case REASSIGN:
			case RECHECK:
			case RECURSIVE:
			case REF:
			case REFRESH:
			case REINDEX:
			case RELATIVE_P:
			case RELEASE:
			case RENAME:
			case REPEATABLE:
			case REPLACE:
			case REPLICA:
			case RESET:
			case RESTART:
			case RESTRICT:
			case RETURNS:
			case REVOKE:
			case ROLE:
			case ROLLBACK:
			case ROWS:
			case RULE:
			case SAVEPOINT:
			case SCHEMA:
			case SCROLL:
			case SEARCH:
			case SECOND_P:
			case SECURITY:
			case SEQUENCE:
			case SEQUENCES:
			case SERIALIZABLE:
			case SERVER:
			case SESSION:
			case SET:
			case SHARE:
			case SHOW:
			case SIMPLE:
			case SNAPSHOT:
			case STABLE:
			case STANDALONE_P:
			case START:
			case STATEMENT:
			case STATISTICS:
			case STDIN:
			case STDOUT:
			case STORAGE:
			case STRICT_P:
			case STRIP_P:
			case SYSID:
			case SYSTEM_P:
			case TABLES:
			case TABLESPACE:
			case TEMP:
			case TEMPLATE:
			case TEMPORARY:
			case TEXT_P:
			case TRANSACTION:
			case TRIGGER:
			case TRUNCATE:
			case TRUSTED:
			case TYPE_P:
			case TYPES_P:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNENCRYPTED:
			case UNKNOWN:
			case UNLISTEN:
			case UNLOGGED:
			case UNTIL:
			case UPDATE:
			case VACUUM:
			case VALID:
			case VALIDATE:
			case VALIDATOR:
			case VARYING:
			case VERSION_P:
			case VIEW:
			case VOLATILE:
			case WHITESPACE_P:
			case WITHOUT:
			case WORK:
			case WRAPPER:
			case WRITE:
			case XML_P:
			case YEAR_P:
			case YES_P:
			case ZONE:
			case BETWEEN:
			case BIGINT:
			case BIT:
			case BOOLEAN_P:
			case CHAR_P:
			case CHARACTER:
			case COALESCE:
			case DEC:
			case DECIMAL_P:
			case EXISTS:
			case EXTRACT:
			case FLOAT_P:
			case GREATEST:
			case INOUT:
			case INT_P:
			case INTEGER:
			case INTERVAL:
			case LEAST:
			case NATIONAL:
			case NCHAR:
			case NONE:
			case NULLIF:
			case NUMERIC:
			case OVERLAY:
			case POSITION:
			case PRECISION:
			case REAL:
			case ROW:
			case SETOF:
			case SMALLINT:
			case SUBSTRING:
			case TIME:
			case TIMESTAMP:
			case TREAT:
			case TRIM:
			case VALUES:
			case VARCHAR:
			case XMLATTRIBUTES:
			case XMLCOMMENT:
			case XMLAGG:
			case XML_IS_WELL_FORMED:
			case XML_IS_WELL_FORMED_DOCUMENT:
			case XML_IS_WELL_FORMED_CONTENT:
			case XPATH:
			case XPATH_EXISTS:
			case XMLCONCAT:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLPARSE:
			case XMLPI:
			case XMLROOT:
			case XMLSERIALIZE:
			case CALL:
			case CURRENT_P:
			case ATTACH:
			case DETACH:
			case EXPRESSION:
			case GENERATED:
			case LOGGED:
			case STORED:
			case INCLUDE:
			case ROUTINE:
			case TRANSFORM:
			case IMPORT_P:
			case POLICY:
			case METHOD:
			case REFERENCING:
			case NEW:
			case OLD:
			case VALUE_P:
			case SUBSCRIPTION:
			case PUBLICATION:
			case OUT_P:
			case END_P:
			case ROUTINES:
			case SCHEMAS:
			case PROCEDURES:
			case INPUT_P:
			case SUPPORT:
			case PARALLEL:
			case SQL_P:
			case DEPENDS:
			case OVERRIDING:
			case CONFLICT:
			case SKIP_P:
			case LOCKED:
			case TIES:
			case ROLLUP:
			case CUBE:
			case GROUPING:
			case SETS:
			case ORDINALITY:
			case XMLTABLE:
			case COLUMNS:
			case XMLNAMESPACES:
			case ROWTYPE:
			case NORMALIZED:
			case WITHIN:
			case FILTER:
			case GROUPS:
			case OTHERS:
			case NFC:
			case NFD:
			case NFKC:
			case NFKD:
			case UESCAPE:
			case VIEWS:
			case NORMALIZE:
			case DUMP:
			case PRINT_STRICT_PARAMS:
			case VARIABLE_CONFLICT:
			case ERROR:
			case USE_VARIABLE:
			case USE_COLUMN:
			case ALIAS:
			case CONSTANT:
			case PERFORM:
			case GET:
			case DIAGNOSTICS:
			case STACKED:
			case ELSIF:
			case REVERSE:
			case SLICE:
			case EXIT:
			case RETURN:
			case QUERY:
			case RAISE:
			case SQLSTATE:
			case DEBUG:
			case LOG:
			case INFO:
			case NOTICE:
			case WARNING:
			case EXCEPTION:
			case ASSERT:
			case OPEN:
			case ABS:
			case CBRT:
			case CEIL:
			case CEILING:
			case DEGREES:
			case DIV:
			case EXP:
			case FACTORIAL:
			case FLOOR:
			case GCD:
			case LCM:
			case LN:
			case LOG10:
			case MIN_SCALE:
			case MOD:
			case PI:
			case POWER:
			case RADIANS:
			case ROUND:
			case SCALE:
			case SIGN:
			case SQRT:
			case TRIM_SCALE:
			case TRUNC:
			case WIDTH_BUCKET:
			case RANDOM:
			case SETSEED:
			case ACOS:
			case ACOSD:
			case ASIN:
			case ASIND:
			case ATAN:
			case ATAND:
			case ATAN2:
			case ATAN2D:
			case COS:
			case COSD:
			case COT:
			case COTD:
			case SIN:
			case SIND:
			case TAN:
			case TAND:
			case SINH:
			case COSH:
			case TANH:
			case ASINH:
			case ACOSH:
			case ATANH:
			case BIT_LENGTH:
			case CHAR_LENGTH:
			case CHARACTER_LENGTH:
			case LOWER:
			case OCTET_LENGTH:
			case UPPER:
			case ASCII:
			case BTRIM:
			case CHR:
			case CONCAT:
			case CONCAT_WS:
			case FORMAT:
			case INITCAP:
			case LENGTH:
			case LPAD:
			case LTRIM:
			case MD5:
			case PARSE_IDENT:
			case PG_CLIENT_ENCODING:
			case QUOTE_IDENT:
			case QUOTE_LITERAL:
			case QUOTE_NULLABLE:
			case REGEXP_COUNT:
			case REGEXP_INSTR:
			case REGEXP_LIKE:
			case REGEXP_MATCH:
			case REGEXP_MATCHES:
			case REGEXP_REPLACE:
			case REGEXP_SPLIT_TO_ARRAY:
			case REGEXP_SPLIT_TO_TABLE:
			case REGEXP_SUBSTR:
			case REPEAT:
			case RPAD:
			case RTRIM:
			case SPLIT_PART:
			case STARTS_WITH:
			case STRING_TO_ARRAY:
			case STRING_TO_TABLE:
			case STRPOS:
			case SUBSTR:
			case TO_ASCII:
			case TO_HEX:
			case TRANSLATE:
			case UNISTR:
			case AGE:
			case CLOCK_TIMESTAMP:
			case DATE_BIN:
			case DATE_PART:
			case DATE_TRUNC:
			case ISFINITE:
			case JUSTIFY_DAYS:
			case JUSTIFY_HOURS:
			case JUSTIFY_INTERVAL:
			case MAKE_DATE:
			case MAKE_INTERVAL:
			case MAKE_TIME:
			case MAKE_TIMESTAMP:
			case MAKE_TIMESTAMPTZ:
			case NOW:
			case STATEMENT_TIMESTAMP:
			case TIMEOFDAY:
			case TRANSACTION_TIMESTAMP:
			case TO_TIMESTAMP:
			case TO_CHAR:
			case TO_DATE:
			case TO_NUMBER:
			case Identifier:
			case QuotedIdentifier:
			case UnicodeQuotedIdentifier:
			case PLSQLVARIABLENAME:
			case PLSQLIDENTIFIER:
			case MetaCommand:
				EnterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Opt_name_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAREN() { return GetToken(PostgreSQLParser.OPEN_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Name_listContext name_list() {
			return GetRuleContext<Name_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAREN() { return GetToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public Opt_name_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_opt_name_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterOpt_name_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitOpt_name_list(this);
		}
	}

	[RuleVersion(0)]
	public Opt_name_listContext opt_name_list() {
		Opt_name_listContext _localctx = new Opt_name_listContext(Context, State);
		EnterRule(_localctx, 870, RULE_opt_name_list);
		try {
			State = 7528;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,369,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 7523;
				Match(OPEN_PAREN);
				State = 7524;
				name_list();
				State = 7525;
				Match(CLOSE_PAREN);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Vacuum_relationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Qualified_nameContext qualified_name() {
			return GetRuleContext<Qualified_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Opt_name_listContext opt_name_list() {
			return GetRuleContext<Opt_name_listContext>(0);
		}
		public Vacuum_relationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_vacuum_relation; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterVacuum_relation(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitVacuum_relation(this);
		}
	}

	[RuleVersion(0)]
	public Vacuum_relationContext vacuum_relation() {
		Vacuum_relationContext _localctx = new Vacuum_relationContext(Context, State);
		EnterRule(_localctx, 872, RULE_vacuum_relation);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7530;
			qualified_name();
			State = 7531;
			opt_name_list();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Vacuum_relation_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Vacuum_relationContext[] vacuum_relation() {
			return GetRuleContexts<Vacuum_relationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Vacuum_relationContext vacuum_relation(int i) {
			return GetRuleContext<Vacuum_relationContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(PostgreSQLParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(PostgreSQLParser.COMMA, i);
		}
		public Vacuum_relation_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_vacuum_relation_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterVacuum_relation_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitVacuum_relation_list(this);
		}
	}

	[RuleVersion(0)]
	public Vacuum_relation_listContext vacuum_relation_list() {
		Vacuum_relation_listContext _localctx = new Vacuum_relation_listContext(Context, State);
		EnterRule(_localctx, 874, RULE_vacuum_relation_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7533;
			vacuum_relation();
			State = 7538;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 7534;
				Match(COMMA);
				State = 7535;
				vacuum_relation();
				}
				}
				State = 7540;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Opt_vacuum_relation_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Vacuum_relation_listContext vacuum_relation_list() {
			return GetRuleContext<Vacuum_relation_listContext>(0);
		}
		public Opt_vacuum_relation_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_opt_vacuum_relation_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterOpt_vacuum_relation_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitOpt_vacuum_relation_list(this);
		}
	}

	[RuleVersion(0)]
	public Opt_vacuum_relation_listContext opt_vacuum_relation_list() {
		Opt_vacuum_relation_listContext _localctx = new Opt_vacuum_relation_listContext(Context, State);
		EnterRule(_localctx, 876, RULE_opt_vacuum_relation_list);
		try {
			State = 7543;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,371,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 7541;
				vacuum_relation_list();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExplainstmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXPLAIN() { return GetToken(PostgreSQLParser.EXPLAIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExplainablestmtContext explainablestmt() {
			return GetRuleContext<ExplainablestmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Analyze_keywordContext analyze_keyword() {
			return GetRuleContext<Analyze_keywordContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Opt_verboseContext opt_verbose() {
			return GetRuleContext<Opt_verboseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VERBOSE() { return GetToken(PostgreSQLParser.VERBOSE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAREN() { return GetToken(PostgreSQLParser.OPEN_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Explain_option_listContext explain_option_list() {
			return GetRuleContext<Explain_option_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAREN() { return GetToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public ExplainstmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_explainstmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterExplainstmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitExplainstmt(this);
		}
	}

	[RuleVersion(0)]
	public ExplainstmtContext explainstmt() {
		ExplainstmtContext _localctx = new ExplainstmtContext(Context, State);
		EnterRule(_localctx, 878, RULE_explainstmt);
		try {
			State = 7561;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,372,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 7545;
				Match(EXPLAIN);
				State = 7546;
				explainablestmt();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 7547;
				Match(EXPLAIN);
				State = 7548;
				analyze_keyword();
				State = 7549;
				opt_verbose();
				State = 7550;
				explainablestmt();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 7552;
				Match(EXPLAIN);
				State = 7553;
				Match(VERBOSE);
				State = 7554;
				explainablestmt();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 7555;
				Match(EXPLAIN);
				State = 7556;
				Match(OPEN_PAREN);
				State = 7557;
				explain_option_list();
				State = 7558;
				Match(CLOSE_PAREN);
				State = 7559;
				explainablestmt();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExplainablestmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SelectstmtContext selectstmt() {
			return GetRuleContext<SelectstmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public InsertstmtContext insertstmt() {
			return GetRuleContext<InsertstmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UpdatestmtContext updatestmt() {
			return GetRuleContext<UpdatestmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DeletestmtContext deletestmt() {
			return GetRuleContext<DeletestmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DeclarecursorstmtContext declarecursorstmt() {
			return GetRuleContext<DeclarecursorstmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CreateasstmtContext createasstmt() {
			return GetRuleContext<CreateasstmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CreatematviewstmtContext creatematviewstmt() {
			return GetRuleContext<CreatematviewstmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RefreshmatviewstmtContext refreshmatviewstmt() {
			return GetRuleContext<RefreshmatviewstmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExecutestmtContext executestmt() {
			return GetRuleContext<ExecutestmtContext>(0);
		}
		public ExplainablestmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_explainablestmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterExplainablestmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitExplainablestmt(this);
		}
	}

	[RuleVersion(0)]
	public ExplainablestmtContext explainablestmt() {
		ExplainablestmtContext _localctx = new ExplainablestmtContext(Context, State);
		EnterRule(_localctx, 880, RULE_explainablestmt);
		try {
			State = 7572;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,373,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 7563;
				selectstmt();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 7564;
				insertstmt();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 7565;
				updatestmt();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 7566;
				deletestmt();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 7567;
				declarecursorstmt();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 7568;
				createasstmt();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 7569;
				creatematviewstmt();
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 7570;
				refreshmatviewstmt();
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 7571;
				executestmt();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Explain_option_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Explain_option_elemContext[] explain_option_elem() {
			return GetRuleContexts<Explain_option_elemContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Explain_option_elemContext explain_option_elem(int i) {
			return GetRuleContext<Explain_option_elemContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(PostgreSQLParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(PostgreSQLParser.COMMA, i);
		}
		public Explain_option_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_explain_option_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterExplain_option_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitExplain_option_list(this);
		}
	}

	[RuleVersion(0)]
	public Explain_option_listContext explain_option_list() {
		Explain_option_listContext _localctx = new Explain_option_listContext(Context, State);
		EnterRule(_localctx, 882, RULE_explain_option_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7574;
			explain_option_elem();
			State = 7579;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 7575;
				Match(COMMA);
				State = 7576;
				explain_option_elem();
				}
				}
				State = 7581;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Explain_option_elemContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Explain_option_nameContext explain_option_name() {
			return GetRuleContext<Explain_option_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Explain_option_argContext explain_option_arg() {
			return GetRuleContext<Explain_option_argContext>(0);
		}
		public Explain_option_elemContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_explain_option_elem; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterExplain_option_elem(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitExplain_option_elem(this);
		}
	}

	[RuleVersion(0)]
	public Explain_option_elemContext explain_option_elem() {
		Explain_option_elemContext _localctx = new Explain_option_elemContext(Context, State);
		EnterRule(_localctx, 884, RULE_explain_option_elem);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7582;
			explain_option_name();
			State = 7583;
			explain_option_arg();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Explain_option_nameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NonreservedwordContext nonreservedword() {
			return GetRuleContext<NonreservedwordContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Analyze_keywordContext analyze_keyword() {
			return GetRuleContext<Analyze_keywordContext>(0);
		}
		public Explain_option_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_explain_option_name; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterExplain_option_name(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitExplain_option_name(this);
		}
	}

	[RuleVersion(0)]
	public Explain_option_nameContext explain_option_name() {
		Explain_option_nameContext _localctx = new Explain_option_nameContext(Context, State);
		EnterRule(_localctx, 886, RULE_explain_option_name);
		try {
			State = 7587;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case AND:
			case ARRAY:
			case COLLATE:
			case COLUMN:
			case CONSTRAINT:
			case DEFAULT:
			case DO:
			case FETCH:
			case TABLE:
			case AUTHORIZATION:
			case BINARY:
			case COLLATION:
			case CONCURRENTLY:
			case CROSS:
			case CURRENT_SCHEMA:
			case FREEZE:
			case FULL:
			case ILIKE:
			case INNER_P:
			case IS:
			case ISNULL:
			case JOIN:
			case LIKE:
			case NATURAL:
			case NOTNULL:
			case OUTER_P:
			case OVER:
			case OVERLAPS:
			case SIMILAR:
			case VERBOSE:
			case ABORT_P:
			case ABSOLUTE_P:
			case ACCESS:
			case ACTION:
			case ADD_P:
			case ADMIN:
			case AFTER:
			case AGGREGATE:
			case ALSO:
			case ALTER:
			case ALWAYS:
			case ASSERTION:
			case ASSIGNMENT:
			case AT:
			case ATTRIBUTE:
			case BACKWARD:
			case BEFORE:
			case BEGIN_P:
			case BY:
			case CACHE:
			case CALLED:
			case CASCADE:
			case CASCADED:
			case CATALOG:
			case CHAIN:
			case CHARACTERISTICS:
			case CHECKPOINT:
			case CLASS:
			case CLOSE:
			case CLUSTER:
			case COMMENT:
			case COMMENTS:
			case COMMIT:
			case COMMITTED:
			case CONFIGURATION:
			case CONNECTION:
			case CONSTRAINTS:
			case CONTENT_P:
			case CONTINUE_P:
			case CONVERSION_P:
			case COPY:
			case COST:
			case CSV:
			case CURSOR:
			case CYCLE:
			case DATA_P:
			case DATABASE:
			case DAY_P:
			case DEALLOCATE:
			case DECLARE:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE_P:
			case DELIMITER:
			case DELIMITERS:
			case DICTIONARY:
			case DISABLE_P:
			case DISCARD:
			case DOCUMENT_P:
			case DOMAIN_P:
			case DOUBLE_P:
			case DROP:
			case EACH:
			case ENABLE_P:
			case ENCODING:
			case ENCRYPTED:
			case ENUM_P:
			case ESCAPE:
			case EVENT:
			case EXCLUDE:
			case EXCLUDING:
			case EXCLUSIVE:
			case EXECUTE:
			case EXPLAIN:
			case EXTENSION:
			case EXTERNAL:
			case FAMILY:
			case FIRST_P:
			case FOLLOWING:
			case FORCE:
			case FORWARD:
			case FUNCTION:
			case FUNCTIONS:
			case GLOBAL:
			case GRANTED:
			case HANDLER:
			case HEADER_P:
			case HOLD:
			case HOUR_P:
			case IDENTITY_P:
			case IF_P:
			case IMMEDIATE:
			case IMMUTABLE:
			case IMPLICIT_P:
			case INCLUDING:
			case INCREMENT:
			case INDEX:
			case INDEXES:
			case INHERIT:
			case INHERITS:
			case INLINE_P:
			case INSENSITIVE:
			case INSERT:
			case INSTEAD:
			case INVOKER:
			case ISOLATION:
			case KEY:
			case LABEL:
			case LANGUAGE:
			case LARGE_P:
			case LAST_P:
			case LEAKPROOF:
			case LEVEL:
			case LISTEN:
			case LOAD:
			case LOCAL:
			case LOCATION:
			case LOCK_P:
			case MAPPING:
			case MATCH:
			case MATERIALIZED:
			case MAXVALUE:
			case MINUTE_P:
			case MINVALUE:
			case MODE:
			case MONTH_P:
			case MOVE:
			case NAME_P:
			case NAMES:
			case NEXT:
			case NO:
			case NOTHING:
			case NOTIFY:
			case NOWAIT:
			case NULLS_P:
			case OBJECT_P:
			case OF:
			case OFF:
			case OIDS:
			case OPERATOR:
			case OPTION:
			case OPTIONS:
			case OWNED:
			case OWNER:
			case PARSER:
			case PARTIAL:
			case PARTITION:
			case PASSING:
			case PASSWORD:
			case PLANS:
			case PRECEDING:
			case PREPARE:
			case PREPARED:
			case PRESERVE:
			case PRIOR:
			case PRIVILEGES:
			case PROCEDURAL:
			case PROCEDURE:
			case PROGRAM:
			case QUOTE:
			case RANGE:
			case READ:
			case REASSIGN:
			case RECHECK:
			case RECURSIVE:
			case REF:
			case REFRESH:
			case REINDEX:
			case RELATIVE_P:
			case RELEASE:
			case RENAME:
			case REPEATABLE:
			case REPLACE:
			case REPLICA:
			case RESET:
			case RESTART:
			case RESTRICT:
			case RETURNS:
			case REVOKE:
			case ROLE:
			case ROLLBACK:
			case ROWS:
			case RULE:
			case SAVEPOINT:
			case SCHEMA:
			case SCROLL:
			case SEARCH:
			case SECOND_P:
			case SECURITY:
			case SEQUENCE:
			case SEQUENCES:
			case SERIALIZABLE:
			case SERVER:
			case SESSION:
			case SET:
			case SHARE:
			case SHOW:
			case SIMPLE:
			case SNAPSHOT:
			case STABLE:
			case STANDALONE_P:
			case START:
			case STATEMENT:
			case STATISTICS:
			case STDIN:
			case STDOUT:
			case STORAGE:
			case STRICT_P:
			case STRIP_P:
			case SYSID:
			case SYSTEM_P:
			case TABLES:
			case TABLESPACE:
			case TEMP:
			case TEMPLATE:
			case TEMPORARY:
			case TEXT_P:
			case TRANSACTION:
			case TRIGGER:
			case TRUNCATE:
			case TRUSTED:
			case TYPE_P:
			case TYPES_P:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNENCRYPTED:
			case UNKNOWN:
			case UNLISTEN:
			case UNLOGGED:
			case UNTIL:
			case UPDATE:
			case VACUUM:
			case VALID:
			case VALIDATE:
			case VALIDATOR:
			case VARYING:
			case VERSION_P:
			case VIEW:
			case VOLATILE:
			case WHITESPACE_P:
			case WITHOUT:
			case WORK:
			case WRAPPER:
			case WRITE:
			case XML_P:
			case YEAR_P:
			case YES_P:
			case ZONE:
			case BETWEEN:
			case BIGINT:
			case BIT:
			case BOOLEAN_P:
			case CHAR_P:
			case CHARACTER:
			case COALESCE:
			case DEC:
			case DECIMAL_P:
			case EXISTS:
			case EXTRACT:
			case FLOAT_P:
			case GREATEST:
			case INOUT:
			case INT_P:
			case INTEGER:
			case INTERVAL:
			case LEAST:
			case NATIONAL:
			case NCHAR:
			case NONE:
			case NULLIF:
			case NUMERIC:
			case OVERLAY:
			case POSITION:
			case PRECISION:
			case REAL:
			case ROW:
			case SETOF:
			case SMALLINT:
			case SUBSTRING:
			case TIME:
			case TIMESTAMP:
			case TREAT:
			case TRIM:
			case VALUES:
			case VARCHAR:
			case XMLATTRIBUTES:
			case XMLCOMMENT:
			case XMLAGG:
			case XML_IS_WELL_FORMED:
			case XML_IS_WELL_FORMED_DOCUMENT:
			case XML_IS_WELL_FORMED_CONTENT:
			case XPATH:
			case XPATH_EXISTS:
			case XMLCONCAT:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLPARSE:
			case XMLPI:
			case XMLROOT:
			case XMLSERIALIZE:
			case CALL:
			case CURRENT_P:
			case ATTACH:
			case DETACH:
			case EXPRESSION:
			case GENERATED:
			case LOGGED:
			case STORED:
			case INCLUDE:
			case ROUTINE:
			case TRANSFORM:
			case IMPORT_P:
			case POLICY:
			case METHOD:
			case REFERENCING:
			case NEW:
			case OLD:
			case VALUE_P:
			case SUBSCRIPTION:
			case PUBLICATION:
			case OUT_P:
			case ROUTINES:
			case SCHEMAS:
			case PROCEDURES:
			case INPUT_P:
			case SUPPORT:
			case PARALLEL:
			case SQL_P:
			case DEPENDS:
			case OVERRIDING:
			case CONFLICT:
			case SKIP_P:
			case LOCKED:
			case TIES:
			case ROLLUP:
			case CUBE:
			case GROUPING:
			case SETS:
			case TABLESAMPLE:
			case ORDINALITY:
			case XMLTABLE:
			case COLUMNS:
			case XMLNAMESPACES:
			case ROWTYPE:
			case NORMALIZED:
			case WITHIN:
			case FILTER:
			case GROUPS:
			case OTHERS:
			case NFC:
			case NFD:
			case NFKC:
			case NFKD:
			case UESCAPE:
			case VIEWS:
			case NORMALIZE:
			case DUMP:
			case PRINT_STRICT_PARAMS:
			case VARIABLE_CONFLICT:
			case ERROR:
			case USE_VARIABLE:
			case USE_COLUMN:
			case ALIAS:
			case CONSTANT:
			case PERFORM:
			case GET:
			case DIAGNOSTICS:
			case STACKED:
			case ELSIF:
			case REVERSE:
			case SLICE:
			case EXIT:
			case RETURN:
			case QUERY:
			case RAISE:
			case SQLSTATE:
			case DEBUG:
			case LOG:
			case INFO:
			case NOTICE:
			case WARNING:
			case EXCEPTION:
			case ASSERT:
			case OPEN:
			case ABS:
			case CBRT:
			case CEIL:
			case CEILING:
			case DEGREES:
			case DIV:
			case EXP:
			case FACTORIAL:
			case FLOOR:
			case GCD:
			case LCM:
			case LN:
			case LOG10:
			case MIN_SCALE:
			case MOD:
			case PI:
			case POWER:
			case RADIANS:
			case ROUND:
			case SCALE:
			case SIGN:
			case SQRT:
			case TRIM_SCALE:
			case TRUNC:
			case WIDTH_BUCKET:
			case RANDOM:
			case SETSEED:
			case ACOS:
			case ACOSD:
			case ASIN:
			case ASIND:
			case ATAN:
			case ATAND:
			case ATAN2:
			case ATAN2D:
			case COS:
			case COSD:
			case COT:
			case COTD:
			case SIN:
			case SIND:
			case TAN:
			case TAND:
			case SINH:
			case COSH:
			case TANH:
			case ASINH:
			case ACOSH:
			case ATANH:
			case BIT_LENGTH:
			case CHAR_LENGTH:
			case CHARACTER_LENGTH:
			case LOWER:
			case OCTET_LENGTH:
			case UPPER:
			case ASCII:
			case BTRIM:
			case CHR:
			case CONCAT:
			case CONCAT_WS:
			case FORMAT:
			case INITCAP:
			case LENGTH:
			case LPAD:
			case LTRIM:
			case MD5:
			case PARSE_IDENT:
			case PG_CLIENT_ENCODING:
			case QUOTE_IDENT:
			case QUOTE_LITERAL:
			case QUOTE_NULLABLE:
			case REGEXP_COUNT:
			case REGEXP_INSTR:
			case REGEXP_LIKE:
			case REGEXP_MATCH:
			case REGEXP_MATCHES:
			case REGEXP_REPLACE:
			case REGEXP_SPLIT_TO_ARRAY:
			case REGEXP_SPLIT_TO_TABLE:
			case REGEXP_SUBSTR:
			case REPEAT:
			case RPAD:
			case RTRIM:
			case SPLIT_PART:
			case STARTS_WITH:
			case STRING_TO_ARRAY:
			case STRING_TO_TABLE:
			case STRPOS:
			case SUBSTR:
			case TO_ASCII:
			case TO_HEX:
			case TRANSLATE:
			case UNISTR:
			case AGE:
			case CLOCK_TIMESTAMP:
			case DATE_BIN:
			case DATE_PART:
			case DATE_TRUNC:
			case ISFINITE:
			case JUSTIFY_DAYS:
			case JUSTIFY_HOURS:
			case JUSTIFY_INTERVAL:
			case MAKE_DATE:
			case MAKE_INTERVAL:
			case MAKE_TIME:
			case MAKE_TIMESTAMP:
			case MAKE_TIMESTAMPTZ:
			case NOW:
			case STATEMENT_TIMESTAMP:
			case TIMEOFDAY:
			case TRANSACTION_TIMESTAMP:
			case TO_TIMESTAMP:
			case TO_CHAR:
			case TO_DATE:
			case TO_NUMBER:
			case Identifier:
			case QuotedIdentifier:
			case UnicodeQuotedIdentifier:
			case PLSQLVARIABLENAME:
			case PLSQLIDENTIFIER:
				EnterOuterAlt(_localctx, 1);
				{
				State = 7585;
				nonreservedword();
				}
				break;
			case ANALYSE:
			case ANALYZE:
				EnterOuterAlt(_localctx, 2);
				{
				State = 7586;
				analyze_keyword();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Explain_option_argContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Opt_boolean_or_stringContext opt_boolean_or_string() {
			return GetRuleContext<Opt_boolean_or_stringContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NumericonlyContext numericonly() {
			return GetRuleContext<NumericonlyContext>(0);
		}
		public Explain_option_argContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_explain_option_arg; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterExplain_option_arg(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitExplain_option_arg(this);
		}
	}

	[RuleVersion(0)]
	public Explain_option_argContext explain_option_arg() {
		Explain_option_argContext _localctx = new Explain_option_argContext(Context, State);
		EnterRule(_localctx, 888, RULE_explain_option_arg);
		try {
			State = 7592;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case AND:
			case ARRAY:
			case COLLATE:
			case COLUMN:
			case CONSTRAINT:
			case DEFAULT:
			case DO:
			case FALSE_P:
			case FETCH:
			case ON:
			case TABLE:
			case TRUE_P:
			case AUTHORIZATION:
			case BINARY:
			case COLLATION:
			case CONCURRENTLY:
			case CROSS:
			case CURRENT_SCHEMA:
			case FREEZE:
			case FULL:
			case ILIKE:
			case INNER_P:
			case IS:
			case ISNULL:
			case JOIN:
			case LIKE:
			case NATURAL:
			case NOTNULL:
			case OUTER_P:
			case OVER:
			case OVERLAPS:
			case SIMILAR:
			case VERBOSE:
			case ABORT_P:
			case ABSOLUTE_P:
			case ACCESS:
			case ACTION:
			case ADD_P:
			case ADMIN:
			case AFTER:
			case AGGREGATE:
			case ALSO:
			case ALTER:
			case ALWAYS:
			case ASSERTION:
			case ASSIGNMENT:
			case AT:
			case ATTRIBUTE:
			case BACKWARD:
			case BEFORE:
			case BEGIN_P:
			case BY:
			case CACHE:
			case CALLED:
			case CASCADE:
			case CASCADED:
			case CATALOG:
			case CHAIN:
			case CHARACTERISTICS:
			case CHECKPOINT:
			case CLASS:
			case CLOSE:
			case CLUSTER:
			case COMMENT:
			case COMMENTS:
			case COMMIT:
			case COMMITTED:
			case CONFIGURATION:
			case CONNECTION:
			case CONSTRAINTS:
			case CONTENT_P:
			case CONTINUE_P:
			case CONVERSION_P:
			case COPY:
			case COST:
			case CSV:
			case CURSOR:
			case CYCLE:
			case DATA_P:
			case DATABASE:
			case DAY_P:
			case DEALLOCATE:
			case DECLARE:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE_P:
			case DELIMITER:
			case DELIMITERS:
			case DICTIONARY:
			case DISABLE_P:
			case DISCARD:
			case DOCUMENT_P:
			case DOMAIN_P:
			case DOUBLE_P:
			case DROP:
			case EACH:
			case ENABLE_P:
			case ENCODING:
			case ENCRYPTED:
			case ENUM_P:
			case ESCAPE:
			case EVENT:
			case EXCLUDE:
			case EXCLUDING:
			case EXCLUSIVE:
			case EXECUTE:
			case EXPLAIN:
			case EXTENSION:
			case EXTERNAL:
			case FAMILY:
			case FIRST_P:
			case FOLLOWING:
			case FORCE:
			case FORWARD:
			case FUNCTION:
			case FUNCTIONS:
			case GLOBAL:
			case GRANTED:
			case HANDLER:
			case HEADER_P:
			case HOLD:
			case HOUR_P:
			case IDENTITY_P:
			case IF_P:
			case IMMEDIATE:
			case IMMUTABLE:
			case IMPLICIT_P:
			case INCLUDING:
			case INCREMENT:
			case INDEX:
			case INDEXES:
			case INHERIT:
			case INHERITS:
			case INLINE_P:
			case INSENSITIVE:
			case INSERT:
			case INSTEAD:
			case INVOKER:
			case ISOLATION:
			case KEY:
			case LABEL:
			case LANGUAGE:
			case LARGE_P:
			case LAST_P:
			case LEAKPROOF:
			case LEVEL:
			case LISTEN:
			case LOAD:
			case LOCAL:
			case LOCATION:
			case LOCK_P:
			case MAPPING:
			case MATCH:
			case MATERIALIZED:
			case MAXVALUE:
			case MINUTE_P:
			case MINVALUE:
			case MODE:
			case MONTH_P:
			case MOVE:
			case NAME_P:
			case NAMES:
			case NEXT:
			case NO:
			case NOTHING:
			case NOTIFY:
			case NOWAIT:
			case NULLS_P:
			case OBJECT_P:
			case OF:
			case OFF:
			case OIDS:
			case OPERATOR:
			case OPTION:
			case OPTIONS:
			case OWNED:
			case OWNER:
			case PARSER:
			case PARTIAL:
			case PARTITION:
			case PASSING:
			case PASSWORD:
			case PLANS:
			case PRECEDING:
			case PREPARE:
			case PREPARED:
			case PRESERVE:
			case PRIOR:
			case PRIVILEGES:
			case PROCEDURAL:
			case PROCEDURE:
			case PROGRAM:
			case QUOTE:
			case RANGE:
			case READ:
			case REASSIGN:
			case RECHECK:
			case RECURSIVE:
			case REF:
			case REFRESH:
			case REINDEX:
			case RELATIVE_P:
			case RELEASE:
			case RENAME:
			case REPEATABLE:
			case REPLACE:
			case REPLICA:
			case RESET:
			case RESTART:
			case RESTRICT:
			case RETURNS:
			case REVOKE:
			case ROLE:
			case ROLLBACK:
			case ROWS:
			case RULE:
			case SAVEPOINT:
			case SCHEMA:
			case SCROLL:
			case SEARCH:
			case SECOND_P:
			case SECURITY:
			case SEQUENCE:
			case SEQUENCES:
			case SERIALIZABLE:
			case SERVER:
			case SESSION:
			case SET:
			case SHARE:
			case SHOW:
			case SIMPLE:
			case SNAPSHOT:
			case STABLE:
			case STANDALONE_P:
			case START:
			case STATEMENT:
			case STATISTICS:
			case STDIN:
			case STDOUT:
			case STORAGE:
			case STRICT_P:
			case STRIP_P:
			case SYSID:
			case SYSTEM_P:
			case TABLES:
			case TABLESPACE:
			case TEMP:
			case TEMPLATE:
			case TEMPORARY:
			case TEXT_P:
			case TRANSACTION:
			case TRIGGER:
			case TRUNCATE:
			case TRUSTED:
			case TYPE_P:
			case TYPES_P:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNENCRYPTED:
			case UNKNOWN:
			case UNLISTEN:
			case UNLOGGED:
			case UNTIL:
			case UPDATE:
			case VACUUM:
			case VALID:
			case VALIDATE:
			case VALIDATOR:
			case VARYING:
			case VERSION_P:
			case VIEW:
			case VOLATILE:
			case WHITESPACE_P:
			case WITHOUT:
			case WORK:
			case WRAPPER:
			case WRITE:
			case XML_P:
			case YEAR_P:
			case YES_P:
			case ZONE:
			case BETWEEN:
			case BIGINT:
			case BIT:
			case BOOLEAN_P:
			case CHAR_P:
			case CHARACTER:
			case COALESCE:
			case DEC:
			case DECIMAL_P:
			case EXISTS:
			case EXTRACT:
			case FLOAT_P:
			case GREATEST:
			case INOUT:
			case INT_P:
			case INTEGER:
			case INTERVAL:
			case LEAST:
			case NATIONAL:
			case NCHAR:
			case NONE:
			case NULLIF:
			case NUMERIC:
			case OVERLAY:
			case POSITION:
			case PRECISION:
			case REAL:
			case ROW:
			case SETOF:
			case SMALLINT:
			case SUBSTRING:
			case TIME:
			case TIMESTAMP:
			case TREAT:
			case TRIM:
			case VALUES:
			case VARCHAR:
			case XMLATTRIBUTES:
			case XMLCOMMENT:
			case XMLAGG:
			case XML_IS_WELL_FORMED:
			case XML_IS_WELL_FORMED_DOCUMENT:
			case XML_IS_WELL_FORMED_CONTENT:
			case XPATH:
			case XPATH_EXISTS:
			case XMLCONCAT:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLPARSE:
			case XMLPI:
			case XMLROOT:
			case XMLSERIALIZE:
			case CALL:
			case CURRENT_P:
			case ATTACH:
			case DETACH:
			case EXPRESSION:
			case GENERATED:
			case LOGGED:
			case STORED:
			case INCLUDE:
			case ROUTINE:
			case TRANSFORM:
			case IMPORT_P:
			case POLICY:
			case METHOD:
			case REFERENCING:
			case NEW:
			case OLD:
			case VALUE_P:
			case SUBSCRIPTION:
			case PUBLICATION:
			case OUT_P:
			case ROUTINES:
			case SCHEMAS:
			case PROCEDURES:
			case INPUT_P:
			case SUPPORT:
			case PARALLEL:
			case SQL_P:
			case DEPENDS:
			case OVERRIDING:
			case CONFLICT:
			case SKIP_P:
			case LOCKED:
			case TIES:
			case ROLLUP:
			case CUBE:
			case GROUPING:
			case SETS:
			case TABLESAMPLE:
			case ORDINALITY:
			case XMLTABLE:
			case COLUMNS:
			case XMLNAMESPACES:
			case ROWTYPE:
			case NORMALIZED:
			case WITHIN:
			case FILTER:
			case GROUPS:
			case OTHERS:
			case NFC:
			case NFD:
			case NFKC:
			case NFKD:
			case UESCAPE:
			case VIEWS:
			case NORMALIZE:
			case DUMP:
			case PRINT_STRICT_PARAMS:
			case VARIABLE_CONFLICT:
			case ERROR:
			case USE_VARIABLE:
			case USE_COLUMN:
			case ALIAS:
			case CONSTANT:
			case PERFORM:
			case GET:
			case DIAGNOSTICS:
			case STACKED:
			case ELSIF:
			case REVERSE:
			case SLICE:
			case EXIT:
			case RETURN:
			case QUERY:
			case RAISE:
			case SQLSTATE:
			case DEBUG:
			case LOG:
			case INFO:
			case NOTICE:
			case WARNING:
			case EXCEPTION:
			case ASSERT:
			case OPEN:
			case ABS:
			case CBRT:
			case CEIL:
			case CEILING:
			case DEGREES:
			case DIV:
			case EXP:
			case FACTORIAL:
			case FLOOR:
			case GCD:
			case LCM:
			case LN:
			case LOG10:
			case MIN_SCALE:
			case MOD:
			case PI:
			case POWER:
			case RADIANS:
			case ROUND:
			case SCALE:
			case SIGN:
			case SQRT:
			case TRIM_SCALE:
			case TRUNC:
			case WIDTH_BUCKET:
			case RANDOM:
			case SETSEED:
			case ACOS:
			case ACOSD:
			case ASIN:
			case ASIND:
			case ATAN:
			case ATAND:
			case ATAN2:
			case ATAN2D:
			case COS:
			case COSD:
			case COT:
			case COTD:
			case SIN:
			case SIND:
			case TAN:
			case TAND:
			case SINH:
			case COSH:
			case TANH:
			case ASINH:
			case ACOSH:
			case ATANH:
			case BIT_LENGTH:
			case CHAR_LENGTH:
			case CHARACTER_LENGTH:
			case LOWER:
			case OCTET_LENGTH:
			case UPPER:
			case ASCII:
			case BTRIM:
			case CHR:
			case CONCAT:
			case CONCAT_WS:
			case FORMAT:
			case INITCAP:
			case LENGTH:
			case LPAD:
			case LTRIM:
			case MD5:
			case PARSE_IDENT:
			case PG_CLIENT_ENCODING:
			case QUOTE_IDENT:
			case QUOTE_LITERAL:
			case QUOTE_NULLABLE:
			case REGEXP_COUNT:
			case REGEXP_INSTR:
			case REGEXP_LIKE:
			case REGEXP_MATCH:
			case REGEXP_MATCHES:
			case REGEXP_REPLACE:
			case REGEXP_SPLIT_TO_ARRAY:
			case REGEXP_SPLIT_TO_TABLE:
			case REGEXP_SUBSTR:
			case REPEAT:
			case RPAD:
			case RTRIM:
			case SPLIT_PART:
			case STARTS_WITH:
			case STRING_TO_ARRAY:
			case STRING_TO_TABLE:
			case STRPOS:
			case SUBSTR:
			case TO_ASCII:
			case TO_HEX:
			case TRANSLATE:
			case UNISTR:
			case AGE:
			case CLOCK_TIMESTAMP:
			case DATE_BIN:
			case DATE_PART:
			case DATE_TRUNC:
			case ISFINITE:
			case JUSTIFY_DAYS:
			case JUSTIFY_HOURS:
			case JUSTIFY_INTERVAL:
			case MAKE_DATE:
			case MAKE_INTERVAL:
			case MAKE_TIME:
			case MAKE_TIMESTAMP:
			case MAKE_TIMESTAMPTZ:
			case NOW:
			case STATEMENT_TIMESTAMP:
			case TIMEOFDAY:
			case TRANSACTION_TIMESTAMP:
			case TO_TIMESTAMP:
			case TO_CHAR:
			case TO_DATE:
			case TO_NUMBER:
			case Identifier:
			case QuotedIdentifier:
			case UnicodeQuotedIdentifier:
			case StringConstant:
			case UnicodeEscapeStringConstant:
			case BeginDollarStringConstant:
			case PLSQLVARIABLENAME:
			case PLSQLIDENTIFIER:
			case EscapeStringConstant:
				EnterOuterAlt(_localctx, 1);
				{
				State = 7589;
				opt_boolean_or_string();
				}
				break;
			case PLUS:
			case MINUS:
			case Integral:
			case Numeric:
				EnterOuterAlt(_localctx, 2);
				{
				State = 7590;
				numericonly();
				}
				break;
			case CLOSE_PAREN:
			case COMMA:
				EnterOuterAlt(_localctx, 3);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PreparestmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PREPARE() { return GetToken(PostgreSQLParser.PREPARE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Prep_type_clauseContext prep_type_clause() {
			return GetRuleContext<Prep_type_clauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS() { return GetToken(PostgreSQLParser.AS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public PreparablestmtContext preparablestmt() {
			return GetRuleContext<PreparablestmtContext>(0);
		}
		public PreparestmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_preparestmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterPreparestmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitPreparestmt(this);
		}
	}

	[RuleVersion(0)]
	public PreparestmtContext preparestmt() {
		PreparestmtContext _localctx = new PreparestmtContext(Context, State);
		EnterRule(_localctx, 890, RULE_preparestmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7594;
			Match(PREPARE);
			State = 7595;
			name();
			State = 7596;
			prep_type_clause();
			State = 7597;
			Match(AS);
			State = 7598;
			preparablestmt();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Prep_type_clauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAREN() { return GetToken(PostgreSQLParser.OPEN_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Type_listContext type_list() {
			return GetRuleContext<Type_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAREN() { return GetToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public Prep_type_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_prep_type_clause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterPrep_type_clause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitPrep_type_clause(this);
		}
	}

	[RuleVersion(0)]
	public Prep_type_clauseContext prep_type_clause() {
		Prep_type_clauseContext _localctx = new Prep_type_clauseContext(Context, State);
		EnterRule(_localctx, 892, RULE_prep_type_clause);
		try {
			State = 7605;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case OPEN_PAREN:
				EnterOuterAlt(_localctx, 1);
				{
				State = 7600;
				Match(OPEN_PAREN);
				State = 7601;
				type_list();
				State = 7602;
				Match(CLOSE_PAREN);
				}
				break;
			case AS:
				EnterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PreparablestmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SelectstmtContext selectstmt() {
			return GetRuleContext<SelectstmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public InsertstmtContext insertstmt() {
			return GetRuleContext<InsertstmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UpdatestmtContext updatestmt() {
			return GetRuleContext<UpdatestmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DeletestmtContext deletestmt() {
			return GetRuleContext<DeletestmtContext>(0);
		}
		public PreparablestmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_preparablestmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterPreparablestmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitPreparablestmt(this);
		}
	}

	[RuleVersion(0)]
	public PreparablestmtContext preparablestmt() {
		PreparablestmtContext _localctx = new PreparablestmtContext(Context, State);
		EnterRule(_localctx, 894, RULE_preparablestmt);
		try {
			State = 7611;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,378,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 7607;
				selectstmt();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 7608;
				insertstmt();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 7609;
				updatestmt();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 7610;
				deletestmt();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExecutestmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXECUTE() { return GetToken(PostgreSQLParser.EXECUTE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Execute_param_clauseContext execute_param_clause() {
			return GetRuleContext<Execute_param_clauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CREATE() { return GetToken(PostgreSQLParser.CREATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public OpttempContext opttemp() {
			return GetRuleContext<OpttempContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLE() { return GetToken(PostgreSQLParser.TABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Create_as_targetContext create_as_target() {
			return GetRuleContext<Create_as_targetContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS() { return GetToken(PostgreSQLParser.AS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Opt_with_dataContext opt_with_data() {
			return GetRuleContext<Opt_with_dataContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF_P() { return GetToken(PostgreSQLParser.IF_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT() { return GetToken(PostgreSQLParser.NOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXISTS() { return GetToken(PostgreSQLParser.EXISTS, 0); }
		public ExecutestmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_executestmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterExecutestmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitExecutestmt(this);
		}
	}

	[RuleVersion(0)]
	public ExecutestmtContext executestmt() {
		ExecutestmtContext _localctx = new ExecutestmtContext(Context, State);
		EnterRule(_localctx, 896, RULE_executestmt);
		try {
			State = 7640;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,379,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 7613;
				Match(EXECUTE);
				State = 7614;
				name();
				State = 7615;
				execute_param_clause();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 7617;
				Match(CREATE);
				State = 7618;
				opttemp();
				State = 7619;
				Match(TABLE);
				State = 7620;
				create_as_target();
				State = 7621;
				Match(AS);
				State = 7622;
				Match(EXECUTE);
				State = 7623;
				name();
				State = 7624;
				execute_param_clause();
				State = 7625;
				opt_with_data();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 7627;
				Match(CREATE);
				State = 7628;
				opttemp();
				State = 7629;
				Match(TABLE);
				State = 7630;
				Match(IF_P);
				State = 7631;
				Match(NOT);
				State = 7632;
				Match(EXISTS);
				State = 7633;
				create_as_target();
				State = 7634;
				Match(AS);
				State = 7635;
				Match(EXECUTE);
				State = 7636;
				name();
				State = 7637;
				execute_param_clause();
				State = 7638;
				opt_with_data();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Execute_param_clauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAREN() { return GetToken(PostgreSQLParser.OPEN_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Expr_listContext expr_list() {
			return GetRuleContext<Expr_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAREN() { return GetToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public Execute_param_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_execute_param_clause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterExecute_param_clause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitExecute_param_clause(this);
		}
	}

	[RuleVersion(0)]
	public Execute_param_clauseContext execute_param_clause() {
		Execute_param_clauseContext _localctx = new Execute_param_clauseContext(Context, State);
		EnterRule(_localctx, 898, RULE_execute_param_clause);
		try {
			State = 7647;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,380,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 7642;
				Match(OPEN_PAREN);
				State = 7643;
				expr_list();
				State = 7644;
				Match(CLOSE_PAREN);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeallocatestmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEALLOCATE() { return GetToken(PostgreSQLParser.DEALLOCATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PREPARE() { return GetToken(PostgreSQLParser.PREPARE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALL() { return GetToken(PostgreSQLParser.ALL, 0); }
		public DeallocatestmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_deallocatestmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterDeallocatestmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitDeallocatestmt(this);
		}
	}

	[RuleVersion(0)]
	public DeallocatestmtContext deallocatestmt() {
		DeallocatestmtContext _localctx = new DeallocatestmtContext(Context, State);
		EnterRule(_localctx, 900, RULE_deallocatestmt);
		try {
			State = 7659;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,381,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 7649;
				Match(DEALLOCATE);
				State = 7650;
				name();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 7651;
				Match(DEALLOCATE);
				State = 7652;
				Match(PREPARE);
				State = 7653;
				name();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 7654;
				Match(DEALLOCATE);
				State = 7655;
				Match(ALL);
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 7656;
				Match(DEALLOCATE);
				State = 7657;
				Match(PREPARE);
				State = 7658;
				Match(ALL);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InsertstmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Opt_with_clauseContext opt_with_clause() {
			return GetRuleContext<Opt_with_clauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INSERT() { return GetToken(PostgreSQLParser.INSERT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTO() { return GetToken(PostgreSQLParser.INTO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Insert_targetContext insert_target() {
			return GetRuleContext<Insert_targetContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Insert_restContext insert_rest() {
			return GetRuleContext<Insert_restContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Opt_on_conflictContext opt_on_conflict() {
			return GetRuleContext<Opt_on_conflictContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Returning_clauseContext returning_clause() {
			return GetRuleContext<Returning_clauseContext>(0);
		}
		public InsertstmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_insertstmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterInsertstmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitInsertstmt(this);
		}
	}

	[RuleVersion(0)]
	public InsertstmtContext insertstmt() {
		InsertstmtContext _localctx = new InsertstmtContext(Context, State);
		EnterRule(_localctx, 902, RULE_insertstmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7661;
			opt_with_clause();
			State = 7662;
			Match(INSERT);
			State = 7663;
			Match(INTO);
			State = 7664;
			insert_target();
			State = 7665;
			insert_rest();
			State = 7666;
			opt_on_conflict();
			State = 7667;
			returning_clause();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Insert_targetContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Qualified_nameContext qualified_name() {
			return GetRuleContext<Qualified_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS() { return GetToken(PostgreSQLParser.AS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ColidContext colid() {
			return GetRuleContext<ColidContext>(0);
		}
		public Insert_targetContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_insert_target; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterInsert_target(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitInsert_target(this);
		}
	}

	[RuleVersion(0)]
	public Insert_targetContext insert_target() {
		Insert_targetContext _localctx = new Insert_targetContext(Context, State);
		EnterRule(_localctx, 904, RULE_insert_target);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7669;
			qualified_name();
			State = 7672;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==AS) {
				{
				State = 7670;
				Match(AS);
				State = 7671;
				colid();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Insert_restContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SelectstmtContext selectstmt() {
			return GetRuleContext<SelectstmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OVERRIDING() { return GetToken(PostgreSQLParser.OVERRIDING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Override_kindContext override_kind() {
			return GetRuleContext<Override_kindContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VALUE_P() { return GetToken(PostgreSQLParser.VALUE_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAREN() { return GetToken(PostgreSQLParser.OPEN_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Insert_column_listContext insert_column_list() {
			return GetRuleContext<Insert_column_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAREN() { return GetToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFAULT() { return GetToken(PostgreSQLParser.DEFAULT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VALUES() { return GetToken(PostgreSQLParser.VALUES, 0); }
		public Insert_restContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_insert_rest; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterInsert_rest(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitInsert_rest(this);
		}
	}

	[RuleVersion(0)]
	public Insert_restContext insert_rest() {
		Insert_restContext _localctx = new Insert_restContext(Context, State);
		EnterRule(_localctx, 906, RULE_insert_rest);
		int _la;
		try {
			State = 7693;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,384,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 7674;
				selectstmt();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 7675;
				Match(OVERRIDING);
				State = 7676;
				override_kind();
				State = 7677;
				Match(VALUE_P);
				State = 7678;
				selectstmt();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 7680;
				Match(OPEN_PAREN);
				State = 7681;
				insert_column_list();
				State = 7682;
				Match(CLOSE_PAREN);
				State = 7687;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==OVERRIDING) {
					{
					State = 7683;
					Match(OVERRIDING);
					State = 7684;
					override_kind();
					State = 7685;
					Match(VALUE_P);
					}
				}

				State = 7689;
				selectstmt();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 7691;
				Match(DEFAULT);
				State = 7692;
				Match(VALUES);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Override_kindContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode USER() { return GetToken(PostgreSQLParser.USER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SYSTEM_P() { return GetToken(PostgreSQLParser.SYSTEM_P, 0); }
		public Override_kindContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_override_kind; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterOverride_kind(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitOverride_kind(this);
		}
	}

	[RuleVersion(0)]
	public Override_kindContext override_kind() {
		Override_kindContext _localctx = new Override_kindContext(Context, State);
		EnterRule(_localctx, 908, RULE_override_kind);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7695;
			_la = TokenStream.LA(1);
			if ( !(_la==USER || _la==SYSTEM_P) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Insert_column_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Insert_column_itemContext[] insert_column_item() {
			return GetRuleContexts<Insert_column_itemContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Insert_column_itemContext insert_column_item(int i) {
			return GetRuleContext<Insert_column_itemContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(PostgreSQLParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(PostgreSQLParser.COMMA, i);
		}
		public Insert_column_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_insert_column_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterInsert_column_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitInsert_column_list(this);
		}
	}

	[RuleVersion(0)]
	public Insert_column_listContext insert_column_list() {
		Insert_column_listContext _localctx = new Insert_column_listContext(Context, State);
		EnterRule(_localctx, 910, RULE_insert_column_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7697;
			insert_column_item();
			State = 7702;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 7698;
				Match(COMMA);
				State = 7699;
				insert_column_item();
				}
				}
				State = 7704;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Insert_column_itemContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ColidContext colid() {
			return GetRuleContext<ColidContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Opt_indirectionContext opt_indirection() {
			return GetRuleContext<Opt_indirectionContext>(0);
		}
		public Insert_column_itemContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_insert_column_item; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterInsert_column_item(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitInsert_column_item(this);
		}
	}

	[RuleVersion(0)]
	public Insert_column_itemContext insert_column_item() {
		Insert_column_itemContext _localctx = new Insert_column_itemContext(Context, State);
		EnterRule(_localctx, 912, RULE_insert_column_item);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7705;
			colid();
			State = 7706;
			opt_indirection();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Opt_on_conflictContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ON() { return GetToken(PostgreSQLParser.ON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONFLICT() { return GetToken(PostgreSQLParser.CONFLICT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Opt_conf_exprContext opt_conf_expr() {
			return GetRuleContext<Opt_conf_exprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DO() { return GetToken(PostgreSQLParser.DO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UPDATE() { return GetToken(PostgreSQLParser.UPDATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SET() { return GetToken(PostgreSQLParser.SET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Set_clause_listContext set_clause_list() {
			return GetRuleContext<Set_clause_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Where_clauseContext where_clause() {
			return GetRuleContext<Where_clauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOTHING() { return GetToken(PostgreSQLParser.NOTHING, 0); }
		public Opt_on_conflictContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_opt_on_conflict; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterOpt_on_conflict(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitOpt_on_conflict(this);
		}
	}

	[RuleVersion(0)]
	public Opt_on_conflictContext opt_on_conflict() {
		Opt_on_conflictContext _localctx = new Opt_on_conflictContext(Context, State);
		EnterRule(_localctx, 914, RULE_opt_on_conflict);
		try {
			State = 7721;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ON:
				EnterOuterAlt(_localctx, 1);
				{
				State = 7708;
				Match(ON);
				State = 7709;
				Match(CONFLICT);
				State = 7710;
				opt_conf_expr();
				State = 7711;
				Match(DO);
				State = 7718;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case UPDATE:
					{
					State = 7712;
					Match(UPDATE);
					State = 7713;
					Match(SET);
					State = 7714;
					set_clause_list();
					State = 7715;
					where_clause();
					}
					break;
				case NOTHING:
					{
					State = 7717;
					Match(NOTHING);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case Eof:
			case OPEN_PAREN:
			case CLOSE_PAREN:
			case SEMI:
			case ANALYSE:
			case ANALYZE:
			case CREATE:
			case DO:
			case FETCH:
			case GRANT:
			case INTO:
			case RETURNING:
			case SELECT:
			case TABLE:
			case WITH:
			case ABORT_P:
			case ALTER:
			case BEGIN_P:
			case CHECKPOINT:
			case CLOSE:
			case CLUSTER:
			case COMMENT:
			case COMMIT:
			case COPY:
			case DEALLOCATE:
			case DECLARE:
			case DELETE_P:
			case DISCARD:
			case DROP:
			case EXECUTE:
			case EXPLAIN:
			case INSERT:
			case LISTEN:
			case LOAD:
			case LOCK_P:
			case MERGE:
			case MOVE:
			case NOTIFY:
			case PREPARE:
			case REASSIGN:
			case REFRESH:
			case REINDEX:
			case RELEASE:
			case RESET:
			case REVOKE:
			case ROLLBACK:
			case SAVEPOINT:
			case SECURITY:
			case SET:
			case SHOW:
			case START:
			case TRUNCATE:
			case UNLISTEN:
			case UPDATE:
			case VACUUM:
			case VALUES:
			case CALL:
			case IMPORT_P:
			case END_P:
			case LOOP:
			case MetaCommand:
				EnterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Opt_conf_exprContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAREN() { return GetToken(PostgreSQLParser.OPEN_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Index_paramsContext index_params() {
			return GetRuleContext<Index_paramsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAREN() { return GetToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Where_clauseContext where_clause() {
			return GetRuleContext<Where_clauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ON() { return GetToken(PostgreSQLParser.ON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONSTRAINT() { return GetToken(PostgreSQLParser.CONSTRAINT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		public Opt_conf_exprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_opt_conf_expr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterOpt_conf_expr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitOpt_conf_expr(this);
		}
	}

	[RuleVersion(0)]
	public Opt_conf_exprContext opt_conf_expr() {
		Opt_conf_exprContext _localctx = new Opt_conf_exprContext(Context, State);
		EnterRule(_localctx, 916, RULE_opt_conf_expr);
		try {
			State = 7732;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case OPEN_PAREN:
				EnterOuterAlt(_localctx, 1);
				{
				State = 7723;
				Match(OPEN_PAREN);
				State = 7724;
				index_params();
				State = 7725;
				Match(CLOSE_PAREN);
				State = 7726;
				where_clause();
				}
				break;
			case ON:
				EnterOuterAlt(_localctx, 2);
				{
				State = 7728;
				Match(ON);
				State = 7729;
				Match(CONSTRAINT);
				State = 7730;
				name();
				}
				break;
			case DO:
				EnterOuterAlt(_localctx, 3);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Returning_clauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RETURNING() { return GetToken(PostgreSQLParser.RETURNING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Target_listContext target_list() {
			return GetRuleContext<Target_listContext>(0);
		}
		public Returning_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_returning_clause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterReturning_clause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitReturning_clause(this);
		}
	}

	[RuleVersion(0)]
	public Returning_clauseContext returning_clause() {
		Returning_clauseContext _localctx = new Returning_clauseContext(Context, State);
		EnterRule(_localctx, 918, RULE_returning_clause);
		try {
			State = 7737;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case RETURNING:
				EnterOuterAlt(_localctx, 1);
				{
				State = 7734;
				Match(RETURNING);
				State = 7735;
				target_list();
				}
				break;
			case Eof:
			case OPEN_PAREN:
			case CLOSE_PAREN:
			case SEMI:
			case ANALYSE:
			case ANALYZE:
			case CREATE:
			case DO:
			case FETCH:
			case GRANT:
			case INTO:
			case SELECT:
			case TABLE:
			case WITH:
			case ABORT_P:
			case ALTER:
			case BEGIN_P:
			case CHECKPOINT:
			case CLOSE:
			case CLUSTER:
			case COMMENT:
			case COMMIT:
			case COPY:
			case DEALLOCATE:
			case DECLARE:
			case DELETE_P:
			case DISCARD:
			case DROP:
			case EXECUTE:
			case EXPLAIN:
			case INSERT:
			case LISTEN:
			case LOAD:
			case LOCK_P:
			case MERGE:
			case MOVE:
			case NOTIFY:
			case PREPARE:
			case REASSIGN:
			case REFRESH:
			case REINDEX:
			case RELEASE:
			case RESET:
			case REVOKE:
			case ROLLBACK:
			case SAVEPOINT:
			case SECURITY:
			case SET:
			case SHOW:
			case START:
			case TRUNCATE:
			case UNLISTEN:
			case UPDATE:
			case VACUUM:
			case VALUES:
			case CALL:
			case IMPORT_P:
			case END_P:
			case LOOP:
			case MetaCommand:
				EnterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MergestmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MERGE() { return GetToken(PostgreSQLParser.MERGE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Qualified_nameContext[] qualified_name() {
			return GetRuleContexts<Qualified_nameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Qualified_nameContext qualified_name(int i) {
			return GetRuleContext<Qualified_nameContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode USING() { return GetToken(PostgreSQLParser.USING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ON() { return GetToken(PostgreSQLParser.ON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public A_exprContext a_expr() {
			return GetRuleContext<A_exprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Select_with_parensContext select_with_parens() {
			return GetRuleContext<Select_with_parensContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Merge_insert_clauseContext merge_insert_clause() {
			return GetRuleContext<Merge_insert_clauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Merge_update_clauseContext merge_update_clause() {
			return GetRuleContext<Merge_update_clauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTO() { return GetToken(PostgreSQLParser.INTO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Alias_clauseContext[] alias_clause() {
			return GetRuleContexts<Alias_clauseContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Alias_clauseContext alias_clause(int i) {
			return GetRuleContext<Alias_clauseContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Merge_delete_clauseContext merge_delete_clause() {
			return GetRuleContext<Merge_delete_clauseContext>(0);
		}
		public MergestmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_mergestmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterMergestmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitMergestmt(this);
		}
	}

	[RuleVersion(0)]
	public MergestmtContext mergestmt() {
		MergestmtContext _localctx = new MergestmtContext(Context, State);
		EnterRule(_localctx, 920, RULE_mergestmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7739;
			Match(MERGE);
			State = 7741;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==INTO) {
				{
				State = 7740;
				Match(INTO);
				}
			}

			State = 7743;
			qualified_name();
			State = 7745;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (((_la) & ~0x3f) == 0 && ((1L << _la) & 2459027080864595968L) != 0 || (((_la - 92)) & ~0x3f) == 0 && ((1L << (_la - 92)) & -2251913479323647L) != 0 || (((_la - 156)) & ~0x3f) == 0 && ((1L << (_la - 156)) & -1L) != 0 || (((_la - 220)) & ~0x3f) == 0 && ((1L << (_la - 220)) & -19327352833L) != 0 || (((_la - 284)) & ~0x3f) == 0 && ((1L << (_la - 284)) & -1L) != 0 || (((_la - 348)) & ~0x3f) == 0 && ((1L << (_la - 348)) & -1L) != 0 || (((_la - 412)) & ~0x3f) == 0 && ((1L << (_la - 412)) & -2305851805306716161L) != 0 || (((_la - 476)) & ~0x3f) == 0 && ((1L << (_la - 476)) & -17593528221697L) != 0 || (((_la - 540)) & ~0x3f) == 0 && ((1L << (_la - 540)) & -1L) != 0 || (((_la - 604)) & ~0x3f) == 0 && ((1L << (_la - 604)) & 864691437692780543L) != 0) {
				{
				State = 7744;
				alias_clause();
				}
			}

			State = 7747;
			Match(USING);
			State = 7750;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case OPEN_PAREN:
				{
				State = 7748;
				select_with_parens();
				}
				break;
			case AND:
			case ARRAY:
			case COLLATE:
			case COLUMN:
			case CONSTRAINT:
			case DEFAULT:
			case DO:
			case FETCH:
			case TABLE:
			case IS:
			case LEFT:
			case OUTER_P:
			case OVER:
			case RIGHT:
			case ABORT_P:
			case ABSOLUTE_P:
			case ACCESS:
			case ACTION:
			case ADD_P:
			case ADMIN:
			case AFTER:
			case AGGREGATE:
			case ALSO:
			case ALTER:
			case ALWAYS:
			case ASSERTION:
			case ASSIGNMENT:
			case AT:
			case ATTRIBUTE:
			case BACKWARD:
			case BEFORE:
			case BEGIN_P:
			case BY:
			case CACHE:
			case CALLED:
			case CASCADE:
			case CASCADED:
			case CATALOG:
			case CHAIN:
			case CHARACTERISTICS:
			case CHECKPOINT:
			case CLASS:
			case CLOSE:
			case CLUSTER:
			case COMMENT:
			case COMMENTS:
			case COMMIT:
			case COMMITTED:
			case CONFIGURATION:
			case CONNECTION:
			case CONSTRAINTS:
			case CONTENT_P:
			case CONTINUE_P:
			case CONVERSION_P:
			case COPY:
			case COST:
			case CSV:
			case CURSOR:
			case CYCLE:
			case DATA_P:
			case DATABASE:
			case DAY_P:
			case DEALLOCATE:
			case DECLARE:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE_P:
			case DELIMITER:
			case DELIMITERS:
			case DICTIONARY:
			case DISABLE_P:
			case DISCARD:
			case DOCUMENT_P:
			case DOMAIN_P:
			case DOUBLE_P:
			case DROP:
			case EACH:
			case ENABLE_P:
			case ENCODING:
			case ENCRYPTED:
			case ENUM_P:
			case ESCAPE:
			case EVENT:
			case EXCLUDE:
			case EXCLUDING:
			case EXCLUSIVE:
			case EXECUTE:
			case EXPLAIN:
			case EXTENSION:
			case EXTERNAL:
			case FAMILY:
			case FIRST_P:
			case FOLLOWING:
			case FORCE:
			case FORWARD:
			case FUNCTION:
			case FUNCTIONS:
			case GLOBAL:
			case GRANTED:
			case HANDLER:
			case HEADER_P:
			case HOLD:
			case HOUR_P:
			case IDENTITY_P:
			case IF_P:
			case IMMEDIATE:
			case IMMUTABLE:
			case IMPLICIT_P:
			case INCLUDING:
			case INCREMENT:
			case INDEX:
			case INDEXES:
			case INHERIT:
			case INHERITS:
			case INLINE_P:
			case INSENSITIVE:
			case INSERT:
			case INSTEAD:
			case INVOKER:
			case ISOLATION:
			case KEY:
			case LABEL:
			case LANGUAGE:
			case LARGE_P:
			case LAST_P:
			case LEAKPROOF:
			case LEVEL:
			case LISTEN:
			case LOAD:
			case LOCAL:
			case LOCATION:
			case LOCK_P:
			case MAPPING:
			case MATCH:
			case MATERIALIZED:
			case MAXVALUE:
			case MINUTE_P:
			case MINVALUE:
			case MODE:
			case MONTH_P:
			case MOVE:
			case NAME_P:
			case NAMES:
			case NEXT:
			case NO:
			case NOTHING:
			case NOTIFY:
			case NOWAIT:
			case NULLS_P:
			case OBJECT_P:
			case OF:
			case OFF:
			case OIDS:
			case OPERATOR:
			case OPTION:
			case OPTIONS:
			case OWNED:
			case OWNER:
			case PARSER:
			case PARTIAL:
			case PARTITION:
			case PASSING:
			case PASSWORD:
			case PLANS:
			case PRECEDING:
			case PREPARE:
			case PREPARED:
			case PRESERVE:
			case PRIOR:
			case PRIVILEGES:
			case PROCEDURAL:
			case PROCEDURE:
			case PROGRAM:
			case QUOTE:
			case RANGE:
			case READ:
			case REASSIGN:
			case RECHECK:
			case RECURSIVE:
			case REF:
			case REFRESH:
			case REINDEX:
			case RELATIVE_P:
			case RELEASE:
			case RENAME:
			case REPEATABLE:
			case REPLACE:
			case REPLICA:
			case RESET:
			case RESTART:
			case RESTRICT:
			case RETURNS:
			case REVOKE:
			case ROLE:
			case ROLLBACK:
			case ROWS:
			case RULE:
			case SAVEPOINT:
			case SCHEMA:
			case SCROLL:
			case SEARCH:
			case SECOND_P:
			case SECURITY:
			case SEQUENCE:
			case SEQUENCES:
			case SERIALIZABLE:
			case SERVER:
			case SESSION:
			case SET:
			case SHARE:
			case SHOW:
			case SIMPLE:
			case SNAPSHOT:
			case STABLE:
			case STANDALONE_P:
			case START:
			case STATEMENT:
			case STATISTICS:
			case STDIN:
			case STDOUT:
			case STORAGE:
			case STRICT_P:
			case STRIP_P:
			case SYSID:
			case SYSTEM_P:
			case TABLES:
			case TABLESPACE:
			case TEMP:
			case TEMPLATE:
			case TEMPORARY:
			case TEXT_P:
			case TRANSACTION:
			case TRIGGER:
			case TRUNCATE:
			case TRUSTED:
			case TYPE_P:
			case TYPES_P:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNENCRYPTED:
			case UNKNOWN:
			case UNLISTEN:
			case UNLOGGED:
			case UNTIL:
			case UPDATE:
			case VACUUM:
			case VALID:
			case VALIDATE:
			case VALIDATOR:
			case VARYING:
			case VERSION_P:
			case VIEW:
			case VOLATILE:
			case WHITESPACE_P:
			case WITHOUT:
			case WORK:
			case WRAPPER:
			case WRITE:
			case XML_P:
			case YEAR_P:
			case YES_P:
			case ZONE:
			case BETWEEN:
			case BIGINT:
			case BIT:
			case BOOLEAN_P:
			case CHAR_P:
			case CHARACTER:
			case COALESCE:
			case DEC:
			case DECIMAL_P:
			case EXISTS:
			case EXTRACT:
			case FLOAT_P:
			case GREATEST:
			case INOUT:
			case INT_P:
			case INTEGER:
			case INTERVAL:
			case LEAST:
			case NATIONAL:
			case NCHAR:
			case NONE:
			case NULLIF:
			case NUMERIC:
			case OVERLAY:
			case POSITION:
			case PRECISION:
			case REAL:
			case ROW:
			case SETOF:
			case SMALLINT:
			case SUBSTRING:
			case TIME:
			case TIMESTAMP:
			case TREAT:
			case TRIM:
			case VALUES:
			case VARCHAR:
			case XMLATTRIBUTES:
			case XMLCOMMENT:
			case XMLAGG:
			case XML_IS_WELL_FORMED:
			case XML_IS_WELL_FORMED_DOCUMENT:
			case XML_IS_WELL_FORMED_CONTENT:
			case XPATH:
			case XPATH_EXISTS:
			case XMLCONCAT:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLPARSE:
			case XMLPI:
			case XMLROOT:
			case XMLSERIALIZE:
			case CALL:
			case CURRENT_P:
			case ATTACH:
			case DETACH:
			case EXPRESSION:
			case GENERATED:
			case LOGGED:
			case STORED:
			case INCLUDE:
			case ROUTINE:
			case TRANSFORM:
			case IMPORT_P:
			case POLICY:
			case METHOD:
			case REFERENCING:
			case NEW:
			case OLD:
			case VALUE_P:
			case SUBSCRIPTION:
			case PUBLICATION:
			case OUT_P:
			case ROUTINES:
			case SCHEMAS:
			case PROCEDURES:
			case INPUT_P:
			case SUPPORT:
			case PARALLEL:
			case SQL_P:
			case DEPENDS:
			case OVERRIDING:
			case CONFLICT:
			case SKIP_P:
			case LOCKED:
			case TIES:
			case ROLLUP:
			case CUBE:
			case GROUPING:
			case SETS:
			case ORDINALITY:
			case XMLTABLE:
			case COLUMNS:
			case XMLNAMESPACES:
			case ROWTYPE:
			case NORMALIZED:
			case WITHIN:
			case FILTER:
			case GROUPS:
			case OTHERS:
			case NFC:
			case NFD:
			case NFKC:
			case NFKD:
			case UESCAPE:
			case VIEWS:
			case NORMALIZE:
			case DUMP:
			case PRINT_STRICT_PARAMS:
			case VARIABLE_CONFLICT:
			case ERROR:
			case USE_VARIABLE:
			case USE_COLUMN:
			case ALIAS:
			case CONSTANT:
			case PERFORM:
			case GET:
			case DIAGNOSTICS:
			case STACKED:
			case ELSIF:
			case REVERSE:
			case SLICE:
			case EXIT:
			case RETURN:
			case QUERY:
			case RAISE:
			case SQLSTATE:
			case DEBUG:
			case LOG:
			case INFO:
			case NOTICE:
			case WARNING:
			case EXCEPTION:
			case ASSERT:
			case OPEN:
			case ABS:
			case CBRT:
			case CEIL:
			case CEILING:
			case DEGREES:
			case DIV:
			case EXP:
			case FACTORIAL:
			case FLOOR:
			case GCD:
			case LCM:
			case LN:
			case LOG10:
			case MIN_SCALE:
			case MOD:
			case PI:
			case POWER:
			case RADIANS:
			case ROUND:
			case SCALE:
			case SIGN:
			case SQRT:
			case TRIM_SCALE:
			case TRUNC:
			case WIDTH_BUCKET:
			case RANDOM:
			case SETSEED:
			case ACOS:
			case ACOSD:
			case ASIN:
			case ASIND:
			case ATAN:
			case ATAND:
			case ATAN2:
			case ATAN2D:
			case COS:
			case COSD:
			case COT:
			case COTD:
			case SIN:
			case SIND:
			case TAN:
			case TAND:
			case SINH:
			case COSH:
			case TANH:
			case ASINH:
			case ACOSH:
			case ATANH:
			case BIT_LENGTH:
			case CHAR_LENGTH:
			case CHARACTER_LENGTH:
			case LOWER:
			case OCTET_LENGTH:
			case UPPER:
			case ASCII:
			case BTRIM:
			case CHR:
			case CONCAT:
			case CONCAT_WS:
			case FORMAT:
			case INITCAP:
			case LENGTH:
			case LPAD:
			case LTRIM:
			case MD5:
			case PARSE_IDENT:
			case PG_CLIENT_ENCODING:
			case QUOTE_IDENT:
			case QUOTE_LITERAL:
			case QUOTE_NULLABLE:
			case REGEXP_COUNT:
			case REGEXP_INSTR:
			case REGEXP_LIKE:
			case REGEXP_MATCH:
			case REGEXP_MATCHES:
			case REGEXP_REPLACE:
			case REGEXP_SPLIT_TO_ARRAY:
			case REGEXP_SPLIT_TO_TABLE:
			case REGEXP_SUBSTR:
			case REPEAT:
			case RPAD:
			case RTRIM:
			case SPLIT_PART:
			case STARTS_WITH:
			case STRING_TO_ARRAY:
			case STRING_TO_TABLE:
			case STRPOS:
			case SUBSTR:
			case TO_ASCII:
			case TO_HEX:
			case TRANSLATE:
			case UNISTR:
			case AGE:
			case CLOCK_TIMESTAMP:
			case DATE_BIN:
			case DATE_PART:
			case DATE_TRUNC:
			case ISFINITE:
			case JUSTIFY_DAYS:
			case JUSTIFY_HOURS:
			case JUSTIFY_INTERVAL:
			case MAKE_DATE:
			case MAKE_INTERVAL:
			case MAKE_TIME:
			case MAKE_TIMESTAMP:
			case MAKE_TIMESTAMPTZ:
			case NOW:
			case STATEMENT_TIMESTAMP:
			case TIMEOFDAY:
			case TRANSACTION_TIMESTAMP:
			case TO_TIMESTAMP:
			case TO_CHAR:
			case TO_DATE:
			case TO_NUMBER:
			case Identifier:
			case QuotedIdentifier:
			case UnicodeQuotedIdentifier:
			case PLSQLVARIABLENAME:
			case PLSQLIDENTIFIER:
				{
				State = 7749;
				qualified_name();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 7753;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (((_la) & ~0x3f) == 0 && ((1L << _la) & 2459027080864595968L) != 0 || (((_la - 92)) & ~0x3f) == 0 && ((1L << (_la - 92)) & -2251913479323647L) != 0 || (((_la - 156)) & ~0x3f) == 0 && ((1L << (_la - 156)) & -1L) != 0 || (((_la - 220)) & ~0x3f) == 0 && ((1L << (_la - 220)) & -19327352833L) != 0 || (((_la - 284)) & ~0x3f) == 0 && ((1L << (_la - 284)) & -1L) != 0 || (((_la - 348)) & ~0x3f) == 0 && ((1L << (_la - 348)) & -1L) != 0 || (((_la - 412)) & ~0x3f) == 0 && ((1L << (_la - 412)) & -2305851805306716161L) != 0 || (((_la - 476)) & ~0x3f) == 0 && ((1L << (_la - 476)) & -17593528221697L) != 0 || (((_la - 540)) & ~0x3f) == 0 && ((1L << (_la - 540)) & -1L) != 0 || (((_la - 604)) & ~0x3f) == 0 && ((1L << (_la - 604)) & 864691437692780543L) != 0) {
				{
				State = 7752;
				alias_clause();
				}
			}

			State = 7755;
			Match(ON);
			State = 7756;
			a_expr();
			State = 7765;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,396,Context) ) {
			case 1:
				{
				State = 7757;
				merge_insert_clause();
				State = 7759;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,394,Context) ) {
				case 1:
					{
					State = 7758;
					merge_update_clause();
					}
					break;
				}
				}
				break;
			case 2:
				{
				State = 7761;
				merge_update_clause();
				State = 7763;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,395,Context) ) {
				case 1:
					{
					State = 7762;
					merge_insert_clause();
					}
					break;
				}
				}
				break;
			}
			State = 7768;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WHEN) {
				{
				State = 7767;
				merge_delete_clause();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Merge_insert_clauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WHEN() { return GetToken(PostgreSQLParser.WHEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT() { return GetToken(PostgreSQLParser.NOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MATCHED() { return GetToken(PostgreSQLParser.MATCHED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INSERT() { return GetToken(PostgreSQLParser.INSERT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Values_clauseContext values_clause() {
			return GetRuleContext<Values_clauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AND() { return GetToken(PostgreSQLParser.AND, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public A_exprContext a_expr() {
			return GetRuleContext<A_exprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode THEN() { return GetToken(PostgreSQLParser.THEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAREN() { return GetToken(PostgreSQLParser.OPEN_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Insert_column_listContext insert_column_list() {
			return GetRuleContext<Insert_column_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAREN() { return GetToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public Merge_insert_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_merge_insert_clause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterMerge_insert_clause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitMerge_insert_clause(this);
		}
	}

	[RuleVersion(0)]
	public Merge_insert_clauseContext merge_insert_clause() {
		Merge_insert_clauseContext _localctx = new Merge_insert_clauseContext(Context, State);
		EnterRule(_localctx, 922, RULE_merge_insert_clause);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7770;
			Match(WHEN);
			State = 7771;
			Match(NOT);
			State = 7772;
			Match(MATCHED);
			State = 7775;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==AND) {
				{
				State = 7773;
				Match(AND);
				State = 7774;
				a_expr();
				}
			}

			State = 7778;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==THEN) {
				{
				State = 7777;
				Match(THEN);
				}
			}

			State = 7780;
			Match(INSERT);
			State = 7785;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==OPEN_PAREN) {
				{
				State = 7781;
				Match(OPEN_PAREN);
				State = 7782;
				insert_column_list();
				State = 7783;
				Match(CLOSE_PAREN);
				}
			}

			State = 7787;
			values_clause();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Merge_update_clauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WHEN() { return GetToken(PostgreSQLParser.WHEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MATCHED() { return GetToken(PostgreSQLParser.MATCHED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UPDATE() { return GetToken(PostgreSQLParser.UPDATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SET() { return GetToken(PostgreSQLParser.SET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Set_clause_listContext set_clause_list() {
			return GetRuleContext<Set_clause_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AND() { return GetToken(PostgreSQLParser.AND, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public A_exprContext a_expr() {
			return GetRuleContext<A_exprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode THEN() { return GetToken(PostgreSQLParser.THEN, 0); }
		public Merge_update_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_merge_update_clause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterMerge_update_clause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitMerge_update_clause(this);
		}
	}

	[RuleVersion(0)]
	public Merge_update_clauseContext merge_update_clause() {
		Merge_update_clauseContext _localctx = new Merge_update_clauseContext(Context, State);
		EnterRule(_localctx, 924, RULE_merge_update_clause);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7789;
			Match(WHEN);
			State = 7790;
			Match(MATCHED);
			State = 7793;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==AND) {
				{
				State = 7791;
				Match(AND);
				State = 7792;
				a_expr();
				}
			}

			State = 7796;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==THEN) {
				{
				State = 7795;
				Match(THEN);
				}
			}

			State = 7798;
			Match(UPDATE);
			State = 7799;
			Match(SET);
			State = 7800;
			set_clause_list();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Merge_delete_clauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WHEN() { return GetToken(PostgreSQLParser.WHEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MATCHED() { return GetToken(PostgreSQLParser.MATCHED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DELETE_P() { return GetToken(PostgreSQLParser.DELETE_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode THEN() { return GetToken(PostgreSQLParser.THEN, 0); }
		public Merge_delete_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_merge_delete_clause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterMerge_delete_clause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitMerge_delete_clause(this);
		}
	}

	[RuleVersion(0)]
	public Merge_delete_clauseContext merge_delete_clause() {
		Merge_delete_clauseContext _localctx = new Merge_delete_clauseContext(Context, State);
		EnterRule(_localctx, 926, RULE_merge_delete_clause);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7802;
			Match(WHEN);
			State = 7803;
			Match(MATCHED);
			State = 7805;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==THEN) {
				{
				State = 7804;
				Match(THEN);
				}
			}

			State = 7807;
			Match(DELETE_P);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeletestmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Opt_with_clauseContext opt_with_clause() {
			return GetRuleContext<Opt_with_clauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DELETE_P() { return GetToken(PostgreSQLParser.DELETE_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FROM() { return GetToken(PostgreSQLParser.FROM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Relation_expr_opt_aliasContext relation_expr_opt_alias() {
			return GetRuleContext<Relation_expr_opt_aliasContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Using_clauseContext using_clause() {
			return GetRuleContext<Using_clauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Where_or_current_clauseContext where_or_current_clause() {
			return GetRuleContext<Where_or_current_clauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Returning_clauseContext returning_clause() {
			return GetRuleContext<Returning_clauseContext>(0);
		}
		public DeletestmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_deletestmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterDeletestmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitDeletestmt(this);
		}
	}

	[RuleVersion(0)]
	public DeletestmtContext deletestmt() {
		DeletestmtContext _localctx = new DeletestmtContext(Context, State);
		EnterRule(_localctx, 928, RULE_deletestmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7809;
			opt_with_clause();
			State = 7810;
			Match(DELETE_P);
			State = 7811;
			Match(FROM);
			State = 7812;
			relation_expr_opt_alias();
			State = 7813;
			using_clause();
			State = 7814;
			where_or_current_clause();
			State = 7815;
			returning_clause();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Using_clauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode USING() { return GetToken(PostgreSQLParser.USING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public From_listContext from_list() {
			return GetRuleContext<From_listContext>(0);
		}
		public Using_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_using_clause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterUsing_clause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitUsing_clause(this);
		}
	}

	[RuleVersion(0)]
	public Using_clauseContext using_clause() {
		Using_clauseContext _localctx = new Using_clauseContext(Context, State);
		EnterRule(_localctx, 930, RULE_using_clause);
		try {
			State = 7820;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case USING:
				EnterOuterAlt(_localctx, 1);
				{
				State = 7817;
				Match(USING);
				State = 7818;
				from_list();
				}
				break;
			case Eof:
			case OPEN_PAREN:
			case CLOSE_PAREN:
			case SEMI:
			case ANALYSE:
			case ANALYZE:
			case CREATE:
			case DO:
			case FETCH:
			case GRANT:
			case INTO:
			case RETURNING:
			case SELECT:
			case TABLE:
			case WHERE:
			case WITH:
			case ABORT_P:
			case ALTER:
			case BEGIN_P:
			case CHECKPOINT:
			case CLOSE:
			case CLUSTER:
			case COMMENT:
			case COMMIT:
			case COPY:
			case DEALLOCATE:
			case DECLARE:
			case DELETE_P:
			case DISCARD:
			case DROP:
			case EXECUTE:
			case EXPLAIN:
			case INSERT:
			case LISTEN:
			case LOAD:
			case LOCK_P:
			case MERGE:
			case MOVE:
			case NOTIFY:
			case PREPARE:
			case REASSIGN:
			case REFRESH:
			case REINDEX:
			case RELEASE:
			case RESET:
			case REVOKE:
			case ROLLBACK:
			case SAVEPOINT:
			case SECURITY:
			case SET:
			case SHOW:
			case START:
			case TRUNCATE:
			case UNLISTEN:
			case UPDATE:
			case VACUUM:
			case VALUES:
			case CALL:
			case IMPORT_P:
			case END_P:
			case LOOP:
			case MetaCommand:
				EnterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LockstmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOCK_P() { return GetToken(PostgreSQLParser.LOCK_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Opt_tableContext opt_table() {
			return GetRuleContext<Opt_tableContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Relation_expr_listContext relation_expr_list() {
			return GetRuleContext<Relation_expr_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Opt_lockContext opt_lock() {
			return GetRuleContext<Opt_lockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Opt_nowaitContext opt_nowait() {
			return GetRuleContext<Opt_nowaitContext>(0);
		}
		public LockstmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lockstmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterLockstmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitLockstmt(this);
		}
	}

	[RuleVersion(0)]
	public LockstmtContext lockstmt() {
		LockstmtContext _localctx = new LockstmtContext(Context, State);
		EnterRule(_localctx, 932, RULE_lockstmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7822;
			Match(LOCK_P);
			State = 7823;
			opt_table();
			State = 7824;
			relation_expr_list();
			State = 7825;
			opt_lock();
			State = 7826;
			opt_nowait();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Opt_lockContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IN_P() { return GetToken(PostgreSQLParser.IN_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Lock_typeContext lock_type() {
			return GetRuleContext<Lock_typeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MODE() { return GetToken(PostgreSQLParser.MODE, 0); }
		public Opt_lockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_opt_lock; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterOpt_lock(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitOpt_lock(this);
		}
	}

	[RuleVersion(0)]
	public Opt_lockContext opt_lock() {
		Opt_lockContext _localctx = new Opt_lockContext(Context, State);
		EnterRule(_localctx, 934, RULE_opt_lock);
		try {
			State = 7833;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case IN_P:
				EnterOuterAlt(_localctx, 1);
				{
				State = 7828;
				Match(IN_P);
				State = 7829;
				lock_type();
				State = 7830;
				Match(MODE);
				}
				break;
			case Eof:
			case OPEN_PAREN:
			case SEMI:
			case ANALYSE:
			case ANALYZE:
			case CREATE:
			case DO:
			case FETCH:
			case GRANT:
			case INTO:
			case SELECT:
			case TABLE:
			case WITH:
			case ABORT_P:
			case ALTER:
			case BEGIN_P:
			case CHECKPOINT:
			case CLOSE:
			case CLUSTER:
			case COMMENT:
			case COMMIT:
			case COPY:
			case DEALLOCATE:
			case DECLARE:
			case DELETE_P:
			case DISCARD:
			case DROP:
			case EXECUTE:
			case EXPLAIN:
			case INSERT:
			case LISTEN:
			case LOAD:
			case LOCK_P:
			case MERGE:
			case MOVE:
			case NOTIFY:
			case NOWAIT:
			case PREPARE:
			case REASSIGN:
			case REFRESH:
			case REINDEX:
			case RELEASE:
			case RESET:
			case REVOKE:
			case ROLLBACK:
			case SAVEPOINT:
			case SECURITY:
			case SET:
			case SHOW:
			case START:
			case TRUNCATE:
			case UNLISTEN:
			case UPDATE:
			case VACUUM:
			case VALUES:
			case CALL:
			case IMPORT_P:
			case END_P:
			case MetaCommand:
				EnterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Lock_typeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ACCESS() { return GetToken(PostgreSQLParser.ACCESS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SHARE() { return GetToken(PostgreSQLParser.SHARE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXCLUSIVE() { return GetToken(PostgreSQLParser.EXCLUSIVE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROW() { return GetToken(PostgreSQLParser.ROW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UPDATE() { return GetToken(PostgreSQLParser.UPDATE, 0); }
		public Lock_typeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lock_type; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterLock_type(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitLock_type(this);
		}
	}

	[RuleVersion(0)]
	public Lock_typeContext lock_type() {
		Lock_typeContext _localctx = new Lock_typeContext(Context, State);
		EnterRule(_localctx, 936, RULE_lock_type);
		int _la;
		try {
			State = 7847;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ACCESS:
				EnterOuterAlt(_localctx, 1);
				{
				State = 7835;
				Match(ACCESS);
				State = 7836;
				_la = TokenStream.LA(1);
				if ( !(_la==EXCLUSIVE || _la==SHARE) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			case ROW:
				EnterOuterAlt(_localctx, 2);
				{
				State = 7837;
				Match(ROW);
				State = 7838;
				_la = TokenStream.LA(1);
				if ( !(_la==EXCLUSIVE || _la==SHARE) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			case SHARE:
				EnterOuterAlt(_localctx, 3);
				{
				State = 7839;
				Match(SHARE);
				State = 7844;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case UPDATE:
					{
					State = 7840;
					Match(UPDATE);
					State = 7841;
					Match(EXCLUSIVE);
					}
					break;
				case ROW:
					{
					State = 7842;
					Match(ROW);
					State = 7843;
					Match(EXCLUSIVE);
					}
					break;
				case MODE:
					break;
				default:
					break;
				}
				}
				break;
			case EXCLUSIVE:
				EnterOuterAlt(_localctx, 4);
				{
				State = 7846;
				Match(EXCLUSIVE);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Opt_nowaitContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOWAIT() { return GetToken(PostgreSQLParser.NOWAIT, 0); }
		public Opt_nowaitContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_opt_nowait; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterOpt_nowait(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitOpt_nowait(this);
		}
	}

	[RuleVersion(0)]
	public Opt_nowaitContext opt_nowait() {
		Opt_nowaitContext _localctx = new Opt_nowaitContext(Context, State);
		EnterRule(_localctx, 938, RULE_opt_nowait);
		try {
			State = 7851;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case NOWAIT:
				EnterOuterAlt(_localctx, 1);
				{
				State = 7849;
				Match(NOWAIT);
				}
				break;
			case Eof:
			case OPEN_PAREN:
			case SEMI:
			case ANALYSE:
			case ANALYZE:
			case CREATE:
			case DO:
			case FETCH:
			case GRANT:
			case INTO:
			case SELECT:
			case TABLE:
			case WITH:
			case ABORT_P:
			case ALTER:
			case BEGIN_P:
			case CHECKPOINT:
			case CLOSE:
			case CLUSTER:
			case COMMENT:
			case COMMIT:
			case COPY:
			case DEALLOCATE:
			case DECLARE:
			case DELETE_P:
			case DISCARD:
			case DROP:
			case EXECUTE:
			case EXPLAIN:
			case INSERT:
			case LISTEN:
			case LOAD:
			case LOCK_P:
			case MERGE:
			case MOVE:
			case NOTIFY:
			case PREPARE:
			case REASSIGN:
			case REFRESH:
			case REINDEX:
			case RELEASE:
			case RESET:
			case REVOKE:
			case ROLLBACK:
			case SAVEPOINT:
			case SECURITY:
			case SET:
			case SHOW:
			case START:
			case TRUNCATE:
			case UNLISTEN:
			case UPDATE:
			case VACUUM:
			case VALUES:
			case CALL:
			case IMPORT_P:
			case END_P:
			case MetaCommand:
				EnterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Opt_nowait_or_skipContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOWAIT() { return GetToken(PostgreSQLParser.NOWAIT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SKIP_P() { return GetToken(PostgreSQLParser.SKIP_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOCKED() { return GetToken(PostgreSQLParser.LOCKED, 0); }
		public Opt_nowait_or_skipContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_opt_nowait_or_skip; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterOpt_nowait_or_skip(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitOpt_nowait_or_skip(this);
		}
	}

	[RuleVersion(0)]
	public Opt_nowait_or_skipContext opt_nowait_or_skip() {
		Opt_nowait_or_skipContext _localctx = new Opt_nowait_or_skipContext(Context, State);
		EnterRule(_localctx, 940, RULE_opt_nowait_or_skip);
		try {
			State = 7857;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case NOWAIT:
				EnterOuterAlt(_localctx, 1);
				{
				State = 7853;
				Match(NOWAIT);
				}
				break;
			case SKIP_P:
				EnterOuterAlt(_localctx, 2);
				{
				State = 7854;
				Match(SKIP_P);
				State = 7855;
				Match(LOCKED);
				}
				break;
			case Eof:
			case OPEN_PAREN:
			case CLOSE_PAREN:
			case SEMI:
			case ANALYSE:
			case ANALYZE:
			case CREATE:
			case DO:
			case FETCH:
			case FOR:
			case GRANT:
			case INTO:
			case LIMIT:
			case OFFSET:
			case ON:
			case RETURNING:
			case SELECT:
			case TABLE:
			case WITH:
			case ABORT_P:
			case ALTER:
			case BEGIN_P:
			case CHECKPOINT:
			case CLOSE:
			case CLUSTER:
			case COMMENT:
			case COMMIT:
			case COPY:
			case DEALLOCATE:
			case DECLARE:
			case DELETE_P:
			case DISCARD:
			case DROP:
			case EXECUTE:
			case EXPLAIN:
			case INSERT:
			case LISTEN:
			case LOAD:
			case LOCK_P:
			case MERGE:
			case MOVE:
			case NOTIFY:
			case PREPARE:
			case REASSIGN:
			case REFRESH:
			case REINDEX:
			case RELEASE:
			case RESET:
			case REVOKE:
			case ROLLBACK:
			case SAVEPOINT:
			case SECURITY:
			case SET:
			case SHOW:
			case START:
			case TRUNCATE:
			case UNLISTEN:
			case UPDATE:
			case VACUUM:
			case VALUES:
			case CALL:
			case IMPORT_P:
			case END_P:
			case LOOP:
			case MetaCommand:
				EnterOuterAlt(_localctx, 3);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UpdatestmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Opt_with_clauseContext opt_with_clause() {
			return GetRuleContext<Opt_with_clauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UPDATE() { return GetToken(PostgreSQLParser.UPDATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Relation_expr_opt_aliasContext relation_expr_opt_alias() {
			return GetRuleContext<Relation_expr_opt_aliasContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SET() { return GetToken(PostgreSQLParser.SET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Set_clause_listContext set_clause_list() {
			return GetRuleContext<Set_clause_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public From_clauseContext from_clause() {
			return GetRuleContext<From_clauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Where_or_current_clauseContext where_or_current_clause() {
			return GetRuleContext<Where_or_current_clauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Returning_clauseContext returning_clause() {
			return GetRuleContext<Returning_clauseContext>(0);
		}
		public UpdatestmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_updatestmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterUpdatestmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitUpdatestmt(this);
		}
	}

	[RuleVersion(0)]
	public UpdatestmtContext updatestmt() {
		UpdatestmtContext _localctx = new UpdatestmtContext(Context, State);
		EnterRule(_localctx, 942, RULE_updatestmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7859;
			opt_with_clause();
			State = 7860;
			Match(UPDATE);
			State = 7861;
			relation_expr_opt_alias();
			State = 7862;
			Match(SET);
			State = 7863;
			set_clause_list();
			State = 7864;
			from_clause();
			State = 7865;
			where_or_current_clause();
			State = 7866;
			returning_clause();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Set_clause_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Set_clauseContext[] set_clause() {
			return GetRuleContexts<Set_clauseContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Set_clauseContext set_clause(int i) {
			return GetRuleContext<Set_clauseContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(PostgreSQLParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(PostgreSQLParser.COMMA, i);
		}
		public Set_clause_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_set_clause_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterSet_clause_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitSet_clause_list(this);
		}
	}

	[RuleVersion(0)]
	public Set_clause_listContext set_clause_list() {
		Set_clause_listContext _localctx = new Set_clause_listContext(Context, State);
		EnterRule(_localctx, 944, RULE_set_clause_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7868;
			set_clause();
			State = 7873;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 7869;
				Match(COMMA);
				State = 7870;
				set_clause();
				}
				}
				State = 7875;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Set_clauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Set_targetContext set_target() {
			return GetRuleContext<Set_targetContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL() { return GetToken(PostgreSQLParser.EQUAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public A_exprContext a_expr() {
			return GetRuleContext<A_exprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAREN() { return GetToken(PostgreSQLParser.OPEN_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Set_target_listContext set_target_list() {
			return GetRuleContext<Set_target_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAREN() { return GetToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public Set_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_set_clause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterSet_clause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitSet_clause(this);
		}
	}

	[RuleVersion(0)]
	public Set_clauseContext set_clause() {
		Set_clauseContext _localctx = new Set_clauseContext(Context, State);
		EnterRule(_localctx, 946, RULE_set_clause);
		try {
			State = 7886;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case AND:
			case ARRAY:
			case COLLATE:
			case COLUMN:
			case CONSTRAINT:
			case DEFAULT:
			case DO:
			case FETCH:
			case TABLE:
			case IS:
			case LEFT:
			case OUTER_P:
			case OVER:
			case RIGHT:
			case ABORT_P:
			case ABSOLUTE_P:
			case ACCESS:
			case ACTION:
			case ADD_P:
			case ADMIN:
			case AFTER:
			case AGGREGATE:
			case ALSO:
			case ALTER:
			case ALWAYS:
			case ASSERTION:
			case ASSIGNMENT:
			case AT:
			case ATTRIBUTE:
			case BACKWARD:
			case BEFORE:
			case BEGIN_P:
			case BY:
			case CACHE:
			case CALLED:
			case CASCADE:
			case CASCADED:
			case CATALOG:
			case CHAIN:
			case CHARACTERISTICS:
			case CHECKPOINT:
			case CLASS:
			case CLOSE:
			case CLUSTER:
			case COMMENT:
			case COMMENTS:
			case COMMIT:
			case COMMITTED:
			case CONFIGURATION:
			case CONNECTION:
			case CONSTRAINTS:
			case CONTENT_P:
			case CONTINUE_P:
			case CONVERSION_P:
			case COPY:
			case COST:
			case CSV:
			case CURSOR:
			case CYCLE:
			case DATA_P:
			case DATABASE:
			case DAY_P:
			case DEALLOCATE:
			case DECLARE:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE_P:
			case DELIMITER:
			case DELIMITERS:
			case DICTIONARY:
			case DISABLE_P:
			case DISCARD:
			case DOCUMENT_P:
			case DOMAIN_P:
			case DOUBLE_P:
			case DROP:
			case EACH:
			case ENABLE_P:
			case ENCODING:
			case ENCRYPTED:
			case ENUM_P:
			case ESCAPE:
			case EVENT:
			case EXCLUDE:
			case EXCLUDING:
			case EXCLUSIVE:
			case EXECUTE:
			case EXPLAIN:
			case EXTENSION:
			case EXTERNAL:
			case FAMILY:
			case FIRST_P:
			case FOLLOWING:
			case FORCE:
			case FORWARD:
			case FUNCTION:
			case FUNCTIONS:
			case GLOBAL:
			case GRANTED:
			case HANDLER:
			case HEADER_P:
			case HOLD:
			case HOUR_P:
			case IDENTITY_P:
			case IF_P:
			case IMMEDIATE:
			case IMMUTABLE:
			case IMPLICIT_P:
			case INCLUDING:
			case INCREMENT:
			case INDEX:
			case INDEXES:
			case INHERIT:
			case INHERITS:
			case INLINE_P:
			case INSENSITIVE:
			case INSERT:
			case INSTEAD:
			case INVOKER:
			case ISOLATION:
			case KEY:
			case LABEL:
			case LANGUAGE:
			case LARGE_P:
			case LAST_P:
			case LEAKPROOF:
			case LEVEL:
			case LISTEN:
			case LOAD:
			case LOCAL:
			case LOCATION:
			case LOCK_P:
			case MAPPING:
			case MATCH:
			case MATERIALIZED:
			case MAXVALUE:
			case MINUTE_P:
			case MINVALUE:
			case MODE:
			case MONTH_P:
			case MOVE:
			case NAME_P:
			case NAMES:
			case NEXT:
			case NO:
			case NOTHING:
			case NOTIFY:
			case NOWAIT:
			case NULLS_P:
			case OBJECT_P:
			case OF:
			case OFF:
			case OIDS:
			case OPERATOR:
			case OPTION:
			case OPTIONS:
			case OWNED:
			case OWNER:
			case PARSER:
			case PARTIAL:
			case PARTITION:
			case PASSING:
			case PASSWORD:
			case PLANS:
			case PRECEDING:
			case PREPARE:
			case PREPARED:
			case PRESERVE:
			case PRIOR:
			case PRIVILEGES:
			case PROCEDURAL:
			case PROCEDURE:
			case PROGRAM:
			case QUOTE:
			case RANGE:
			case READ:
			case REASSIGN:
			case RECHECK:
			case RECURSIVE:
			case REF:
			case REFRESH:
			case REINDEX:
			case RELATIVE_P:
			case RELEASE:
			case RENAME:
			case REPEATABLE:
			case REPLACE:
			case REPLICA:
			case RESET:
			case RESTART:
			case RESTRICT:
			case RETURNS:
			case REVOKE:
			case ROLE:
			case ROLLBACK:
			case ROWS:
			case RULE:
			case SAVEPOINT:
			case SCHEMA:
			case SCROLL:
			case SEARCH:
			case SECOND_P:
			case SECURITY:
			case SEQUENCE:
			case SEQUENCES:
			case SERIALIZABLE:
			case SERVER:
			case SESSION:
			case SET:
			case SHARE:
			case SHOW:
			case SIMPLE:
			case SNAPSHOT:
			case STABLE:
			case STANDALONE_P:
			case START:
			case STATEMENT:
			case STATISTICS:
			case STDIN:
			case STDOUT:
			case STORAGE:
			case STRICT_P:
			case STRIP_P:
			case SYSID:
			case SYSTEM_P:
			case TABLES:
			case TABLESPACE:
			case TEMP:
			case TEMPLATE:
			case TEMPORARY:
			case TEXT_P:
			case TRANSACTION:
			case TRIGGER:
			case TRUNCATE:
			case TRUSTED:
			case TYPE_P:
			case TYPES_P:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNENCRYPTED:
			case UNKNOWN:
			case UNLISTEN:
			case UNLOGGED:
			case UNTIL:
			case UPDATE:
			case VACUUM:
			case VALID:
			case VALIDATE:
			case VALIDATOR:
			case VARYING:
			case VERSION_P:
			case VIEW:
			case VOLATILE:
			case WHITESPACE_P:
			case WITHOUT:
			case WORK:
			case WRAPPER:
			case WRITE:
			case XML_P:
			case YEAR_P:
			case YES_P:
			case ZONE:
			case BETWEEN:
			case BIGINT:
			case BIT:
			case BOOLEAN_P:
			case CHAR_P:
			case CHARACTER:
			case COALESCE:
			case DEC:
			case DECIMAL_P:
			case EXISTS:
			case EXTRACT:
			case FLOAT_P:
			case GREATEST:
			case INOUT:
			case INT_P:
			case INTEGER:
			case INTERVAL:
			case LEAST:
			case NATIONAL:
			case NCHAR:
			case NONE:
			case NULLIF:
			case NUMERIC:
			case OVERLAY:
			case POSITION:
			case PRECISION:
			case REAL:
			case ROW:
			case SETOF:
			case SMALLINT:
			case SUBSTRING:
			case TIME:
			case TIMESTAMP:
			case TREAT:
			case TRIM:
			case VALUES:
			case VARCHAR:
			case XMLATTRIBUTES:
			case XMLCOMMENT:
			case XMLAGG:
			case XML_IS_WELL_FORMED:
			case XML_IS_WELL_FORMED_DOCUMENT:
			case XML_IS_WELL_FORMED_CONTENT:
			case XPATH:
			case XPATH_EXISTS:
			case XMLCONCAT:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLPARSE:
			case XMLPI:
			case XMLROOT:
			case XMLSERIALIZE:
			case CALL:
			case CURRENT_P:
			case ATTACH:
			case DETACH:
			case EXPRESSION:
			case GENERATED:
			case LOGGED:
			case STORED:
			case INCLUDE:
			case ROUTINE:
			case TRANSFORM:
			case IMPORT_P:
			case POLICY:
			case METHOD:
			case REFERENCING:
			case NEW:
			case OLD:
			case VALUE_P:
			case SUBSCRIPTION:
			case PUBLICATION:
			case OUT_P:
			case ROUTINES:
			case SCHEMAS:
			case PROCEDURES:
			case INPUT_P:
			case SUPPORT:
			case PARALLEL:
			case SQL_P:
			case DEPENDS:
			case OVERRIDING:
			case CONFLICT:
			case SKIP_P:
			case LOCKED:
			case TIES:
			case ROLLUP:
			case CUBE:
			case GROUPING:
			case SETS:
			case ORDINALITY:
			case XMLTABLE:
			case COLUMNS:
			case XMLNAMESPACES:
			case ROWTYPE:
			case NORMALIZED:
			case WITHIN:
			case FILTER:
			case GROUPS:
			case OTHERS:
			case NFC:
			case NFD:
			case NFKC:
			case NFKD:
			case UESCAPE:
			case VIEWS:
			case NORMALIZE:
			case DUMP:
			case PRINT_STRICT_PARAMS:
			case VARIABLE_CONFLICT:
			case ERROR:
			case USE_VARIABLE:
			case USE_COLUMN:
			case ALIAS:
			case CONSTANT:
			case PERFORM:
			case GET:
			case DIAGNOSTICS:
			case STACKED:
			case ELSIF:
			case REVERSE:
			case SLICE:
			case EXIT:
			case RETURN:
			case QUERY:
			case RAISE:
			case SQLSTATE:
			case DEBUG:
			case LOG:
			case INFO:
			case NOTICE:
			case WARNING:
			case EXCEPTION:
			case ASSERT:
			case OPEN:
			case ABS:
			case CBRT:
			case CEIL:
			case CEILING:
			case DEGREES:
			case DIV:
			case EXP:
			case FACTORIAL:
			case FLOOR:
			case GCD:
			case LCM:
			case LN:
			case LOG10:
			case MIN_SCALE:
			case MOD:
			case PI:
			case POWER:
			case RADIANS:
			case ROUND:
			case SCALE:
			case SIGN:
			case SQRT:
			case TRIM_SCALE:
			case TRUNC:
			case WIDTH_BUCKET:
			case RANDOM:
			case SETSEED:
			case ACOS:
			case ACOSD:
			case ASIN:
			case ASIND:
			case ATAN:
			case ATAND:
			case ATAN2:
			case ATAN2D:
			case COS:
			case COSD:
			case COT:
			case COTD:
			case SIN:
			case SIND:
			case TAN:
			case TAND:
			case SINH:
			case COSH:
			case TANH:
			case ASINH:
			case ACOSH:
			case ATANH:
			case BIT_LENGTH:
			case CHAR_LENGTH:
			case CHARACTER_LENGTH:
			case LOWER:
			case OCTET_LENGTH:
			case UPPER:
			case ASCII:
			case BTRIM:
			case CHR:
			case CONCAT:
			case CONCAT_WS:
			case FORMAT:
			case INITCAP:
			case LENGTH:
			case LPAD:
			case LTRIM:
			case MD5:
			case PARSE_IDENT:
			case PG_CLIENT_ENCODING:
			case QUOTE_IDENT:
			case QUOTE_LITERAL:
			case QUOTE_NULLABLE:
			case REGEXP_COUNT:
			case REGEXP_INSTR:
			case REGEXP_LIKE:
			case REGEXP_MATCH:
			case REGEXP_MATCHES:
			case REGEXP_REPLACE:
			case REGEXP_SPLIT_TO_ARRAY:
			case REGEXP_SPLIT_TO_TABLE:
			case REGEXP_SUBSTR:
			case REPEAT:
			case RPAD:
			case RTRIM:
			case SPLIT_PART:
			case STARTS_WITH:
			case STRING_TO_ARRAY:
			case STRING_TO_TABLE:
			case STRPOS:
			case SUBSTR:
			case TO_ASCII:
			case TO_HEX:
			case TRANSLATE:
			case UNISTR:
			case AGE:
			case CLOCK_TIMESTAMP:
			case DATE_BIN:
			case DATE_PART:
			case DATE_TRUNC:
			case ISFINITE:
			case JUSTIFY_DAYS:
			case JUSTIFY_HOURS:
			case JUSTIFY_INTERVAL:
			case MAKE_DATE:
			case MAKE_INTERVAL:
			case MAKE_TIME:
			case MAKE_TIMESTAMP:
			case MAKE_TIMESTAMPTZ:
			case NOW:
			case STATEMENT_TIMESTAMP:
			case TIMEOFDAY:
			case TRANSACTION_TIMESTAMP:
			case TO_TIMESTAMP:
			case TO_CHAR:
			case TO_DATE:
			case TO_NUMBER:
			case Identifier:
			case QuotedIdentifier:
			case UnicodeQuotedIdentifier:
			case PLSQLVARIABLENAME:
			case PLSQLIDENTIFIER:
				EnterOuterAlt(_localctx, 1);
				{
				State = 7876;
				set_target();
				State = 7877;
				Match(EQUAL);
				State = 7878;
				a_expr();
				}
				break;
			case OPEN_PAREN:
				EnterOuterAlt(_localctx, 2);
				{
				State = 7880;
				Match(OPEN_PAREN);
				State = 7881;
				set_target_list();
				State = 7882;
				Match(CLOSE_PAREN);
				State = 7883;
				Match(EQUAL);
				State = 7884;
				a_expr();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Set_targetContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ColidContext colid() {
			return GetRuleContext<ColidContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Opt_indirectionContext opt_indirection() {
			return GetRuleContext<Opt_indirectionContext>(0);
		}
		public Set_targetContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_set_target; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterSet_target(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitSet_target(this);
		}
	}

	[RuleVersion(0)]
	public Set_targetContext set_target() {
		Set_targetContext _localctx = new Set_targetContext(Context, State);
		EnterRule(_localctx, 948, RULE_set_target);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7888;
			colid();
			State = 7889;
			opt_indirection();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Set_target_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Set_targetContext[] set_target() {
			return GetRuleContexts<Set_targetContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Set_targetContext set_target(int i) {
			return GetRuleContext<Set_targetContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(PostgreSQLParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(PostgreSQLParser.COMMA, i);
		}
		public Set_target_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_set_target_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterSet_target_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitSet_target_list(this);
		}
	}

	[RuleVersion(0)]
	public Set_target_listContext set_target_list() {
		Set_target_listContext _localctx = new Set_target_listContext(Context, State);
		EnterRule(_localctx, 950, RULE_set_target_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7891;
			set_target();
			State = 7896;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 7892;
				Match(COMMA);
				State = 7893;
				set_target();
				}
				}
				State = 7898;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeclarecursorstmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DECLARE() { return GetToken(PostgreSQLParser.DECLARE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Cursor_nameContext cursor_name() {
			return GetRuleContext<Cursor_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Cursor_optionsContext cursor_options() {
			return GetRuleContext<Cursor_optionsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CURSOR() { return GetToken(PostgreSQLParser.CURSOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Opt_holdContext opt_hold() {
			return GetRuleContext<Opt_holdContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOR() { return GetToken(PostgreSQLParser.FOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SelectstmtContext selectstmt() {
			return GetRuleContext<SelectstmtContext>(0);
		}
		public DeclarecursorstmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_declarecursorstmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterDeclarecursorstmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitDeclarecursorstmt(this);
		}
	}

	[RuleVersion(0)]
	public DeclarecursorstmtContext declarecursorstmt() {
		DeclarecursorstmtContext _localctx = new DeclarecursorstmtContext(Context, State);
		EnterRule(_localctx, 952, RULE_declarecursorstmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7899;
			Match(DECLARE);
			State = 7900;
			cursor_name();
			State = 7901;
			cursor_options();
			State = 7902;
			Match(CURSOR);
			State = 7903;
			opt_hold();
			State = 7904;
			Match(FOR);
			State = 7905;
			selectstmt();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Cursor_nameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		public Cursor_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_cursor_name; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterCursor_name(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitCursor_name(this);
		}
	}

	[RuleVersion(0)]
	public Cursor_nameContext cursor_name() {
		Cursor_nameContext _localctx = new Cursor_nameContext(Context, State);
		EnterRule(_localctx, 954, RULE_cursor_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7907;
			name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Cursor_optionsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NO() { return GetTokens(PostgreSQLParser.NO); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NO(int i) {
			return GetToken(PostgreSQLParser.NO, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SCROLL() { return GetTokens(PostgreSQLParser.SCROLL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SCROLL(int i) {
			return GetToken(PostgreSQLParser.SCROLL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] BINARY() { return GetTokens(PostgreSQLParser.BINARY); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BINARY(int i) {
			return GetToken(PostgreSQLParser.BINARY, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] INSENSITIVE() { return GetTokens(PostgreSQLParser.INSENSITIVE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INSENSITIVE(int i) {
			return GetToken(PostgreSQLParser.INSENSITIVE, i);
		}
		public Cursor_optionsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_cursor_options; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterCursor_options(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitCursor_options(this);
		}
	}

	[RuleVersion(0)]
	public Cursor_optionsContext cursor_options() {
		Cursor_optionsContext _localctx = new Cursor_optionsContext(Context, State);
		EnterRule(_localctx, 956, RULE_cursor_options);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7916;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==BINARY || _la==INSENSITIVE || _la==NO || _la==SCROLL) {
				{
				State = 7914;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case NO:
					{
					State = 7909;
					Match(NO);
					State = 7910;
					Match(SCROLL);
					}
					break;
				case SCROLL:
					{
					State = 7911;
					Match(SCROLL);
					}
					break;
				case BINARY:
					{
					State = 7912;
					Match(BINARY);
					}
					break;
				case INSENSITIVE:
					{
					State = 7913;
					Match(INSENSITIVE);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				State = 7918;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Opt_holdContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WITH() { return GetToken(PostgreSQLParser.WITH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HOLD() { return GetToken(PostgreSQLParser.HOLD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WITHOUT() { return GetToken(PostgreSQLParser.WITHOUT, 0); }
		public Opt_holdContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_opt_hold; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterOpt_hold(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitOpt_hold(this);
		}
	}

	[RuleVersion(0)]
	public Opt_holdContext opt_hold() {
		Opt_holdContext _localctx = new Opt_holdContext(Context, State);
		EnterRule(_localctx, 958, RULE_opt_hold);
		try {
			State = 7924;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case FOR:
				EnterOuterAlt(_localctx, 1);
				{
				}
				break;
			case WITH:
				EnterOuterAlt(_localctx, 2);
				{
				State = 7920;
				Match(WITH);
				State = 7921;
				Match(HOLD);
				}
				break;
			case WITHOUT:
				EnterOuterAlt(_localctx, 3);
				{
				State = 7922;
				Match(WITHOUT);
				State = 7923;
				Match(HOLD);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SelectstmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Select_no_parensContext select_no_parens() {
			return GetRuleContext<Select_no_parensContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Select_with_parensContext select_with_parens() {
			return GetRuleContext<Select_with_parensContext>(0);
		}
		public SelectstmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_selectstmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterSelectstmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitSelectstmt(this);
		}
	}

	[RuleVersion(0)]
	public SelectstmtContext selectstmt() {
		SelectstmtContext _localctx = new SelectstmtContext(Context, State);
		EnterRule(_localctx, 960, RULE_selectstmt);
		try {
			State = 7928;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,416,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 7926;
				select_no_parens();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 7927;
				select_with_parens();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Select_with_parensContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAREN() { return GetToken(PostgreSQLParser.OPEN_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Select_no_parensContext select_no_parens() {
			return GetRuleContext<Select_no_parensContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAREN() { return GetToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Select_with_parensContext select_with_parens() {
			return GetRuleContext<Select_with_parensContext>(0);
		}
		public Select_with_parensContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_select_with_parens; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterSelect_with_parens(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitSelect_with_parens(this);
		}
	}

	[RuleVersion(0)]
	public Select_with_parensContext select_with_parens() {
		Select_with_parensContext _localctx = new Select_with_parensContext(Context, State);
		EnterRule(_localctx, 962, RULE_select_with_parens);
		try {
			State = 7938;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,417,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 7930;
				Match(OPEN_PAREN);
				State = 7931;
				select_no_parens();
				State = 7932;
				Match(CLOSE_PAREN);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 7934;
				Match(OPEN_PAREN);
				State = 7935;
				select_with_parens();
				State = 7936;
				Match(CLOSE_PAREN);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Select_no_parensContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Select_clauseContext select_clause() {
			return GetRuleContext<Select_clauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Opt_sort_clauseContext opt_sort_clause() {
			return GetRuleContext<Opt_sort_clauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public For_locking_clauseContext for_locking_clause() {
			return GetRuleContext<For_locking_clauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Opt_select_limitContext opt_select_limit() {
			return GetRuleContext<Opt_select_limitContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Select_limitContext select_limit() {
			return GetRuleContext<Select_limitContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Opt_for_locking_clauseContext opt_for_locking_clause() {
			return GetRuleContext<Opt_for_locking_clauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public With_clauseContext with_clause() {
			return GetRuleContext<With_clauseContext>(0);
		}
		public Select_no_parensContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_select_no_parens; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterSelect_no_parens(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitSelect_no_parens(this);
		}
	}

	[RuleVersion(0)]
	public Select_no_parensContext select_no_parens() {
		Select_no_parensContext _localctx = new Select_no_parensContext(Context, State);
		EnterRule(_localctx, 964, RULE_select_no_parens);
		try {
			State = 7961;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case OPEN_PAREN:
			case SELECT:
			case TABLE:
			case VALUES:
				EnterOuterAlt(_localctx, 1);
				{
				State = 7940;
				select_clause();
				State = 7941;
				opt_sort_clause();
				State = 7948;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,418,Context) ) {
				case 1:
					{
					State = 7942;
					for_locking_clause();
					State = 7943;
					opt_select_limit();
					}
					break;
				case 2:
					{
					State = 7945;
					select_limit();
					State = 7946;
					opt_for_locking_clause();
					}
					break;
				}
				}
				break;
			case WITH:
				EnterOuterAlt(_localctx, 2);
				{
				State = 7950;
				with_clause();
				State = 7951;
				select_clause();
				State = 7952;
				opt_sort_clause();
				State = 7959;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,419,Context) ) {
				case 1:
					{
					State = 7953;
					for_locking_clause();
					State = 7954;
					opt_select_limit();
					}
					break;
				case 2:
					{
					State = 7956;
					select_limit();
					State = 7957;
					opt_for_locking_clause();
					}
					break;
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Select_clauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Simple_select_intersectContext[] simple_select_intersect() {
			return GetRuleContexts<Simple_select_intersectContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Simple_select_intersectContext simple_select_intersect(int i) {
			return GetRuleContext<Simple_select_intersectContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public All_or_distinctContext[] all_or_distinct() {
			return GetRuleContexts<All_or_distinctContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public All_or_distinctContext all_or_distinct(int i) {
			return GetRuleContext<All_or_distinctContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] UNION() { return GetTokens(PostgreSQLParser.UNION); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNION(int i) {
			return GetToken(PostgreSQLParser.UNION, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] EXCEPT() { return GetTokens(PostgreSQLParser.EXCEPT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXCEPT(int i) {
			return GetToken(PostgreSQLParser.EXCEPT, i);
		}
		public Select_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_select_clause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterSelect_clause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitSelect_clause(this);
		}
	}

	[RuleVersion(0)]
	public Select_clauseContext select_clause() {
		Select_clauseContext _localctx = new Select_clauseContext(Context, State);
		EnterRule(_localctx, 966, RULE_select_clause);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7963;
			simple_select_intersect();
			State = 7970;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==EXCEPT || _la==UNION) {
				{
				{
				State = 7964;
				_la = TokenStream.LA(1);
				if ( !(_la==EXCEPT || _la==UNION) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 7965;
				all_or_distinct();
				State = 7966;
				simple_select_intersect();
				}
				}
				State = 7972;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Simple_select_intersectContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Simple_select_pramaryContext[] simple_select_pramary() {
			return GetRuleContexts<Simple_select_pramaryContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Simple_select_pramaryContext simple_select_pramary(int i) {
			return GetRuleContext<Simple_select_pramaryContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] INTERSECT() { return GetTokens(PostgreSQLParser.INTERSECT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTERSECT(int i) {
			return GetToken(PostgreSQLParser.INTERSECT, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public All_or_distinctContext[] all_or_distinct() {
			return GetRuleContexts<All_or_distinctContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public All_or_distinctContext all_or_distinct(int i) {
			return GetRuleContext<All_or_distinctContext>(i);
		}
		public Simple_select_intersectContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_simple_select_intersect; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterSimple_select_intersect(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitSimple_select_intersect(this);
		}
	}

	[RuleVersion(0)]
	public Simple_select_intersectContext simple_select_intersect() {
		Simple_select_intersectContext _localctx = new Simple_select_intersectContext(Context, State);
		EnterRule(_localctx, 968, RULE_simple_select_intersect);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7973;
			simple_select_pramary();
			State = 7980;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==INTERSECT) {
				{
				{
				State = 7974;
				Match(INTERSECT);
				State = 7975;
				all_or_distinct();
				State = 7976;
				simple_select_pramary();
				}
				}
				State = 7982;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Simple_select_pramaryContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SELECT() { return GetToken(PostgreSQLParser.SELECT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Into_clauseContext[] into_clause() {
			return GetRuleContexts<Into_clauseContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Into_clauseContext into_clause(int i) {
			return GetRuleContext<Into_clauseContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public From_clauseContext from_clause() {
			return GetRuleContext<From_clauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Where_clauseContext where_clause() {
			return GetRuleContext<Where_clauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Group_clauseContext group_clause() {
			return GetRuleContext<Group_clauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Having_clauseContext having_clause() {
			return GetRuleContext<Having_clauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Window_clauseContext window_clause() {
			return GetRuleContext<Window_clauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Opt_all_clauseContext opt_all_clause() {
			return GetRuleContext<Opt_all_clauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Opt_target_listContext opt_target_list() {
			return GetRuleContext<Opt_target_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Distinct_clauseContext distinct_clause() {
			return GetRuleContext<Distinct_clauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Target_listContext target_list() {
			return GetRuleContext<Target_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Values_clauseContext values_clause() {
			return GetRuleContext<Values_clauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLE() { return GetToken(PostgreSQLParser.TABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Relation_exprContext relation_expr() {
			return GetRuleContext<Relation_exprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Select_with_parensContext select_with_parens() {
			return GetRuleContext<Select_with_parensContext>(0);
		}
		public Simple_select_pramaryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_simple_select_pramary; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterSimple_select_pramary(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitSimple_select_pramary(this);
		}
	}

	[RuleVersion(0)]
	public Simple_select_pramaryContext simple_select_pramary() {
		Simple_select_pramaryContext _localctx = new Simple_select_pramaryContext(Context, State);
		EnterRule(_localctx, 970, RULE_simple_select_pramary);
		try {
			State = 8004;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case SELECT:
				EnterOuterAlt(_localctx, 1);
				{
				{
				State = 7983;
				Match(SELECT);
				State = 7991;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case Eof:
				case OPEN_PAREN:
				case CLOSE_PAREN:
				case SEMI:
				case STAR:
				case PLUS:
				case MINUS:
				case PARAM:
				case Operator:
				case ALL:
				case ANALYSE:
				case ANALYZE:
				case AND:
				case ARRAY:
				case CASE:
				case CAST:
				case COLLATE:
				case COLUMN:
				case CONSTRAINT:
				case CREATE:
				case CURRENT_CATALOG:
				case CURRENT_DATE:
				case CURRENT_ROLE:
				case CURRENT_TIME:
				case CURRENT_TIMESTAMP:
				case CURRENT_USER:
				case DEFAULT:
				case DO:
				case EXCEPT:
				case FALSE_P:
				case FETCH:
				case FOR:
				case FROM:
				case GRANT:
				case GROUP_P:
				case HAVING:
				case INTERSECT:
				case INTO:
				case LIMIT:
				case LOCALTIME:
				case LOCALTIMESTAMP:
				case NOT:
				case NULL_P:
				case OFFSET:
				case ON:
				case ORDER:
				case RETURNING:
				case SELECT:
				case SESSION_USER:
				case TABLE:
				case TRUE_P:
				case UNION:
				case UNIQUE:
				case USER:
				case WHERE:
				case WINDOW:
				case WITH:
				case AUTHORIZATION:
				case BINARY:
				case COLLATION:
				case CONCURRENTLY:
				case CROSS:
				case CURRENT_SCHEMA:
				case FREEZE:
				case FULL:
				case ILIKE:
				case INNER_P:
				case IS:
				case ISNULL:
				case JOIN:
				case LEFT:
				case LIKE:
				case NATURAL:
				case NOTNULL:
				case OUTER_P:
				case OVER:
				case OVERLAPS:
				case RIGHT:
				case SIMILAR:
				case VERBOSE:
				case ABORT_P:
				case ABSOLUTE_P:
				case ACCESS:
				case ACTION:
				case ADD_P:
				case ADMIN:
				case AFTER:
				case AGGREGATE:
				case ALSO:
				case ALTER:
				case ALWAYS:
				case ASSERTION:
				case ASSIGNMENT:
				case AT:
				case ATTRIBUTE:
				case BACKWARD:
				case BEFORE:
				case BEGIN_P:
				case BY:
				case CACHE:
				case CALLED:
				case CASCADE:
				case CASCADED:
				case CATALOG:
				case CHAIN:
				case CHARACTERISTICS:
				case CHECKPOINT:
				case CLASS:
				case CLOSE:
				case CLUSTER:
				case COMMENT:
				case COMMENTS:
				case COMMIT:
				case COMMITTED:
				case CONFIGURATION:
				case CONNECTION:
				case CONSTRAINTS:
				case CONTENT_P:
				case CONTINUE_P:
				case CONVERSION_P:
				case COPY:
				case COST:
				case CSV:
				case CURSOR:
				case CYCLE:
				case DATA_P:
				case DATABASE:
				case DAY_P:
				case DEALLOCATE:
				case DECLARE:
				case DEFAULTS:
				case DEFERRED:
				case DEFINER:
				case DELETE_P:
				case DELIMITER:
				case DELIMITERS:
				case DICTIONARY:
				case DISABLE_P:
				case DISCARD:
				case DOCUMENT_P:
				case DOMAIN_P:
				case DOUBLE_P:
				case DROP:
				case EACH:
				case ENABLE_P:
				case ENCODING:
				case ENCRYPTED:
				case ENUM_P:
				case ESCAPE:
				case EVENT:
				case EXCLUDE:
				case EXCLUDING:
				case EXCLUSIVE:
				case EXECUTE:
				case EXPLAIN:
				case EXTENSION:
				case EXTERNAL:
				case FAMILY:
				case FIRST_P:
				case FOLLOWING:
				case FORCE:
				case FORWARD:
				case FUNCTION:
				case FUNCTIONS:
				case GLOBAL:
				case GRANTED:
				case HANDLER:
				case HEADER_P:
				case HOLD:
				case HOUR_P:
				case IDENTITY_P:
				case IF_P:
				case IMMEDIATE:
				case IMMUTABLE:
				case IMPLICIT_P:
				case INCLUDING:
				case INCREMENT:
				case INDEX:
				case INDEXES:
				case INHERIT:
				case INHERITS:
				case INLINE_P:
				case INSENSITIVE:
				case INSERT:
				case INSTEAD:
				case INVOKER:
				case ISOLATION:
				case KEY:
				case LABEL:
				case LANGUAGE:
				case LARGE_P:
				case LAST_P:
				case LEAKPROOF:
				case LEVEL:
				case LISTEN:
				case LOAD:
				case LOCAL:
				case LOCATION:
				case LOCK_P:
				case MAPPING:
				case MATCH:
				case MATERIALIZED:
				case MAXVALUE:
				case MERGE:
				case MINUTE_P:
				case MINVALUE:
				case MODE:
				case MONTH_P:
				case MOVE:
				case NAME_P:
				case NAMES:
				case NEXT:
				case NO:
				case NOTHING:
				case NOTIFY:
				case NOWAIT:
				case NULLS_P:
				case OBJECT_P:
				case OF:
				case OFF:
				case OIDS:
				case OPERATOR:
				case OPTION:
				case OPTIONS:
				case OWNED:
				case OWNER:
				case PARSER:
				case PARTIAL:
				case PARTITION:
				case PASSING:
				case PASSWORD:
				case PLANS:
				case PRECEDING:
				case PREPARE:
				case PREPARED:
				case PRESERVE:
				case PRIOR:
				case PRIVILEGES:
				case PROCEDURAL:
				case PROCEDURE:
				case PROGRAM:
				case QUOTE:
				case RANGE:
				case READ:
				case REASSIGN:
				case RECHECK:
				case RECURSIVE:
				case REF:
				case REFRESH:
				case REINDEX:
				case RELATIVE_P:
				case RELEASE:
				case RENAME:
				case REPEATABLE:
				case REPLACE:
				case REPLICA:
				case RESET:
				case RESTART:
				case RESTRICT:
				case RETURNS:
				case REVOKE:
				case ROLE:
				case ROLLBACK:
				case ROWS:
				case RULE:
				case SAVEPOINT:
				case SCHEMA:
				case SCROLL:
				case SEARCH:
				case SECOND_P:
				case SECURITY:
				case SEQUENCE:
				case SEQUENCES:
				case SERIALIZABLE:
				case SERVER:
				case SESSION:
				case SET:
				case SHARE:
				case SHOW:
				case SIMPLE:
				case SNAPSHOT:
				case STABLE:
				case STANDALONE_P:
				case START:
				case STATEMENT:
				case STATISTICS:
				case STDIN:
				case STDOUT:
				case STORAGE:
				case STRICT_P:
				case STRIP_P:
				case SYSID:
				case SYSTEM_P:
				case TABLES:
				case TABLESPACE:
				case TEMP:
				case TEMPLATE:
				case TEMPORARY:
				case TEXT_P:
				case TRANSACTION:
				case TRIGGER:
				case TRUNCATE:
				case TRUSTED:
				case TYPE_P:
				case TYPES_P:
				case UNBOUNDED:
				case UNCOMMITTED:
				case UNENCRYPTED:
				case UNKNOWN:
				case UNLISTEN:
				case UNLOGGED:
				case UNTIL:
				case UPDATE:
				case VACUUM:
				case VALID:
				case VALIDATE:
				case VALIDATOR:
				case VARYING:
				case VERSION_P:
				case VIEW:
				case VOLATILE:
				case WHITESPACE_P:
				case WITHOUT:
				case WORK:
				case WRAPPER:
				case WRITE:
				case XML_P:
				case YEAR_P:
				case YES_P:
				case ZONE:
				case BETWEEN:
				case BIGINT:
				case BIT:
				case BOOLEAN_P:
				case CHAR_P:
				case CHARACTER:
				case COALESCE:
				case DEC:
				case DECIMAL_P:
				case EXISTS:
				case EXTRACT:
				case FLOAT_P:
				case GREATEST:
				case INOUT:
				case INT_P:
				case INTEGER:
				case INTERVAL:
				case LEAST:
				case NATIONAL:
				case NCHAR:
				case NONE:
				case NULLIF:
				case NUMERIC:
				case OVERLAY:
				case POSITION:
				case PRECISION:
				case REAL:
				case ROW:
				case SETOF:
				case SMALLINT:
				case SUBSTRING:
				case TIME:
				case TIMESTAMP:
				case TREAT:
				case TRIM:
				case VALUES:
				case VARCHAR:
				case XMLATTRIBUTES:
				case XMLCOMMENT:
				case XMLAGG:
				case XML_IS_WELL_FORMED:
				case XML_IS_WELL_FORMED_DOCUMENT:
				case XML_IS_WELL_FORMED_CONTENT:
				case XPATH:
				case XPATH_EXISTS:
				case XMLCONCAT:
				case XMLELEMENT:
				case XMLEXISTS:
				case XMLFOREST:
				case XMLPARSE:
				case XMLPI:
				case XMLROOT:
				case XMLSERIALIZE:
				case CALL:
				case CURRENT_P:
				case ATTACH:
				case DETACH:
				case EXPRESSION:
				case GENERATED:
				case LOGGED:
				case STORED:
				case INCLUDE:
				case ROUTINE:
				case TRANSFORM:
				case IMPORT_P:
				case POLICY:
				case METHOD:
				case REFERENCING:
				case NEW:
				case OLD:
				case VALUE_P:
				case SUBSCRIPTION:
				case PUBLICATION:
				case OUT_P:
				case END_P:
				case ROUTINES:
				case SCHEMAS:
				case PROCEDURES:
				case INPUT_P:
				case SUPPORT:
				case PARALLEL:
				case SQL_P:
				case DEPENDS:
				case OVERRIDING:
				case CONFLICT:
				case SKIP_P:
				case LOCKED:
				case TIES:
				case ROLLUP:
				case CUBE:
				case GROUPING:
				case SETS:
				case TABLESAMPLE:
				case ORDINALITY:
				case XMLTABLE:
				case COLUMNS:
				case XMLNAMESPACES:
				case ROWTYPE:
				case NORMALIZED:
				case WITHIN:
				case FILTER:
				case GROUPS:
				case OTHERS:
				case NFC:
				case NFD:
				case NFKC:
				case NFKD:
				case UESCAPE:
				case VIEWS:
				case NORMALIZE:
				case DUMP:
				case PRINT_STRICT_PARAMS:
				case VARIABLE_CONFLICT:
				case ERROR:
				case USE_VARIABLE:
				case USE_COLUMN:
				case ALIAS:
				case CONSTANT:
				case PERFORM:
				case GET:
				case DIAGNOSTICS:
				case STACKED:
				case ELSIF:
				case REVERSE:
				case SLICE:
				case EXIT:
				case RETURN:
				case QUERY:
				case RAISE:
				case SQLSTATE:
				case DEBUG:
				case LOG:
				case INFO:
				case NOTICE:
				case WARNING:
				case EXCEPTION:
				case ASSERT:
				case LOOP:
				case OPEN:
				case ABS:
				case CBRT:
				case CEIL:
				case CEILING:
				case DEGREES:
				case DIV:
				case EXP:
				case FACTORIAL:
				case FLOOR:
				case GCD:
				case LCM:
				case LN:
				case LOG10:
				case MIN_SCALE:
				case MOD:
				case PI:
				case POWER:
				case RADIANS:
				case ROUND:
				case SCALE:
				case SIGN:
				case SQRT:
				case TRIM_SCALE:
				case TRUNC:
				case WIDTH_BUCKET:
				case RANDOM:
				case SETSEED:
				case ACOS:
				case ACOSD:
				case ASIN:
				case ASIND:
				case ATAN:
				case ATAND:
				case ATAN2:
				case ATAN2D:
				case COS:
				case COSD:
				case COT:
				case COTD:
				case SIN:
				case SIND:
				case TAN:
				case TAND:
				case SINH:
				case COSH:
				case TANH:
				case ASINH:
				case ACOSH:
				case ATANH:
				case BIT_LENGTH:
				case CHAR_LENGTH:
				case CHARACTER_LENGTH:
				case LOWER:
				case OCTET_LENGTH:
				case UPPER:
				case ASCII:
				case BTRIM:
				case CHR:
				case CONCAT:
				case CONCAT_WS:
				case FORMAT:
				case INITCAP:
				case LENGTH:
				case LPAD:
				case LTRIM:
				case MD5:
				case PARSE_IDENT:
				case PG_CLIENT_ENCODING:
				case QUOTE_IDENT:
				case QUOTE_LITERAL:
				case QUOTE_NULLABLE:
				case REGEXP_COUNT:
				case REGEXP_INSTR:
				case REGEXP_LIKE:
				case REGEXP_MATCH:
				case REGEXP_MATCHES:
				case REGEXP_REPLACE:
				case REGEXP_SPLIT_TO_ARRAY:
				case REGEXP_SPLIT_TO_TABLE:
				case REGEXP_SUBSTR:
				case REPEAT:
				case RPAD:
				case RTRIM:
				case SPLIT_PART:
				case STARTS_WITH:
				case STRING_TO_ARRAY:
				case STRING_TO_TABLE:
				case STRPOS:
				case SUBSTR:
				case TO_ASCII:
				case TO_HEX:
				case TRANSLATE:
				case UNISTR:
				case AGE:
				case CLOCK_TIMESTAMP:
				case DATE_BIN:
				case DATE_PART:
				case DATE_TRUNC:
				case ISFINITE:
				case JUSTIFY_DAYS:
				case JUSTIFY_HOURS:
				case JUSTIFY_INTERVAL:
				case MAKE_DATE:
				case MAKE_INTERVAL:
				case MAKE_TIME:
				case MAKE_TIMESTAMP:
				case MAKE_TIMESTAMPTZ:
				case NOW:
				case STATEMENT_TIMESTAMP:
				case TIMEOFDAY:
				case TRANSACTION_TIMESTAMP:
				case TO_TIMESTAMP:
				case TO_CHAR:
				case TO_DATE:
				case TO_NUMBER:
				case Identifier:
				case QuotedIdentifier:
				case UnicodeQuotedIdentifier:
				case StringConstant:
				case UnicodeEscapeStringConstant:
				case BeginDollarStringConstant:
				case BinaryStringConstant:
				case HexadecimalStringConstant:
				case Integral:
				case Numeric:
				case PLSQLVARIABLENAME:
				case PLSQLIDENTIFIER:
				case MetaCommand:
				case EscapeStringConstant:
					{
					State = 7984;
					opt_all_clause();
					State = 7985;
					into_clause();
					State = 7986;
					opt_target_list();
					}
					break;
				case DISTINCT:
					{
					State = 7988;
					distinct_clause();
					State = 7989;
					target_list();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 7993;
				into_clause();
				State = 7994;
				from_clause();
				State = 7995;
				where_clause();
				State = 7996;
				group_clause();
				State = 7997;
				having_clause();
				State = 7998;
				window_clause();
				}
				}
				break;
			case VALUES:
				EnterOuterAlt(_localctx, 2);
				{
				State = 8000;
				values_clause();
				}
				break;
			case TABLE:
				EnterOuterAlt(_localctx, 3);
				{
				State = 8001;
				Match(TABLE);
				State = 8002;
				relation_expr();
				}
				break;
			case OPEN_PAREN:
				EnterOuterAlt(_localctx, 4);
				{
				State = 8003;
				select_with_parens();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class With_clauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WITH() { return GetToken(PostgreSQLParser.WITH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Cte_listContext cte_list() {
			return GetRuleContext<Cte_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RECURSIVE() { return GetToken(PostgreSQLParser.RECURSIVE, 0); }
		public With_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_with_clause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterWith_clause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitWith_clause(this);
		}
	}

	[RuleVersion(0)]
	public With_clauseContext with_clause() {
		With_clauseContext _localctx = new With_clauseContext(Context, State);
		EnterRule(_localctx, 972, RULE_with_clause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8006;
			Match(WITH);
			State = 8008;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,425,Context) ) {
			case 1:
				{
				State = 8007;
				Match(RECURSIVE);
				}
				break;
			}
			State = 8010;
			cte_list();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Cte_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Common_table_exprContext[] common_table_expr() {
			return GetRuleContexts<Common_table_exprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Common_table_exprContext common_table_expr(int i) {
			return GetRuleContext<Common_table_exprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(PostgreSQLParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(PostgreSQLParser.COMMA, i);
		}
		public Cte_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_cte_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterCte_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitCte_list(this);
		}
	}

	[RuleVersion(0)]
	public Cte_listContext cte_list() {
		Cte_listContext _localctx = new Cte_listContext(Context, State);
		EnterRule(_localctx, 974, RULE_cte_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8012;
			common_table_expr();
			State = 8017;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 8013;
				Match(COMMA);
				State = 8014;
				common_table_expr();
				}
				}
				State = 8019;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Common_table_exprContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Opt_name_listContext opt_name_list() {
			return GetRuleContext<Opt_name_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS() { return GetToken(PostgreSQLParser.AS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Opt_materializedContext opt_materialized() {
			return GetRuleContext<Opt_materializedContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAREN() { return GetToken(PostgreSQLParser.OPEN_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public PreparablestmtContext preparablestmt() {
			return GetRuleContext<PreparablestmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAREN() { return GetToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public Common_table_exprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_common_table_expr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterCommon_table_expr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitCommon_table_expr(this);
		}
	}

	[RuleVersion(0)]
	public Common_table_exprContext common_table_expr() {
		Common_table_exprContext _localctx = new Common_table_exprContext(Context, State);
		EnterRule(_localctx, 976, RULE_common_table_expr);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8020;
			name();
			State = 8021;
			opt_name_list();
			State = 8022;
			Match(AS);
			State = 8023;
			opt_materialized();
			State = 8024;
			Match(OPEN_PAREN);
			State = 8025;
			preparablestmt();
			State = 8026;
			Match(CLOSE_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Opt_materializedContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MATERIALIZED() { return GetToken(PostgreSQLParser.MATERIALIZED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT() { return GetToken(PostgreSQLParser.NOT, 0); }
		public Opt_materializedContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_opt_materialized; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterOpt_materialized(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitOpt_materialized(this);
		}
	}

	[RuleVersion(0)]
	public Opt_materializedContext opt_materialized() {
		Opt_materializedContext _localctx = new Opt_materializedContext(Context, State);
		EnterRule(_localctx, 978, RULE_opt_materialized);
		try {
			State = 8032;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case MATERIALIZED:
				EnterOuterAlt(_localctx, 1);
				{
				State = 8028;
				Match(MATERIALIZED);
				}
				break;
			case NOT:
				EnterOuterAlt(_localctx, 2);
				{
				State = 8029;
				Match(NOT);
				State = 8030;
				Match(MATERIALIZED);
				}
				break;
			case OPEN_PAREN:
				EnterOuterAlt(_localctx, 3);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Opt_with_clauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public With_clauseContext with_clause() {
			return GetRuleContext<With_clauseContext>(0);
		}
		public Opt_with_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_opt_with_clause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterOpt_with_clause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitOpt_with_clause(this);
		}
	}

	[RuleVersion(0)]
	public Opt_with_clauseContext opt_with_clause() {
		Opt_with_clauseContext _localctx = new Opt_with_clauseContext(Context, State);
		EnterRule(_localctx, 980, RULE_opt_with_clause);
		try {
			State = 8036;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case WITH:
				EnterOuterAlt(_localctx, 1);
				{
				State = 8034;
				with_clause();
				}
				break;
			case DELETE_P:
			case INSERT:
			case UPDATE:
				EnterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Into_clauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTO() { return GetToken(PostgreSQLParser.INTO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Opt_strictContext opt_strict() {
			return GetRuleContext<Opt_strictContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public OpttempTableNameContext opttempTableName() {
			return GetRuleContext<OpttempTableNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Into_targetContext into_target() {
			return GetRuleContext<Into_targetContext>(0);
		}
		public Into_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_into_clause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterInto_clause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitInto_clause(this);
		}
	}

	[RuleVersion(0)]
	public Into_clauseContext into_clause() {
		Into_clauseContext _localctx = new Into_clauseContext(Context, State);
		EnterRule(_localctx, 982, RULE_into_clause);
		try {
			State = 8046;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,430,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 8038;
				Match(INTO);
				State = 8043;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,429,Context) ) {
				case 1:
					{
					State = 8039;
					opt_strict();
					State = 8040;
					opttempTableName();
					}
					break;
				case 2:
					{
					State = 8042;
					into_target();
					}
					break;
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Opt_strictContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRICT_P() { return GetToken(PostgreSQLParser.STRICT_P, 0); }
		public Opt_strictContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_opt_strict; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterOpt_strict(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitOpt_strict(this);
		}
	}

	[RuleVersion(0)]
	public Opt_strictContext opt_strict() {
		Opt_strictContext _localctx = new Opt_strictContext(Context, State);
		EnterRule(_localctx, 984, RULE_opt_strict);
		try {
			State = 8050;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,431,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 8049;
				Match(STRICT_P);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OpttempTableNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Opt_tableContext opt_table() {
			return GetRuleContext<Opt_tableContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Qualified_nameContext qualified_name() {
			return GetRuleContext<Qualified_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TEMPORARY() { return GetToken(PostgreSQLParser.TEMPORARY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TEMP() { return GetToken(PostgreSQLParser.TEMP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOCAL() { return GetToken(PostgreSQLParser.LOCAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GLOBAL() { return GetToken(PostgreSQLParser.GLOBAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNLOGGED() { return GetToken(PostgreSQLParser.UNLOGGED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLE() { return GetToken(PostgreSQLParser.TABLE, 0); }
		public OpttempTableNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_opttempTableName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterOpttempTableName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitOpttempTableName(this);
		}
	}

	[RuleVersion(0)]
	public OpttempTableNameContext opttempTableName() {
		OpttempTableNameContext _localctx = new OpttempTableNameContext(Context, State);
		EnterRule(_localctx, 986, RULE_opttempTableName);
		int _la;
		try {
			State = 8066;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,433,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 8053;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==GLOBAL || _la==LOCAL) {
					{
					State = 8052;
					_la = TokenStream.LA(1);
					if ( !(_la==GLOBAL || _la==LOCAL) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
				}

				State = 8055;
				_la = TokenStream.LA(1);
				if ( !(_la==TEMP || _la==TEMPORARY) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 8056;
				opt_table();
				State = 8057;
				qualified_name();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 8059;
				Match(UNLOGGED);
				State = 8060;
				opt_table();
				State = 8061;
				qualified_name();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 8063;
				Match(TABLE);
				State = 8064;
				qualified_name();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 8065;
				qualified_name();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Opt_tableContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLE() { return GetToken(PostgreSQLParser.TABLE, 0); }
		public Opt_tableContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_opt_table; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterOpt_table(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitOpt_table(this);
		}
	}

	[RuleVersion(0)]
	public Opt_tableContext opt_table() {
		Opt_tableContext _localctx = new Opt_tableContext(Context, State);
		EnterRule(_localctx, 988, RULE_opt_table);
		try {
			State = 8070;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,434,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 8068;
				Match(TABLE);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class All_or_distinctContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALL() { return GetToken(PostgreSQLParser.ALL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DISTINCT() { return GetToken(PostgreSQLParser.DISTINCT, 0); }
		public All_or_distinctContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_all_or_distinct; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterAll_or_distinct(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitAll_or_distinct(this);
		}
	}

	[RuleVersion(0)]
	public All_or_distinctContext all_or_distinct() {
		All_or_distinctContext _localctx = new All_or_distinctContext(Context, State);
		EnterRule(_localctx, 990, RULE_all_or_distinct);
		try {
			State = 8075;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ALL:
				EnterOuterAlt(_localctx, 1);
				{
				State = 8072;
				Match(ALL);
				}
				break;
			case DISTINCT:
				EnterOuterAlt(_localctx, 2);
				{
				State = 8073;
				Match(DISTINCT);
				}
				break;
			case OPEN_PAREN:
			case SELECT:
			case TABLE:
			case VALUES:
				EnterOuterAlt(_localctx, 3);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Distinct_clauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DISTINCT() { return GetToken(PostgreSQLParser.DISTINCT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ON() { return GetToken(PostgreSQLParser.ON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAREN() { return GetToken(PostgreSQLParser.OPEN_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Expr_listContext expr_list() {
			return GetRuleContext<Expr_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAREN() { return GetToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public Distinct_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_distinct_clause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterDistinct_clause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitDistinct_clause(this);
		}
	}

	[RuleVersion(0)]
	public Distinct_clauseContext distinct_clause() {
		Distinct_clauseContext _localctx = new Distinct_clauseContext(Context, State);
		EnterRule(_localctx, 992, RULE_distinct_clause);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8077;
			Match(DISTINCT);
			State = 8083;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ON) {
				{
				State = 8078;
				Match(ON);
				State = 8079;
				Match(OPEN_PAREN);
				State = 8080;
				expr_list();
				State = 8081;
				Match(CLOSE_PAREN);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Opt_all_clauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALL() { return GetToken(PostgreSQLParser.ALL, 0); }
		public Opt_all_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_opt_all_clause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterOpt_all_clause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitOpt_all_clause(this);
		}
	}

	[RuleVersion(0)]
	public Opt_all_clauseContext opt_all_clause() {
		Opt_all_clauseContext _localctx = new Opt_all_clauseContext(Context, State);
		EnterRule(_localctx, 994, RULE_opt_all_clause);
		try {
			State = 8087;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ALL:
				EnterOuterAlt(_localctx, 1);
				{
				State = 8085;
				Match(ALL);
				}
				break;
			case Eof:
			case OPEN_PAREN:
			case CLOSE_PAREN:
			case SEMI:
			case STAR:
			case PLUS:
			case MINUS:
			case PARAM:
			case Operator:
			case ANALYSE:
			case ANALYZE:
			case AND:
			case ARRAY:
			case CASE:
			case CAST:
			case COLLATE:
			case COLUMN:
			case CONSTRAINT:
			case CREATE:
			case CURRENT_CATALOG:
			case CURRENT_DATE:
			case CURRENT_ROLE:
			case CURRENT_TIME:
			case CURRENT_TIMESTAMP:
			case CURRENT_USER:
			case DEFAULT:
			case DO:
			case EXCEPT:
			case FALSE_P:
			case FETCH:
			case FOR:
			case FROM:
			case GRANT:
			case GROUP_P:
			case HAVING:
			case INTERSECT:
			case INTO:
			case LIMIT:
			case LOCALTIME:
			case LOCALTIMESTAMP:
			case NOT:
			case NULL_P:
			case OFFSET:
			case ON:
			case ORDER:
			case RETURNING:
			case SELECT:
			case SESSION_USER:
			case TABLE:
			case TRUE_P:
			case UNION:
			case UNIQUE:
			case USER:
			case WHERE:
			case WINDOW:
			case WITH:
			case AUTHORIZATION:
			case BINARY:
			case COLLATION:
			case CONCURRENTLY:
			case CROSS:
			case CURRENT_SCHEMA:
			case FREEZE:
			case FULL:
			case ILIKE:
			case INNER_P:
			case IS:
			case ISNULL:
			case JOIN:
			case LEFT:
			case LIKE:
			case NATURAL:
			case NOTNULL:
			case OUTER_P:
			case OVER:
			case OVERLAPS:
			case RIGHT:
			case SIMILAR:
			case VERBOSE:
			case ABORT_P:
			case ABSOLUTE_P:
			case ACCESS:
			case ACTION:
			case ADD_P:
			case ADMIN:
			case AFTER:
			case AGGREGATE:
			case ALSO:
			case ALTER:
			case ALWAYS:
			case ASSERTION:
			case ASSIGNMENT:
			case AT:
			case ATTRIBUTE:
			case BACKWARD:
			case BEFORE:
			case BEGIN_P:
			case BY:
			case CACHE:
			case CALLED:
			case CASCADE:
			case CASCADED:
			case CATALOG:
			case CHAIN:
			case CHARACTERISTICS:
			case CHECKPOINT:
			case CLASS:
			case CLOSE:
			case CLUSTER:
			case COMMENT:
			case COMMENTS:
			case COMMIT:
			case COMMITTED:
			case CONFIGURATION:
			case CONNECTION:
			case CONSTRAINTS:
			case CONTENT_P:
			case CONTINUE_P:
			case CONVERSION_P:
			case COPY:
			case COST:
			case CSV:
			case CURSOR:
			case CYCLE:
			case DATA_P:
			case DATABASE:
			case DAY_P:
			case DEALLOCATE:
			case DECLARE:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE_P:
			case DELIMITER:
			case DELIMITERS:
			case DICTIONARY:
			case DISABLE_P:
			case DISCARD:
			case DOCUMENT_P:
			case DOMAIN_P:
			case DOUBLE_P:
			case DROP:
			case EACH:
			case ENABLE_P:
			case ENCODING:
			case ENCRYPTED:
			case ENUM_P:
			case ESCAPE:
			case EVENT:
			case EXCLUDE:
			case EXCLUDING:
			case EXCLUSIVE:
			case EXECUTE:
			case EXPLAIN:
			case EXTENSION:
			case EXTERNAL:
			case FAMILY:
			case FIRST_P:
			case FOLLOWING:
			case FORCE:
			case FORWARD:
			case FUNCTION:
			case FUNCTIONS:
			case GLOBAL:
			case GRANTED:
			case HANDLER:
			case HEADER_P:
			case HOLD:
			case HOUR_P:
			case IDENTITY_P:
			case IF_P:
			case IMMEDIATE:
			case IMMUTABLE:
			case IMPLICIT_P:
			case INCLUDING:
			case INCREMENT:
			case INDEX:
			case INDEXES:
			case INHERIT:
			case INHERITS:
			case INLINE_P:
			case INSENSITIVE:
			case INSERT:
			case INSTEAD:
			case INVOKER:
			case ISOLATION:
			case KEY:
			case LABEL:
			case LANGUAGE:
			case LARGE_P:
			case LAST_P:
			case LEAKPROOF:
			case LEVEL:
			case LISTEN:
			case LOAD:
			case LOCAL:
			case LOCATION:
			case LOCK_P:
			case MAPPING:
			case MATCH:
			case MATERIALIZED:
			case MAXVALUE:
			case MERGE:
			case MINUTE_P:
			case MINVALUE:
			case MODE:
			case MONTH_P:
			case MOVE:
			case NAME_P:
			case NAMES:
			case NEXT:
			case NO:
			case NOTHING:
			case NOTIFY:
			case NOWAIT:
			case NULLS_P:
			case OBJECT_P:
			case OF:
			case OFF:
			case OIDS:
			case OPERATOR:
			case OPTION:
			case OPTIONS:
			case OWNED:
			case OWNER:
			case PARSER:
			case PARTIAL:
			case PARTITION:
			case PASSING:
			case PASSWORD:
			case PLANS:
			case PRECEDING:
			case PREPARE:
			case PREPARED:
			case PRESERVE:
			case PRIOR:
			case PRIVILEGES:
			case PROCEDURAL:
			case PROCEDURE:
			case PROGRAM:
			case QUOTE:
			case RANGE:
			case READ:
			case REASSIGN:
			case RECHECK:
			case RECURSIVE:
			case REF:
			case REFRESH:
			case REINDEX:
			case RELATIVE_P:
			case RELEASE:
			case RENAME:
			case REPEATABLE:
			case REPLACE:
			case REPLICA:
			case RESET:
			case RESTART:
			case RESTRICT:
			case RETURNS:
			case REVOKE:
			case ROLE:
			case ROLLBACK:
			case ROWS:
			case RULE:
			case SAVEPOINT:
			case SCHEMA:
			case SCROLL:
			case SEARCH:
			case SECOND_P:
			case SECURITY:
			case SEQUENCE:
			case SEQUENCES:
			case SERIALIZABLE:
			case SERVER:
			case SESSION:
			case SET:
			case SHARE:
			case SHOW:
			case SIMPLE:
			case SNAPSHOT:
			case STABLE:
			case STANDALONE_P:
			case START:
			case STATEMENT:
			case STATISTICS:
			case STDIN:
			case STDOUT:
			case STORAGE:
			case STRICT_P:
			case STRIP_P:
			case SYSID:
			case SYSTEM_P:
			case TABLES:
			case TABLESPACE:
			case TEMP:
			case TEMPLATE:
			case TEMPORARY:
			case TEXT_P:
			case TRANSACTION:
			case TRIGGER:
			case TRUNCATE:
			case TRUSTED:
			case TYPE_P:
			case TYPES_P:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNENCRYPTED:
			case UNKNOWN:
			case UNLISTEN:
			case UNLOGGED:
			case UNTIL:
			case UPDATE:
			case VACUUM:
			case VALID:
			case VALIDATE:
			case VALIDATOR:
			case VARYING:
			case VERSION_P:
			case VIEW:
			case VOLATILE:
			case WHITESPACE_P:
			case WITHOUT:
			case WORK:
			case WRAPPER:
			case WRITE:
			case XML_P:
			case YEAR_P:
			case YES_P:
			case ZONE:
			case BETWEEN:
			case BIGINT:
			case BIT:
			case BOOLEAN_P:
			case CHAR_P:
			case CHARACTER:
			case COALESCE:
			case DEC:
			case DECIMAL_P:
			case EXISTS:
			case EXTRACT:
			case FLOAT_P:
			case GREATEST:
			case INOUT:
			case INT_P:
			case INTEGER:
			case INTERVAL:
			case LEAST:
			case NATIONAL:
			case NCHAR:
			case NONE:
			case NULLIF:
			case NUMERIC:
			case OVERLAY:
			case POSITION:
			case PRECISION:
			case REAL:
			case ROW:
			case SETOF:
			case SMALLINT:
			case SUBSTRING:
			case TIME:
			case TIMESTAMP:
			case TREAT:
			case TRIM:
			case VALUES:
			case VARCHAR:
			case XMLATTRIBUTES:
			case XMLCOMMENT:
			case XMLAGG:
			case XML_IS_WELL_FORMED:
			case XML_IS_WELL_FORMED_DOCUMENT:
			case XML_IS_WELL_FORMED_CONTENT:
			case XPATH:
			case XPATH_EXISTS:
			case XMLCONCAT:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLPARSE:
			case XMLPI:
			case XMLROOT:
			case XMLSERIALIZE:
			case CALL:
			case CURRENT_P:
			case ATTACH:
			case DETACH:
			case EXPRESSION:
			case GENERATED:
			case LOGGED:
			case STORED:
			case INCLUDE:
			case ROUTINE:
			case TRANSFORM:
			case IMPORT_P:
			case POLICY:
			case METHOD:
			case REFERENCING:
			case NEW:
			case OLD:
			case VALUE_P:
			case SUBSCRIPTION:
			case PUBLICATION:
			case OUT_P:
			case END_P:
			case ROUTINES:
			case SCHEMAS:
			case PROCEDURES:
			case INPUT_P:
			case SUPPORT:
			case PARALLEL:
			case SQL_P:
			case DEPENDS:
			case OVERRIDING:
			case CONFLICT:
			case SKIP_P:
			case LOCKED:
			case TIES:
			case ROLLUP:
			case CUBE:
			case GROUPING:
			case SETS:
			case TABLESAMPLE:
			case ORDINALITY:
			case XMLTABLE:
			case COLUMNS:
			case XMLNAMESPACES:
			case ROWTYPE:
			case NORMALIZED:
			case WITHIN:
			case FILTER:
			case GROUPS:
			case OTHERS:
			case NFC:
			case NFD:
			case NFKC:
			case NFKD:
			case UESCAPE:
			case VIEWS:
			case NORMALIZE:
			case DUMP:
			case PRINT_STRICT_PARAMS:
			case VARIABLE_CONFLICT:
			case ERROR:
			case USE_VARIABLE:
			case USE_COLUMN:
			case ALIAS:
			case CONSTANT:
			case PERFORM:
			case GET:
			case DIAGNOSTICS:
			case STACKED:
			case ELSIF:
			case REVERSE:
			case SLICE:
			case EXIT:
			case RETURN:
			case QUERY:
			case RAISE:
			case SQLSTATE:
			case DEBUG:
			case LOG:
			case INFO:
			case NOTICE:
			case WARNING:
			case EXCEPTION:
			case ASSERT:
			case LOOP:
			case OPEN:
			case ABS:
			case CBRT:
			case CEIL:
			case CEILING:
			case DEGREES:
			case DIV:
			case EXP:
			case FACTORIAL:
			case FLOOR:
			case GCD:
			case LCM:
			case LN:
			case LOG10:
			case MIN_SCALE:
			case MOD:
			case PI:
			case POWER:
			case RADIANS:
			case ROUND:
			case SCALE:
			case SIGN:
			case SQRT:
			case TRIM_SCALE:
			case TRUNC:
			case WIDTH_BUCKET:
			case RANDOM:
			case SETSEED:
			case ACOS:
			case ACOSD:
			case ASIN:
			case ASIND:
			case ATAN:
			case ATAND:
			case ATAN2:
			case ATAN2D:
			case COS:
			case COSD:
			case COT:
			case COTD:
			case SIN:
			case SIND:
			case TAN:
			case TAND:
			case SINH:
			case COSH:
			case TANH:
			case ASINH:
			case ACOSH:
			case ATANH:
			case BIT_LENGTH:
			case CHAR_LENGTH:
			case CHARACTER_LENGTH:
			case LOWER:
			case OCTET_LENGTH:
			case UPPER:
			case ASCII:
			case BTRIM:
			case CHR:
			case CONCAT:
			case CONCAT_WS:
			case FORMAT:
			case INITCAP:
			case LENGTH:
			case LPAD:
			case LTRIM:
			case MD5:
			case PARSE_IDENT:
			case PG_CLIENT_ENCODING:
			case QUOTE_IDENT:
			case QUOTE_LITERAL:
			case QUOTE_NULLABLE:
			case REGEXP_COUNT:
			case REGEXP_INSTR:
			case REGEXP_LIKE:
			case REGEXP_MATCH:
			case REGEXP_MATCHES:
			case REGEXP_REPLACE:
			case REGEXP_SPLIT_TO_ARRAY:
			case REGEXP_SPLIT_TO_TABLE:
			case REGEXP_SUBSTR:
			case REPEAT:
			case RPAD:
			case RTRIM:
			case SPLIT_PART:
			case STARTS_WITH:
			case STRING_TO_ARRAY:
			case STRING_TO_TABLE:
			case STRPOS:
			case SUBSTR:
			case TO_ASCII:
			case TO_HEX:
			case TRANSLATE:
			case UNISTR:
			case AGE:
			case CLOCK_TIMESTAMP:
			case DATE_BIN:
			case DATE_PART:
			case DATE_TRUNC:
			case ISFINITE:
			case JUSTIFY_DAYS:
			case JUSTIFY_HOURS:
			case JUSTIFY_INTERVAL:
			case MAKE_DATE:
			case MAKE_INTERVAL:
			case MAKE_TIME:
			case MAKE_TIMESTAMP:
			case MAKE_TIMESTAMPTZ:
			case NOW:
			case STATEMENT_TIMESTAMP:
			case TIMEOFDAY:
			case TRANSACTION_TIMESTAMP:
			case TO_TIMESTAMP:
			case TO_CHAR:
			case TO_DATE:
			case TO_NUMBER:
			case Identifier:
			case QuotedIdentifier:
			case UnicodeQuotedIdentifier:
			case StringConstant:
			case UnicodeEscapeStringConstant:
			case BeginDollarStringConstant:
			case BinaryStringConstant:
			case HexadecimalStringConstant:
			case Integral:
			case Numeric:
			case PLSQLVARIABLENAME:
			case PLSQLIDENTIFIER:
			case MetaCommand:
			case EscapeStringConstant:
				EnterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Opt_sort_clauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Sort_clauseContext sort_clause() {
			return GetRuleContext<Sort_clauseContext>(0);
		}
		public Opt_sort_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_opt_sort_clause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterOpt_sort_clause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitOpt_sort_clause(this);
		}
	}

	[RuleVersion(0)]
	public Opt_sort_clauseContext opt_sort_clause() {
		Opt_sort_clauseContext _localctx = new Opt_sort_clauseContext(Context, State);
		EnterRule(_localctx, 996, RULE_opt_sort_clause);
		try {
			State = 8091;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ORDER:
				EnterOuterAlt(_localctx, 1);
				{
				State = 8089;
				sort_clause();
				}
				break;
			case Eof:
			case OPEN_PAREN:
			case CLOSE_PAREN:
			case SEMI:
			case ANALYSE:
			case ANALYZE:
			case CREATE:
			case DO:
			case FETCH:
			case FOR:
			case GRANT:
			case INTO:
			case LIMIT:
			case OFFSET:
			case ON:
			case RETURNING:
			case SELECT:
			case TABLE:
			case WITH:
			case ABORT_P:
			case ALTER:
			case BEGIN_P:
			case CHECKPOINT:
			case CLOSE:
			case CLUSTER:
			case COMMENT:
			case COMMIT:
			case COPY:
			case DEALLOCATE:
			case DECLARE:
			case DELETE_P:
			case DISCARD:
			case DROP:
			case EXECUTE:
			case EXPLAIN:
			case INSERT:
			case LISTEN:
			case LOAD:
			case LOCK_P:
			case MERGE:
			case MOVE:
			case NOTIFY:
			case PREPARE:
			case RANGE:
			case REASSIGN:
			case REFRESH:
			case REINDEX:
			case RELEASE:
			case RESET:
			case REVOKE:
			case ROLLBACK:
			case ROWS:
			case SAVEPOINT:
			case SECURITY:
			case SET:
			case SHOW:
			case START:
			case TRUNCATE:
			case UNLISTEN:
			case UPDATE:
			case VACUUM:
			case VALUES:
			case CALL:
			case IMPORT_P:
			case END_P:
			case GROUPS:
			case LOOP:
			case MetaCommand:
				EnterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Sort_clauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ORDER() { return GetToken(PostgreSQLParser.ORDER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BY() { return GetToken(PostgreSQLParser.BY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Sortby_listContext sortby_list() {
			return GetRuleContext<Sortby_listContext>(0);
		}
		public Sort_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sort_clause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterSort_clause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitSort_clause(this);
		}
	}

	[RuleVersion(0)]
	public Sort_clauseContext sort_clause() {
		Sort_clauseContext _localctx = new Sort_clauseContext(Context, State);
		EnterRule(_localctx, 998, RULE_sort_clause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8093;
			Match(ORDER);
			State = 8094;
			Match(BY);
			State = 8095;
			sortby_list();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Sortby_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SortbyContext[] sortby() {
			return GetRuleContexts<SortbyContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SortbyContext sortby(int i) {
			return GetRuleContext<SortbyContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(PostgreSQLParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(PostgreSQLParser.COMMA, i);
		}
		public Sortby_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sortby_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterSortby_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitSortby_list(this);
		}
	}

	[RuleVersion(0)]
	public Sortby_listContext sortby_list() {
		Sortby_listContext _localctx = new Sortby_listContext(Context, State);
		EnterRule(_localctx, 1000, RULE_sortby_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8097;
			sortby();
			State = 8102;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 8098;
				Match(COMMA);
				State = 8099;
				sortby();
				}
				}
				State = 8104;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SortbyContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public A_exprContext a_expr() {
			return GetRuleContext<A_exprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Opt_nulls_orderContext opt_nulls_order() {
			return GetRuleContext<Opt_nulls_orderContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode USING() { return GetToken(PostgreSQLParser.USING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Qual_all_opContext qual_all_op() {
			return GetRuleContext<Qual_all_opContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Opt_asc_descContext opt_asc_desc() {
			return GetRuleContext<Opt_asc_descContext>(0);
		}
		public SortbyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sortby; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterSortby(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitSortby(this);
		}
	}

	[RuleVersion(0)]
	public SortbyContext sortby() {
		SortbyContext _localctx = new SortbyContext(Context, State);
		EnterRule(_localctx, 1002, RULE_sortby);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8105;
			a_expr();
			State = 8109;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case USING:
				{
				State = 8106;
				Match(USING);
				State = 8107;
				qual_all_op();
				}
				break;
			case Eof:
			case OPEN_PAREN:
			case CLOSE_PAREN:
			case COMMA:
			case SEMI:
			case ANALYSE:
			case ANALYZE:
			case ASC:
			case CREATE:
			case DESC:
			case DO:
			case FETCH:
			case FOR:
			case GRANT:
			case INTO:
			case LIMIT:
			case OFFSET:
			case ON:
			case RETURNING:
			case SELECT:
			case TABLE:
			case WITH:
			case ABORT_P:
			case ALTER:
			case BEGIN_P:
			case CHECKPOINT:
			case CLOSE:
			case CLUSTER:
			case COMMENT:
			case COMMIT:
			case COPY:
			case DEALLOCATE:
			case DECLARE:
			case DELETE_P:
			case DISCARD:
			case DROP:
			case EXECUTE:
			case EXPLAIN:
			case INSERT:
			case LISTEN:
			case LOAD:
			case LOCK_P:
			case MERGE:
			case MOVE:
			case NOTIFY:
			case NULLS_P:
			case PREPARE:
			case RANGE:
			case REASSIGN:
			case REFRESH:
			case REINDEX:
			case RELEASE:
			case RESET:
			case REVOKE:
			case ROLLBACK:
			case ROWS:
			case SAVEPOINT:
			case SECURITY:
			case SET:
			case SHOW:
			case START:
			case TRUNCATE:
			case UNLISTEN:
			case UPDATE:
			case VACUUM:
			case VALUES:
			case CALL:
			case IMPORT_P:
			case END_P:
			case GROUPS:
			case LOOP:
			case MetaCommand:
				{
				State = 8108;
				opt_asc_desc();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 8111;
			opt_nulls_order();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Select_limitContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Limit_clauseContext limit_clause() {
			return GetRuleContext<Limit_clauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Offset_clauseContext offset_clause() {
			return GetRuleContext<Offset_clauseContext>(0);
		}
		public Select_limitContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_select_limit; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterSelect_limit(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitSelect_limit(this);
		}
	}

	[RuleVersion(0)]
	public Select_limitContext select_limit() {
		Select_limitContext _localctx = new Select_limitContext(Context, State);
		EnterRule(_localctx, 1004, RULE_select_limit);
		int _la;
		try {
			State = 8121;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case FETCH:
			case LIMIT:
				EnterOuterAlt(_localctx, 1);
				{
				State = 8113;
				limit_clause();
				State = 8115;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==OFFSET) {
					{
					State = 8114;
					offset_clause();
					}
				}

				}
				break;
			case OFFSET:
				EnterOuterAlt(_localctx, 2);
				{
				State = 8117;
				offset_clause();
				State = 8119;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,442,Context) ) {
				case 1:
					{
					State = 8118;
					limit_clause();
					}
					break;
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Opt_select_limitContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Select_limitContext select_limit() {
			return GetRuleContext<Select_limitContext>(0);
		}
		public Opt_select_limitContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_opt_select_limit; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterOpt_select_limit(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitOpt_select_limit(this);
		}
	}

	[RuleVersion(0)]
	public Opt_select_limitContext opt_select_limit() {
		Opt_select_limitContext _localctx = new Opt_select_limitContext(Context, State);
		EnterRule(_localctx, 1006, RULE_opt_select_limit);
		try {
			State = 8125;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,444,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 8123;
				select_limit();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Limit_clauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LIMIT() { return GetToken(PostgreSQLParser.LIMIT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Select_limit_valueContext select_limit_value() {
			return GetRuleContext<Select_limit_valueContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(PostgreSQLParser.COMMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Select_offset_valueContext select_offset_value() {
			return GetRuleContext<Select_offset_valueContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FETCH() { return GetToken(PostgreSQLParser.FETCH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public First_or_nextContext first_or_next() {
			return GetRuleContext<First_or_nextContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Select_fetch_first_valueContext select_fetch_first_value() {
			return GetRuleContext<Select_fetch_first_valueContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Row_or_rowsContext row_or_rows() {
			return GetRuleContext<Row_or_rowsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ONLY() { return GetToken(PostgreSQLParser.ONLY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WITH() { return GetToken(PostgreSQLParser.WITH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TIES() { return GetToken(PostgreSQLParser.TIES, 0); }
		public Limit_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_limit_clause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterLimit_clause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitLimit_clause(this);
		}
	}

	[RuleVersion(0)]
	public Limit_clauseContext limit_clause() {
		Limit_clauseContext _localctx = new Limit_clauseContext(Context, State);
		EnterRule(_localctx, 1008, RULE_limit_clause);
		int _la;
		try {
			State = 8150;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case LIMIT:
				EnterOuterAlt(_localctx, 1);
				{
				State = 8127;
				Match(LIMIT);
				State = 8128;
				select_limit_value();
				State = 8131;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COMMA) {
					{
					State = 8129;
					Match(COMMA);
					State = 8130;
					select_offset_value();
					}
				}

				}
				break;
			case FETCH:
				EnterOuterAlt(_localctx, 2);
				{
				State = 8133;
				Match(FETCH);
				State = 8134;
				first_or_next();
				State = 8148;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,448,Context) ) {
				case 1:
					{
					State = 8135;
					select_fetch_first_value();
					State = 8136;
					row_or_rows();
					State = 8140;
					ErrorHandler.Sync(this);
					switch (TokenStream.LA(1)) {
					case ONLY:
						{
						State = 8137;
						Match(ONLY);
						}
						break;
					case WITH:
						{
						State = 8138;
						Match(WITH);
						State = 8139;
						Match(TIES);
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					break;
				case 2:
					{
					State = 8142;
					row_or_rows();
					State = 8146;
					ErrorHandler.Sync(this);
					switch (TokenStream.LA(1)) {
					case ONLY:
						{
						State = 8143;
						Match(ONLY);
						}
						break;
					case WITH:
						{
						State = 8144;
						Match(WITH);
						State = 8145;
						Match(TIES);
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					break;
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Offset_clauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OFFSET() { return GetToken(PostgreSQLParser.OFFSET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Select_offset_valueContext select_offset_value() {
			return GetRuleContext<Select_offset_valueContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Select_fetch_first_valueContext select_fetch_first_value() {
			return GetRuleContext<Select_fetch_first_valueContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Row_or_rowsContext row_or_rows() {
			return GetRuleContext<Row_or_rowsContext>(0);
		}
		public Offset_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_offset_clause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterOffset_clause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitOffset_clause(this);
		}
	}

	[RuleVersion(0)]
	public Offset_clauseContext offset_clause() {
		Offset_clauseContext _localctx = new Offset_clauseContext(Context, State);
		EnterRule(_localctx, 1010, RULE_offset_clause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8152;
			Match(OFFSET);
			State = 8157;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,450,Context) ) {
			case 1:
				{
				State = 8153;
				select_offset_value();
				}
				break;
			case 2:
				{
				State = 8154;
				select_fetch_first_value();
				State = 8155;
				row_or_rows();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Select_limit_valueContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public A_exprContext a_expr() {
			return GetRuleContext<A_exprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALL() { return GetToken(PostgreSQLParser.ALL, 0); }
		public Select_limit_valueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_select_limit_value; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterSelect_limit_value(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitSelect_limit_value(this);
		}
	}

	[RuleVersion(0)]
	public Select_limit_valueContext select_limit_value() {
		Select_limit_valueContext _localctx = new Select_limit_valueContext(Context, State);
		EnterRule(_localctx, 1012, RULE_select_limit_value);
		try {
			State = 8161;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case OPEN_PAREN:
			case PLUS:
			case MINUS:
			case PARAM:
			case Operator:
			case AND:
			case ARRAY:
			case CASE:
			case CAST:
			case COLLATE:
			case COLUMN:
			case CONSTRAINT:
			case CURRENT_CATALOG:
			case CURRENT_DATE:
			case CURRENT_ROLE:
			case CURRENT_TIME:
			case CURRENT_TIMESTAMP:
			case CURRENT_USER:
			case DEFAULT:
			case DO:
			case FALSE_P:
			case FETCH:
			case LOCALTIME:
			case LOCALTIMESTAMP:
			case NOT:
			case NULL_P:
			case SESSION_USER:
			case TABLE:
			case TRUE_P:
			case UNIQUE:
			case USER:
			case AUTHORIZATION:
			case BINARY:
			case COLLATION:
			case CONCURRENTLY:
			case CROSS:
			case CURRENT_SCHEMA:
			case FREEZE:
			case FULL:
			case ILIKE:
			case INNER_P:
			case IS:
			case ISNULL:
			case JOIN:
			case LEFT:
			case LIKE:
			case NATURAL:
			case NOTNULL:
			case OUTER_P:
			case OVER:
			case OVERLAPS:
			case RIGHT:
			case SIMILAR:
			case VERBOSE:
			case ABORT_P:
			case ABSOLUTE_P:
			case ACCESS:
			case ACTION:
			case ADD_P:
			case ADMIN:
			case AFTER:
			case AGGREGATE:
			case ALSO:
			case ALTER:
			case ALWAYS:
			case ASSERTION:
			case ASSIGNMENT:
			case AT:
			case ATTRIBUTE:
			case BACKWARD:
			case BEFORE:
			case BEGIN_P:
			case BY:
			case CACHE:
			case CALLED:
			case CASCADE:
			case CASCADED:
			case CATALOG:
			case CHAIN:
			case CHARACTERISTICS:
			case CHECKPOINT:
			case CLASS:
			case CLOSE:
			case CLUSTER:
			case COMMENT:
			case COMMENTS:
			case COMMIT:
			case COMMITTED:
			case CONFIGURATION:
			case CONNECTION:
			case CONSTRAINTS:
			case CONTENT_P:
			case CONTINUE_P:
			case CONVERSION_P:
			case COPY:
			case COST:
			case CSV:
			case CURSOR:
			case CYCLE:
			case DATA_P:
			case DATABASE:
			case DAY_P:
			case DEALLOCATE:
			case DECLARE:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE_P:
			case DELIMITER:
			case DELIMITERS:
			case DICTIONARY:
			case DISABLE_P:
			case DISCARD:
			case DOCUMENT_P:
			case DOMAIN_P:
			case DOUBLE_P:
			case DROP:
			case EACH:
			case ENABLE_P:
			case ENCODING:
			case ENCRYPTED:
			case ENUM_P:
			case ESCAPE:
			case EVENT:
			case EXCLUDE:
			case EXCLUDING:
			case EXCLUSIVE:
			case EXECUTE:
			case EXPLAIN:
			case EXTENSION:
			case EXTERNAL:
			case FAMILY:
			case FIRST_P:
			case FOLLOWING:
			case FORCE:
			case FORWARD:
			case FUNCTION:
			case FUNCTIONS:
			case GLOBAL:
			case GRANTED:
			case HANDLER:
			case HEADER_P:
			case HOLD:
			case HOUR_P:
			case IDENTITY_P:
			case IF_P:
			case IMMEDIATE:
			case IMMUTABLE:
			case IMPLICIT_P:
			case INCLUDING:
			case INCREMENT:
			case INDEX:
			case INDEXES:
			case INHERIT:
			case INHERITS:
			case INLINE_P:
			case INSENSITIVE:
			case INSERT:
			case INSTEAD:
			case INVOKER:
			case ISOLATION:
			case KEY:
			case LABEL:
			case LANGUAGE:
			case LARGE_P:
			case LAST_P:
			case LEAKPROOF:
			case LEVEL:
			case LISTEN:
			case LOAD:
			case LOCAL:
			case LOCATION:
			case LOCK_P:
			case MAPPING:
			case MATCH:
			case MATERIALIZED:
			case MAXVALUE:
			case MINUTE_P:
			case MINVALUE:
			case MODE:
			case MONTH_P:
			case MOVE:
			case NAME_P:
			case NAMES:
			case NEXT:
			case NO:
			case NOTHING:
			case NOTIFY:
			case NOWAIT:
			case NULLS_P:
			case OBJECT_P:
			case OF:
			case OFF:
			case OIDS:
			case OPERATOR:
			case OPTION:
			case OPTIONS:
			case OWNED:
			case OWNER:
			case PARSER:
			case PARTIAL:
			case PARTITION:
			case PASSING:
			case PASSWORD:
			case PLANS:
			case PRECEDING:
			case PREPARE:
			case PREPARED:
			case PRESERVE:
			case PRIOR:
			case PRIVILEGES:
			case PROCEDURAL:
			case PROCEDURE:
			case PROGRAM:
			case QUOTE:
			case RANGE:
			case READ:
			case REASSIGN:
			case RECHECK:
			case RECURSIVE:
			case REF:
			case REFRESH:
			case REINDEX:
			case RELATIVE_P:
			case RELEASE:
			case RENAME:
			case REPEATABLE:
			case REPLACE:
			case REPLICA:
			case RESET:
			case RESTART:
			case RESTRICT:
			case RETURNS:
			case REVOKE:
			case ROLE:
			case ROLLBACK:
			case ROWS:
			case RULE:
			case SAVEPOINT:
			case SCHEMA:
			case SCROLL:
			case SEARCH:
			case SECOND_P:
			case SECURITY:
			case SEQUENCE:
			case SEQUENCES:
			case SERIALIZABLE:
			case SERVER:
			case SESSION:
			case SET:
			case SHARE:
			case SHOW:
			case SIMPLE:
			case SNAPSHOT:
			case STABLE:
			case STANDALONE_P:
			case START:
			case STATEMENT:
			case STATISTICS:
			case STDIN:
			case STDOUT:
			case STORAGE:
			case STRICT_P:
			case STRIP_P:
			case SYSID:
			case SYSTEM_P:
			case TABLES:
			case TABLESPACE:
			case TEMP:
			case TEMPLATE:
			case TEMPORARY:
			case TEXT_P:
			case TRANSACTION:
			case TRIGGER:
			case TRUNCATE:
			case TRUSTED:
			case TYPE_P:
			case TYPES_P:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNENCRYPTED:
			case UNKNOWN:
			case UNLISTEN:
			case UNLOGGED:
			case UNTIL:
			case UPDATE:
			case VACUUM:
			case VALID:
			case VALIDATE:
			case VALIDATOR:
			case VARYING:
			case VERSION_P:
			case VIEW:
			case VOLATILE:
			case WHITESPACE_P:
			case WITHOUT:
			case WORK:
			case WRAPPER:
			case WRITE:
			case XML_P:
			case YEAR_P:
			case YES_P:
			case ZONE:
			case BETWEEN:
			case BIGINT:
			case BIT:
			case BOOLEAN_P:
			case CHAR_P:
			case CHARACTER:
			case COALESCE:
			case DEC:
			case DECIMAL_P:
			case EXISTS:
			case EXTRACT:
			case FLOAT_P:
			case GREATEST:
			case INOUT:
			case INT_P:
			case INTEGER:
			case INTERVAL:
			case LEAST:
			case NATIONAL:
			case NCHAR:
			case NONE:
			case NULLIF:
			case NUMERIC:
			case OVERLAY:
			case POSITION:
			case PRECISION:
			case REAL:
			case ROW:
			case SETOF:
			case SMALLINT:
			case SUBSTRING:
			case TIME:
			case TIMESTAMP:
			case TREAT:
			case TRIM:
			case VALUES:
			case VARCHAR:
			case XMLATTRIBUTES:
			case XMLCOMMENT:
			case XMLAGG:
			case XML_IS_WELL_FORMED:
			case XML_IS_WELL_FORMED_DOCUMENT:
			case XML_IS_WELL_FORMED_CONTENT:
			case XPATH:
			case XPATH_EXISTS:
			case XMLCONCAT:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLPARSE:
			case XMLPI:
			case XMLROOT:
			case XMLSERIALIZE:
			case CALL:
			case CURRENT_P:
			case ATTACH:
			case DETACH:
			case EXPRESSION:
			case GENERATED:
			case LOGGED:
			case STORED:
			case INCLUDE:
			case ROUTINE:
			case TRANSFORM:
			case IMPORT_P:
			case POLICY:
			case METHOD:
			case REFERENCING:
			case NEW:
			case OLD:
			case VALUE_P:
			case SUBSCRIPTION:
			case PUBLICATION:
			case OUT_P:
			case ROUTINES:
			case SCHEMAS:
			case PROCEDURES:
			case INPUT_P:
			case SUPPORT:
			case PARALLEL:
			case SQL_P:
			case DEPENDS:
			case OVERRIDING:
			case CONFLICT:
			case SKIP_P:
			case LOCKED:
			case TIES:
			case ROLLUP:
			case CUBE:
			case GROUPING:
			case SETS:
			case TABLESAMPLE:
			case ORDINALITY:
			case XMLTABLE:
			case COLUMNS:
			case XMLNAMESPACES:
			case ROWTYPE:
			case NORMALIZED:
			case WITHIN:
			case FILTER:
			case GROUPS:
			case OTHERS:
			case NFC:
			case NFD:
			case NFKC:
			case NFKD:
			case UESCAPE:
			case VIEWS:
			case NORMALIZE:
			case DUMP:
			case PRINT_STRICT_PARAMS:
			case VARIABLE_CONFLICT:
			case ERROR:
			case USE_VARIABLE:
			case USE_COLUMN:
			case ALIAS:
			case CONSTANT:
			case PERFORM:
			case GET:
			case DIAGNOSTICS:
			case STACKED:
			case ELSIF:
			case REVERSE:
			case SLICE:
			case EXIT:
			case RETURN:
			case QUERY:
			case RAISE:
			case SQLSTATE:
			case DEBUG:
			case LOG:
			case INFO:
			case NOTICE:
			case WARNING:
			case EXCEPTION:
			case ASSERT:
			case OPEN:
			case ABS:
			case CBRT:
			case CEIL:
			case CEILING:
			case DEGREES:
			case DIV:
			case EXP:
			case FACTORIAL:
			case FLOOR:
			case GCD:
			case LCM:
			case LN:
			case LOG10:
			case MIN_SCALE:
			case MOD:
			case PI:
			case POWER:
			case RADIANS:
			case ROUND:
			case SCALE:
			case SIGN:
			case SQRT:
			case TRIM_SCALE:
			case TRUNC:
			case WIDTH_BUCKET:
			case RANDOM:
			case SETSEED:
			case ACOS:
			case ACOSD:
			case ASIN:
			case ASIND:
			case ATAN:
			case ATAND:
			case ATAN2:
			case ATAN2D:
			case COS:
			case COSD:
			case COT:
			case COTD:
			case SIN:
			case SIND:
			case TAN:
			case TAND:
			case SINH:
			case COSH:
			case TANH:
			case ASINH:
			case ACOSH:
			case ATANH:
			case BIT_LENGTH:
			case CHAR_LENGTH:
			case CHARACTER_LENGTH:
			case LOWER:
			case OCTET_LENGTH:
			case UPPER:
			case ASCII:
			case BTRIM:
			case CHR:
			case CONCAT:
			case CONCAT_WS:
			case FORMAT:
			case INITCAP:
			case LENGTH:
			case LPAD:
			case LTRIM:
			case MD5:
			case PARSE_IDENT:
			case PG_CLIENT_ENCODING:
			case QUOTE_IDENT:
			case QUOTE_LITERAL:
			case QUOTE_NULLABLE:
			case REGEXP_COUNT:
			case REGEXP_INSTR:
			case REGEXP_LIKE:
			case REGEXP_MATCH:
			case REGEXP_MATCHES:
			case REGEXP_REPLACE:
			case REGEXP_SPLIT_TO_ARRAY:
			case REGEXP_SPLIT_TO_TABLE:
			case REGEXP_SUBSTR:
			case REPEAT:
			case RPAD:
			case RTRIM:
			case SPLIT_PART:
			case STARTS_WITH:
			case STRING_TO_ARRAY:
			case STRING_TO_TABLE:
			case STRPOS:
			case SUBSTR:
			case TO_ASCII:
			case TO_HEX:
			case TRANSLATE:
			case UNISTR:
			case AGE:
			case CLOCK_TIMESTAMP:
			case DATE_BIN:
			case DATE_PART:
			case DATE_TRUNC:
			case ISFINITE:
			case JUSTIFY_DAYS:
			case JUSTIFY_HOURS:
			case JUSTIFY_INTERVAL:
			case MAKE_DATE:
			case MAKE_INTERVAL:
			case MAKE_TIME:
			case MAKE_TIMESTAMP:
			case MAKE_TIMESTAMPTZ:
			case NOW:
			case STATEMENT_TIMESTAMP:
			case TIMEOFDAY:
			case TRANSACTION_TIMESTAMP:
			case TO_TIMESTAMP:
			case TO_CHAR:
			case TO_DATE:
			case TO_NUMBER:
			case Identifier:
			case QuotedIdentifier:
			case UnicodeQuotedIdentifier:
			case StringConstant:
			case UnicodeEscapeStringConstant:
			case BeginDollarStringConstant:
			case BinaryStringConstant:
			case HexadecimalStringConstant:
			case Integral:
			case Numeric:
			case PLSQLVARIABLENAME:
			case PLSQLIDENTIFIER:
			case EscapeStringConstant:
				EnterOuterAlt(_localctx, 1);
				{
				State = 8159;
				a_expr();
				}
				break;
			case ALL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 8160;
				Match(ALL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Select_offset_valueContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public A_exprContext a_expr() {
			return GetRuleContext<A_exprContext>(0);
		}
		public Select_offset_valueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_select_offset_value; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterSelect_offset_value(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitSelect_offset_value(this);
		}
	}

	[RuleVersion(0)]
	public Select_offset_valueContext select_offset_value() {
		Select_offset_valueContext _localctx = new Select_offset_valueContext(Context, State);
		EnterRule(_localctx, 1014, RULE_select_offset_value);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8163;
			a_expr();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Select_fetch_first_valueContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public C_exprContext c_expr() {
			return GetRuleContext<C_exprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLUS() { return GetToken(PostgreSQLParser.PLUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public I_or_f_constContext i_or_f_const() {
			return GetRuleContext<I_or_f_constContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUS() { return GetToken(PostgreSQLParser.MINUS, 0); }
		public Select_fetch_first_valueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_select_fetch_first_value; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterSelect_fetch_first_value(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitSelect_fetch_first_value(this);
		}
	}

	[RuleVersion(0)]
	public Select_fetch_first_valueContext select_fetch_first_value() {
		Select_fetch_first_valueContext _localctx = new Select_fetch_first_valueContext(Context, State);
		EnterRule(_localctx, 1016, RULE_select_fetch_first_value);
		try {
			State = 8170;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case OPEN_PAREN:
			case PARAM:
			case AND:
			case ARRAY:
			case CASE:
			case CAST:
			case COLLATE:
			case COLUMN:
			case CONSTRAINT:
			case CURRENT_CATALOG:
			case CURRENT_DATE:
			case CURRENT_ROLE:
			case CURRENT_TIME:
			case CURRENT_TIMESTAMP:
			case CURRENT_USER:
			case DEFAULT:
			case DO:
			case FALSE_P:
			case FETCH:
			case LOCALTIME:
			case LOCALTIMESTAMP:
			case NULL_P:
			case SESSION_USER:
			case TABLE:
			case TRUE_P:
			case UNIQUE:
			case USER:
			case AUTHORIZATION:
			case BINARY:
			case COLLATION:
			case CONCURRENTLY:
			case CROSS:
			case CURRENT_SCHEMA:
			case FREEZE:
			case FULL:
			case ILIKE:
			case INNER_P:
			case IS:
			case ISNULL:
			case JOIN:
			case LEFT:
			case LIKE:
			case NATURAL:
			case NOTNULL:
			case OUTER_P:
			case OVER:
			case OVERLAPS:
			case RIGHT:
			case SIMILAR:
			case VERBOSE:
			case ABORT_P:
			case ABSOLUTE_P:
			case ACCESS:
			case ACTION:
			case ADD_P:
			case ADMIN:
			case AFTER:
			case AGGREGATE:
			case ALSO:
			case ALTER:
			case ALWAYS:
			case ASSERTION:
			case ASSIGNMENT:
			case AT:
			case ATTRIBUTE:
			case BACKWARD:
			case BEFORE:
			case BEGIN_P:
			case BY:
			case CACHE:
			case CALLED:
			case CASCADE:
			case CASCADED:
			case CATALOG:
			case CHAIN:
			case CHARACTERISTICS:
			case CHECKPOINT:
			case CLASS:
			case CLOSE:
			case CLUSTER:
			case COMMENT:
			case COMMENTS:
			case COMMIT:
			case COMMITTED:
			case CONFIGURATION:
			case CONNECTION:
			case CONSTRAINTS:
			case CONTENT_P:
			case CONTINUE_P:
			case CONVERSION_P:
			case COPY:
			case COST:
			case CSV:
			case CURSOR:
			case CYCLE:
			case DATA_P:
			case DATABASE:
			case DAY_P:
			case DEALLOCATE:
			case DECLARE:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE_P:
			case DELIMITER:
			case DELIMITERS:
			case DICTIONARY:
			case DISABLE_P:
			case DISCARD:
			case DOCUMENT_P:
			case DOMAIN_P:
			case DOUBLE_P:
			case DROP:
			case EACH:
			case ENABLE_P:
			case ENCODING:
			case ENCRYPTED:
			case ENUM_P:
			case ESCAPE:
			case EVENT:
			case EXCLUDE:
			case EXCLUDING:
			case EXCLUSIVE:
			case EXECUTE:
			case EXPLAIN:
			case EXTENSION:
			case EXTERNAL:
			case FAMILY:
			case FIRST_P:
			case FOLLOWING:
			case FORCE:
			case FORWARD:
			case FUNCTION:
			case FUNCTIONS:
			case GLOBAL:
			case GRANTED:
			case HANDLER:
			case HEADER_P:
			case HOLD:
			case HOUR_P:
			case IDENTITY_P:
			case IF_P:
			case IMMEDIATE:
			case IMMUTABLE:
			case IMPLICIT_P:
			case INCLUDING:
			case INCREMENT:
			case INDEX:
			case INDEXES:
			case INHERIT:
			case INHERITS:
			case INLINE_P:
			case INSENSITIVE:
			case INSERT:
			case INSTEAD:
			case INVOKER:
			case ISOLATION:
			case KEY:
			case LABEL:
			case LANGUAGE:
			case LARGE_P:
			case LAST_P:
			case LEAKPROOF:
			case LEVEL:
			case LISTEN:
			case LOAD:
			case LOCAL:
			case LOCATION:
			case LOCK_P:
			case MAPPING:
			case MATCH:
			case MATERIALIZED:
			case MAXVALUE:
			case MINUTE_P:
			case MINVALUE:
			case MODE:
			case MONTH_P:
			case MOVE:
			case NAME_P:
			case NAMES:
			case NEXT:
			case NO:
			case NOTHING:
			case NOTIFY:
			case NOWAIT:
			case NULLS_P:
			case OBJECT_P:
			case OF:
			case OFF:
			case OIDS:
			case OPERATOR:
			case OPTION:
			case OPTIONS:
			case OWNED:
			case OWNER:
			case PARSER:
			case PARTIAL:
			case PARTITION:
			case PASSING:
			case PASSWORD:
			case PLANS:
			case PRECEDING:
			case PREPARE:
			case PREPARED:
			case PRESERVE:
			case PRIOR:
			case PRIVILEGES:
			case PROCEDURAL:
			case PROCEDURE:
			case PROGRAM:
			case QUOTE:
			case RANGE:
			case READ:
			case REASSIGN:
			case RECHECK:
			case RECURSIVE:
			case REF:
			case REFRESH:
			case REINDEX:
			case RELATIVE_P:
			case RELEASE:
			case RENAME:
			case REPEATABLE:
			case REPLACE:
			case REPLICA:
			case RESET:
			case RESTART:
			case RESTRICT:
			case RETURNS:
			case REVOKE:
			case ROLE:
			case ROLLBACK:
			case ROWS:
			case RULE:
			case SAVEPOINT:
			case SCHEMA:
			case SCROLL:
			case SEARCH:
			case SECOND_P:
			case SECURITY:
			case SEQUENCE:
			case SEQUENCES:
			case SERIALIZABLE:
			case SERVER:
			case SESSION:
			case SET:
			case SHARE:
			case SHOW:
			case SIMPLE:
			case SNAPSHOT:
			case STABLE:
			case STANDALONE_P:
			case START:
			case STATEMENT:
			case STATISTICS:
			case STDIN:
			case STDOUT:
			case STORAGE:
			case STRICT_P:
			case STRIP_P:
			case SYSID:
			case SYSTEM_P:
			case TABLES:
			case TABLESPACE:
			case TEMP:
			case TEMPLATE:
			case TEMPORARY:
			case TEXT_P:
			case TRANSACTION:
			case TRIGGER:
			case TRUNCATE:
			case TRUSTED:
			case TYPE_P:
			case TYPES_P:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNENCRYPTED:
			case UNKNOWN:
			case UNLISTEN:
			case UNLOGGED:
			case UNTIL:
			case UPDATE:
			case VACUUM:
			case VALID:
			case VALIDATE:
			case VALIDATOR:
			case VARYING:
			case VERSION_P:
			case VIEW:
			case VOLATILE:
			case WHITESPACE_P:
			case WITHOUT:
			case WORK:
			case WRAPPER:
			case WRITE:
			case XML_P:
			case YEAR_P:
			case YES_P:
			case ZONE:
			case BETWEEN:
			case BIGINT:
			case BIT:
			case BOOLEAN_P:
			case CHAR_P:
			case CHARACTER:
			case COALESCE:
			case DEC:
			case DECIMAL_P:
			case EXISTS:
			case EXTRACT:
			case FLOAT_P:
			case GREATEST:
			case INOUT:
			case INT_P:
			case INTEGER:
			case INTERVAL:
			case LEAST:
			case NATIONAL:
			case NCHAR:
			case NONE:
			case NULLIF:
			case NUMERIC:
			case OVERLAY:
			case POSITION:
			case PRECISION:
			case REAL:
			case ROW:
			case SETOF:
			case SMALLINT:
			case SUBSTRING:
			case TIME:
			case TIMESTAMP:
			case TREAT:
			case TRIM:
			case VALUES:
			case VARCHAR:
			case XMLATTRIBUTES:
			case XMLCOMMENT:
			case XMLAGG:
			case XML_IS_WELL_FORMED:
			case XML_IS_WELL_FORMED_DOCUMENT:
			case XML_IS_WELL_FORMED_CONTENT:
			case XPATH:
			case XPATH_EXISTS:
			case XMLCONCAT:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLPARSE:
			case XMLPI:
			case XMLROOT:
			case XMLSERIALIZE:
			case CALL:
			case CURRENT_P:
			case ATTACH:
			case DETACH:
			case EXPRESSION:
			case GENERATED:
			case LOGGED:
			case STORED:
			case INCLUDE:
			case ROUTINE:
			case TRANSFORM:
			case IMPORT_P:
			case POLICY:
			case METHOD:
			case REFERENCING:
			case NEW:
			case OLD:
			case VALUE_P:
			case SUBSCRIPTION:
			case PUBLICATION:
			case OUT_P:
			case ROUTINES:
			case SCHEMAS:
			case PROCEDURES:
			case INPUT_P:
			case SUPPORT:
			case PARALLEL:
			case SQL_P:
			case DEPENDS:
			case OVERRIDING:
			case CONFLICT:
			case SKIP_P:
			case LOCKED:
			case TIES:
			case ROLLUP:
			case CUBE:
			case GROUPING:
			case SETS:
			case TABLESAMPLE:
			case ORDINALITY:
			case XMLTABLE:
			case COLUMNS:
			case XMLNAMESPACES:
			case ROWTYPE:
			case NORMALIZED:
			case WITHIN:
			case FILTER:
			case GROUPS:
			case OTHERS:
			case NFC:
			case NFD:
			case NFKC:
			case NFKD:
			case UESCAPE:
			case VIEWS:
			case NORMALIZE:
			case DUMP:
			case PRINT_STRICT_PARAMS:
			case VARIABLE_CONFLICT:
			case ERROR:
			case USE_VARIABLE:
			case USE_COLUMN:
			case ALIAS:
			case CONSTANT:
			case PERFORM:
			case GET:
			case DIAGNOSTICS:
			case STACKED:
			case ELSIF:
			case REVERSE:
			case SLICE:
			case EXIT:
			case RETURN:
			case QUERY:
			case RAISE:
			case SQLSTATE:
			case DEBUG:
			case LOG:
			case INFO:
			case NOTICE:
			case WARNING:
			case EXCEPTION:
			case ASSERT:
			case OPEN:
			case ABS:
			case CBRT:
			case CEIL:
			case CEILING:
			case DEGREES:
			case DIV:
			case EXP:
			case FACTORIAL:
			case FLOOR:
			case GCD:
			case LCM:
			case LN:
			case LOG10:
			case MIN_SCALE:
			case MOD:
			case PI:
			case POWER:
			case RADIANS:
			case ROUND:
			case SCALE:
			case SIGN:
			case SQRT:
			case TRIM_SCALE:
			case TRUNC:
			case WIDTH_BUCKET:
			case RANDOM:
			case SETSEED:
			case ACOS:
			case ACOSD:
			case ASIN:
			case ASIND:
			case ATAN:
			case ATAND:
			case ATAN2:
			case ATAN2D:
			case COS:
			case COSD:
			case COT:
			case COTD:
			case SIN:
			case SIND:
			case TAN:
			case TAND:
			case SINH:
			case COSH:
			case TANH:
			case ASINH:
			case ACOSH:
			case ATANH:
			case BIT_LENGTH:
			case CHAR_LENGTH:
			case CHARACTER_LENGTH:
			case LOWER:
			case OCTET_LENGTH:
			case UPPER:
			case ASCII:
			case BTRIM:
			case CHR:
			case CONCAT:
			case CONCAT_WS:
			case FORMAT:
			case INITCAP:
			case LENGTH:
			case LPAD:
			case LTRIM:
			case MD5:
			case PARSE_IDENT:
			case PG_CLIENT_ENCODING:
			case QUOTE_IDENT:
			case QUOTE_LITERAL:
			case QUOTE_NULLABLE:
			case REGEXP_COUNT:
			case REGEXP_INSTR:
			case REGEXP_LIKE:
			case REGEXP_MATCH:
			case REGEXP_MATCHES:
			case REGEXP_REPLACE:
			case REGEXP_SPLIT_TO_ARRAY:
			case REGEXP_SPLIT_TO_TABLE:
			case REGEXP_SUBSTR:
			case REPEAT:
			case RPAD:
			case RTRIM:
			case SPLIT_PART:
			case STARTS_WITH:
			case STRING_TO_ARRAY:
			case STRING_TO_TABLE:
			case STRPOS:
			case SUBSTR:
			case TO_ASCII:
			case TO_HEX:
			case TRANSLATE:
			case UNISTR:
			case AGE:
			case CLOCK_TIMESTAMP:
			case DATE_BIN:
			case DATE_PART:
			case DATE_TRUNC:
			case ISFINITE:
			case JUSTIFY_DAYS:
			case JUSTIFY_HOURS:
			case JUSTIFY_INTERVAL:
			case MAKE_DATE:
			case MAKE_INTERVAL:
			case MAKE_TIME:
			case MAKE_TIMESTAMP:
			case MAKE_TIMESTAMPTZ:
			case NOW:
			case STATEMENT_TIMESTAMP:
			case TIMEOFDAY:
			case TRANSACTION_TIMESTAMP:
			case TO_TIMESTAMP:
			case TO_CHAR:
			case TO_DATE:
			case TO_NUMBER:
			case Identifier:
			case QuotedIdentifier:
			case UnicodeQuotedIdentifier:
			case StringConstant:
			case UnicodeEscapeStringConstant:
			case BeginDollarStringConstant:
			case BinaryStringConstant:
			case HexadecimalStringConstant:
			case Integral:
			case Numeric:
			case PLSQLVARIABLENAME:
			case PLSQLIDENTIFIER:
			case EscapeStringConstant:
				EnterOuterAlt(_localctx, 1);
				{
				State = 8165;
				c_expr();
				}
				break;
			case PLUS:
				EnterOuterAlt(_localctx, 2);
				{
				State = 8166;
				Match(PLUS);
				State = 8167;
				i_or_f_const();
				}
				break;
			case MINUS:
				EnterOuterAlt(_localctx, 3);
				{
				State = 8168;
				Match(MINUS);
				State = 8169;
				i_or_f_const();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class I_or_f_constContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IconstContext iconst() {
			return GetRuleContext<IconstContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FconstContext fconst() {
			return GetRuleContext<FconstContext>(0);
		}
		public I_or_f_constContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_i_or_f_const; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterI_or_f_const(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitI_or_f_const(this);
		}
	}

	[RuleVersion(0)]
	public I_or_f_constContext i_or_f_const() {
		I_or_f_constContext _localctx = new I_or_f_constContext(Context, State);
		EnterRule(_localctx, 1018, RULE_i_or_f_const);
		try {
			State = 8174;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Integral:
				EnterOuterAlt(_localctx, 1);
				{
				State = 8172;
				iconst();
				}
				break;
			case Numeric:
				EnterOuterAlt(_localctx, 2);
				{
				State = 8173;
				fconst();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Row_or_rowsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROW() { return GetToken(PostgreSQLParser.ROW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROWS() { return GetToken(PostgreSQLParser.ROWS, 0); }
		public Row_or_rowsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_row_or_rows; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterRow_or_rows(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitRow_or_rows(this);
		}
	}

	[RuleVersion(0)]
	public Row_or_rowsContext row_or_rows() {
		Row_or_rowsContext _localctx = new Row_or_rowsContext(Context, State);
		EnterRule(_localctx, 1020, RULE_row_or_rows);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8176;
			_la = TokenStream.LA(1);
			if ( !(_la==ROWS || _la==ROW) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class First_or_nextContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FIRST_P() { return GetToken(PostgreSQLParser.FIRST_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NEXT() { return GetToken(PostgreSQLParser.NEXT, 0); }
		public First_or_nextContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_first_or_next; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterFirst_or_next(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitFirst_or_next(this);
		}
	}

	[RuleVersion(0)]
	public First_or_nextContext first_or_next() {
		First_or_nextContext _localctx = new First_or_nextContext(Context, State);
		EnterRule(_localctx, 1022, RULE_first_or_next);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8178;
			_la = TokenStream.LA(1);
			if ( !(_la==FIRST_P || _la==NEXT) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Group_clauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GROUP_P() { return GetToken(PostgreSQLParser.GROUP_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BY() { return GetToken(PostgreSQLParser.BY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Group_by_listContext group_by_list() {
			return GetRuleContext<Group_by_listContext>(0);
		}
		public Group_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_group_clause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterGroup_clause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitGroup_clause(this);
		}
	}

	[RuleVersion(0)]
	public Group_clauseContext group_clause() {
		Group_clauseContext _localctx = new Group_clauseContext(Context, State);
		EnterRule(_localctx, 1024, RULE_group_clause);
		try {
			State = 8184;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case GROUP_P:
				EnterOuterAlt(_localctx, 1);
				{
				State = 8180;
				Match(GROUP_P);
				State = 8181;
				Match(BY);
				State = 8182;
				group_by_list();
				}
				break;
			case Eof:
			case OPEN_PAREN:
			case CLOSE_PAREN:
			case COMMA:
			case SEMI:
			case ANALYSE:
			case ANALYZE:
			case CREATE:
			case DO:
			case EXCEPT:
			case FETCH:
			case FOR:
			case GRANT:
			case HAVING:
			case INTERSECT:
			case INTO:
			case LIMIT:
			case OFFSET:
			case ON:
			case ORDER:
			case RETURNING:
			case SELECT:
			case TABLE:
			case THEN:
			case UNION:
			case USING:
			case WHEN:
			case WINDOW:
			case WITH:
			case ABORT_P:
			case ALTER:
			case BEGIN_P:
			case CHECKPOINT:
			case CLOSE:
			case CLUSTER:
			case COMMENT:
			case COMMIT:
			case COPY:
			case DEALLOCATE:
			case DECLARE:
			case DELETE_P:
			case DISCARD:
			case DROP:
			case EXECUTE:
			case EXPLAIN:
			case INSERT:
			case LISTEN:
			case LOAD:
			case LOCK_P:
			case MERGE:
			case MOVE:
			case NOTIFY:
			case PREPARE:
			case REASSIGN:
			case REFRESH:
			case REINDEX:
			case RELEASE:
			case RESET:
			case REVOKE:
			case ROLLBACK:
			case SAVEPOINT:
			case SECURITY:
			case SET:
			case SHOW:
			case START:
			case TRUNCATE:
			case UNLISTEN:
			case UPDATE:
			case VACUUM:
			case VALUES:
			case CALL:
			case IMPORT_P:
			case END_P:
			case LOOP:
			case MetaCommand:
				EnterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Group_by_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Group_by_itemContext[] group_by_item() {
			return GetRuleContexts<Group_by_itemContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Group_by_itemContext group_by_item(int i) {
			return GetRuleContext<Group_by_itemContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(PostgreSQLParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(PostgreSQLParser.COMMA, i);
		}
		public Group_by_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_group_by_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterGroup_by_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitGroup_by_list(this);
		}
	}

	[RuleVersion(0)]
	public Group_by_listContext group_by_list() {
		Group_by_listContext _localctx = new Group_by_listContext(Context, State);
		EnterRule(_localctx, 1026, RULE_group_by_list);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 8186;
			group_by_item();
			State = 8191;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,455,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 8187;
					Match(COMMA);
					State = 8188;
					group_by_item();
					}
					} 
				}
				State = 8193;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,455,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Group_by_itemContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public A_exprContext a_expr() {
			return GetRuleContext<A_exprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Empty_grouping_setContext empty_grouping_set() {
			return GetRuleContext<Empty_grouping_setContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Cube_clauseContext cube_clause() {
			return GetRuleContext<Cube_clauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Rollup_clauseContext rollup_clause() {
			return GetRuleContext<Rollup_clauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Grouping_sets_clauseContext grouping_sets_clause() {
			return GetRuleContext<Grouping_sets_clauseContext>(0);
		}
		public Group_by_itemContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_group_by_item; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterGroup_by_item(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitGroup_by_item(this);
		}
	}

	[RuleVersion(0)]
	public Group_by_itemContext group_by_item() {
		Group_by_itemContext _localctx = new Group_by_itemContext(Context, State);
		EnterRule(_localctx, 1028, RULE_group_by_item);
		try {
			State = 8199;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,456,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 8194;
				a_expr();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 8195;
				empty_grouping_set();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 8196;
				cube_clause();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 8197;
				rollup_clause();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 8198;
				grouping_sets_clause();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Empty_grouping_setContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAREN() { return GetToken(PostgreSQLParser.OPEN_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAREN() { return GetToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public Empty_grouping_setContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_empty_grouping_set; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterEmpty_grouping_set(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitEmpty_grouping_set(this);
		}
	}

	[RuleVersion(0)]
	public Empty_grouping_setContext empty_grouping_set() {
		Empty_grouping_setContext _localctx = new Empty_grouping_setContext(Context, State);
		EnterRule(_localctx, 1030, RULE_empty_grouping_set);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8201;
			Match(OPEN_PAREN);
			State = 8202;
			Match(CLOSE_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Rollup_clauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROLLUP() { return GetToken(PostgreSQLParser.ROLLUP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAREN() { return GetToken(PostgreSQLParser.OPEN_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Expr_listContext expr_list() {
			return GetRuleContext<Expr_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAREN() { return GetToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public Rollup_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rollup_clause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterRollup_clause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitRollup_clause(this);
		}
	}

	[RuleVersion(0)]
	public Rollup_clauseContext rollup_clause() {
		Rollup_clauseContext _localctx = new Rollup_clauseContext(Context, State);
		EnterRule(_localctx, 1032, RULE_rollup_clause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8204;
			Match(ROLLUP);
			State = 8205;
			Match(OPEN_PAREN);
			State = 8206;
			expr_list();
			State = 8207;
			Match(CLOSE_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Cube_clauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CUBE() { return GetToken(PostgreSQLParser.CUBE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAREN() { return GetToken(PostgreSQLParser.OPEN_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Expr_listContext expr_list() {
			return GetRuleContext<Expr_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAREN() { return GetToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public Cube_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_cube_clause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterCube_clause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitCube_clause(this);
		}
	}

	[RuleVersion(0)]
	public Cube_clauseContext cube_clause() {
		Cube_clauseContext _localctx = new Cube_clauseContext(Context, State);
		EnterRule(_localctx, 1034, RULE_cube_clause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8209;
			Match(CUBE);
			State = 8210;
			Match(OPEN_PAREN);
			State = 8211;
			expr_list();
			State = 8212;
			Match(CLOSE_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Grouping_sets_clauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GROUPING() { return GetToken(PostgreSQLParser.GROUPING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SETS() { return GetToken(PostgreSQLParser.SETS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAREN() { return GetToken(PostgreSQLParser.OPEN_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Group_by_listContext group_by_list() {
			return GetRuleContext<Group_by_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAREN() { return GetToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public Grouping_sets_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_grouping_sets_clause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterGrouping_sets_clause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitGrouping_sets_clause(this);
		}
	}

	[RuleVersion(0)]
	public Grouping_sets_clauseContext grouping_sets_clause() {
		Grouping_sets_clauseContext _localctx = new Grouping_sets_clauseContext(Context, State);
		EnterRule(_localctx, 1036, RULE_grouping_sets_clause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8214;
			Match(GROUPING);
			State = 8215;
			Match(SETS);
			State = 8216;
			Match(OPEN_PAREN);
			State = 8217;
			group_by_list();
			State = 8218;
			Match(CLOSE_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Having_clauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HAVING() { return GetToken(PostgreSQLParser.HAVING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public A_exprContext a_expr() {
			return GetRuleContext<A_exprContext>(0);
		}
		public Having_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_having_clause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterHaving_clause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitHaving_clause(this);
		}
	}

	[RuleVersion(0)]
	public Having_clauseContext having_clause() {
		Having_clauseContext _localctx = new Having_clauseContext(Context, State);
		EnterRule(_localctx, 1038, RULE_having_clause);
		try {
			State = 8223;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case HAVING:
				EnterOuterAlt(_localctx, 1);
				{
				State = 8220;
				Match(HAVING);
				State = 8221;
				a_expr();
				}
				break;
			case Eof:
			case OPEN_PAREN:
			case CLOSE_PAREN:
			case COMMA:
			case SEMI:
			case ANALYSE:
			case ANALYZE:
			case CREATE:
			case DO:
			case EXCEPT:
			case FETCH:
			case FOR:
			case GRANT:
			case INTERSECT:
			case INTO:
			case LIMIT:
			case OFFSET:
			case ON:
			case ORDER:
			case RETURNING:
			case SELECT:
			case TABLE:
			case THEN:
			case UNION:
			case USING:
			case WHEN:
			case WINDOW:
			case WITH:
			case ABORT_P:
			case ALTER:
			case BEGIN_P:
			case CHECKPOINT:
			case CLOSE:
			case CLUSTER:
			case COMMENT:
			case COMMIT:
			case COPY:
			case DEALLOCATE:
			case DECLARE:
			case DELETE_P:
			case DISCARD:
			case DROP:
			case EXECUTE:
			case EXPLAIN:
			case INSERT:
			case LISTEN:
			case LOAD:
			case LOCK_P:
			case MERGE:
			case MOVE:
			case NOTIFY:
			case PREPARE:
			case REASSIGN:
			case REFRESH:
			case REINDEX:
			case RELEASE:
			case RESET:
			case REVOKE:
			case ROLLBACK:
			case SAVEPOINT:
			case SECURITY:
			case SET:
			case SHOW:
			case START:
			case TRUNCATE:
			case UNLISTEN:
			case UPDATE:
			case VACUUM:
			case VALUES:
			case CALL:
			case IMPORT_P:
			case END_P:
			case LOOP:
			case MetaCommand:
				EnterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class For_locking_clauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public For_locking_itemsContext for_locking_items() {
			return GetRuleContext<For_locking_itemsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOR() { return GetToken(PostgreSQLParser.FOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode READ() { return GetToken(PostgreSQLParser.READ, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ONLY() { return GetToken(PostgreSQLParser.ONLY, 0); }
		public For_locking_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_for_locking_clause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterFor_locking_clause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitFor_locking_clause(this);
		}
	}

	[RuleVersion(0)]
	public For_locking_clauseContext for_locking_clause() {
		For_locking_clauseContext _localctx = new For_locking_clauseContext(Context, State);
		EnterRule(_localctx, 1040, RULE_for_locking_clause);
		try {
			State = 8229;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,458,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 8225;
				for_locking_items();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 8226;
				Match(FOR);
				State = 8227;
				Match(READ);
				State = 8228;
				Match(ONLY);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Opt_for_locking_clauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public For_locking_clauseContext for_locking_clause() {
			return GetRuleContext<For_locking_clauseContext>(0);
		}
		public Opt_for_locking_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_opt_for_locking_clause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterOpt_for_locking_clause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitOpt_for_locking_clause(this);
		}
	}

	[RuleVersion(0)]
	public Opt_for_locking_clauseContext opt_for_locking_clause() {
		Opt_for_locking_clauseContext _localctx = new Opt_for_locking_clauseContext(Context, State);
		EnterRule(_localctx, 1042, RULE_opt_for_locking_clause);
		try {
			State = 8233;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case FOR:
				EnterOuterAlt(_localctx, 1);
				{
				State = 8231;
				for_locking_clause();
				}
				break;
			case Eof:
			case OPEN_PAREN:
			case CLOSE_PAREN:
			case SEMI:
			case ANALYSE:
			case ANALYZE:
			case CREATE:
			case DO:
			case FETCH:
			case GRANT:
			case INTO:
			case ON:
			case RETURNING:
			case SELECT:
			case TABLE:
			case WITH:
			case ABORT_P:
			case ALTER:
			case BEGIN_P:
			case CHECKPOINT:
			case CLOSE:
			case CLUSTER:
			case COMMENT:
			case COMMIT:
			case COPY:
			case DEALLOCATE:
			case DECLARE:
			case DELETE_P:
			case DISCARD:
			case DROP:
			case EXECUTE:
			case EXPLAIN:
			case INSERT:
			case LISTEN:
			case LOAD:
			case LOCK_P:
			case MERGE:
			case MOVE:
			case NOTIFY:
			case PREPARE:
			case REASSIGN:
			case REFRESH:
			case REINDEX:
			case RELEASE:
			case RESET:
			case REVOKE:
			case ROLLBACK:
			case SAVEPOINT:
			case SECURITY:
			case SET:
			case SHOW:
			case START:
			case TRUNCATE:
			case UNLISTEN:
			case UPDATE:
			case VACUUM:
			case VALUES:
			case CALL:
			case IMPORT_P:
			case END_P:
			case LOOP:
			case MetaCommand:
				EnterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class For_locking_itemsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public For_locking_itemContext[] for_locking_item() {
			return GetRuleContexts<For_locking_itemContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public For_locking_itemContext for_locking_item(int i) {
			return GetRuleContext<For_locking_itemContext>(i);
		}
		public For_locking_itemsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_for_locking_items; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterFor_locking_items(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitFor_locking_items(this);
		}
	}

	[RuleVersion(0)]
	public For_locking_itemsContext for_locking_items() {
		For_locking_itemsContext _localctx = new For_locking_itemsContext(Context, State);
		EnterRule(_localctx, 1044, RULE_for_locking_items);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8236;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 8235;
				for_locking_item();
				}
				}
				State = 8238;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==FOR );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class For_locking_itemContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public For_locking_strengthContext for_locking_strength() {
			return GetRuleContext<For_locking_strengthContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Locked_rels_listContext locked_rels_list() {
			return GetRuleContext<Locked_rels_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Opt_nowait_or_skipContext opt_nowait_or_skip() {
			return GetRuleContext<Opt_nowait_or_skipContext>(0);
		}
		public For_locking_itemContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_for_locking_item; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterFor_locking_item(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitFor_locking_item(this);
		}
	}

	[RuleVersion(0)]
	public For_locking_itemContext for_locking_item() {
		For_locking_itemContext _localctx = new For_locking_itemContext(Context, State);
		EnterRule(_localctx, 1046, RULE_for_locking_item);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8240;
			for_locking_strength();
			State = 8241;
			locked_rels_list();
			State = 8242;
			opt_nowait_or_skip();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class For_locking_strengthContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOR() { return GetToken(PostgreSQLParser.FOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UPDATE() { return GetToken(PostgreSQLParser.UPDATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SHARE() { return GetToken(PostgreSQLParser.SHARE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NO() { return GetToken(PostgreSQLParser.NO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEY() { return GetToken(PostgreSQLParser.KEY, 0); }
		public For_locking_strengthContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_for_locking_strength; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterFor_locking_strength(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitFor_locking_strength(this);
		}
	}

	[RuleVersion(0)]
	public For_locking_strengthContext for_locking_strength() {
		For_locking_strengthContext _localctx = new For_locking_strengthContext(Context, State);
		EnterRule(_localctx, 1048, RULE_for_locking_strength);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8244;
			Match(FOR);
			State = 8254;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case NO:
			case UPDATE:
				{
				State = 8247;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==NO) {
					{
					State = 8245;
					Match(NO);
					State = 8246;
					Match(KEY);
					}
				}

				State = 8249;
				Match(UPDATE);
				}
				break;
			case KEY:
			case SHARE:
				{
				State = 8251;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==KEY) {
					{
					State = 8250;
					Match(KEY);
					}
				}

				State = 8253;
				Match(SHARE);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Locked_rels_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OF() { return GetToken(PostgreSQLParser.OF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Qualified_name_listContext qualified_name_list() {
			return GetRuleContext<Qualified_name_listContext>(0);
		}
		public Locked_rels_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_locked_rels_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterLocked_rels_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitLocked_rels_list(this);
		}
	}

	[RuleVersion(0)]
	public Locked_rels_listContext locked_rels_list() {
		Locked_rels_listContext _localctx = new Locked_rels_listContext(Context, State);
		EnterRule(_localctx, 1050, RULE_locked_rels_list);
		try {
			State = 8259;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case OF:
				EnterOuterAlt(_localctx, 1);
				{
				State = 8256;
				Match(OF);
				State = 8257;
				qualified_name_list();
				}
				break;
			case Eof:
			case OPEN_PAREN:
			case CLOSE_PAREN:
			case SEMI:
			case ANALYSE:
			case ANALYZE:
			case CREATE:
			case DO:
			case FETCH:
			case FOR:
			case GRANT:
			case INTO:
			case LIMIT:
			case OFFSET:
			case ON:
			case RETURNING:
			case SELECT:
			case TABLE:
			case WITH:
			case ABORT_P:
			case ALTER:
			case BEGIN_P:
			case CHECKPOINT:
			case CLOSE:
			case CLUSTER:
			case COMMENT:
			case COMMIT:
			case COPY:
			case DEALLOCATE:
			case DECLARE:
			case DELETE_P:
			case DISCARD:
			case DROP:
			case EXECUTE:
			case EXPLAIN:
			case INSERT:
			case LISTEN:
			case LOAD:
			case LOCK_P:
			case MERGE:
			case MOVE:
			case NOTIFY:
			case NOWAIT:
			case PREPARE:
			case REASSIGN:
			case REFRESH:
			case REINDEX:
			case RELEASE:
			case RESET:
			case REVOKE:
			case ROLLBACK:
			case SAVEPOINT:
			case SECURITY:
			case SET:
			case SHOW:
			case START:
			case TRUNCATE:
			case UNLISTEN:
			case UPDATE:
			case VACUUM:
			case VALUES:
			case CALL:
			case IMPORT_P:
			case END_P:
			case SKIP_P:
			case LOOP:
			case MetaCommand:
				EnterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Values_clauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VALUES() { return GetToken(PostgreSQLParser.VALUES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] OPEN_PAREN() { return GetTokens(PostgreSQLParser.OPEN_PAREN); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAREN(int i) {
			return GetToken(PostgreSQLParser.OPEN_PAREN, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Expr_listContext[] expr_list() {
			return GetRuleContexts<Expr_listContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Expr_listContext expr_list(int i) {
			return GetRuleContext<Expr_listContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] CLOSE_PAREN() { return GetTokens(PostgreSQLParser.CLOSE_PAREN); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAREN(int i) {
			return GetToken(PostgreSQLParser.CLOSE_PAREN, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(PostgreSQLParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(PostgreSQLParser.COMMA, i);
		}
		public Values_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_values_clause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterValues_clause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitValues_clause(this);
		}
	}

	[RuleVersion(0)]
	public Values_clauseContext values_clause() {
		Values_clauseContext _localctx = new Values_clauseContext(Context, State);
		EnterRule(_localctx, 1052, RULE_values_clause);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8261;
			Match(VALUES);
			State = 8262;
			Match(OPEN_PAREN);
			State = 8263;
			expr_list();
			State = 8264;
			Match(CLOSE_PAREN);
			State = 8272;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 8265;
				Match(COMMA);
				State = 8266;
				Match(OPEN_PAREN);
				State = 8267;
				expr_list();
				State = 8268;
				Match(CLOSE_PAREN);
				}
				}
				State = 8274;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class From_clauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FROM() { return GetToken(PostgreSQLParser.FROM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public From_listContext from_list() {
			return GetRuleContext<From_listContext>(0);
		}
		public From_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_from_clause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterFrom_clause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitFrom_clause(this);
		}
	}

	[RuleVersion(0)]
	public From_clauseContext from_clause() {
		From_clauseContext _localctx = new From_clauseContext(Context, State);
		EnterRule(_localctx, 1054, RULE_from_clause);
		try {
			State = 8278;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case FROM:
				EnterOuterAlt(_localctx, 1);
				{
				State = 8275;
				Match(FROM);
				State = 8276;
				from_list();
				}
				break;
			case Eof:
			case OPEN_PAREN:
			case CLOSE_PAREN:
			case COMMA:
			case SEMI:
			case ANALYSE:
			case ANALYZE:
			case CREATE:
			case DO:
			case EXCEPT:
			case FETCH:
			case FOR:
			case GRANT:
			case GROUP_P:
			case HAVING:
			case INTERSECT:
			case INTO:
			case LIMIT:
			case OFFSET:
			case ON:
			case ORDER:
			case RETURNING:
			case SELECT:
			case TABLE:
			case THEN:
			case UNION:
			case USING:
			case WHEN:
			case WHERE:
			case WINDOW:
			case WITH:
			case ABORT_P:
			case ALTER:
			case BEGIN_P:
			case CHECKPOINT:
			case CLOSE:
			case CLUSTER:
			case COMMENT:
			case COMMIT:
			case COPY:
			case DEALLOCATE:
			case DECLARE:
			case DELETE_P:
			case DISCARD:
			case DROP:
			case EXECUTE:
			case EXPLAIN:
			case INSERT:
			case LISTEN:
			case LOAD:
			case LOCK_P:
			case MERGE:
			case MOVE:
			case NOTIFY:
			case PREPARE:
			case REASSIGN:
			case REFRESH:
			case REINDEX:
			case RELEASE:
			case RESET:
			case REVOKE:
			case ROLLBACK:
			case SAVEPOINT:
			case SECURITY:
			case SET:
			case SHOW:
			case START:
			case TRUNCATE:
			case UNLISTEN:
			case UPDATE:
			case VACUUM:
			case VALUES:
			case CALL:
			case IMPORT_P:
			case END_P:
			case LOOP:
			case MetaCommand:
				EnterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class From_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Non_ansi_joinContext non_ansi_join() {
			return GetRuleContext<Non_ansi_joinContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Table_refContext[] table_ref() {
			return GetRuleContexts<Table_refContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Table_refContext table_ref(int i) {
			return GetRuleContext<Table_refContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(PostgreSQLParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(PostgreSQLParser.COMMA, i);
		}
		public From_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_from_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterFrom_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitFrom_list(this);
		}
	}

	[RuleVersion(0)]
	public From_listContext from_list() {
		From_listContext _localctx = new From_listContext(Context, State);
		EnterRule(_localctx, 1056, RULE_from_list);
		try {
			int _alt;
			State = 8289;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,468,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 8280;
				non_ansi_join();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 8281;
				table_ref();
				State = 8286;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,467,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 8282;
						Match(COMMA);
						State = 8283;
						table_ref();
						}
						} 
					}
					State = 8288;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,467,Context);
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Non_ansi_joinContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Table_refContext[] table_ref() {
			return GetRuleContexts<Table_refContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Table_refContext table_ref(int i) {
			return GetRuleContext<Table_refContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(PostgreSQLParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(PostgreSQLParser.COMMA, i);
		}
		public Non_ansi_joinContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_non_ansi_join; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterNon_ansi_join(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitNon_ansi_join(this);
		}
	}

	[RuleVersion(0)]
	public Non_ansi_joinContext non_ansi_join() {
		Non_ansi_joinContext _localctx = new Non_ansi_joinContext(Context, State);
		EnterRule(_localctx, 1058, RULE_non_ansi_join);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 8291;
			table_ref();
			State = 8294;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 8292;
					Match(COMMA);
					State = 8293;
					table_ref();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 8296;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,469,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Table_refContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Relation_exprContext relation_expr() {
			return GetRuleContext<Relation_exprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Opt_alias_clauseContext opt_alias_clause() {
			return GetRuleContext<Opt_alias_clauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Func_tableContext func_table() {
			return GetRuleContext<Func_tableContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Func_alias_clauseContext func_alias_clause() {
			return GetRuleContext<Func_alias_clauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public XmltableContext xmltable() {
			return GetRuleContext<XmltableContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Select_with_parensContext select_with_parens() {
			return GetRuleContext<Select_with_parensContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LATERAL_P() { return GetToken(PostgreSQLParser.LATERAL_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAREN() { return GetToken(PostgreSQLParser.OPEN_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Table_refContext[] table_ref() {
			return GetRuleContexts<Table_refContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Table_refContext table_ref(int i) {
			return GetRuleContext<Table_refContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAREN() { return GetToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] CROSS() { return GetTokens(PostgreSQLParser.CROSS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CROSS(int i) {
			return GetToken(PostgreSQLParser.CROSS, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] JOIN() { return GetTokens(PostgreSQLParser.JOIN); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode JOIN(int i) {
			return GetToken(PostgreSQLParser.JOIN, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NATURAL() { return GetTokens(PostgreSQLParser.NATURAL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NATURAL(int i) {
			return GetToken(PostgreSQLParser.NATURAL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Join_qualContext[] join_qual() {
			return GetRuleContexts<Join_qualContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Join_qualContext join_qual(int i) {
			return GetRuleContext<Join_qualContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Tablesample_clauseContext tablesample_clause() {
			return GetRuleContext<Tablesample_clauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Join_typeContext[] join_type() {
			return GetRuleContexts<Join_typeContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Join_typeContext join_type(int i) {
			return GetRuleContext<Join_typeContext>(i);
		}
		public Table_refContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_table_ref; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterTable_ref(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitTable_ref(this);
		}
	}

	[RuleVersion(0)]
	public Table_refContext table_ref() {
		Table_refContext _localctx = new Table_refContext(Context, State);
		EnterRule(_localctx, 1060, RULE_table_ref);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 8347;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,475,Context) ) {
			case 1:
				{
				State = 8298;
				relation_expr();
				State = 8299;
				opt_alias_clause();
				State = 8301;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==TABLESAMPLE) {
					{
					State = 8300;
					tablesample_clause();
					}
				}

				}
				break;
			case 2:
				{
				State = 8303;
				func_table();
				State = 8304;
				func_alias_clause();
				}
				break;
			case 3:
				{
				State = 8306;
				xmltable();
				State = 8307;
				opt_alias_clause();
				}
				break;
			case 4:
				{
				State = 8309;
				select_with_parens();
				State = 8310;
				opt_alias_clause();
				}
				break;
			case 5:
				{
				State = 8312;
				Match(LATERAL_P);
				State = 8322;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,471,Context) ) {
				case 1:
					{
					State = 8313;
					xmltable();
					State = 8314;
					opt_alias_clause();
					}
					break;
				case 2:
					{
					State = 8316;
					func_table();
					State = 8317;
					func_alias_clause();
					}
					break;
				case 3:
					{
					State = 8319;
					select_with_parens();
					State = 8320;
					opt_alias_clause();
					}
					break;
				}
				}
				break;
			case 6:
				{
				State = 8324;
				Match(OPEN_PAREN);
				State = 8325;
				table_ref();
				State = 8342;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case CROSS:
					{
					State = 8326;
					Match(CROSS);
					State = 8327;
					Match(JOIN);
					State = 8328;
					table_ref();
					}
					break;
				case NATURAL:
					{
					State = 8329;
					Match(NATURAL);
					State = 8331;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if ((((_la - 113)) & ~0x3f) == 0 && ((1L << (_la - 113)) & 8261L) != 0) {
						{
						State = 8330;
						join_type();
						}
					}

					State = 8333;
					Match(JOIN);
					State = 8334;
					table_ref();
					}
					break;
				case FULL:
				case INNER_P:
				case JOIN:
				case LEFT:
				case RIGHT:
					{
					State = 8336;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if ((((_la - 113)) & ~0x3f) == 0 && ((1L << (_la - 113)) & 8261L) != 0) {
						{
						State = 8335;
						join_type();
						}
					}

					State = 8338;
					Match(JOIN);
					State = 8339;
					table_ref();
					State = 8340;
					join_qual();
					}
					break;
				case CLOSE_PAREN:
					break;
				default:
					break;
				}
				State = 8344;
				Match(CLOSE_PAREN);
				State = 8345;
				opt_alias_clause();
				}
				break;
			}
			State = 8367;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,479,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					State = 8365;
					ErrorHandler.Sync(this);
					switch (TokenStream.LA(1)) {
					case CROSS:
						{
						State = 8349;
						Match(CROSS);
						State = 8350;
						Match(JOIN);
						State = 8351;
						table_ref();
						}
						break;
					case NATURAL:
						{
						State = 8352;
						Match(NATURAL);
						State = 8354;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if ((((_la - 113)) & ~0x3f) == 0 && ((1L << (_la - 113)) & 8261L) != 0) {
							{
							State = 8353;
							join_type();
							}
						}

						State = 8356;
						Match(JOIN);
						State = 8357;
						table_ref();
						}
						break;
					case FULL:
					case INNER_P:
					case JOIN:
					case LEFT:
					case RIGHT:
						{
						State = 8359;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if ((((_la - 113)) & ~0x3f) == 0 && ((1L << (_la - 113)) & 8261L) != 0) {
							{
							State = 8358;
							join_type();
							}
						}

						State = 8361;
						Match(JOIN);
						State = 8362;
						table_ref();
						State = 8363;
						join_qual();
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					} 
				}
				State = 8369;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,479,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alias_clauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ColidContext colid() {
			return GetRuleContext<ColidContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS() { return GetToken(PostgreSQLParser.AS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAREN() { return GetToken(PostgreSQLParser.OPEN_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Name_listContext name_list() {
			return GetRuleContext<Name_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAREN() { return GetToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public Alias_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alias_clause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterAlias_clause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitAlias_clause(this);
		}
	}

	[RuleVersion(0)]
	public Alias_clauseContext alias_clause() {
		Alias_clauseContext _localctx = new Alias_clauseContext(Context, State);
		EnterRule(_localctx, 1062, RULE_alias_clause);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8371;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==AS) {
				{
				State = 8370;
				Match(AS);
				}
			}

			State = 8373;
			colid();
			State = 8378;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,481,Context) ) {
			case 1:
				{
				State = 8374;
				Match(OPEN_PAREN);
				State = 8375;
				name_list();
				State = 8376;
				Match(CLOSE_PAREN);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Opt_alias_clauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Table_alias_clauseContext table_alias_clause() {
			return GetRuleContext<Table_alias_clauseContext>(0);
		}
		public Opt_alias_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_opt_alias_clause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterOpt_alias_clause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitOpt_alias_clause(this);
		}
	}

	[RuleVersion(0)]
	public Opt_alias_clauseContext opt_alias_clause() {
		Opt_alias_clauseContext _localctx = new Opt_alias_clauseContext(Context, State);
		EnterRule(_localctx, 1064, RULE_opt_alias_clause);
		try {
			State = 8382;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,482,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 8380;
				table_alias_clause();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Table_alias_clauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Table_aliasContext table_alias() {
			return GetRuleContext<Table_aliasContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS() { return GetToken(PostgreSQLParser.AS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAREN() { return GetToken(PostgreSQLParser.OPEN_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Name_listContext name_list() {
			return GetRuleContext<Name_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAREN() { return GetToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public Table_alias_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_table_alias_clause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterTable_alias_clause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitTable_alias_clause(this);
		}
	}

	[RuleVersion(0)]
	public Table_alias_clauseContext table_alias_clause() {
		Table_alias_clauseContext _localctx = new Table_alias_clauseContext(Context, State);
		EnterRule(_localctx, 1066, RULE_table_alias_clause);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8385;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==AS) {
				{
				State = 8384;
				Match(AS);
				}
			}

			State = 8387;
			table_alias();
			State = 8392;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,484,Context) ) {
			case 1:
				{
				State = 8388;
				Match(OPEN_PAREN);
				State = 8389;
				name_list();
				State = 8390;
				Match(CLOSE_PAREN);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Func_alias_clauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Alias_clauseContext alias_clause() {
			return GetRuleContext<Alias_clauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAREN() { return GetToken(PostgreSQLParser.OPEN_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TablefuncelementlistContext tablefuncelementlist() {
			return GetRuleContext<TablefuncelementlistContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAREN() { return GetToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS() { return GetToken(PostgreSQLParser.AS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ColidContext colid() {
			return GetRuleContext<ColidContext>(0);
		}
		public Func_alias_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_func_alias_clause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterFunc_alias_clause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitFunc_alias_clause(this);
		}
	}

	[RuleVersion(0)]
	public Func_alias_clauseContext func_alias_clause() {
		Func_alias_clauseContext _localctx = new Func_alias_clauseContext(Context, State);
		EnterRule(_localctx, 1068, RULE_func_alias_clause);
		int _la;
		try {
			State = 8407;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,487,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 8394;
				alias_clause();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 8400;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case AS:
					{
					State = 8395;
					Match(AS);
					State = 8397;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (((_la) & ~0x3f) == 0 && ((1L << _la) & 2459027012145119232L) != 0 || (((_la - 92)) & ~0x3f) == 0 && ((1L << (_la - 92)) & -2251913479323647L) != 0 || (((_la - 156)) & ~0x3f) == 0 && ((1L << (_la - 156)) & -1L) != 0 || (((_la - 220)) & ~0x3f) == 0 && ((1L << (_la - 220)) & -19327352833L) != 0 || (((_la - 284)) & ~0x3f) == 0 && ((1L << (_la - 284)) & -1L) != 0 || (((_la - 348)) & ~0x3f) == 0 && ((1L << (_la - 348)) & -1L) != 0 || (((_la - 412)) & ~0x3f) == 0 && ((1L << (_la - 412)) & -2305851805306716161L) != 0 || (((_la - 476)) & ~0x3f) == 0 && ((1L << (_la - 476)) & -17593528221697L) != 0 || (((_la - 540)) & ~0x3f) == 0 && ((1L << (_la - 540)) & -1L) != 0 || (((_la - 604)) & ~0x3f) == 0 && ((1L << (_la - 604)) & 864691437692780543L) != 0) {
						{
						State = 8396;
						colid();
						}
					}

					}
					break;
				case AND:
				case ARRAY:
				case COLLATE:
				case COLUMN:
				case CONSTRAINT:
				case DEFAULT:
				case DO:
				case FETCH:
				case TABLE:
				case IS:
				case LEFT:
				case OUTER_P:
				case OVER:
				case RIGHT:
				case ABORT_P:
				case ABSOLUTE_P:
				case ACCESS:
				case ACTION:
				case ADD_P:
				case ADMIN:
				case AFTER:
				case AGGREGATE:
				case ALSO:
				case ALTER:
				case ALWAYS:
				case ASSERTION:
				case ASSIGNMENT:
				case AT:
				case ATTRIBUTE:
				case BACKWARD:
				case BEFORE:
				case BEGIN_P:
				case BY:
				case CACHE:
				case CALLED:
				case CASCADE:
				case CASCADED:
				case CATALOG:
				case CHAIN:
				case CHARACTERISTICS:
				case CHECKPOINT:
				case CLASS:
				case CLOSE:
				case CLUSTER:
				case COMMENT:
				case COMMENTS:
				case COMMIT:
				case COMMITTED:
				case CONFIGURATION:
				case CONNECTION:
				case CONSTRAINTS:
				case CONTENT_P:
				case CONTINUE_P:
				case CONVERSION_P:
				case COPY:
				case COST:
				case CSV:
				case CURSOR:
				case CYCLE:
				case DATA_P:
				case DATABASE:
				case DAY_P:
				case DEALLOCATE:
				case DECLARE:
				case DEFAULTS:
				case DEFERRED:
				case DEFINER:
				case DELETE_P:
				case DELIMITER:
				case DELIMITERS:
				case DICTIONARY:
				case DISABLE_P:
				case DISCARD:
				case DOCUMENT_P:
				case DOMAIN_P:
				case DOUBLE_P:
				case DROP:
				case EACH:
				case ENABLE_P:
				case ENCODING:
				case ENCRYPTED:
				case ENUM_P:
				case ESCAPE:
				case EVENT:
				case EXCLUDE:
				case EXCLUDING:
				case EXCLUSIVE:
				case EXECUTE:
				case EXPLAIN:
				case EXTENSION:
				case EXTERNAL:
				case FAMILY:
				case FIRST_P:
				case FOLLOWING:
				case FORCE:
				case FORWARD:
				case FUNCTION:
				case FUNCTIONS:
				case GLOBAL:
				case GRANTED:
				case HANDLER:
				case HEADER_P:
				case HOLD:
				case HOUR_P:
				case IDENTITY_P:
				case IF_P:
				case IMMEDIATE:
				case IMMUTABLE:
				case IMPLICIT_P:
				case INCLUDING:
				case INCREMENT:
				case INDEX:
				case INDEXES:
				case INHERIT:
				case INHERITS:
				case INLINE_P:
				case INSENSITIVE:
				case INSERT:
				case INSTEAD:
				case INVOKER:
				case ISOLATION:
				case KEY:
				case LABEL:
				case LANGUAGE:
				case LARGE_P:
				case LAST_P:
				case LEAKPROOF:
				case LEVEL:
				case LISTEN:
				case LOAD:
				case LOCAL:
				case LOCATION:
				case LOCK_P:
				case MAPPING:
				case MATCH:
				case MATERIALIZED:
				case MAXVALUE:
				case MINUTE_P:
				case MINVALUE:
				case MODE:
				case MONTH_P:
				case MOVE:
				case NAME_P:
				case NAMES:
				case NEXT:
				case NO:
				case NOTHING:
				case NOTIFY:
				case NOWAIT:
				case NULLS_P:
				case OBJECT_P:
				case OF:
				case OFF:
				case OIDS:
				case OPERATOR:
				case OPTION:
				case OPTIONS:
				case OWNED:
				case OWNER:
				case PARSER:
				case PARTIAL:
				case PARTITION:
				case PASSING:
				case PASSWORD:
				case PLANS:
				case PRECEDING:
				case PREPARE:
				case PREPARED:
				case PRESERVE:
				case PRIOR:
				case PRIVILEGES:
				case PROCEDURAL:
				case PROCEDURE:
				case PROGRAM:
				case QUOTE:
				case RANGE:
				case READ:
				case REASSIGN:
				case RECHECK:
				case RECURSIVE:
				case REF:
				case REFRESH:
				case REINDEX:
				case RELATIVE_P:
				case RELEASE:
				case RENAME:
				case REPEATABLE:
				case REPLACE:
				case REPLICA:
				case RESET:
				case RESTART:
				case RESTRICT:
				case RETURNS:
				case REVOKE:
				case ROLE:
				case ROLLBACK:
				case ROWS:
				case RULE:
				case SAVEPOINT:
				case SCHEMA:
				case SCROLL:
				case SEARCH:
				case SECOND_P:
				case SECURITY:
				case SEQUENCE:
				case SEQUENCES:
				case SERIALIZABLE:
				case SERVER:
				case SESSION:
				case SET:
				case SHARE:
				case SHOW:
				case SIMPLE:
				case SNAPSHOT:
				case STABLE:
				case STANDALONE_P:
				case START:
				case STATEMENT:
				case STATISTICS:
				case STDIN:
				case STDOUT:
				case STORAGE:
				case STRICT_P:
				case STRIP_P:
				case SYSID:
				case SYSTEM_P:
				case TABLES:
				case TABLESPACE:
				case TEMP:
				case TEMPLATE:
				case TEMPORARY:
				case TEXT_P:
				case TRANSACTION:
				case TRIGGER:
				case TRUNCATE:
				case TRUSTED:
				case TYPE_P:
				case TYPES_P:
				case UNBOUNDED:
				case UNCOMMITTED:
				case UNENCRYPTED:
				case UNKNOWN:
				case UNLISTEN:
				case UNLOGGED:
				case UNTIL:
				case UPDATE:
				case VACUUM:
				case VALID:
				case VALIDATE:
				case VALIDATOR:
				case VARYING:
				case VERSION_P:
				case VIEW:
				case VOLATILE:
				case WHITESPACE_P:
				case WITHOUT:
				case WORK:
				case WRAPPER:
				case WRITE:
				case XML_P:
				case YEAR_P:
				case YES_P:
				case ZONE:
				case BETWEEN:
				case BIGINT:
				case BIT:
				case BOOLEAN_P:
				case CHAR_P:
				case CHARACTER:
				case COALESCE:
				case DEC:
				case DECIMAL_P:
				case EXISTS:
				case EXTRACT:
				case FLOAT_P:
				case GREATEST:
				case INOUT:
				case INT_P:
				case INTEGER:
				case INTERVAL:
				case LEAST:
				case NATIONAL:
				case NCHAR:
				case NONE:
				case NULLIF:
				case NUMERIC:
				case OVERLAY:
				case POSITION:
				case PRECISION:
				case REAL:
				case ROW:
				case SETOF:
				case SMALLINT:
				case SUBSTRING:
				case TIME:
				case TIMESTAMP:
				case TREAT:
				case TRIM:
				case VALUES:
				case VARCHAR:
				case XMLATTRIBUTES:
				case XMLCOMMENT:
				case XMLAGG:
				case XML_IS_WELL_FORMED:
				case XML_IS_WELL_FORMED_DOCUMENT:
				case XML_IS_WELL_FORMED_CONTENT:
				case XPATH:
				case XPATH_EXISTS:
				case XMLCONCAT:
				case XMLELEMENT:
				case XMLEXISTS:
				case XMLFOREST:
				case XMLPARSE:
				case XMLPI:
				case XMLROOT:
				case XMLSERIALIZE:
				case CALL:
				case CURRENT_P:
				case ATTACH:
				case DETACH:
				case EXPRESSION:
				case GENERATED:
				case LOGGED:
				case STORED:
				case INCLUDE:
				case ROUTINE:
				case TRANSFORM:
				case IMPORT_P:
				case POLICY:
				case METHOD:
				case REFERENCING:
				case NEW:
				case OLD:
				case VALUE_P:
				case SUBSCRIPTION:
				case PUBLICATION:
				case OUT_P:
				case ROUTINES:
				case SCHEMAS:
				case PROCEDURES:
				case INPUT_P:
				case SUPPORT:
				case PARALLEL:
				case SQL_P:
				case DEPENDS:
				case OVERRIDING:
				case CONFLICT:
				case SKIP_P:
				case LOCKED:
				case TIES:
				case ROLLUP:
				case CUBE:
				case GROUPING:
				case SETS:
				case ORDINALITY:
				case XMLTABLE:
				case COLUMNS:
				case XMLNAMESPACES:
				case ROWTYPE:
				case NORMALIZED:
				case WITHIN:
				case FILTER:
				case GROUPS:
				case OTHERS:
				case NFC:
				case NFD:
				case NFKC:
				case NFKD:
				case UESCAPE:
				case VIEWS:
				case NORMALIZE:
				case DUMP:
				case PRINT_STRICT_PARAMS:
				case VARIABLE_CONFLICT:
				case ERROR:
				case USE_VARIABLE:
				case USE_COLUMN:
				case ALIAS:
				case CONSTANT:
				case PERFORM:
				case GET:
				case DIAGNOSTICS:
				case STACKED:
				case ELSIF:
				case REVERSE:
				case SLICE:
				case EXIT:
				case RETURN:
				case QUERY:
				case RAISE:
				case SQLSTATE:
				case DEBUG:
				case LOG:
				case INFO:
				case NOTICE:
				case WARNING:
				case EXCEPTION:
				case ASSERT:
				case OPEN:
				case ABS:
				case CBRT:
				case CEIL:
				case CEILING:
				case DEGREES:
				case DIV:
				case EXP:
				case FACTORIAL:
				case FLOOR:
				case GCD:
				case LCM:
				case LN:
				case LOG10:
				case MIN_SCALE:
				case MOD:
				case PI:
				case POWER:
				case RADIANS:
				case ROUND:
				case SCALE:
				case SIGN:
				case SQRT:
				case TRIM_SCALE:
				case TRUNC:
				case WIDTH_BUCKET:
				case RANDOM:
				case SETSEED:
				case ACOS:
				case ACOSD:
				case ASIN:
				case ASIND:
				case ATAN:
				case ATAND:
				case ATAN2:
				case ATAN2D:
				case COS:
				case COSD:
				case COT:
				case COTD:
				case SIN:
				case SIND:
				case TAN:
				case TAND:
				case SINH:
				case COSH:
				case TANH:
				case ASINH:
				case ACOSH:
				case ATANH:
				case BIT_LENGTH:
				case CHAR_LENGTH:
				case CHARACTER_LENGTH:
				case LOWER:
				case OCTET_LENGTH:
				case UPPER:
				case ASCII:
				case BTRIM:
				case CHR:
				case CONCAT:
				case CONCAT_WS:
				case FORMAT:
				case INITCAP:
				case LENGTH:
				case LPAD:
				case LTRIM:
				case MD5:
				case PARSE_IDENT:
				case PG_CLIENT_ENCODING:
				case QUOTE_IDENT:
				case QUOTE_LITERAL:
				case QUOTE_NULLABLE:
				case REGEXP_COUNT:
				case REGEXP_INSTR:
				case REGEXP_LIKE:
				case REGEXP_MATCH:
				case REGEXP_MATCHES:
				case REGEXP_REPLACE:
				case REGEXP_SPLIT_TO_ARRAY:
				case REGEXP_SPLIT_TO_TABLE:
				case REGEXP_SUBSTR:
				case REPEAT:
				case RPAD:
				case RTRIM:
				case SPLIT_PART:
				case STARTS_WITH:
				case STRING_TO_ARRAY:
				case STRING_TO_TABLE:
				case STRPOS:
				case SUBSTR:
				case TO_ASCII:
				case TO_HEX:
				case TRANSLATE:
				case UNISTR:
				case AGE:
				case CLOCK_TIMESTAMP:
				case DATE_BIN:
				case DATE_PART:
				case DATE_TRUNC:
				case ISFINITE:
				case JUSTIFY_DAYS:
				case JUSTIFY_HOURS:
				case JUSTIFY_INTERVAL:
				case MAKE_DATE:
				case MAKE_INTERVAL:
				case MAKE_TIME:
				case MAKE_TIMESTAMP:
				case MAKE_TIMESTAMPTZ:
				case NOW:
				case STATEMENT_TIMESTAMP:
				case TIMEOFDAY:
				case TRANSACTION_TIMESTAMP:
				case TO_TIMESTAMP:
				case TO_CHAR:
				case TO_DATE:
				case TO_NUMBER:
				case Identifier:
				case QuotedIdentifier:
				case UnicodeQuotedIdentifier:
				case PLSQLVARIABLENAME:
				case PLSQLIDENTIFIER:
					{
					State = 8399;
					colid();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 8402;
				Match(OPEN_PAREN);
				State = 8403;
				tablefuncelementlist();
				State = 8404;
				Match(CLOSE_PAREN);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Join_typeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FULL() { return GetToken(PostgreSQLParser.FULL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFT() { return GetToken(PostgreSQLParser.LEFT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHT() { return GetToken(PostgreSQLParser.RIGHT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INNER_P() { return GetToken(PostgreSQLParser.INNER_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OUTER_P() { return GetToken(PostgreSQLParser.OUTER_P, 0); }
		public Join_typeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_join_type; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterJoin_type(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitJoin_type(this);
		}
	}

	[RuleVersion(0)]
	public Join_typeContext join_type() {
		Join_typeContext _localctx = new Join_typeContext(Context, State);
		EnterRule(_localctx, 1070, RULE_join_type);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8409;
			_la = TokenStream.LA(1);
			if ( !((((_la - 113)) & ~0x3f) == 0 && ((1L << (_la - 113)) & 8261L) != 0) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 8411;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==OUTER_P) {
				{
				State = 8410;
				Match(OUTER_P);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Join_qualContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode USING() { return GetToken(PostgreSQLParser.USING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAREN() { return GetToken(PostgreSQLParser.OPEN_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Name_listContext name_list() {
			return GetRuleContext<Name_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAREN() { return GetToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ON() { return GetToken(PostgreSQLParser.ON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public A_exprContext a_expr() {
			return GetRuleContext<A_exprContext>(0);
		}
		public Join_qualContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_join_qual; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterJoin_qual(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitJoin_qual(this);
		}
	}

	[RuleVersion(0)]
	public Join_qualContext join_qual() {
		Join_qualContext _localctx = new Join_qualContext(Context, State);
		EnterRule(_localctx, 1072, RULE_join_qual);
		try {
			State = 8420;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case USING:
				EnterOuterAlt(_localctx, 1);
				{
				State = 8413;
				Match(USING);
				State = 8414;
				Match(OPEN_PAREN);
				State = 8415;
				name_list();
				State = 8416;
				Match(CLOSE_PAREN);
				}
				break;
			case ON:
				EnterOuterAlt(_localctx, 2);
				{
				State = 8418;
				Match(ON);
				State = 8419;
				a_expr();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Relation_exprContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Qualified_nameContext qualified_name() {
			return GetRuleContext<Qualified_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STAR() { return GetToken(PostgreSQLParser.STAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ONLY() { return GetToken(PostgreSQLParser.ONLY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAREN() { return GetToken(PostgreSQLParser.OPEN_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAREN() { return GetToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public Relation_exprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_relation_expr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterRelation_expr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitRelation_expr(this);
		}
	}

	[RuleVersion(0)]
	public Relation_exprContext relation_expr() {
		Relation_exprContext _localctx = new Relation_exprContext(Context, State);
		EnterRule(_localctx, 1074, RULE_relation_expr);
		int _la;
		try {
			State = 8434;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case AND:
			case ARRAY:
			case COLLATE:
			case COLUMN:
			case CONSTRAINT:
			case DEFAULT:
			case DO:
			case FETCH:
			case TABLE:
			case IS:
			case LEFT:
			case OUTER_P:
			case OVER:
			case RIGHT:
			case ABORT_P:
			case ABSOLUTE_P:
			case ACCESS:
			case ACTION:
			case ADD_P:
			case ADMIN:
			case AFTER:
			case AGGREGATE:
			case ALSO:
			case ALTER:
			case ALWAYS:
			case ASSERTION:
			case ASSIGNMENT:
			case AT:
			case ATTRIBUTE:
			case BACKWARD:
			case BEFORE:
			case BEGIN_P:
			case BY:
			case CACHE:
			case CALLED:
			case CASCADE:
			case CASCADED:
			case CATALOG:
			case CHAIN:
			case CHARACTERISTICS:
			case CHECKPOINT:
			case CLASS:
			case CLOSE:
			case CLUSTER:
			case COMMENT:
			case COMMENTS:
			case COMMIT:
			case COMMITTED:
			case CONFIGURATION:
			case CONNECTION:
			case CONSTRAINTS:
			case CONTENT_P:
			case CONTINUE_P:
			case CONVERSION_P:
			case COPY:
			case COST:
			case CSV:
			case CURSOR:
			case CYCLE:
			case DATA_P:
			case DATABASE:
			case DAY_P:
			case DEALLOCATE:
			case DECLARE:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE_P:
			case DELIMITER:
			case DELIMITERS:
			case DICTIONARY:
			case DISABLE_P:
			case DISCARD:
			case DOCUMENT_P:
			case DOMAIN_P:
			case DOUBLE_P:
			case DROP:
			case EACH:
			case ENABLE_P:
			case ENCODING:
			case ENCRYPTED:
			case ENUM_P:
			case ESCAPE:
			case EVENT:
			case EXCLUDE:
			case EXCLUDING:
			case EXCLUSIVE:
			case EXECUTE:
			case EXPLAIN:
			case EXTENSION:
			case EXTERNAL:
			case FAMILY:
			case FIRST_P:
			case FOLLOWING:
			case FORCE:
			case FORWARD:
			case FUNCTION:
			case FUNCTIONS:
			case GLOBAL:
			case GRANTED:
			case HANDLER:
			case HEADER_P:
			case HOLD:
			case HOUR_P:
			case IDENTITY_P:
			case IF_P:
			case IMMEDIATE:
			case IMMUTABLE:
			case IMPLICIT_P:
			case INCLUDING:
			case INCREMENT:
			case INDEX:
			case INDEXES:
			case INHERIT:
			case INHERITS:
			case INLINE_P:
			case INSENSITIVE:
			case INSERT:
			case INSTEAD:
			case INVOKER:
			case ISOLATION:
			case KEY:
			case LABEL:
			case LANGUAGE:
			case LARGE_P:
			case LAST_P:
			case LEAKPROOF:
			case LEVEL:
			case LISTEN:
			case LOAD:
			case LOCAL:
			case LOCATION:
			case LOCK_P:
			case MAPPING:
			case MATCH:
			case MATERIALIZED:
			case MAXVALUE:
			case MINUTE_P:
			case MINVALUE:
			case MODE:
			case MONTH_P:
			case MOVE:
			case NAME_P:
			case NAMES:
			case NEXT:
			case NO:
			case NOTHING:
			case NOTIFY:
			case NOWAIT:
			case NULLS_P:
			case OBJECT_P:
			case OF:
			case OFF:
			case OIDS:
			case OPERATOR:
			case OPTION:
			case OPTIONS:
			case OWNED:
			case OWNER:
			case PARSER:
			case PARTIAL:
			case PARTITION:
			case PASSING:
			case PASSWORD:
			case PLANS:
			case PRECEDING:
			case PREPARE:
			case PREPARED:
			case PRESERVE:
			case PRIOR:
			case PRIVILEGES:
			case PROCEDURAL:
			case PROCEDURE:
			case PROGRAM:
			case QUOTE:
			case RANGE:
			case READ:
			case REASSIGN:
			case RECHECK:
			case RECURSIVE:
			case REF:
			case REFRESH:
			case REINDEX:
			case RELATIVE_P:
			case RELEASE:
			case RENAME:
			case REPEATABLE:
			case REPLACE:
			case REPLICA:
			case RESET:
			case RESTART:
			case RESTRICT:
			case RETURNS:
			case REVOKE:
			case ROLE:
			case ROLLBACK:
			case ROWS:
			case RULE:
			case SAVEPOINT:
			case SCHEMA:
			case SCROLL:
			case SEARCH:
			case SECOND_P:
			case SECURITY:
			case SEQUENCE:
			case SEQUENCES:
			case SERIALIZABLE:
			case SERVER:
			case SESSION:
			case SET:
			case SHARE:
			case SHOW:
			case SIMPLE:
			case SNAPSHOT:
			case STABLE:
			case STANDALONE_P:
			case START:
			case STATEMENT:
			case STATISTICS:
			case STDIN:
			case STDOUT:
			case STORAGE:
			case STRICT_P:
			case STRIP_P:
			case SYSID:
			case SYSTEM_P:
			case TABLES:
			case TABLESPACE:
			case TEMP:
			case TEMPLATE:
			case TEMPORARY:
			case TEXT_P:
			case TRANSACTION:
			case TRIGGER:
			case TRUNCATE:
			case TRUSTED:
			case TYPE_P:
			case TYPES_P:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNENCRYPTED:
			case UNKNOWN:
			case UNLISTEN:
			case UNLOGGED:
			case UNTIL:
			case UPDATE:
			case VACUUM:
			case VALID:
			case VALIDATE:
			case VALIDATOR:
			case VARYING:
			case VERSION_P:
			case VIEW:
			case VOLATILE:
			case WHITESPACE_P:
			case WITHOUT:
			case WORK:
			case WRAPPER:
			case WRITE:
			case XML_P:
			case YEAR_P:
			case YES_P:
			case ZONE:
			case BETWEEN:
			case BIGINT:
			case BIT:
			case BOOLEAN_P:
			case CHAR_P:
			case CHARACTER:
			case COALESCE:
			case DEC:
			case DECIMAL_P:
			case EXISTS:
			case EXTRACT:
			case FLOAT_P:
			case GREATEST:
			case INOUT:
			case INT_P:
			case INTEGER:
			case INTERVAL:
			case LEAST:
			case NATIONAL:
			case NCHAR:
			case NONE:
			case NULLIF:
			case NUMERIC:
			case OVERLAY:
			case POSITION:
			case PRECISION:
			case REAL:
			case ROW:
			case SETOF:
			case SMALLINT:
			case SUBSTRING:
			case TIME:
			case TIMESTAMP:
			case TREAT:
			case TRIM:
			case VALUES:
			case VARCHAR:
			case XMLATTRIBUTES:
			case XMLCOMMENT:
			case XMLAGG:
			case XML_IS_WELL_FORMED:
			case XML_IS_WELL_FORMED_DOCUMENT:
			case XML_IS_WELL_FORMED_CONTENT:
			case XPATH:
			case XPATH_EXISTS:
			case XMLCONCAT:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLPARSE:
			case XMLPI:
			case XMLROOT:
			case XMLSERIALIZE:
			case CALL:
			case CURRENT_P:
			case ATTACH:
			case DETACH:
			case EXPRESSION:
			case GENERATED:
			case LOGGED:
			case STORED:
			case INCLUDE:
			case ROUTINE:
			case TRANSFORM:
			case IMPORT_P:
			case POLICY:
			case METHOD:
			case REFERENCING:
			case NEW:
			case OLD:
			case VALUE_P:
			case SUBSCRIPTION:
			case PUBLICATION:
			case OUT_P:
			case ROUTINES:
			case SCHEMAS:
			case PROCEDURES:
			case INPUT_P:
			case SUPPORT:
			case PARALLEL:
			case SQL_P:
			case DEPENDS:
			case OVERRIDING:
			case CONFLICT:
			case SKIP_P:
			case LOCKED:
			case TIES:
			case ROLLUP:
			case CUBE:
			case GROUPING:
			case SETS:
			case ORDINALITY:
			case XMLTABLE:
			case COLUMNS:
			case XMLNAMESPACES:
			case ROWTYPE:
			case NORMALIZED:
			case WITHIN:
			case FILTER:
			case GROUPS:
			case OTHERS:
			case NFC:
			case NFD:
			case NFKC:
			case NFKD:
			case UESCAPE:
			case VIEWS:
			case NORMALIZE:
			case DUMP:
			case PRINT_STRICT_PARAMS:
			case VARIABLE_CONFLICT:
			case ERROR:
			case USE_VARIABLE:
			case USE_COLUMN:
			case ALIAS:
			case CONSTANT:
			case PERFORM:
			case GET:
			case DIAGNOSTICS:
			case STACKED:
			case ELSIF:
			case REVERSE:
			case SLICE:
			case EXIT:
			case RETURN:
			case QUERY:
			case RAISE:
			case SQLSTATE:
			case DEBUG:
			case LOG:
			case INFO:
			case NOTICE:
			case WARNING:
			case EXCEPTION:
			case ASSERT:
			case OPEN:
			case ABS:
			case CBRT:
			case CEIL:
			case CEILING:
			case DEGREES:
			case DIV:
			case EXP:
			case FACTORIAL:
			case FLOOR:
			case GCD:
			case LCM:
			case LN:
			case LOG10:
			case MIN_SCALE:
			case MOD:
			case PI:
			case POWER:
			case RADIANS:
			case ROUND:
			case SCALE:
			case SIGN:
			case SQRT:
			case TRIM_SCALE:
			case TRUNC:
			case WIDTH_BUCKET:
			case RANDOM:
			case SETSEED:
			case ACOS:
			case ACOSD:
			case ASIN:
			case ASIND:
			case ATAN:
			case ATAND:
			case ATAN2:
			case ATAN2D:
			case COS:
			case COSD:
			case COT:
			case COTD:
			case SIN:
			case SIND:
			case TAN:
			case TAND:
			case SINH:
			case COSH:
			case TANH:
			case ASINH:
			case ACOSH:
			case ATANH:
			case BIT_LENGTH:
			case CHAR_LENGTH:
			case CHARACTER_LENGTH:
			case LOWER:
			case OCTET_LENGTH:
			case UPPER:
			case ASCII:
			case BTRIM:
			case CHR:
			case CONCAT:
			case CONCAT_WS:
			case FORMAT:
			case INITCAP:
			case LENGTH:
			case LPAD:
			case LTRIM:
			case MD5:
			case PARSE_IDENT:
			case PG_CLIENT_ENCODING:
			case QUOTE_IDENT:
			case QUOTE_LITERAL:
			case QUOTE_NULLABLE:
			case REGEXP_COUNT:
			case REGEXP_INSTR:
			case REGEXP_LIKE:
			case REGEXP_MATCH:
			case REGEXP_MATCHES:
			case REGEXP_REPLACE:
			case REGEXP_SPLIT_TO_ARRAY:
			case REGEXP_SPLIT_TO_TABLE:
			case REGEXP_SUBSTR:
			case REPEAT:
			case RPAD:
			case RTRIM:
			case SPLIT_PART:
			case STARTS_WITH:
			case STRING_TO_ARRAY:
			case STRING_TO_TABLE:
			case STRPOS:
			case SUBSTR:
			case TO_ASCII:
			case TO_HEX:
			case TRANSLATE:
			case UNISTR:
			case AGE:
			case CLOCK_TIMESTAMP:
			case DATE_BIN:
			case DATE_PART:
			case DATE_TRUNC:
			case ISFINITE:
			case JUSTIFY_DAYS:
			case JUSTIFY_HOURS:
			case JUSTIFY_INTERVAL:
			case MAKE_DATE:
			case MAKE_INTERVAL:
			case MAKE_TIME:
			case MAKE_TIMESTAMP:
			case MAKE_TIMESTAMPTZ:
			case NOW:
			case STATEMENT_TIMESTAMP:
			case TIMEOFDAY:
			case TRANSACTION_TIMESTAMP:
			case TO_TIMESTAMP:
			case TO_CHAR:
			case TO_DATE:
			case TO_NUMBER:
			case Identifier:
			case QuotedIdentifier:
			case UnicodeQuotedIdentifier:
			case PLSQLVARIABLENAME:
			case PLSQLIDENTIFIER:
				EnterOuterAlt(_localctx, 1);
				{
				State = 8422;
				qualified_name();
				State = 8424;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==STAR) {
					{
					State = 8423;
					Match(STAR);
					}
				}

				}
				break;
			case ONLY:
				EnterOuterAlt(_localctx, 2);
				{
				State = 8426;
				Match(ONLY);
				State = 8432;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case AND:
				case ARRAY:
				case COLLATE:
				case COLUMN:
				case CONSTRAINT:
				case DEFAULT:
				case DO:
				case FETCH:
				case TABLE:
				case IS:
				case LEFT:
				case OUTER_P:
				case OVER:
				case RIGHT:
				case ABORT_P:
				case ABSOLUTE_P:
				case ACCESS:
				case ACTION:
				case ADD_P:
				case ADMIN:
				case AFTER:
				case AGGREGATE:
				case ALSO:
				case ALTER:
				case ALWAYS:
				case ASSERTION:
				case ASSIGNMENT:
				case AT:
				case ATTRIBUTE:
				case BACKWARD:
				case BEFORE:
				case BEGIN_P:
				case BY:
				case CACHE:
				case CALLED:
				case CASCADE:
				case CASCADED:
				case CATALOG:
				case CHAIN:
				case CHARACTERISTICS:
				case CHECKPOINT:
				case CLASS:
				case CLOSE:
				case CLUSTER:
				case COMMENT:
				case COMMENTS:
				case COMMIT:
				case COMMITTED:
				case CONFIGURATION:
				case CONNECTION:
				case CONSTRAINTS:
				case CONTENT_P:
				case CONTINUE_P:
				case CONVERSION_P:
				case COPY:
				case COST:
				case CSV:
				case CURSOR:
				case CYCLE:
				case DATA_P:
				case DATABASE:
				case DAY_P:
				case DEALLOCATE:
				case DECLARE:
				case DEFAULTS:
				case DEFERRED:
				case DEFINER:
				case DELETE_P:
				case DELIMITER:
				case DELIMITERS:
				case DICTIONARY:
				case DISABLE_P:
				case DISCARD:
				case DOCUMENT_P:
				case DOMAIN_P:
				case DOUBLE_P:
				case DROP:
				case EACH:
				case ENABLE_P:
				case ENCODING:
				case ENCRYPTED:
				case ENUM_P:
				case ESCAPE:
				case EVENT:
				case EXCLUDE:
				case EXCLUDING:
				case EXCLUSIVE:
				case EXECUTE:
				case EXPLAIN:
				case EXTENSION:
				case EXTERNAL:
				case FAMILY:
				case FIRST_P:
				case FOLLOWING:
				case FORCE:
				case FORWARD:
				case FUNCTION:
				case FUNCTIONS:
				case GLOBAL:
				case GRANTED:
				case HANDLER:
				case HEADER_P:
				case HOLD:
				case HOUR_P:
				case IDENTITY_P:
				case IF_P:
				case IMMEDIATE:
				case IMMUTABLE:
				case IMPLICIT_P:
				case INCLUDING:
				case INCREMENT:
				case INDEX:
				case INDEXES:
				case INHERIT:
				case INHERITS:
				case INLINE_P:
				case INSENSITIVE:
				case INSERT:
				case INSTEAD:
				case INVOKER:
				case ISOLATION:
				case KEY:
				case LABEL:
				case LANGUAGE:
				case LARGE_P:
				case LAST_P:
				case LEAKPROOF:
				case LEVEL:
				case LISTEN:
				case LOAD:
				case LOCAL:
				case LOCATION:
				case LOCK_P:
				case MAPPING:
				case MATCH:
				case MATERIALIZED:
				case MAXVALUE:
				case MINUTE_P:
				case MINVALUE:
				case MODE:
				case MONTH_P:
				case MOVE:
				case NAME_P:
				case NAMES:
				case NEXT:
				case NO:
				case NOTHING:
				case NOTIFY:
				case NOWAIT:
				case NULLS_P:
				case OBJECT_P:
				case OF:
				case OFF:
				case OIDS:
				case OPERATOR:
				case OPTION:
				case OPTIONS:
				case OWNED:
				case OWNER:
				case PARSER:
				case PARTIAL:
				case PARTITION:
				case PASSING:
				case PASSWORD:
				case PLANS:
				case PRECEDING:
				case PREPARE:
				case PREPARED:
				case PRESERVE:
				case PRIOR:
				case PRIVILEGES:
				case PROCEDURAL:
				case PROCEDURE:
				case PROGRAM:
				case QUOTE:
				case RANGE:
				case READ:
				case REASSIGN:
				case RECHECK:
				case RECURSIVE:
				case REF:
				case REFRESH:
				case REINDEX:
				case RELATIVE_P:
				case RELEASE:
				case RENAME:
				case REPEATABLE:
				case REPLACE:
				case REPLICA:
				case RESET:
				case RESTART:
				case RESTRICT:
				case RETURNS:
				case REVOKE:
				case ROLE:
				case ROLLBACK:
				case ROWS:
				case RULE:
				case SAVEPOINT:
				case SCHEMA:
				case SCROLL:
				case SEARCH:
				case SECOND_P:
				case SECURITY:
				case SEQUENCE:
				case SEQUENCES:
				case SERIALIZABLE:
				case SERVER:
				case SESSION:
				case SET:
				case SHARE:
				case SHOW:
				case SIMPLE:
				case SNAPSHOT:
				case STABLE:
				case STANDALONE_P:
				case START:
				case STATEMENT:
				case STATISTICS:
				case STDIN:
				case STDOUT:
				case STORAGE:
				case STRICT_P:
				case STRIP_P:
				case SYSID:
				case SYSTEM_P:
				case TABLES:
				case TABLESPACE:
				case TEMP:
				case TEMPLATE:
				case TEMPORARY:
				case TEXT_P:
				case TRANSACTION:
				case TRIGGER:
				case TRUNCATE:
				case TRUSTED:
				case TYPE_P:
				case TYPES_P:
				case UNBOUNDED:
				case UNCOMMITTED:
				case UNENCRYPTED:
				case UNKNOWN:
				case UNLISTEN:
				case UNLOGGED:
				case UNTIL:
				case UPDATE:
				case VACUUM:
				case VALID:
				case VALIDATE:
				case VALIDATOR:
				case VARYING:
				case VERSION_P:
				case VIEW:
				case VOLATILE:
				case WHITESPACE_P:
				case WITHOUT:
				case WORK:
				case WRAPPER:
				case WRITE:
				case XML_P:
				case YEAR_P:
				case YES_P:
				case ZONE:
				case BETWEEN:
				case BIGINT:
				case BIT:
				case BOOLEAN_P:
				case CHAR_P:
				case CHARACTER:
				case COALESCE:
				case DEC:
				case DECIMAL_P:
				case EXISTS:
				case EXTRACT:
				case FLOAT_P:
				case GREATEST:
				case INOUT:
				case INT_P:
				case INTEGER:
				case INTERVAL:
				case LEAST:
				case NATIONAL:
				case NCHAR:
				case NONE:
				case NULLIF:
				case NUMERIC:
				case OVERLAY:
				case POSITION:
				case PRECISION:
				case REAL:
				case ROW:
				case SETOF:
				case SMALLINT:
				case SUBSTRING:
				case TIME:
				case TIMESTAMP:
				case TREAT:
				case TRIM:
				case VALUES:
				case VARCHAR:
				case XMLATTRIBUTES:
				case XMLCOMMENT:
				case XMLAGG:
				case XML_IS_WELL_FORMED:
				case XML_IS_WELL_FORMED_DOCUMENT:
				case XML_IS_WELL_FORMED_CONTENT:
				case XPATH:
				case XPATH_EXISTS:
				case XMLCONCAT:
				case XMLELEMENT:
				case XMLEXISTS:
				case XMLFOREST:
				case XMLPARSE:
				case XMLPI:
				case XMLROOT:
				case XMLSERIALIZE:
				case CALL:
				case CURRENT_P:
				case ATTACH:
				case DETACH:
				case EXPRESSION:
				case GENERATED:
				case LOGGED:
				case STORED:
				case INCLUDE:
				case ROUTINE:
				case TRANSFORM:
				case IMPORT_P:
				case POLICY:
				case METHOD:
				case REFERENCING:
				case NEW:
				case OLD:
				case VALUE_P:
				case SUBSCRIPTION:
				case PUBLICATION:
				case OUT_P:
				case ROUTINES:
				case SCHEMAS:
				case PROCEDURES:
				case INPUT_P:
				case SUPPORT:
				case PARALLEL:
				case SQL_P:
				case DEPENDS:
				case OVERRIDING:
				case CONFLICT:
				case SKIP_P:
				case LOCKED:
				case TIES:
				case ROLLUP:
				case CUBE:
				case GROUPING:
				case SETS:
				case ORDINALITY:
				case XMLTABLE:
				case COLUMNS:
				case XMLNAMESPACES:
				case ROWTYPE:
				case NORMALIZED:
				case WITHIN:
				case FILTER:
				case GROUPS:
				case OTHERS:
				case NFC:
				case NFD:
				case NFKC:
				case NFKD:
				case UESCAPE:
				case VIEWS:
				case NORMALIZE:
				case DUMP:
				case PRINT_STRICT_PARAMS:
				case VARIABLE_CONFLICT:
				case ERROR:
				case USE_VARIABLE:
				case USE_COLUMN:
				case ALIAS:
				case CONSTANT:
				case PERFORM:
				case GET:
				case DIAGNOSTICS:
				case STACKED:
				case ELSIF:
				case REVERSE:
				case SLICE:
				case EXIT:
				case RETURN:
				case QUERY:
				case RAISE:
				case SQLSTATE:
				case DEBUG:
				case LOG:
				case INFO:
				case NOTICE:
				case WARNING:
				case EXCEPTION:
				case ASSERT:
				case OPEN:
				case ABS:
				case CBRT:
				case CEIL:
				case CEILING:
				case DEGREES:
				case DIV:
				case EXP:
				case FACTORIAL:
				case FLOOR:
				case GCD:
				case LCM:
				case LN:
				case LOG10:
				case MIN_SCALE:
				case MOD:
				case PI:
				case POWER:
				case RADIANS:
				case ROUND:
				case SCALE:
				case SIGN:
				case SQRT:
				case TRIM_SCALE:
				case TRUNC:
				case WIDTH_BUCKET:
				case RANDOM:
				case SETSEED:
				case ACOS:
				case ACOSD:
				case ASIN:
				case ASIND:
				case ATAN:
				case ATAND:
				case ATAN2:
				case ATAN2D:
				case COS:
				case COSD:
				case COT:
				case COTD:
				case SIN:
				case SIND:
				case TAN:
				case TAND:
				case SINH:
				case COSH:
				case TANH:
				case ASINH:
				case ACOSH:
				case ATANH:
				case BIT_LENGTH:
				case CHAR_LENGTH:
				case CHARACTER_LENGTH:
				case LOWER:
				case OCTET_LENGTH:
				case UPPER:
				case ASCII:
				case BTRIM:
				case CHR:
				case CONCAT:
				case CONCAT_WS:
				case FORMAT:
				case INITCAP:
				case LENGTH:
				case LPAD:
				case LTRIM:
				case MD5:
				case PARSE_IDENT:
				case PG_CLIENT_ENCODING:
				case QUOTE_IDENT:
				case QUOTE_LITERAL:
				case QUOTE_NULLABLE:
				case REGEXP_COUNT:
				case REGEXP_INSTR:
				case REGEXP_LIKE:
				case REGEXP_MATCH:
				case REGEXP_MATCHES:
				case REGEXP_REPLACE:
				case REGEXP_SPLIT_TO_ARRAY:
				case REGEXP_SPLIT_TO_TABLE:
				case REGEXP_SUBSTR:
				case REPEAT:
				case RPAD:
				case RTRIM:
				case SPLIT_PART:
				case STARTS_WITH:
				case STRING_TO_ARRAY:
				case STRING_TO_TABLE:
				case STRPOS:
				case SUBSTR:
				case TO_ASCII:
				case TO_HEX:
				case TRANSLATE:
				case UNISTR:
				case AGE:
				case CLOCK_TIMESTAMP:
				case DATE_BIN:
				case DATE_PART:
				case DATE_TRUNC:
				case ISFINITE:
				case JUSTIFY_DAYS:
				case JUSTIFY_HOURS:
				case JUSTIFY_INTERVAL:
				case MAKE_DATE:
				case MAKE_INTERVAL:
				case MAKE_TIME:
				case MAKE_TIMESTAMP:
				case MAKE_TIMESTAMPTZ:
				case NOW:
				case STATEMENT_TIMESTAMP:
				case TIMEOFDAY:
				case TRANSACTION_TIMESTAMP:
				case TO_TIMESTAMP:
				case TO_CHAR:
				case TO_DATE:
				case TO_NUMBER:
				case Identifier:
				case QuotedIdentifier:
				case UnicodeQuotedIdentifier:
				case PLSQLVARIABLENAME:
				case PLSQLIDENTIFIER:
					{
					State = 8427;
					qualified_name();
					}
					break;
				case OPEN_PAREN:
					{
					State = 8428;
					Match(OPEN_PAREN);
					State = 8429;
					qualified_name();
					State = 8430;
					Match(CLOSE_PAREN);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Relation_expr_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Relation_exprContext[] relation_expr() {
			return GetRuleContexts<Relation_exprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Relation_exprContext relation_expr(int i) {
			return GetRuleContext<Relation_exprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(PostgreSQLParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(PostgreSQLParser.COMMA, i);
		}
		public Relation_expr_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_relation_expr_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterRelation_expr_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitRelation_expr_list(this);
		}
	}

	[RuleVersion(0)]
	public Relation_expr_listContext relation_expr_list() {
		Relation_expr_listContext _localctx = new Relation_expr_listContext(Context, State);
		EnterRule(_localctx, 1076, RULE_relation_expr_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8436;
			relation_expr();
			State = 8441;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 8437;
				Match(COMMA);
				State = 8438;
				relation_expr();
				}
				}
				State = 8443;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Relation_expr_opt_aliasContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Relation_exprContext relation_expr() {
			return GetRuleContext<Relation_exprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ColidContext colid() {
			return GetRuleContext<ColidContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS() { return GetToken(PostgreSQLParser.AS, 0); }
		public Relation_expr_opt_aliasContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_relation_expr_opt_alias; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterRelation_expr_opt_alias(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitRelation_expr_opt_alias(this);
		}
	}

	[RuleVersion(0)]
	public Relation_expr_opt_aliasContext relation_expr_opt_alias() {
		Relation_expr_opt_aliasContext _localctx = new Relation_expr_opt_aliasContext(Context, State);
		EnterRule(_localctx, 1078, RULE_relation_expr_opt_alias);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8444;
			relation_expr();
			State = 8449;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,495,Context) ) {
			case 1:
				{
				State = 8446;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==AS) {
					{
					State = 8445;
					Match(AS);
					}
				}

				State = 8448;
				colid();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Tablesample_clauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLESAMPLE() { return GetToken(PostgreSQLParser.TABLESAMPLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Func_nameContext func_name() {
			return GetRuleContext<Func_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAREN() { return GetToken(PostgreSQLParser.OPEN_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Expr_listContext expr_list() {
			return GetRuleContext<Expr_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAREN() { return GetToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Opt_repeatable_clauseContext opt_repeatable_clause() {
			return GetRuleContext<Opt_repeatable_clauseContext>(0);
		}
		public Tablesample_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tablesample_clause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterTablesample_clause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitTablesample_clause(this);
		}
	}

	[RuleVersion(0)]
	public Tablesample_clauseContext tablesample_clause() {
		Tablesample_clauseContext _localctx = new Tablesample_clauseContext(Context, State);
		EnterRule(_localctx, 1080, RULE_tablesample_clause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8451;
			Match(TABLESAMPLE);
			State = 8452;
			func_name();
			State = 8453;
			Match(OPEN_PAREN);
			State = 8454;
			expr_list();
			State = 8455;
			Match(CLOSE_PAREN);
			State = 8456;
			opt_repeatable_clause();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Opt_repeatable_clauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REPEATABLE() { return GetToken(PostgreSQLParser.REPEATABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAREN() { return GetToken(PostgreSQLParser.OPEN_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public A_exprContext a_expr() {
			return GetRuleContext<A_exprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAREN() { return GetToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public Opt_repeatable_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_opt_repeatable_clause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterOpt_repeatable_clause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitOpt_repeatable_clause(this);
		}
	}

	[RuleVersion(0)]
	public Opt_repeatable_clauseContext opt_repeatable_clause() {
		Opt_repeatable_clauseContext _localctx = new Opt_repeatable_clauseContext(Context, State);
		EnterRule(_localctx, 1082, RULE_opt_repeatable_clause);
		try {
			State = 8464;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case REPEATABLE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 8458;
				Match(REPEATABLE);
				State = 8459;
				Match(OPEN_PAREN);
				State = 8460;
				a_expr();
				State = 8461;
				Match(CLOSE_PAREN);
				}
				break;
			case Eof:
			case OPEN_PAREN:
			case CLOSE_PAREN:
			case COMMA:
			case SEMI:
			case ANALYSE:
			case ANALYZE:
			case CREATE:
			case DO:
			case EXCEPT:
			case FETCH:
			case FOR:
			case GRANT:
			case GROUP_P:
			case HAVING:
			case INTERSECT:
			case INTO:
			case LIMIT:
			case OFFSET:
			case ON:
			case ORDER:
			case RETURNING:
			case SELECT:
			case TABLE:
			case THEN:
			case UNION:
			case USING:
			case WHEN:
			case WHERE:
			case WINDOW:
			case WITH:
			case CROSS:
			case FULL:
			case INNER_P:
			case JOIN:
			case LEFT:
			case NATURAL:
			case RIGHT:
			case ABORT_P:
			case ALTER:
			case BEGIN_P:
			case CHECKPOINT:
			case CLOSE:
			case CLUSTER:
			case COMMENT:
			case COMMIT:
			case COPY:
			case DEALLOCATE:
			case DECLARE:
			case DELETE_P:
			case DISCARD:
			case DROP:
			case EXECUTE:
			case EXPLAIN:
			case INSERT:
			case LISTEN:
			case LOAD:
			case LOCK_P:
			case MERGE:
			case MOVE:
			case NOTIFY:
			case PREPARE:
			case REASSIGN:
			case REFRESH:
			case REINDEX:
			case RELEASE:
			case RESET:
			case REVOKE:
			case ROLLBACK:
			case SAVEPOINT:
			case SECURITY:
			case SET:
			case SHOW:
			case START:
			case TRUNCATE:
			case UNLISTEN:
			case UPDATE:
			case VACUUM:
			case VALUES:
			case CALL:
			case IMPORT_P:
			case END_P:
			case LOOP:
			case MetaCommand:
				EnterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Func_tableContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Func_expr_windowlessContext func_expr_windowless() {
			return GetRuleContext<Func_expr_windowlessContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Opt_ordinalityContext opt_ordinality() {
			return GetRuleContext<Opt_ordinalityContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROWS() { return GetToken(PostgreSQLParser.ROWS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FROM() { return GetToken(PostgreSQLParser.FROM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAREN() { return GetToken(PostgreSQLParser.OPEN_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Rowsfrom_listContext rowsfrom_list() {
			return GetRuleContext<Rowsfrom_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAREN() { return GetToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public Func_tableContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_func_table; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterFunc_table(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitFunc_table(this);
		}
	}

	[RuleVersion(0)]
	public Func_tableContext func_table() {
		Func_tableContext _localctx = new Func_tableContext(Context, State);
		EnterRule(_localctx, 1084, RULE_func_table);
		try {
			State = 8476;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,497,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 8466;
				func_expr_windowless();
				State = 8467;
				opt_ordinality();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 8469;
				Match(ROWS);
				State = 8470;
				Match(FROM);
				State = 8471;
				Match(OPEN_PAREN);
				State = 8472;
				rowsfrom_list();
				State = 8473;
				Match(CLOSE_PAREN);
				State = 8474;
				opt_ordinality();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Rowsfrom_itemContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Func_expr_windowlessContext func_expr_windowless() {
			return GetRuleContext<Func_expr_windowlessContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Opt_col_def_listContext opt_col_def_list() {
			return GetRuleContext<Opt_col_def_listContext>(0);
		}
		public Rowsfrom_itemContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rowsfrom_item; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterRowsfrom_item(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitRowsfrom_item(this);
		}
	}

	[RuleVersion(0)]
	public Rowsfrom_itemContext rowsfrom_item() {
		Rowsfrom_itemContext _localctx = new Rowsfrom_itemContext(Context, State);
		EnterRule(_localctx, 1086, RULE_rowsfrom_item);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8478;
			func_expr_windowless();
			State = 8479;
			opt_col_def_list();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Rowsfrom_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Rowsfrom_itemContext[] rowsfrom_item() {
			return GetRuleContexts<Rowsfrom_itemContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Rowsfrom_itemContext rowsfrom_item(int i) {
			return GetRuleContext<Rowsfrom_itemContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(PostgreSQLParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(PostgreSQLParser.COMMA, i);
		}
		public Rowsfrom_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rowsfrom_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterRowsfrom_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitRowsfrom_list(this);
		}
	}

	[RuleVersion(0)]
	public Rowsfrom_listContext rowsfrom_list() {
		Rowsfrom_listContext _localctx = new Rowsfrom_listContext(Context, State);
		EnterRule(_localctx, 1088, RULE_rowsfrom_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8481;
			rowsfrom_item();
			State = 8486;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 8482;
				Match(COMMA);
				State = 8483;
				rowsfrom_item();
				}
				}
				State = 8488;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Opt_col_def_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS() { return GetToken(PostgreSQLParser.AS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAREN() { return GetToken(PostgreSQLParser.OPEN_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TablefuncelementlistContext tablefuncelementlist() {
			return GetRuleContext<TablefuncelementlistContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAREN() { return GetToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public Opt_col_def_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_opt_col_def_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterOpt_col_def_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitOpt_col_def_list(this);
		}
	}

	[RuleVersion(0)]
	public Opt_col_def_listContext opt_col_def_list() {
		Opt_col_def_listContext _localctx = new Opt_col_def_listContext(Context, State);
		EnterRule(_localctx, 1090, RULE_opt_col_def_list);
		try {
			State = 8495;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case AS:
				EnterOuterAlt(_localctx, 1);
				{
				State = 8489;
				Match(AS);
				State = 8490;
				Match(OPEN_PAREN);
				State = 8491;
				tablefuncelementlist();
				State = 8492;
				Match(CLOSE_PAREN);
				}
				break;
			case CLOSE_PAREN:
			case COMMA:
				EnterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Opt_ordinalityContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WITH() { return GetToken(PostgreSQLParser.WITH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ORDINALITY() { return GetToken(PostgreSQLParser.ORDINALITY, 0); }
		public Opt_ordinalityContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_opt_ordinality; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterOpt_ordinality(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitOpt_ordinality(this);
		}
	}

	[RuleVersion(0)]
	public Opt_ordinalityContext opt_ordinality() {
		Opt_ordinalityContext _localctx = new Opt_ordinalityContext(Context, State);
		EnterRule(_localctx, 1092, RULE_opt_ordinality);
		try {
			State = 8500;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,500,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 8497;
				Match(WITH);
				State = 8498;
				Match(ORDINALITY);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Where_clauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WHERE() { return GetToken(PostgreSQLParser.WHERE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public A_exprContext a_expr() {
			return GetRuleContext<A_exprContext>(0);
		}
		public Where_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_where_clause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterWhere_clause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitWhere_clause(this);
		}
	}

	[RuleVersion(0)]
	public Where_clauseContext where_clause() {
		Where_clauseContext _localctx = new Where_clauseContext(Context, State);
		EnterRule(_localctx, 1094, RULE_where_clause);
		try {
			State = 8505;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case WHERE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 8502;
				Match(WHERE);
				State = 8503;
				a_expr();
				}
				break;
			case Eof:
			case OPEN_PAREN:
			case CLOSE_PAREN:
			case COMMA:
			case SEMI:
			case ANALYSE:
			case ANALYZE:
			case CREATE:
			case DO:
			case EXCEPT:
			case FETCH:
			case FOR:
			case GRANT:
			case GROUP_P:
			case HAVING:
			case INTERSECT:
			case INTO:
			case LIMIT:
			case OFFSET:
			case ON:
			case ORDER:
			case RETURNING:
			case SELECT:
			case TABLE:
			case THEN:
			case UNION:
			case USING:
			case WHEN:
			case WINDOW:
			case WITH:
			case ABORT_P:
			case ALTER:
			case BEGIN_P:
			case CHECKPOINT:
			case CLOSE:
			case CLUSTER:
			case COMMENT:
			case COMMIT:
			case COPY:
			case DEALLOCATE:
			case DECLARE:
			case DELETE_P:
			case DISCARD:
			case DROP:
			case EXECUTE:
			case EXPLAIN:
			case INSERT:
			case LISTEN:
			case LOAD:
			case LOCK_P:
			case MERGE:
			case MOVE:
			case NOTIFY:
			case PREPARE:
			case REASSIGN:
			case REFRESH:
			case REINDEX:
			case RELEASE:
			case RESET:
			case REVOKE:
			case ROLLBACK:
			case SAVEPOINT:
			case SECURITY:
			case SET:
			case SHOW:
			case START:
			case TRUNCATE:
			case UNLISTEN:
			case UPDATE:
			case VACUUM:
			case VALUES:
			case CALL:
			case IMPORT_P:
			case END_P:
			case LOOP:
			case MetaCommand:
				EnterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Where_or_current_clauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WHERE() { return GetToken(PostgreSQLParser.WHERE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CURRENT_P() { return GetToken(PostgreSQLParser.CURRENT_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OF() { return GetToken(PostgreSQLParser.OF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Cursor_nameContext cursor_name() {
			return GetRuleContext<Cursor_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public A_exprContext a_expr() {
			return GetRuleContext<A_exprContext>(0);
		}
		public Where_or_current_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_where_or_current_clause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterWhere_or_current_clause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitWhere_or_current_clause(this);
		}
	}

	[RuleVersion(0)]
	public Where_or_current_clauseContext where_or_current_clause() {
		Where_or_current_clauseContext _localctx = new Where_or_current_clauseContext(Context, State);
		EnterRule(_localctx, 1096, RULE_where_or_current_clause);
		try {
			State = 8515;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case WHERE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 8507;
				Match(WHERE);
				State = 8512;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,502,Context) ) {
				case 1:
					{
					State = 8508;
					Match(CURRENT_P);
					State = 8509;
					Match(OF);
					State = 8510;
					cursor_name();
					}
					break;
				case 2:
					{
					State = 8511;
					a_expr();
					}
					break;
				}
				}
				break;
			case Eof:
			case OPEN_PAREN:
			case CLOSE_PAREN:
			case SEMI:
			case ANALYSE:
			case ANALYZE:
			case CREATE:
			case DO:
			case FETCH:
			case GRANT:
			case INTO:
			case RETURNING:
			case SELECT:
			case TABLE:
			case WITH:
			case ABORT_P:
			case ALTER:
			case BEGIN_P:
			case CHECKPOINT:
			case CLOSE:
			case CLUSTER:
			case COMMENT:
			case COMMIT:
			case COPY:
			case DEALLOCATE:
			case DECLARE:
			case DELETE_P:
			case DISCARD:
			case DROP:
			case EXECUTE:
			case EXPLAIN:
			case INSERT:
			case LISTEN:
			case LOAD:
			case LOCK_P:
			case MERGE:
			case MOVE:
			case NOTIFY:
			case PREPARE:
			case REASSIGN:
			case REFRESH:
			case REINDEX:
			case RELEASE:
			case RESET:
			case REVOKE:
			case ROLLBACK:
			case SAVEPOINT:
			case SECURITY:
			case SET:
			case SHOW:
			case START:
			case TRUNCATE:
			case UNLISTEN:
			case UPDATE:
			case VACUUM:
			case VALUES:
			case CALL:
			case IMPORT_P:
			case END_P:
			case LOOP:
			case MetaCommand:
				EnterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OpttablefuncelementlistContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TablefuncelementlistContext tablefuncelementlist() {
			return GetRuleContext<TablefuncelementlistContext>(0);
		}
		public OpttablefuncelementlistContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_opttablefuncelementlist; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterOpttablefuncelementlist(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitOpttablefuncelementlist(this);
		}
	}

	[RuleVersion(0)]
	public OpttablefuncelementlistContext opttablefuncelementlist() {
		OpttablefuncelementlistContext _localctx = new OpttablefuncelementlistContext(Context, State);
		EnterRule(_localctx, 1098, RULE_opttablefuncelementlist);
		try {
			State = 8519;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case AND:
			case ARRAY:
			case COLLATE:
			case COLUMN:
			case CONSTRAINT:
			case DEFAULT:
			case DO:
			case FETCH:
			case TABLE:
			case IS:
			case LEFT:
			case OUTER_P:
			case OVER:
			case RIGHT:
			case ABORT_P:
			case ABSOLUTE_P:
			case ACCESS:
			case ACTION:
			case ADD_P:
			case ADMIN:
			case AFTER:
			case AGGREGATE:
			case ALSO:
			case ALTER:
			case ALWAYS:
			case ASSERTION:
			case ASSIGNMENT:
			case AT:
			case ATTRIBUTE:
			case BACKWARD:
			case BEFORE:
			case BEGIN_P:
			case BY:
			case CACHE:
			case CALLED:
			case CASCADE:
			case CASCADED:
			case CATALOG:
			case CHAIN:
			case CHARACTERISTICS:
			case CHECKPOINT:
			case CLASS:
			case CLOSE:
			case CLUSTER:
			case COMMENT:
			case COMMENTS:
			case COMMIT:
			case COMMITTED:
			case CONFIGURATION:
			case CONNECTION:
			case CONSTRAINTS:
			case CONTENT_P:
			case CONTINUE_P:
			case CONVERSION_P:
			case COPY:
			case COST:
			case CSV:
			case CURSOR:
			case CYCLE:
			case DATA_P:
			case DATABASE:
			case DAY_P:
			case DEALLOCATE:
			case DECLARE:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE_P:
			case DELIMITER:
			case DELIMITERS:
			case DICTIONARY:
			case DISABLE_P:
			case DISCARD:
			case DOCUMENT_P:
			case DOMAIN_P:
			case DOUBLE_P:
			case DROP:
			case EACH:
			case ENABLE_P:
			case ENCODING:
			case ENCRYPTED:
			case ENUM_P:
			case ESCAPE:
			case EVENT:
			case EXCLUDE:
			case EXCLUDING:
			case EXCLUSIVE:
			case EXECUTE:
			case EXPLAIN:
			case EXTENSION:
			case EXTERNAL:
			case FAMILY:
			case FIRST_P:
			case FOLLOWING:
			case FORCE:
			case FORWARD:
			case FUNCTION:
			case FUNCTIONS:
			case GLOBAL:
			case GRANTED:
			case HANDLER:
			case HEADER_P:
			case HOLD:
			case HOUR_P:
			case IDENTITY_P:
			case IF_P:
			case IMMEDIATE:
			case IMMUTABLE:
			case IMPLICIT_P:
			case INCLUDING:
			case INCREMENT:
			case INDEX:
			case INDEXES:
			case INHERIT:
			case INHERITS:
			case INLINE_P:
			case INSENSITIVE:
			case INSERT:
			case INSTEAD:
			case INVOKER:
			case ISOLATION:
			case KEY:
			case LABEL:
			case LANGUAGE:
			case LARGE_P:
			case LAST_P:
			case LEAKPROOF:
			case LEVEL:
			case LISTEN:
			case LOAD:
			case LOCAL:
			case LOCATION:
			case LOCK_P:
			case MAPPING:
			case MATCH:
			case MATERIALIZED:
			case MAXVALUE:
			case MINUTE_P:
			case MINVALUE:
			case MODE:
			case MONTH_P:
			case MOVE:
			case NAME_P:
			case NAMES:
			case NEXT:
			case NO:
			case NOTHING:
			case NOTIFY:
			case NOWAIT:
			case NULLS_P:
			case OBJECT_P:
			case OF:
			case OFF:
			case OIDS:
			case OPERATOR:
			case OPTION:
			case OPTIONS:
			case OWNED:
			case OWNER:
			case PARSER:
			case PARTIAL:
			case PARTITION:
			case PASSING:
			case PASSWORD:
			case PLANS:
			case PRECEDING:
			case PREPARE:
			case PREPARED:
			case PRESERVE:
			case PRIOR:
			case PRIVILEGES:
			case PROCEDURAL:
			case PROCEDURE:
			case PROGRAM:
			case QUOTE:
			case RANGE:
			case READ:
			case REASSIGN:
			case RECHECK:
			case RECURSIVE:
			case REF:
			case REFRESH:
			case REINDEX:
			case RELATIVE_P:
			case RELEASE:
			case RENAME:
			case REPEATABLE:
			case REPLACE:
			case REPLICA:
			case RESET:
			case RESTART:
			case RESTRICT:
			case RETURNS:
			case REVOKE:
			case ROLE:
			case ROLLBACK:
			case ROWS:
			case RULE:
			case SAVEPOINT:
			case SCHEMA:
			case SCROLL:
			case SEARCH:
			case SECOND_P:
			case SECURITY:
			case SEQUENCE:
			case SEQUENCES:
			case SERIALIZABLE:
			case SERVER:
			case SESSION:
			case SET:
			case SHARE:
			case SHOW:
			case SIMPLE:
			case SNAPSHOT:
			case STABLE:
			case STANDALONE_P:
			case START:
			case STATEMENT:
			case STATISTICS:
			case STDIN:
			case STDOUT:
			case STORAGE:
			case STRICT_P:
			case STRIP_P:
			case SYSID:
			case SYSTEM_P:
			case TABLES:
			case TABLESPACE:
			case TEMP:
			case TEMPLATE:
			case TEMPORARY:
			case TEXT_P:
			case TRANSACTION:
			case TRIGGER:
			case TRUNCATE:
			case TRUSTED:
			case TYPE_P:
			case TYPES_P:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNENCRYPTED:
			case UNKNOWN:
			case UNLISTEN:
			case UNLOGGED:
			case UNTIL:
			case UPDATE:
			case VACUUM:
			case VALID:
			case VALIDATE:
			case VALIDATOR:
			case VARYING:
			case VERSION_P:
			case VIEW:
			case VOLATILE:
			case WHITESPACE_P:
			case WITHOUT:
			case WORK:
			case WRAPPER:
			case WRITE:
			case XML_P:
			case YEAR_P:
			case YES_P:
			case ZONE:
			case BETWEEN:
			case BIGINT:
			case BIT:
			case BOOLEAN_P:
			case CHAR_P:
			case CHARACTER:
			case COALESCE:
			case DEC:
			case DECIMAL_P:
			case EXISTS:
			case EXTRACT:
			case FLOAT_P:
			case GREATEST:
			case INOUT:
			case INT_P:
			case INTEGER:
			case INTERVAL:
			case LEAST:
			case NATIONAL:
			case NCHAR:
			case NONE:
			case NULLIF:
			case NUMERIC:
			case OVERLAY:
			case POSITION:
			case PRECISION:
			case REAL:
			case ROW:
			case SETOF:
			case SMALLINT:
			case SUBSTRING:
			case TIME:
			case TIMESTAMP:
			case TREAT:
			case TRIM:
			case VALUES:
			case VARCHAR:
			case XMLATTRIBUTES:
			case XMLCOMMENT:
			case XMLAGG:
			case XML_IS_WELL_FORMED:
			case XML_IS_WELL_FORMED_DOCUMENT:
			case XML_IS_WELL_FORMED_CONTENT:
			case XPATH:
			case XPATH_EXISTS:
			case XMLCONCAT:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLPARSE:
			case XMLPI:
			case XMLROOT:
			case XMLSERIALIZE:
			case CALL:
			case CURRENT_P:
			case ATTACH:
			case DETACH:
			case EXPRESSION:
			case GENERATED:
			case LOGGED:
			case STORED:
			case INCLUDE:
			case ROUTINE:
			case TRANSFORM:
			case IMPORT_P:
			case POLICY:
			case METHOD:
			case REFERENCING:
			case NEW:
			case OLD:
			case VALUE_P:
			case SUBSCRIPTION:
			case PUBLICATION:
			case OUT_P:
			case ROUTINES:
			case SCHEMAS:
			case PROCEDURES:
			case INPUT_P:
			case SUPPORT:
			case PARALLEL:
			case SQL_P:
			case DEPENDS:
			case OVERRIDING:
			case CONFLICT:
			case SKIP_P:
			case LOCKED:
			case TIES:
			case ROLLUP:
			case CUBE:
			case GROUPING:
			case SETS:
			case ORDINALITY:
			case XMLTABLE:
			case COLUMNS:
			case XMLNAMESPACES:
			case ROWTYPE:
			case NORMALIZED:
			case WITHIN:
			case FILTER:
			case GROUPS:
			case OTHERS:
			case NFC:
			case NFD:
			case NFKC:
			case NFKD:
			case UESCAPE:
			case VIEWS:
			case NORMALIZE:
			case DUMP:
			case PRINT_STRICT_PARAMS:
			case VARIABLE_CONFLICT:
			case ERROR:
			case USE_VARIABLE:
			case USE_COLUMN:
			case ALIAS:
			case CONSTANT:
			case PERFORM:
			case GET:
			case DIAGNOSTICS:
			case STACKED:
			case ELSIF:
			case REVERSE:
			case SLICE:
			case EXIT:
			case RETURN:
			case QUERY:
			case RAISE:
			case SQLSTATE:
			case DEBUG:
			case LOG:
			case INFO:
			case NOTICE:
			case WARNING:
			case EXCEPTION:
			case ASSERT:
			case OPEN:
			case ABS:
			case CBRT:
			case CEIL:
			case CEILING:
			case DEGREES:
			case DIV:
			case EXP:
			case FACTORIAL:
			case FLOOR:
			case GCD:
			case LCM:
			case LN:
			case LOG10:
			case MIN_SCALE:
			case MOD:
			case PI:
			case POWER:
			case RADIANS:
			case ROUND:
			case SCALE:
			case SIGN:
			case SQRT:
			case TRIM_SCALE:
			case TRUNC:
			case WIDTH_BUCKET:
			case RANDOM:
			case SETSEED:
			case ACOS:
			case ACOSD:
			case ASIN:
			case ASIND:
			case ATAN:
			case ATAND:
			case ATAN2:
			case ATAN2D:
			case COS:
			case COSD:
			case COT:
			case COTD:
			case SIN:
			case SIND:
			case TAN:
			case TAND:
			case SINH:
			case COSH:
			case TANH:
			case ASINH:
			case ACOSH:
			case ATANH:
			case BIT_LENGTH:
			case CHAR_LENGTH:
			case CHARACTER_LENGTH:
			case LOWER:
			case OCTET_LENGTH:
			case UPPER:
			case ASCII:
			case BTRIM:
			case CHR:
			case CONCAT:
			case CONCAT_WS:
			case FORMAT:
			case INITCAP:
			case LENGTH:
			case LPAD:
			case LTRIM:
			case MD5:
			case PARSE_IDENT:
			case PG_CLIENT_ENCODING:
			case QUOTE_IDENT:
			case QUOTE_LITERAL:
			case QUOTE_NULLABLE:
			case REGEXP_COUNT:
			case REGEXP_INSTR:
			case REGEXP_LIKE:
			case REGEXP_MATCH:
			case REGEXP_MATCHES:
			case REGEXP_REPLACE:
			case REGEXP_SPLIT_TO_ARRAY:
			case REGEXP_SPLIT_TO_TABLE:
			case REGEXP_SUBSTR:
			case REPEAT:
			case RPAD:
			case RTRIM:
			case SPLIT_PART:
			case STARTS_WITH:
			case STRING_TO_ARRAY:
			case STRING_TO_TABLE:
			case STRPOS:
			case SUBSTR:
			case TO_ASCII:
			case TO_HEX:
			case TRANSLATE:
			case UNISTR:
			case AGE:
			case CLOCK_TIMESTAMP:
			case DATE_BIN:
			case DATE_PART:
			case DATE_TRUNC:
			case ISFINITE:
			case JUSTIFY_DAYS:
			case JUSTIFY_HOURS:
			case JUSTIFY_INTERVAL:
			case MAKE_DATE:
			case MAKE_INTERVAL:
			case MAKE_TIME:
			case MAKE_TIMESTAMP:
			case MAKE_TIMESTAMPTZ:
			case NOW:
			case STATEMENT_TIMESTAMP:
			case TIMEOFDAY:
			case TRANSACTION_TIMESTAMP:
			case TO_TIMESTAMP:
			case TO_CHAR:
			case TO_DATE:
			case TO_NUMBER:
			case Identifier:
			case QuotedIdentifier:
			case UnicodeQuotedIdentifier:
			case PLSQLVARIABLENAME:
			case PLSQLIDENTIFIER:
				EnterOuterAlt(_localctx, 1);
				{
				State = 8517;
				tablefuncelementlist();
				}
				break;
			case CLOSE_PAREN:
				EnterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TablefuncelementlistContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TablefuncelementContext[] tablefuncelement() {
			return GetRuleContexts<TablefuncelementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TablefuncelementContext tablefuncelement(int i) {
			return GetRuleContext<TablefuncelementContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(PostgreSQLParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(PostgreSQLParser.COMMA, i);
		}
		public TablefuncelementlistContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tablefuncelementlist; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterTablefuncelementlist(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitTablefuncelementlist(this);
		}
	}

	[RuleVersion(0)]
	public TablefuncelementlistContext tablefuncelementlist() {
		TablefuncelementlistContext _localctx = new TablefuncelementlistContext(Context, State);
		EnterRule(_localctx, 1100, RULE_tablefuncelementlist);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8521;
			tablefuncelement();
			State = 8526;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 8522;
				Match(COMMA);
				State = 8523;
				tablefuncelement();
				}
				}
				State = 8528;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TablefuncelementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ColidContext colid() {
			return GetRuleContext<ColidContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypenameContext typename() {
			return GetRuleContext<TypenameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Opt_collate_clauseContext opt_collate_clause() {
			return GetRuleContext<Opt_collate_clauseContext>(0);
		}
		public TablefuncelementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tablefuncelement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterTablefuncelement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitTablefuncelement(this);
		}
	}

	[RuleVersion(0)]
	public TablefuncelementContext tablefuncelement() {
		TablefuncelementContext _localctx = new TablefuncelementContext(Context, State);
		EnterRule(_localctx, 1102, RULE_tablefuncelement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8529;
			colid();
			State = 8530;
			typename();
			State = 8531;
			opt_collate_clause();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class XmltableContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode XMLTABLE() { return GetToken(PostgreSQLParser.XMLTABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] OPEN_PAREN() { return GetTokens(PostgreSQLParser.OPEN_PAREN); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAREN(int i) {
			return GetToken(PostgreSQLParser.OPEN_PAREN, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] CLOSE_PAREN() { return GetTokens(PostgreSQLParser.CLOSE_PAREN); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAREN(int i) {
			return GetToken(PostgreSQLParser.CLOSE_PAREN, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public C_exprContext c_expr() {
			return GetRuleContext<C_exprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Xmlexists_argumentContext xmlexists_argument() {
			return GetRuleContext<Xmlexists_argumentContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLUMNS() { return GetToken(PostgreSQLParser.COLUMNS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Xmltable_column_listContext xmltable_column_list() {
			return GetRuleContext<Xmltable_column_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode XMLNAMESPACES() { return GetToken(PostgreSQLParser.XMLNAMESPACES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Xml_namespace_listContext xml_namespace_list() {
			return GetRuleContext<Xml_namespace_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(PostgreSQLParser.COMMA, 0); }
		public XmltableContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_xmltable; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterXmltable(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitXmltable(this);
		}
	}

	[RuleVersion(0)]
	public XmltableContext xmltable() {
		XmltableContext _localctx = new XmltableContext(Context, State);
		EnterRule(_localctx, 1104, RULE_xmltable);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8533;
			Match(XMLTABLE);
			State = 8534;
			Match(OPEN_PAREN);
			State = 8550;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,506,Context) ) {
			case 1:
				{
				State = 8535;
				c_expr();
				State = 8536;
				xmlexists_argument();
				State = 8537;
				Match(COLUMNS);
				State = 8538;
				xmltable_column_list();
				}
				break;
			case 2:
				{
				State = 8540;
				Match(XMLNAMESPACES);
				State = 8541;
				Match(OPEN_PAREN);
				State = 8542;
				xml_namespace_list();
				State = 8543;
				Match(CLOSE_PAREN);
				State = 8544;
				Match(COMMA);
				State = 8545;
				c_expr();
				State = 8546;
				xmlexists_argument();
				State = 8547;
				Match(COLUMNS);
				State = 8548;
				xmltable_column_list();
				}
				break;
			}
			State = 8552;
			Match(CLOSE_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Xmltable_column_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Xmltable_column_elContext[] xmltable_column_el() {
			return GetRuleContexts<Xmltable_column_elContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Xmltable_column_elContext xmltable_column_el(int i) {
			return GetRuleContext<Xmltable_column_elContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(PostgreSQLParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(PostgreSQLParser.COMMA, i);
		}
		public Xmltable_column_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_xmltable_column_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterXmltable_column_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitXmltable_column_list(this);
		}
	}

	[RuleVersion(0)]
	public Xmltable_column_listContext xmltable_column_list() {
		Xmltable_column_listContext _localctx = new Xmltable_column_listContext(Context, State);
		EnterRule(_localctx, 1106, RULE_xmltable_column_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8554;
			xmltable_column_el();
			State = 8559;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 8555;
				Match(COMMA);
				State = 8556;
				xmltable_column_el();
				}
				}
				State = 8561;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Xmltable_column_elContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ColidContext colid() {
			return GetRuleContext<ColidContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypenameContext typename() {
			return GetRuleContext<TypenameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOR() { return GetToken(PostgreSQLParser.FOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ORDINALITY() { return GetToken(PostgreSQLParser.ORDINALITY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Xmltable_column_option_listContext xmltable_column_option_list() {
			return GetRuleContext<Xmltable_column_option_listContext>(0);
		}
		public Xmltable_column_elContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_xmltable_column_el; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterXmltable_column_el(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitXmltable_column_el(this);
		}
	}

	[RuleVersion(0)]
	public Xmltable_column_elContext xmltable_column_el() {
		Xmltable_column_elContext _localctx = new Xmltable_column_elContext(Context, State);
		EnterRule(_localctx, 1108, RULE_xmltable_column_el);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8562;
			colid();
			State = 8569;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case AND:
			case ARRAY:
			case COLLATE:
			case COLUMN:
			case CONSTRAINT:
			case DEFAULT:
			case DO:
			case FETCH:
			case TABLE:
			case AUTHORIZATION:
			case BINARY:
			case COLLATION:
			case CONCURRENTLY:
			case CROSS:
			case CURRENT_SCHEMA:
			case FREEZE:
			case FULL:
			case ILIKE:
			case INNER_P:
			case IS:
			case ISNULL:
			case JOIN:
			case LEFT:
			case LIKE:
			case NATURAL:
			case NOTNULL:
			case OUTER_P:
			case OVER:
			case OVERLAPS:
			case RIGHT:
			case SIMILAR:
			case VERBOSE:
			case ABORT_P:
			case ABSOLUTE_P:
			case ACCESS:
			case ACTION:
			case ADD_P:
			case ADMIN:
			case AFTER:
			case AGGREGATE:
			case ALSO:
			case ALTER:
			case ALWAYS:
			case ASSERTION:
			case ASSIGNMENT:
			case AT:
			case ATTRIBUTE:
			case BACKWARD:
			case BEFORE:
			case BEGIN_P:
			case BY:
			case CACHE:
			case CALLED:
			case CASCADE:
			case CASCADED:
			case CATALOG:
			case CHAIN:
			case CHARACTERISTICS:
			case CHECKPOINT:
			case CLASS:
			case CLOSE:
			case CLUSTER:
			case COMMENT:
			case COMMENTS:
			case COMMIT:
			case COMMITTED:
			case CONFIGURATION:
			case CONNECTION:
			case CONSTRAINTS:
			case CONTENT_P:
			case CONTINUE_P:
			case CONVERSION_P:
			case COPY:
			case COST:
			case CSV:
			case CURSOR:
			case CYCLE:
			case DATA_P:
			case DATABASE:
			case DAY_P:
			case DEALLOCATE:
			case DECLARE:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE_P:
			case DELIMITER:
			case DELIMITERS:
			case DICTIONARY:
			case DISABLE_P:
			case DISCARD:
			case DOCUMENT_P:
			case DOMAIN_P:
			case DOUBLE_P:
			case DROP:
			case EACH:
			case ENABLE_P:
			case ENCODING:
			case ENCRYPTED:
			case ENUM_P:
			case ESCAPE:
			case EVENT:
			case EXCLUDE:
			case EXCLUDING:
			case EXCLUSIVE:
			case EXECUTE:
			case EXPLAIN:
			case EXTENSION:
			case EXTERNAL:
			case FAMILY:
			case FIRST_P:
			case FOLLOWING:
			case FORCE:
			case FORWARD:
			case FUNCTION:
			case FUNCTIONS:
			case GLOBAL:
			case GRANTED:
			case HANDLER:
			case HEADER_P:
			case HOLD:
			case HOUR_P:
			case IDENTITY_P:
			case IF_P:
			case IMMEDIATE:
			case IMMUTABLE:
			case IMPLICIT_P:
			case INCLUDING:
			case INCREMENT:
			case INDEX:
			case INDEXES:
			case INHERIT:
			case INHERITS:
			case INLINE_P:
			case INSENSITIVE:
			case INSERT:
			case INSTEAD:
			case INVOKER:
			case ISOLATION:
			case KEY:
			case LABEL:
			case LANGUAGE:
			case LARGE_P:
			case LAST_P:
			case LEAKPROOF:
			case LEVEL:
			case LISTEN:
			case LOAD:
			case LOCAL:
			case LOCATION:
			case LOCK_P:
			case MAPPING:
			case MATCH:
			case MATERIALIZED:
			case MAXVALUE:
			case MINUTE_P:
			case MINVALUE:
			case MODE:
			case MONTH_P:
			case MOVE:
			case NAME_P:
			case NAMES:
			case NEXT:
			case NO:
			case NOTHING:
			case NOTIFY:
			case NOWAIT:
			case NULLS_P:
			case OBJECT_P:
			case OF:
			case OFF:
			case OIDS:
			case OPERATOR:
			case OPTION:
			case OPTIONS:
			case OWNED:
			case OWNER:
			case PARSER:
			case PARTIAL:
			case PARTITION:
			case PASSING:
			case PASSWORD:
			case PLANS:
			case PRECEDING:
			case PREPARE:
			case PREPARED:
			case PRESERVE:
			case PRIOR:
			case PRIVILEGES:
			case PROCEDURAL:
			case PROCEDURE:
			case PROGRAM:
			case QUOTE:
			case RANGE:
			case READ:
			case REASSIGN:
			case RECHECK:
			case RECURSIVE:
			case REF:
			case REFRESH:
			case REINDEX:
			case RELATIVE_P:
			case RELEASE:
			case RENAME:
			case REPEATABLE:
			case REPLACE:
			case REPLICA:
			case RESET:
			case RESTART:
			case RESTRICT:
			case RETURNS:
			case REVOKE:
			case ROLE:
			case ROLLBACK:
			case ROWS:
			case RULE:
			case SAVEPOINT:
			case SCHEMA:
			case SCROLL:
			case SEARCH:
			case SECOND_P:
			case SECURITY:
			case SEQUENCE:
			case SEQUENCES:
			case SERIALIZABLE:
			case SERVER:
			case SESSION:
			case SET:
			case SHARE:
			case SHOW:
			case SIMPLE:
			case SNAPSHOT:
			case STABLE:
			case STANDALONE_P:
			case START:
			case STATEMENT:
			case STATISTICS:
			case STDIN:
			case STDOUT:
			case STORAGE:
			case STRICT_P:
			case STRIP_P:
			case SYSID:
			case SYSTEM_P:
			case TABLES:
			case TABLESPACE:
			case TEMP:
			case TEMPLATE:
			case TEMPORARY:
			case TEXT_P:
			case TRANSACTION:
			case TRIGGER:
			case TRUNCATE:
			case TRUSTED:
			case TYPE_P:
			case TYPES_P:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNENCRYPTED:
			case UNKNOWN:
			case UNLISTEN:
			case UNLOGGED:
			case UNTIL:
			case UPDATE:
			case VACUUM:
			case VALID:
			case VALIDATE:
			case VALIDATOR:
			case VARYING:
			case VERSION_P:
			case VIEW:
			case VOLATILE:
			case WHITESPACE_P:
			case WITHOUT:
			case WORK:
			case WRAPPER:
			case WRITE:
			case XML_P:
			case YEAR_P:
			case YES_P:
			case ZONE:
			case BETWEEN:
			case BIGINT:
			case BIT:
			case BOOLEAN_P:
			case CHAR_P:
			case CHARACTER:
			case COALESCE:
			case DEC:
			case DECIMAL_P:
			case EXISTS:
			case EXTRACT:
			case FLOAT_P:
			case GREATEST:
			case INOUT:
			case INT_P:
			case INTEGER:
			case INTERVAL:
			case LEAST:
			case NATIONAL:
			case NCHAR:
			case NONE:
			case NULLIF:
			case NUMERIC:
			case OVERLAY:
			case POSITION:
			case PRECISION:
			case REAL:
			case ROW:
			case SETOF:
			case SMALLINT:
			case SUBSTRING:
			case TIME:
			case TIMESTAMP:
			case TREAT:
			case TRIM:
			case VALUES:
			case VARCHAR:
			case XMLATTRIBUTES:
			case XMLCOMMENT:
			case XMLAGG:
			case XML_IS_WELL_FORMED:
			case XML_IS_WELL_FORMED_DOCUMENT:
			case XML_IS_WELL_FORMED_CONTENT:
			case XPATH:
			case XPATH_EXISTS:
			case XMLCONCAT:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLPARSE:
			case XMLPI:
			case XMLROOT:
			case XMLSERIALIZE:
			case CALL:
			case CURRENT_P:
			case ATTACH:
			case DETACH:
			case EXPRESSION:
			case GENERATED:
			case LOGGED:
			case STORED:
			case INCLUDE:
			case ROUTINE:
			case TRANSFORM:
			case IMPORT_P:
			case POLICY:
			case METHOD:
			case REFERENCING:
			case NEW:
			case OLD:
			case VALUE_P:
			case SUBSCRIPTION:
			case PUBLICATION:
			case OUT_P:
			case ROUTINES:
			case SCHEMAS:
			case PROCEDURES:
			case INPUT_P:
			case SUPPORT:
			case PARALLEL:
			case SQL_P:
			case DEPENDS:
			case OVERRIDING:
			case CONFLICT:
			case SKIP_P:
			case LOCKED:
			case TIES:
			case ROLLUP:
			case CUBE:
			case GROUPING:
			case SETS:
			case TABLESAMPLE:
			case ORDINALITY:
			case XMLTABLE:
			case COLUMNS:
			case XMLNAMESPACES:
			case ROWTYPE:
			case NORMALIZED:
			case WITHIN:
			case FILTER:
			case GROUPS:
			case OTHERS:
			case NFC:
			case NFD:
			case NFKC:
			case NFKD:
			case UESCAPE:
			case VIEWS:
			case NORMALIZE:
			case DUMP:
			case PRINT_STRICT_PARAMS:
			case VARIABLE_CONFLICT:
			case ERROR:
			case USE_VARIABLE:
			case USE_COLUMN:
			case ALIAS:
			case CONSTANT:
			case PERFORM:
			case GET:
			case DIAGNOSTICS:
			case STACKED:
			case ELSIF:
			case REVERSE:
			case SLICE:
			case EXIT:
			case RETURN:
			case QUERY:
			case RAISE:
			case SQLSTATE:
			case DEBUG:
			case LOG:
			case INFO:
			case NOTICE:
			case WARNING:
			case EXCEPTION:
			case ASSERT:
			case OPEN:
			case ABS:
			case CBRT:
			case CEIL:
			case CEILING:
			case DEGREES:
			case DIV:
			case EXP:
			case FACTORIAL:
			case FLOOR:
			case GCD:
			case LCM:
			case LN:
			case LOG10:
			case MIN_SCALE:
			case MOD:
			case PI:
			case POWER:
			case RADIANS:
			case ROUND:
			case SCALE:
			case SIGN:
			case SQRT:
			case TRIM_SCALE:
			case TRUNC:
			case WIDTH_BUCKET:
			case RANDOM:
			case SETSEED:
			case ACOS:
			case ACOSD:
			case ASIN:
			case ASIND:
			case ATAN:
			case ATAND:
			case ATAN2:
			case ATAN2D:
			case COS:
			case COSD:
			case COT:
			case COTD:
			case SIN:
			case SIND:
			case TAN:
			case TAND:
			case SINH:
			case COSH:
			case TANH:
			case ASINH:
			case ACOSH:
			case ATANH:
			case BIT_LENGTH:
			case CHAR_LENGTH:
			case CHARACTER_LENGTH:
			case LOWER:
			case OCTET_LENGTH:
			case UPPER:
			case ASCII:
			case BTRIM:
			case CHR:
			case CONCAT:
			case CONCAT_WS:
			case FORMAT:
			case INITCAP:
			case LENGTH:
			case LPAD:
			case LTRIM:
			case MD5:
			case PARSE_IDENT:
			case PG_CLIENT_ENCODING:
			case QUOTE_IDENT:
			case QUOTE_LITERAL:
			case QUOTE_NULLABLE:
			case REGEXP_COUNT:
			case REGEXP_INSTR:
			case REGEXP_LIKE:
			case REGEXP_MATCH:
			case REGEXP_MATCHES:
			case REGEXP_REPLACE:
			case REGEXP_SPLIT_TO_ARRAY:
			case REGEXP_SPLIT_TO_TABLE:
			case REGEXP_SUBSTR:
			case REPEAT:
			case RPAD:
			case RTRIM:
			case SPLIT_PART:
			case STARTS_WITH:
			case STRING_TO_ARRAY:
			case STRING_TO_TABLE:
			case STRPOS:
			case SUBSTR:
			case TO_ASCII:
			case TO_HEX:
			case TRANSLATE:
			case UNISTR:
			case AGE:
			case CLOCK_TIMESTAMP:
			case DATE_BIN:
			case DATE_PART:
			case DATE_TRUNC:
			case ISFINITE:
			case JUSTIFY_DAYS:
			case JUSTIFY_HOURS:
			case JUSTIFY_INTERVAL:
			case MAKE_DATE:
			case MAKE_INTERVAL:
			case MAKE_TIME:
			case MAKE_TIMESTAMP:
			case MAKE_TIMESTAMPTZ:
			case NOW:
			case STATEMENT_TIMESTAMP:
			case TIMEOFDAY:
			case TRANSACTION_TIMESTAMP:
			case TO_TIMESTAMP:
			case TO_CHAR:
			case TO_DATE:
			case TO_NUMBER:
			case Identifier:
			case QuotedIdentifier:
			case UnicodeQuotedIdentifier:
			case PLSQLVARIABLENAME:
			case PLSQLIDENTIFIER:
				{
				State = 8563;
				typename();
				State = 8565;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la - 33)) & ~0x3f) == 0 && ((1L << (_la - 33)) & 576513529147825157L) != 0 || (((_la - 116)) & ~0x3f) == 0 && ((1L << (_la - 116)) & 148693829908709505L) != 0 || (((_la - 208)) & ~0x3f) == 0 && ((1L << (_la - 208)) & 56295003965620233L) != 0 || (((_la - 273)) & ~0x3f) == 0 && ((1L << (_la - 273)) & 18068292027564033L) != 0 || _la==TYPE_P || (((_la - 434)) & ~0x3f) == 0 && ((1L << (_la - 434)) & -144097595889811453L) != 0 || (((_la - 498)) & ~0x3f) == 0 && ((1L << (_la - 498)) & 12516927L) != 0 || (((_la - 637)) & ~0x3f) == 0 && ((1L << (_la - 637)) & 100663331L) != 0) {
					{
					State = 8564;
					xmltable_column_option_list();
					}
				}

				}
				break;
			case FOR:
				{
				State = 8567;
				Match(FOR);
				State = 8568;
				Match(ORDINALITY);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Xmltable_column_option_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Xmltable_column_option_elContext[] xmltable_column_option_el() {
			return GetRuleContexts<Xmltable_column_option_elContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Xmltable_column_option_elContext xmltable_column_option_el(int i) {
			return GetRuleContext<Xmltable_column_option_elContext>(i);
		}
		public Xmltable_column_option_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_xmltable_column_option_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterXmltable_column_option_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitXmltable_column_option_list(this);
		}
	}

	[RuleVersion(0)]
	public Xmltable_column_option_listContext xmltable_column_option_list() {
		Xmltable_column_option_listContext _localctx = new Xmltable_column_option_listContext(Context, State);
		EnterRule(_localctx, 1110, RULE_xmltable_column_option_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8572;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 8571;
				xmltable_column_option_el();
				}
				}
				State = 8574;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( (((_la - 33)) & ~0x3f) == 0 && ((1L << (_la - 33)) & 576513529147825157L) != 0 || (((_la - 116)) & ~0x3f) == 0 && ((1L << (_la - 116)) & 148693829908709505L) != 0 || (((_la - 208)) & ~0x3f) == 0 && ((1L << (_la - 208)) & 56295003965620233L) != 0 || (((_la - 273)) & ~0x3f) == 0 && ((1L << (_la - 273)) & 18068292027564033L) != 0 || _la==TYPE_P || (((_la - 434)) & ~0x3f) == 0 && ((1L << (_la - 434)) & -144097595889811453L) != 0 || (((_la - 498)) & ~0x3f) == 0 && ((1L << (_la - 498)) & 12516927L) != 0 || (((_la - 637)) & ~0x3f) == 0 && ((1L << (_la - 637)) & 100663331L) != 0 );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Xmltable_column_option_elContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFAULT() { return GetToken(PostgreSQLParser.DEFAULT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public A_exprContext a_expr() {
			return GetRuleContext<A_exprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT() { return GetToken(PostgreSQLParser.NOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NULL_P() { return GetToken(PostgreSQLParser.NULL_P, 0); }
		public Xmltable_column_option_elContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_xmltable_column_option_el; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterXmltable_column_option_el(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitXmltable_column_option_el(this);
		}
	}

	[RuleVersion(0)]
	public Xmltable_column_option_elContext xmltable_column_option_el() {
		Xmltable_column_option_elContext _localctx = new Xmltable_column_option_elContext(Context, State);
		EnterRule(_localctx, 1112, RULE_xmltable_column_option_el);
		try {
			State = 8584;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,511,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 8576;
				Match(DEFAULT);
				State = 8577;
				a_expr();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 8578;
				identifier();
				State = 8579;
				a_expr();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 8581;
				Match(NOT);
				State = 8582;
				Match(NULL_P);
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 8583;
				Match(NULL_P);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Xml_namespace_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Xml_namespace_elContext[] xml_namespace_el() {
			return GetRuleContexts<Xml_namespace_elContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Xml_namespace_elContext xml_namespace_el(int i) {
			return GetRuleContext<Xml_namespace_elContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(PostgreSQLParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(PostgreSQLParser.COMMA, i);
		}
		public Xml_namespace_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_xml_namespace_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterXml_namespace_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitXml_namespace_list(this);
		}
	}

	[RuleVersion(0)]
	public Xml_namespace_listContext xml_namespace_list() {
		Xml_namespace_listContext _localctx = new Xml_namespace_listContext(Context, State);
		EnterRule(_localctx, 1114, RULE_xml_namespace_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8586;
			xml_namespace_el();
			State = 8591;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 8587;
				Match(COMMA);
				State = 8588;
				xml_namespace_el();
				}
				}
				State = 8593;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Xml_namespace_elContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public B_exprContext b_expr() {
			return GetRuleContext<B_exprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS() { return GetToken(PostgreSQLParser.AS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public CollabelContext collabel() {
			return GetRuleContext<CollabelContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFAULT() { return GetToken(PostgreSQLParser.DEFAULT, 0); }
		public Xml_namespace_elContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_xml_namespace_el; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterXml_namespace_el(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitXml_namespace_el(this);
		}
	}

	[RuleVersion(0)]
	public Xml_namespace_elContext xml_namespace_el() {
		Xml_namespace_elContext _localctx = new Xml_namespace_elContext(Context, State);
		EnterRule(_localctx, 1116, RULE_xml_namespace_el);
		try {
			State = 8600;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,513,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 8594;
				b_expr(0);
				State = 8595;
				Match(AS);
				State = 8596;
				collabel();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 8598;
				Match(DEFAULT);
				State = 8599;
				b_expr(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypenameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SimpletypenameContext simpletypename() {
			return GetRuleContext<SimpletypenameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Opt_array_boundsContext opt_array_bounds() {
			return GetRuleContext<Opt_array_boundsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ARRAY() { return GetToken(PostgreSQLParser.ARRAY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SETOF() { return GetToken(PostgreSQLParser.SETOF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_BRACKET() { return GetToken(PostgreSQLParser.OPEN_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IconstContext iconst() {
			return GetRuleContext<IconstContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_BRACKET() { return GetToken(PostgreSQLParser.CLOSE_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Qualified_nameContext qualified_name() {
			return GetRuleContext<Qualified_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PERCENT() { return GetToken(PostgreSQLParser.PERCENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROWTYPE() { return GetToken(PostgreSQLParser.ROWTYPE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TYPE_P() { return GetToken(PostgreSQLParser.TYPE_P, 0); }
		public TypenameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typename; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterTypename(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitTypename(this);
		}
	}

	[RuleVersion(0)]
	public TypenameContext typename() {
		TypenameContext _localctx = new TypenameContext(Context, State);
		EnterRule(_localctx, 1118, RULE_typename);
		int _la;
		try {
			State = 8620;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,517,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 8603;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==SETOF) {
					{
					State = 8602;
					Match(SETOF);
					}
				}

				State = 8605;
				simpletypename();
				State = 8614;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,516,Context) ) {
				case 1:
					{
					State = 8606;
					opt_array_bounds();
					}
					break;
				case 2:
					{
					State = 8607;
					Match(ARRAY);
					State = 8612;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,515,Context) ) {
					case 1:
						{
						State = 8608;
						Match(OPEN_BRACKET);
						State = 8609;
						iconst();
						State = 8610;
						Match(CLOSE_BRACKET);
						}
						break;
					}
					}
					break;
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 8616;
				qualified_name();
				State = 8617;
				Match(PERCENT);
				State = 8618;
				_la = TokenStream.LA(1);
				if ( !(_la==TYPE_P || _la==ROWTYPE) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Opt_array_boundsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] OPEN_BRACKET() { return GetTokens(PostgreSQLParser.OPEN_BRACKET); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_BRACKET(int i) {
			return GetToken(PostgreSQLParser.OPEN_BRACKET, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] CLOSE_BRACKET() { return GetTokens(PostgreSQLParser.CLOSE_BRACKET); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_BRACKET(int i) {
			return GetToken(PostgreSQLParser.CLOSE_BRACKET, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IconstContext[] iconst() {
			return GetRuleContexts<IconstContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IconstContext iconst(int i) {
			return GetRuleContext<IconstContext>(i);
		}
		public Opt_array_boundsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_opt_array_bounds; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterOpt_array_bounds(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitOpt_array_bounds(this);
		}
	}

	[RuleVersion(0)]
	public Opt_array_boundsContext opt_array_bounds() {
		Opt_array_boundsContext _localctx = new Opt_array_boundsContext(Context, State);
		EnterRule(_localctx, 1120, RULE_opt_array_bounds);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 8629;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,519,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 8622;
					Match(OPEN_BRACKET);
					State = 8624;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==Integral) {
						{
						State = 8623;
						iconst();
						}
					}

					State = 8626;
					Match(CLOSE_BRACKET);
					}
					} 
				}
				State = 8631;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,519,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SimpletypenameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public GenerictypeContext generictype() {
			return GetRuleContext<GenerictypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NumericContext numeric() {
			return GetRuleContext<NumericContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BitContext bit() {
			return GetRuleContext<BitContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CharacterContext character() {
			return GetRuleContext<CharacterContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ConstdatetimeContext constdatetime() {
			return GetRuleContext<ConstdatetimeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ConstintervalContext constinterval() {
			return GetRuleContext<ConstintervalContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Opt_intervalContext opt_interval() {
			return GetRuleContext<Opt_intervalContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAREN() { return GetToken(PostgreSQLParser.OPEN_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IconstContext iconst() {
			return GetRuleContext<IconstContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAREN() { return GetToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public SimpletypenameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_simpletypename; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterSimpletypename(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitSimpletypename(this);
		}
	}

	[RuleVersion(0)]
	public SimpletypenameContext simpletypename() {
		SimpletypenameContext _localctx = new SimpletypenameContext(Context, State);
		EnterRule(_localctx, 1122, RULE_simpletypename);
		try {
			State = 8645;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,521,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 8632;
				generictype();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 8633;
				numeric();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 8634;
				bit();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 8635;
				character();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 8636;
				constdatetime();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 8637;
				constinterval();
				State = 8643;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,520,Context) ) {
				case 1:
					{
					State = 8638;
					opt_interval();
					}
					break;
				case 2:
					{
					State = 8639;
					Match(OPEN_PAREN);
					State = 8640;
					iconst();
					State = 8641;
					Match(CLOSE_PAREN);
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConsttypenameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NumericContext numeric() {
			return GetRuleContext<NumericContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ConstbitContext constbit() {
			return GetRuleContext<ConstbitContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ConstcharacterContext constcharacter() {
			return GetRuleContext<ConstcharacterContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ConstdatetimeContext constdatetime() {
			return GetRuleContext<ConstdatetimeContext>(0);
		}
		public ConsttypenameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_consttypename; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterConsttypename(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitConsttypename(this);
		}
	}

	[RuleVersion(0)]
	public ConsttypenameContext consttypename() {
		ConsttypenameContext _localctx = new ConsttypenameContext(Context, State);
		EnterRule(_localctx, 1124, RULE_consttypename);
		try {
			State = 8651;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case DOUBLE_P:
			case BIGINT:
			case BOOLEAN_P:
			case DEC:
			case DECIMAL_P:
			case FLOAT_P:
			case INT_P:
			case INTEGER:
			case NUMERIC:
			case REAL:
			case SMALLINT:
				EnterOuterAlt(_localctx, 1);
				{
				State = 8647;
				numeric();
				}
				break;
			case BIT:
				EnterOuterAlt(_localctx, 2);
				{
				State = 8648;
				constbit();
				}
				break;
			case CHAR_P:
			case CHARACTER:
			case NATIONAL:
			case NCHAR:
			case VARCHAR:
				EnterOuterAlt(_localctx, 3);
				{
				State = 8649;
				constcharacter();
				}
				break;
			case TIME:
			case TIMESTAMP:
				EnterOuterAlt(_localctx, 4);
				{
				State = 8650;
				constdatetime();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GenerictypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Opt_type_modifiersContext opt_type_modifiers() {
			return GetRuleContext<Opt_type_modifiersContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Builtin_function_nameContext builtin_function_name() {
			return GetRuleContext<Builtin_function_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Type_function_nameContext type_function_name() {
			return GetRuleContext<Type_function_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFT() { return GetToken(PostgreSQLParser.LEFT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHT() { return GetToken(PostgreSQLParser.RIGHT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public AttrsContext attrs() {
			return GetRuleContext<AttrsContext>(0);
		}
		public GenerictypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_generictype; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterGenerictype(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitGenerictype(this);
		}
	}

	[RuleVersion(0)]
	public GenerictypeContext generictype() {
		GenerictypeContext _localctx = new GenerictypeContext(Context, State);
		EnterRule(_localctx, 1126, RULE_generictype);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8657;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case REPLACE:
			case XMLCOMMENT:
			case XMLAGG:
			case XML_IS_WELL_FORMED:
			case XML_IS_WELL_FORMED_DOCUMENT:
			case XML_IS_WELL_FORMED_CONTENT:
			case XPATH:
			case XPATH_EXISTS:
			case REVERSE:
			case LOG:
			case ABS:
			case CBRT:
			case CEIL:
			case CEILING:
			case DEGREES:
			case DIV:
			case EXP:
			case FACTORIAL:
			case FLOOR:
			case GCD:
			case LCM:
			case LN:
			case LOG10:
			case MIN_SCALE:
			case MOD:
			case PI:
			case POWER:
			case RADIANS:
			case ROUND:
			case SCALE:
			case SIGN:
			case SQRT:
			case TRIM_SCALE:
			case TRUNC:
			case WIDTH_BUCKET:
			case RANDOM:
			case SETSEED:
			case ACOS:
			case ACOSD:
			case ASIN:
			case ASIND:
			case ATAN:
			case ATAND:
			case ATAN2:
			case ATAN2D:
			case COS:
			case COSD:
			case COT:
			case COTD:
			case SIN:
			case SIND:
			case TAN:
			case TAND:
			case SINH:
			case COSH:
			case TANH:
			case ASINH:
			case ACOSH:
			case ATANH:
			case BIT_LENGTH:
			case CHAR_LENGTH:
			case CHARACTER_LENGTH:
			case LOWER:
			case OCTET_LENGTH:
			case UPPER:
			case ASCII:
			case BTRIM:
			case CHR:
			case CONCAT:
			case CONCAT_WS:
			case FORMAT:
			case INITCAP:
			case LENGTH:
			case LPAD:
			case LTRIM:
			case MD5:
			case PARSE_IDENT:
			case PG_CLIENT_ENCODING:
			case QUOTE_IDENT:
			case QUOTE_LITERAL:
			case QUOTE_NULLABLE:
			case REGEXP_COUNT:
			case REGEXP_INSTR:
			case REGEXP_LIKE:
			case REGEXP_MATCH:
			case REGEXP_MATCHES:
			case REGEXP_REPLACE:
			case REGEXP_SPLIT_TO_ARRAY:
			case REGEXP_SPLIT_TO_TABLE:
			case REGEXP_SUBSTR:
			case REPEAT:
			case RPAD:
			case RTRIM:
			case SPLIT_PART:
			case STARTS_WITH:
			case STRING_TO_ARRAY:
			case STRING_TO_TABLE:
			case STRPOS:
			case SUBSTR:
			case TO_ASCII:
			case TO_HEX:
			case TRANSLATE:
			case UNISTR:
			case AGE:
			case CLOCK_TIMESTAMP:
			case DATE_BIN:
			case DATE_PART:
			case DATE_TRUNC:
			case ISFINITE:
			case JUSTIFY_DAYS:
			case JUSTIFY_HOURS:
			case JUSTIFY_INTERVAL:
			case MAKE_DATE:
			case MAKE_INTERVAL:
			case MAKE_TIME:
			case MAKE_TIMESTAMP:
			case MAKE_TIMESTAMPTZ:
			case NOW:
			case STATEMENT_TIMESTAMP:
			case TIMEOFDAY:
			case TRANSACTION_TIMESTAMP:
			case TO_TIMESTAMP:
			case TO_CHAR:
			case TO_DATE:
			case TO_NUMBER:
				{
				State = 8653;
				builtin_function_name();
				}
				break;
			case AND:
			case ARRAY:
			case COLLATE:
			case COLUMN:
			case CONSTRAINT:
			case DEFAULT:
			case DO:
			case FETCH:
			case TABLE:
			case AUTHORIZATION:
			case BINARY:
			case COLLATION:
			case CONCURRENTLY:
			case CROSS:
			case CURRENT_SCHEMA:
			case FREEZE:
			case FULL:
			case ILIKE:
			case INNER_P:
			case IS:
			case ISNULL:
			case JOIN:
			case LIKE:
			case NATURAL:
			case NOTNULL:
			case OUTER_P:
			case OVER:
			case OVERLAPS:
			case SIMILAR:
			case VERBOSE:
			case ABORT_P:
			case ABSOLUTE_P:
			case ACCESS:
			case ACTION:
			case ADD_P:
			case ADMIN:
			case AFTER:
			case AGGREGATE:
			case ALSO:
			case ALTER:
			case ALWAYS:
			case ASSERTION:
			case ASSIGNMENT:
			case AT:
			case ATTRIBUTE:
			case BACKWARD:
			case BEFORE:
			case BEGIN_P:
			case BY:
			case CACHE:
			case CALLED:
			case CASCADE:
			case CASCADED:
			case CATALOG:
			case CHAIN:
			case CHARACTERISTICS:
			case CHECKPOINT:
			case CLASS:
			case CLOSE:
			case CLUSTER:
			case COMMENT:
			case COMMENTS:
			case COMMIT:
			case COMMITTED:
			case CONFIGURATION:
			case CONNECTION:
			case CONSTRAINTS:
			case CONTENT_P:
			case CONTINUE_P:
			case CONVERSION_P:
			case COPY:
			case COST:
			case CSV:
			case CURSOR:
			case CYCLE:
			case DATA_P:
			case DATABASE:
			case DAY_P:
			case DEALLOCATE:
			case DECLARE:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE_P:
			case DELIMITER:
			case DELIMITERS:
			case DICTIONARY:
			case DISABLE_P:
			case DISCARD:
			case DOCUMENT_P:
			case DOMAIN_P:
			case DOUBLE_P:
			case DROP:
			case EACH:
			case ENABLE_P:
			case ENCODING:
			case ENCRYPTED:
			case ENUM_P:
			case ESCAPE:
			case EVENT:
			case EXCLUDE:
			case EXCLUDING:
			case EXCLUSIVE:
			case EXECUTE:
			case EXPLAIN:
			case EXTENSION:
			case EXTERNAL:
			case FAMILY:
			case FIRST_P:
			case FOLLOWING:
			case FORCE:
			case FORWARD:
			case FUNCTION:
			case FUNCTIONS:
			case GLOBAL:
			case GRANTED:
			case HANDLER:
			case HEADER_P:
			case HOLD:
			case HOUR_P:
			case IDENTITY_P:
			case IF_P:
			case IMMEDIATE:
			case IMMUTABLE:
			case IMPLICIT_P:
			case INCLUDING:
			case INCREMENT:
			case INDEX:
			case INDEXES:
			case INHERIT:
			case INHERITS:
			case INLINE_P:
			case INSENSITIVE:
			case INSERT:
			case INSTEAD:
			case INVOKER:
			case ISOLATION:
			case KEY:
			case LABEL:
			case LANGUAGE:
			case LARGE_P:
			case LAST_P:
			case LEAKPROOF:
			case LEVEL:
			case LISTEN:
			case LOAD:
			case LOCAL:
			case LOCATION:
			case LOCK_P:
			case MAPPING:
			case MATCH:
			case MATERIALIZED:
			case MAXVALUE:
			case MINUTE_P:
			case MINVALUE:
			case MODE:
			case MONTH_P:
			case MOVE:
			case NAME_P:
			case NAMES:
			case NEXT:
			case NO:
			case NOTHING:
			case NOTIFY:
			case NOWAIT:
			case NULLS_P:
			case OBJECT_P:
			case OF:
			case OFF:
			case OIDS:
			case OPERATOR:
			case OPTION:
			case OPTIONS:
			case OWNED:
			case OWNER:
			case PARSER:
			case PARTIAL:
			case PARTITION:
			case PASSING:
			case PASSWORD:
			case PLANS:
			case PRECEDING:
			case PREPARE:
			case PREPARED:
			case PRESERVE:
			case PRIOR:
			case PRIVILEGES:
			case PROCEDURAL:
			case PROCEDURE:
			case PROGRAM:
			case QUOTE:
			case RANGE:
			case READ:
			case REASSIGN:
			case RECHECK:
			case RECURSIVE:
			case REF:
			case REFRESH:
			case REINDEX:
			case RELATIVE_P:
			case RELEASE:
			case RENAME:
			case REPEATABLE:
			case REPLICA:
			case RESET:
			case RESTART:
			case RESTRICT:
			case RETURNS:
			case REVOKE:
			case ROLE:
			case ROLLBACK:
			case ROWS:
			case RULE:
			case SAVEPOINT:
			case SCHEMA:
			case SCROLL:
			case SEARCH:
			case SECOND_P:
			case SECURITY:
			case SEQUENCE:
			case SEQUENCES:
			case SERIALIZABLE:
			case SERVER:
			case SESSION:
			case SET:
			case SHARE:
			case SHOW:
			case SIMPLE:
			case SNAPSHOT:
			case STABLE:
			case STANDALONE_P:
			case START:
			case STATEMENT:
			case STATISTICS:
			case STDIN:
			case STDOUT:
			case STORAGE:
			case STRICT_P:
			case STRIP_P:
			case SYSID:
			case SYSTEM_P:
			case TABLES:
			case TABLESPACE:
			case TEMP:
			case TEMPLATE:
			case TEMPORARY:
			case TEXT_P:
			case TRANSACTION:
			case TRIGGER:
			case TRUNCATE:
			case TRUSTED:
			case TYPE_P:
			case TYPES_P:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNENCRYPTED:
			case UNKNOWN:
			case UNLISTEN:
			case UNLOGGED:
			case UNTIL:
			case UPDATE:
			case VACUUM:
			case VALID:
			case VALIDATE:
			case VALIDATOR:
			case VARYING:
			case VERSION_P:
			case VIEW:
			case VOLATILE:
			case WHITESPACE_P:
			case WITHOUT:
			case WORK:
			case WRAPPER:
			case WRITE:
			case XML_P:
			case YEAR_P:
			case YES_P:
			case ZONE:
			case CALL:
			case CURRENT_P:
			case ATTACH:
			case DETACH:
			case EXPRESSION:
			case GENERATED:
			case LOGGED:
			case STORED:
			case INCLUDE:
			case ROUTINE:
			case TRANSFORM:
			case IMPORT_P:
			case POLICY:
			case METHOD:
			case REFERENCING:
			case NEW:
			case OLD:
			case VALUE_P:
			case SUBSCRIPTION:
			case PUBLICATION:
			case ROUTINES:
			case SCHEMAS:
			case PROCEDURES:
			case INPUT_P:
			case SUPPORT:
			case PARALLEL:
			case SQL_P:
			case DEPENDS:
			case OVERRIDING:
			case CONFLICT:
			case SKIP_P:
			case LOCKED:
			case TIES:
			case ROLLUP:
			case CUBE:
			case SETS:
			case TABLESAMPLE:
			case ORDINALITY:
			case COLUMNS:
			case ROWTYPE:
			case NORMALIZED:
			case WITHIN:
			case FILTER:
			case GROUPS:
			case OTHERS:
			case NFC:
			case NFD:
			case NFKC:
			case NFKD:
			case UESCAPE:
			case VIEWS:
			case DUMP:
			case PRINT_STRICT_PARAMS:
			case VARIABLE_CONFLICT:
			case ERROR:
			case USE_VARIABLE:
			case USE_COLUMN:
			case ALIAS:
			case CONSTANT:
			case PERFORM:
			case GET:
			case DIAGNOSTICS:
			case STACKED:
			case ELSIF:
			case SLICE:
			case EXIT:
			case RETURN:
			case QUERY:
			case RAISE:
			case SQLSTATE:
			case DEBUG:
			case INFO:
			case NOTICE:
			case WARNING:
			case EXCEPTION:
			case ASSERT:
			case OPEN:
			case Identifier:
			case QuotedIdentifier:
			case UnicodeQuotedIdentifier:
			case PLSQLVARIABLENAME:
			case PLSQLIDENTIFIER:
				{
				State = 8654;
				type_function_name();
				}
				break;
			case LEFT:
				{
				State = 8655;
				Match(LEFT);
				}
				break;
			case RIGHT:
				{
				State = 8656;
				Match(RIGHT);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 8660;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,524,Context) ) {
			case 1:
				{
				State = 8659;
				attrs();
				}
				break;
			}
			State = 8662;
			opt_type_modifiers();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Opt_type_modifiersContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAREN() { return GetToken(PostgreSQLParser.OPEN_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Expr_listContext expr_list() {
			return GetRuleContext<Expr_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAREN() { return GetToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public Opt_type_modifiersContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_opt_type_modifiers; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterOpt_type_modifiers(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitOpt_type_modifiers(this);
		}
	}

	[RuleVersion(0)]
	public Opt_type_modifiersContext opt_type_modifiers() {
		Opt_type_modifiersContext _localctx = new Opt_type_modifiersContext(Context, State);
		EnterRule(_localctx, 1128, RULE_opt_type_modifiers);
		try {
			State = 8669;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,525,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 8664;
				Match(OPEN_PAREN);
				State = 8665;
				expr_list();
				State = 8666;
				Match(CLOSE_PAREN);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NumericContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INT_P() { return GetToken(PostgreSQLParser.INT_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTEGER() { return GetToken(PostgreSQLParser.INTEGER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SMALLINT() { return GetToken(PostgreSQLParser.SMALLINT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BIGINT() { return GetToken(PostgreSQLParser.BIGINT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REAL() { return GetToken(PostgreSQLParser.REAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FLOAT_P() { return GetToken(PostgreSQLParser.FLOAT_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Opt_floatContext opt_float() {
			return GetRuleContext<Opt_floatContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOUBLE_P() { return GetToken(PostgreSQLParser.DOUBLE_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PRECISION() { return GetToken(PostgreSQLParser.PRECISION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DECIMAL_P() { return GetToken(PostgreSQLParser.DECIMAL_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Opt_type_modifiersContext opt_type_modifiers() {
			return GetRuleContext<Opt_type_modifiersContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEC() { return GetToken(PostgreSQLParser.DEC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NUMERIC() { return GetToken(PostgreSQLParser.NUMERIC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BOOLEAN_P() { return GetToken(PostgreSQLParser.BOOLEAN_P, 0); }
		public NumericContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_numeric; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterNumeric(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitNumeric(this);
		}
	}

	[RuleVersion(0)]
	public NumericContext numeric() {
		NumericContext _localctx = new NumericContext(Context, State);
		EnterRule(_localctx, 1130, RULE_numeric);
		try {
			State = 8687;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case INT_P:
				EnterOuterAlt(_localctx, 1);
				{
				State = 8671;
				Match(INT_P);
				}
				break;
			case INTEGER:
				EnterOuterAlt(_localctx, 2);
				{
				State = 8672;
				Match(INTEGER);
				}
				break;
			case SMALLINT:
				EnterOuterAlt(_localctx, 3);
				{
				State = 8673;
				Match(SMALLINT);
				}
				break;
			case BIGINT:
				EnterOuterAlt(_localctx, 4);
				{
				State = 8674;
				Match(BIGINT);
				}
				break;
			case REAL:
				EnterOuterAlt(_localctx, 5);
				{
				State = 8675;
				Match(REAL);
				}
				break;
			case FLOAT_P:
				EnterOuterAlt(_localctx, 6);
				{
				State = 8676;
				Match(FLOAT_P);
				State = 8677;
				opt_float();
				}
				break;
			case DOUBLE_P:
				EnterOuterAlt(_localctx, 7);
				{
				State = 8678;
				Match(DOUBLE_P);
				State = 8679;
				Match(PRECISION);
				}
				break;
			case DECIMAL_P:
				EnterOuterAlt(_localctx, 8);
				{
				State = 8680;
				Match(DECIMAL_P);
				State = 8681;
				opt_type_modifiers();
				}
				break;
			case DEC:
				EnterOuterAlt(_localctx, 9);
				{
				State = 8682;
				Match(DEC);
				State = 8683;
				opt_type_modifiers();
				}
				break;
			case NUMERIC:
				EnterOuterAlt(_localctx, 10);
				{
				State = 8684;
				Match(NUMERIC);
				State = 8685;
				opt_type_modifiers();
				}
				break;
			case BOOLEAN_P:
				EnterOuterAlt(_localctx, 11);
				{
				State = 8686;
				Match(BOOLEAN_P);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Opt_floatContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAREN() { return GetToken(PostgreSQLParser.OPEN_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IconstContext iconst() {
			return GetRuleContext<IconstContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAREN() { return GetToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public Opt_floatContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_opt_float; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterOpt_float(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitOpt_float(this);
		}
	}

	[RuleVersion(0)]
	public Opt_floatContext opt_float() {
		Opt_floatContext _localctx = new Opt_floatContext(Context, State);
		EnterRule(_localctx, 1132, RULE_opt_float);
		try {
			State = 8694;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,527,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 8689;
				Match(OPEN_PAREN);
				State = 8690;
				iconst();
				State = 8691;
				Match(CLOSE_PAREN);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BitContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public BitwithlengthContext bitwithlength() {
			return GetRuleContext<BitwithlengthContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BitwithoutlengthContext bitwithoutlength() {
			return GetRuleContext<BitwithoutlengthContext>(0);
		}
		public BitContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_bit; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterBit(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitBit(this);
		}
	}

	[RuleVersion(0)]
	public BitContext bit() {
		BitContext _localctx = new BitContext(Context, State);
		EnterRule(_localctx, 1134, RULE_bit);
		try {
			State = 8698;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,528,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 8696;
				bitwithlength();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 8697;
				bitwithoutlength();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConstbitContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public BitwithlengthContext bitwithlength() {
			return GetRuleContext<BitwithlengthContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BitwithoutlengthContext bitwithoutlength() {
			return GetRuleContext<BitwithoutlengthContext>(0);
		}
		public ConstbitContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constbit; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterConstbit(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitConstbit(this);
		}
	}

	[RuleVersion(0)]
	public ConstbitContext constbit() {
		ConstbitContext _localctx = new ConstbitContext(Context, State);
		EnterRule(_localctx, 1136, RULE_constbit);
		try {
			State = 8702;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,529,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 8700;
				bitwithlength();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 8701;
				bitwithoutlength();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BitwithlengthContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BIT() { return GetToken(PostgreSQLParser.BIT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Opt_varyingContext opt_varying() {
			return GetRuleContext<Opt_varyingContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAREN() { return GetToken(PostgreSQLParser.OPEN_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Expr_listContext expr_list() {
			return GetRuleContext<Expr_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAREN() { return GetToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public BitwithlengthContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_bitwithlength; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterBitwithlength(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitBitwithlength(this);
		}
	}

	[RuleVersion(0)]
	public BitwithlengthContext bitwithlength() {
		BitwithlengthContext _localctx = new BitwithlengthContext(Context, State);
		EnterRule(_localctx, 1138, RULE_bitwithlength);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8704;
			Match(BIT);
			State = 8705;
			opt_varying();
			State = 8706;
			Match(OPEN_PAREN);
			State = 8707;
			expr_list();
			State = 8708;
			Match(CLOSE_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BitwithoutlengthContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BIT() { return GetToken(PostgreSQLParser.BIT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Opt_varyingContext opt_varying() {
			return GetRuleContext<Opt_varyingContext>(0);
		}
		public BitwithoutlengthContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_bitwithoutlength; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterBitwithoutlength(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitBitwithoutlength(this);
		}
	}

	[RuleVersion(0)]
	public BitwithoutlengthContext bitwithoutlength() {
		BitwithoutlengthContext _localctx = new BitwithoutlengthContext(Context, State);
		EnterRule(_localctx, 1140, RULE_bitwithoutlength);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8710;
			Match(BIT);
			State = 8711;
			opt_varying();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CharacterContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Character_cContext character_c() {
			return GetRuleContext<Character_cContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAREN() { return GetToken(PostgreSQLParser.OPEN_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IconstContext iconst() {
			return GetRuleContext<IconstContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAREN() { return GetToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public CharacterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_character; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterCharacter(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitCharacter(this);
		}
	}

	[RuleVersion(0)]
	public CharacterContext character() {
		CharacterContext _localctx = new CharacterContext(Context, State);
		EnterRule(_localctx, 1142, RULE_character);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8713;
			character_c();
			State = 8718;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,530,Context) ) {
			case 1:
				{
				State = 8714;
				Match(OPEN_PAREN);
				State = 8715;
				iconst();
				State = 8716;
				Match(CLOSE_PAREN);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConstcharacterContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Character_cContext character_c() {
			return GetRuleContext<Character_cContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAREN() { return GetToken(PostgreSQLParser.OPEN_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IconstContext iconst() {
			return GetRuleContext<IconstContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAREN() { return GetToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public ConstcharacterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constcharacter; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterConstcharacter(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitConstcharacter(this);
		}
	}

	[RuleVersion(0)]
	public ConstcharacterContext constcharacter() {
		ConstcharacterContext _localctx = new ConstcharacterContext(Context, State);
		EnterRule(_localctx, 1144, RULE_constcharacter);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8720;
			character_c();
			State = 8725;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==OPEN_PAREN) {
				{
				State = 8721;
				Match(OPEN_PAREN);
				State = 8722;
				iconst();
				State = 8723;
				Match(CLOSE_PAREN);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Character_cContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Opt_varyingContext opt_varying() {
			return GetRuleContext<Opt_varyingContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHARACTER() { return GetToken(PostgreSQLParser.CHARACTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHAR_P() { return GetToken(PostgreSQLParser.CHAR_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NCHAR() { return GetToken(PostgreSQLParser.NCHAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARCHAR() { return GetToken(PostgreSQLParser.VARCHAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NATIONAL() { return GetToken(PostgreSQLParser.NATIONAL, 0); }
		public Character_cContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_character_c; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterCharacter_c(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitCharacter_c(this);
		}
	}

	[RuleVersion(0)]
	public Character_cContext character_c() {
		Character_cContext _localctx = new Character_cContext(Context, State);
		EnterRule(_localctx, 1146, RULE_character_c);
		int _la;
		try {
			State = 8733;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case CHAR_P:
			case CHARACTER:
			case NCHAR:
				EnterOuterAlt(_localctx, 1);
				{
				State = 8727;
				_la = TokenStream.LA(1);
				if ( !((((_la - 385)) & ~0x3f) == 0 && ((1L << (_la - 385)) & 32771L) != 0) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 8728;
				opt_varying();
				}
				break;
			case VARCHAR:
				EnterOuterAlt(_localctx, 2);
				{
				State = 8729;
				Match(VARCHAR);
				}
				break;
			case NATIONAL:
				EnterOuterAlt(_localctx, 3);
				{
				State = 8730;
				Match(NATIONAL);
				State = 8731;
				_la = TokenStream.LA(1);
				if ( !(_la==CHAR_P || _la==CHARACTER) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 8732;
				opt_varying();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Opt_varyingContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARYING() { return GetToken(PostgreSQLParser.VARYING, 0); }
		public Opt_varyingContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_opt_varying; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterOpt_varying(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitOpt_varying(this);
		}
	}

	[RuleVersion(0)]
	public Opt_varyingContext opt_varying() {
		Opt_varyingContext _localctx = new Opt_varyingContext(Context, State);
		EnterRule(_localctx, 1148, RULE_opt_varying);
		try {
			State = 8737;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,533,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 8735;
				Match(VARYING);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConstdatetimeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Opt_timezoneContext opt_timezone() {
			return GetRuleContext<Opt_timezoneContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TIMESTAMP() { return GetToken(PostgreSQLParser.TIMESTAMP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TIME() { return GetToken(PostgreSQLParser.TIME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAREN() { return GetToken(PostgreSQLParser.OPEN_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IconstContext iconst() {
			return GetRuleContext<IconstContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAREN() { return GetToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public ConstdatetimeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constdatetime; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterConstdatetime(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitConstdatetime(this);
		}
	}

	[RuleVersion(0)]
	public ConstdatetimeContext constdatetime() {
		ConstdatetimeContext _localctx = new ConstdatetimeContext(Context, State);
		EnterRule(_localctx, 1150, RULE_constdatetime);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8739;
			_la = TokenStream.LA(1);
			if ( !(_la==TIME || _la==TIMESTAMP) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 8744;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,534,Context) ) {
			case 1:
				{
				State = 8740;
				Match(OPEN_PAREN);
				State = 8741;
				iconst();
				State = 8742;
				Match(CLOSE_PAREN);
				}
				break;
			}
			State = 8746;
			opt_timezone();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConstintervalContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTERVAL() { return GetToken(PostgreSQLParser.INTERVAL, 0); }
		public ConstintervalContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constinterval; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterConstinterval(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitConstinterval(this);
		}
	}

	[RuleVersion(0)]
	public ConstintervalContext constinterval() {
		ConstintervalContext _localctx = new ConstintervalContext(Context, State);
		EnterRule(_localctx, 1152, RULE_constinterval);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8748;
			Match(INTERVAL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Opt_timezoneContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WITH() { return GetToken(PostgreSQLParser.WITH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TIME() { return GetToken(PostgreSQLParser.TIME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ZONE() { return GetToken(PostgreSQLParser.ZONE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WITHOUT() { return GetToken(PostgreSQLParser.WITHOUT, 0); }
		public Opt_timezoneContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_opt_timezone; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterOpt_timezone(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitOpt_timezone(this);
		}
	}

	[RuleVersion(0)]
	public Opt_timezoneContext opt_timezone() {
		Opt_timezoneContext _localctx = new Opt_timezoneContext(Context, State);
		EnterRule(_localctx, 1154, RULE_opt_timezone);
		try {
			State = 8757;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,535,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 8750;
				Match(WITH);
				State = 8751;
				Match(TIME);
				State = 8752;
				Match(ZONE);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 8753;
				Match(WITHOUT);
				State = 8754;
				Match(TIME);
				State = 8755;
				Match(ZONE);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Opt_intervalContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode YEAR_P() { return GetToken(PostgreSQLParser.YEAR_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MONTH_P() { return GetToken(PostgreSQLParser.MONTH_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DAY_P() { return GetToken(PostgreSQLParser.DAY_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HOUR_P() { return GetToken(PostgreSQLParser.HOUR_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUTE_P() { return GetToken(PostgreSQLParser.MINUTE_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Interval_secondContext interval_second() {
			return GetRuleContext<Interval_secondContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TO() { return GetToken(PostgreSQLParser.TO, 0); }
		public Opt_intervalContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_opt_interval; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterOpt_interval(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitOpt_interval(this);
		}
	}

	[RuleVersion(0)]
	public Opt_intervalContext opt_interval() {
		Opt_intervalContext _localctx = new Opt_intervalContext(Context, State);
		EnterRule(_localctx, 1156, RULE_opt_interval);
		try {
			State = 8785;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,538,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 8759;
				Match(YEAR_P);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 8760;
				Match(MONTH_P);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 8761;
				Match(DAY_P);
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 8762;
				Match(HOUR_P);
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 8763;
				Match(MINUTE_P);
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 8764;
				interval_second();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 8765;
				Match(YEAR_P);
				State = 8766;
				Match(TO);
				State = 8767;
				Match(MONTH_P);
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 8768;
				Match(DAY_P);
				State = 8769;
				Match(TO);
				State = 8773;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case HOUR_P:
					{
					State = 8770;
					Match(HOUR_P);
					}
					break;
				case MINUTE_P:
					{
					State = 8771;
					Match(MINUTE_P);
					}
					break;
				case SECOND_P:
					{
					State = 8772;
					interval_second();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 8775;
				Match(HOUR_P);
				State = 8776;
				Match(TO);
				State = 8779;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case MINUTE_P:
					{
					State = 8777;
					Match(MINUTE_P);
					}
					break;
				case SECOND_P:
					{
					State = 8778;
					interval_second();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 8781;
				Match(MINUTE_P);
				State = 8782;
				Match(TO);
				State = 8783;
				interval_second();
				}
				break;
			case 11:
				EnterOuterAlt(_localctx, 11);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Interval_secondContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SECOND_P() { return GetToken(PostgreSQLParser.SECOND_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAREN() { return GetToken(PostgreSQLParser.OPEN_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IconstContext iconst() {
			return GetRuleContext<IconstContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAREN() { return GetToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public Interval_secondContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_interval_second; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterInterval_second(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitInterval_second(this);
		}
	}

	[RuleVersion(0)]
	public Interval_secondContext interval_second() {
		Interval_secondContext _localctx = new Interval_secondContext(Context, State);
		EnterRule(_localctx, 1158, RULE_interval_second);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8787;
			Match(SECOND_P);
			State = 8792;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,539,Context) ) {
			case 1:
				{
				State = 8788;
				Match(OPEN_PAREN);
				State = 8789;
				iconst();
				State = 8790;
				Match(CLOSE_PAREN);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Opt_escapeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ESCAPE() { return GetToken(PostgreSQLParser.ESCAPE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public A_exprContext a_expr() {
			return GetRuleContext<A_exprContext>(0);
		}
		public Opt_escapeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_opt_escape; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterOpt_escape(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitOpt_escape(this);
		}
	}

	[RuleVersion(0)]
	public Opt_escapeContext opt_escape() {
		Opt_escapeContext _localctx = new Opt_escapeContext(Context, State);
		EnterRule(_localctx, 1160, RULE_opt_escape);
		try {
			State = 8797;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,540,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 8794;
				Match(ESCAPE);
				State = 8795;
				a_expr();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class A_exprContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public A_expr_qualContext a_expr_qual() {
			return GetRuleContext<A_expr_qualContext>(0);
		}
		public A_exprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_a_expr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterA_expr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitA_expr(this);
		}
	}

	[RuleVersion(0)]
	public A_exprContext a_expr() {
		A_exprContext _localctx = new A_exprContext(Context, State);
		EnterRule(_localctx, 1162, RULE_a_expr);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8799;
			a_expr_qual();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class A_expr_qualContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public A_expr_lesslessContext a_expr_lessless() {
			return GetRuleContext<A_expr_lesslessContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Qual_opContext qual_op() {
			return GetRuleContext<Qual_opContext>(0);
		}
		public A_expr_qualContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_a_expr_qual; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterA_expr_qual(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitA_expr_qual(this);
		}
	}

	[RuleVersion(0)]
	public A_expr_qualContext a_expr_qual() {
		A_expr_qualContext _localctx = new A_expr_qualContext(Context, State);
		EnterRule(_localctx, 1164, RULE_a_expr_qual);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8801;
			a_expr_lessless();
			State = 8803;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,541,Context) ) {
			case 1:
				{
				State = 8802;
				qual_op();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class A_expr_lesslessContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public A_expr_orContext[] a_expr_or() {
			return GetRuleContexts<A_expr_orContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public A_expr_orContext a_expr_or(int i) {
			return GetRuleContext<A_expr_orContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] LESS_LESS() { return GetTokens(PostgreSQLParser.LESS_LESS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LESS_LESS(int i) {
			return GetToken(PostgreSQLParser.LESS_LESS, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] GREATER_GREATER() { return GetTokens(PostgreSQLParser.GREATER_GREATER); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GREATER_GREATER(int i) {
			return GetToken(PostgreSQLParser.GREATER_GREATER, i);
		}
		public A_expr_lesslessContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_a_expr_lessless; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterA_expr_lessless(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitA_expr_lessless(this);
		}
	}

	[RuleVersion(0)]
	public A_expr_lesslessContext a_expr_lessless() {
		A_expr_lesslessContext _localctx = new A_expr_lesslessContext(Context, State);
		EnterRule(_localctx, 1166, RULE_a_expr_lessless);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 8805;
			a_expr_or();
			State = 8810;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,542,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 8806;
					_la = TokenStream.LA(1);
					if ( !(_la==LESS_LESS || _la==GREATER_GREATER) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					State = 8807;
					a_expr_or();
					}
					} 
				}
				State = 8812;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,542,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class A_expr_orContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public A_expr_andContext[] a_expr_and() {
			return GetRuleContexts<A_expr_andContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public A_expr_andContext a_expr_and(int i) {
			return GetRuleContext<A_expr_andContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] OR() { return GetTokens(PostgreSQLParser.OR); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OR(int i) {
			return GetToken(PostgreSQLParser.OR, i);
		}
		public A_expr_orContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_a_expr_or; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterA_expr_or(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitA_expr_or(this);
		}
	}

	[RuleVersion(0)]
	public A_expr_orContext a_expr_or() {
		A_expr_orContext _localctx = new A_expr_orContext(Context, State);
		EnterRule(_localctx, 1168, RULE_a_expr_or);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 8813;
			a_expr_and();
			State = 8818;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,543,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 8814;
					Match(OR);
					State = 8815;
					a_expr_and();
					}
					} 
				}
				State = 8820;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,543,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class A_expr_andContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public A_expr_betweenContext[] a_expr_between() {
			return GetRuleContexts<A_expr_betweenContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public A_expr_betweenContext a_expr_between(int i) {
			return GetRuleContext<A_expr_betweenContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] AND() { return GetTokens(PostgreSQLParser.AND); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AND(int i) {
			return GetToken(PostgreSQLParser.AND, i);
		}
		public A_expr_andContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_a_expr_and; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterA_expr_and(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitA_expr_and(this);
		}
	}

	[RuleVersion(0)]
	public A_expr_andContext a_expr_and() {
		A_expr_andContext _localctx = new A_expr_andContext(Context, State);
		EnterRule(_localctx, 1170, RULE_a_expr_and);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 8821;
			a_expr_between();
			State = 8826;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,544,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 8822;
					Match(AND);
					State = 8823;
					a_expr_between();
					}
					} 
				}
				State = 8828;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,544,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class A_expr_betweenContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public A_expr_inContext[] a_expr_in() {
			return GetRuleContexts<A_expr_inContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public A_expr_inContext a_expr_in(int i) {
			return GetRuleContext<A_expr_inContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BETWEEN() { return GetToken(PostgreSQLParser.BETWEEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AND() { return GetToken(PostgreSQLParser.AND, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT() { return GetToken(PostgreSQLParser.NOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SYMMETRIC() { return GetToken(PostgreSQLParser.SYMMETRIC, 0); }
		public A_expr_betweenContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_a_expr_between; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterA_expr_between(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitA_expr_between(this);
		}
	}

	[RuleVersion(0)]
	public A_expr_betweenContext a_expr_between() {
		A_expr_betweenContext _localctx = new A_expr_betweenContext(Context, State);
		EnterRule(_localctx, 1172, RULE_a_expr_between);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8829;
			a_expr_in();
			State = 8841;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,547,Context) ) {
			case 1:
				{
				State = 8831;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==NOT) {
					{
					State = 8830;
					Match(NOT);
					}
				}

				State = 8833;
				Match(BETWEEN);
				State = 8835;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==SYMMETRIC) {
					{
					State = 8834;
					Match(SYMMETRIC);
					}
				}

				State = 8837;
				a_expr_in();
				State = 8838;
				Match(AND);
				State = 8839;
				a_expr_in();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class A_expr_inContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public A_expr_unary_notContext a_expr_unary_not() {
			return GetRuleContext<A_expr_unary_notContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IN_P() { return GetToken(PostgreSQLParser.IN_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public In_exprContext in_expr() {
			return GetRuleContext<In_exprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT() { return GetToken(PostgreSQLParser.NOT, 0); }
		public A_expr_inContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_a_expr_in; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterA_expr_in(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitA_expr_in(this);
		}
	}

	[RuleVersion(0)]
	public A_expr_inContext a_expr_in() {
		A_expr_inContext _localctx = new A_expr_inContext(Context, State);
		EnterRule(_localctx, 1174, RULE_a_expr_in);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8843;
			a_expr_unary_not();
			State = 8849;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,549,Context) ) {
			case 1:
				{
				State = 8845;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==NOT) {
					{
					State = 8844;
					Match(NOT);
					}
				}

				State = 8847;
				Match(IN_P);
				State = 8848;
				in_expr();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class A_expr_unary_notContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public A_expr_isnullContext a_expr_isnull() {
			return GetRuleContext<A_expr_isnullContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT() { return GetToken(PostgreSQLParser.NOT, 0); }
		public A_expr_unary_notContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_a_expr_unary_not; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterA_expr_unary_not(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitA_expr_unary_not(this);
		}
	}

	[RuleVersion(0)]
	public A_expr_unary_notContext a_expr_unary_not() {
		A_expr_unary_notContext _localctx = new A_expr_unary_notContext(Context, State);
		EnterRule(_localctx, 1176, RULE_a_expr_unary_not);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8852;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==NOT) {
				{
				State = 8851;
				Match(NOT);
				}
			}

			State = 8854;
			a_expr_isnull();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class A_expr_isnullContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public A_expr_is_notContext a_expr_is_not() {
			return GetRuleContext<A_expr_is_notContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ISNULL() { return GetToken(PostgreSQLParser.ISNULL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOTNULL() { return GetToken(PostgreSQLParser.NOTNULL, 0); }
		public A_expr_isnullContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_a_expr_isnull; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterA_expr_isnull(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitA_expr_isnull(this);
		}
	}

	[RuleVersion(0)]
	public A_expr_isnullContext a_expr_isnull() {
		A_expr_isnullContext _localctx = new A_expr_isnullContext(Context, State);
		EnterRule(_localctx, 1178, RULE_a_expr_isnull);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8856;
			a_expr_is_not();
			State = 8858;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,551,Context) ) {
			case 1:
				{
				State = 8857;
				_la = TokenStream.LA(1);
				if ( !(_la==ISNULL || _la==NOTNULL) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class A_expr_is_notContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public A_expr_compareContext a_expr_compare() {
			return GetRuleContext<A_expr_compareContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IS() { return GetToken(PostgreSQLParser.IS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NULL_P() { return GetToken(PostgreSQLParser.NULL_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRUE_P() { return GetToken(PostgreSQLParser.TRUE_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FALSE_P() { return GetToken(PostgreSQLParser.FALSE_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNKNOWN() { return GetToken(PostgreSQLParser.UNKNOWN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DISTINCT() { return GetToken(PostgreSQLParser.DISTINCT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FROM() { return GetToken(PostgreSQLParser.FROM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public A_exprContext a_expr() {
			return GetRuleContext<A_exprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OF() { return GetToken(PostgreSQLParser.OF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAREN() { return GetToken(PostgreSQLParser.OPEN_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Type_listContext type_list() {
			return GetRuleContext<Type_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAREN() { return GetToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOCUMENT_P() { return GetToken(PostgreSQLParser.DOCUMENT_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NORMALIZED() { return GetToken(PostgreSQLParser.NORMALIZED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT() { return GetToken(PostgreSQLParser.NOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Unicode_normal_formContext unicode_normal_form() {
			return GetRuleContext<Unicode_normal_formContext>(0);
		}
		public A_expr_is_notContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_a_expr_is_not; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterA_expr_is_not(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitA_expr_is_not(this);
		}
	}

	[RuleVersion(0)]
	public A_expr_is_notContext a_expr_is_not() {
		A_expr_is_notContext _localctx = new A_expr_is_notContext(Context, State);
		EnterRule(_localctx, 1180, RULE_a_expr_is_not);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8860;
			a_expr_compare();
			State = 8884;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,555,Context) ) {
			case 1:
				{
				State = 8861;
				Match(IS);
				State = 8863;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==NOT) {
					{
					State = 8862;
					Match(NOT);
					}
				}

				State = 8882;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case NULL_P:
					{
					State = 8865;
					Match(NULL_P);
					}
					break;
				case TRUE_P:
					{
					State = 8866;
					Match(TRUE_P);
					}
					break;
				case FALSE_P:
					{
					State = 8867;
					Match(FALSE_P);
					}
					break;
				case UNKNOWN:
					{
					State = 8868;
					Match(UNKNOWN);
					}
					break;
				case DISTINCT:
					{
					State = 8869;
					Match(DISTINCT);
					State = 8870;
					Match(FROM);
					State = 8871;
					a_expr();
					}
					break;
				case OF:
					{
					State = 8872;
					Match(OF);
					State = 8873;
					Match(OPEN_PAREN);
					State = 8874;
					type_list();
					State = 8875;
					Match(CLOSE_PAREN);
					}
					break;
				case DOCUMENT_P:
					{
					State = 8877;
					Match(DOCUMENT_P);
					}
					break;
				case NORMALIZED:
				case NFC:
				case NFD:
				case NFKC:
				case NFKD:
					{
					State = 8879;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if ((((_la - 484)) & ~0x3f) == 0 && ((1L << (_la - 484)) & 15L) != 0) {
						{
						State = 8878;
						unicode_normal_form();
						}
					}

					State = 8881;
					Match(NORMALIZED);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class A_expr_compareContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public A_expr_likeContext[] a_expr_like() {
			return GetRuleContexts<A_expr_likeContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public A_expr_likeContext a_expr_like(int i) {
			return GetRuleContext<A_expr_likeContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Subquery_OpContext subquery_Op() {
			return GetRuleContext<Subquery_OpContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Sub_typeContext sub_type() {
			return GetRuleContext<Sub_typeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LT() { return GetToken(PostgreSQLParser.LT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GT() { return GetToken(PostgreSQLParser.GT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL() { return GetToken(PostgreSQLParser.EQUAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LESS_EQUALS() { return GetToken(PostgreSQLParser.LESS_EQUALS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GREATER_EQUALS() { return GetToken(PostgreSQLParser.GREATER_EQUALS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT_EQUALS() { return GetToken(PostgreSQLParser.NOT_EQUALS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Select_with_parensContext select_with_parens() {
			return GetRuleContext<Select_with_parensContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAREN() { return GetToken(PostgreSQLParser.OPEN_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public A_exprContext a_expr() {
			return GetRuleContext<A_exprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAREN() { return GetToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public A_expr_compareContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_a_expr_compare; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterA_expr_compare(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitA_expr_compare(this);
		}
	}

	[RuleVersion(0)]
	public A_expr_compareContext a_expr_compare() {
		A_expr_compareContext _localctx = new A_expr_compareContext(Context, State);
		EnterRule(_localctx, 1182, RULE_a_expr_compare);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8886;
			a_expr_like();
			State = 8898;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,557,Context) ) {
			case 1:
				{
				State = 8887;
				_la = TokenStream.LA(1);
				if ( !(((_la) & ~0x3f) == 0 && ((1L << _la) & 44237824L) != 0) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 8888;
				a_expr_like();
				}
				break;
			case 2:
				{
				State = 8889;
				subquery_Op();
				State = 8890;
				sub_type();
				State = 8896;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,556,Context) ) {
				case 1:
					{
					State = 8891;
					select_with_parens();
					}
					break;
				case 2:
					{
					State = 8892;
					Match(OPEN_PAREN);
					State = 8893;
					a_expr();
					State = 8894;
					Match(CLOSE_PAREN);
					}
					break;
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class A_expr_likeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public A_expr_qual_opContext[] a_expr_qual_op() {
			return GetRuleContexts<A_expr_qual_opContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public A_expr_qual_opContext a_expr_qual_op(int i) {
			return GetRuleContext<A_expr_qual_opContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Opt_escapeContext opt_escape() {
			return GetRuleContext<Opt_escapeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LIKE() { return GetToken(PostgreSQLParser.LIKE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ILIKE() { return GetToken(PostgreSQLParser.ILIKE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SIMILAR() { return GetToken(PostgreSQLParser.SIMILAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TO() { return GetToken(PostgreSQLParser.TO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT() { return GetToken(PostgreSQLParser.NOT, 0); }
		public A_expr_likeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_a_expr_like; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterA_expr_like(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitA_expr_like(this);
		}
	}

	[RuleVersion(0)]
	public A_expr_likeContext a_expr_like() {
		A_expr_likeContext _localctx = new A_expr_likeContext(Context, State);
		EnterRule(_localctx, 1184, RULE_a_expr_like);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8900;
			a_expr_qual_op();
			State = 8913;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,560,Context) ) {
			case 1:
				{
				State = 8902;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==NOT) {
					{
					State = 8901;
					Match(NOT);
					}
				}

				State = 8908;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case LIKE:
					{
					State = 8904;
					Match(LIKE);
					}
					break;
				case ILIKE:
					{
					State = 8905;
					Match(ILIKE);
					}
					break;
				case SIMILAR:
					{
					State = 8906;
					Match(SIMILAR);
					State = 8907;
					Match(TO);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 8910;
				a_expr_qual_op();
				State = 8911;
				opt_escape();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class A_expr_qual_opContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public A_expr_unary_qualopContext[] a_expr_unary_qualop() {
			return GetRuleContexts<A_expr_unary_qualopContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public A_expr_unary_qualopContext a_expr_unary_qualop(int i) {
			return GetRuleContext<A_expr_unary_qualopContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Qual_opContext[] qual_op() {
			return GetRuleContexts<Qual_opContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Qual_opContext qual_op(int i) {
			return GetRuleContext<Qual_opContext>(i);
		}
		public A_expr_qual_opContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_a_expr_qual_op; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterA_expr_qual_op(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitA_expr_qual_op(this);
		}
	}

	[RuleVersion(0)]
	public A_expr_qual_opContext a_expr_qual_op() {
		A_expr_qual_opContext _localctx = new A_expr_qual_opContext(Context, State);
		EnterRule(_localctx, 1186, RULE_a_expr_qual_op);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 8915;
			a_expr_unary_qualop();
			State = 8921;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,561,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 8916;
					qual_op();
					State = 8917;
					a_expr_unary_qualop();
					}
					} 
				}
				State = 8923;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,561,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class A_expr_unary_qualopContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public A_expr_addContext a_expr_add() {
			return GetRuleContext<A_expr_addContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Qual_opContext qual_op() {
			return GetRuleContext<Qual_opContext>(0);
		}
		public A_expr_unary_qualopContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_a_expr_unary_qualop; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterA_expr_unary_qualop(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitA_expr_unary_qualop(this);
		}
	}

	[RuleVersion(0)]
	public A_expr_unary_qualopContext a_expr_unary_qualop() {
		A_expr_unary_qualopContext _localctx = new A_expr_unary_qualopContext(Context, State);
		EnterRule(_localctx, 1188, RULE_a_expr_unary_qualop);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8925;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,562,Context) ) {
			case 1:
				{
				State = 8924;
				qual_op();
				}
				break;
			}
			State = 8927;
			a_expr_add();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class A_expr_addContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public A_expr_mulContext[] a_expr_mul() {
			return GetRuleContexts<A_expr_mulContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public A_expr_mulContext a_expr_mul(int i) {
			return GetRuleContext<A_expr_mulContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] MINUS() { return GetTokens(PostgreSQLParser.MINUS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUS(int i) {
			return GetToken(PostgreSQLParser.MINUS, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] PLUS() { return GetTokens(PostgreSQLParser.PLUS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLUS(int i) {
			return GetToken(PostgreSQLParser.PLUS, i);
		}
		public A_expr_addContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_a_expr_add; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterA_expr_add(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitA_expr_add(this);
		}
	}

	[RuleVersion(0)]
	public A_expr_addContext a_expr_add() {
		A_expr_addContext _localctx = new A_expr_addContext(Context, State);
		EnterRule(_localctx, 1190, RULE_a_expr_add);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 8929;
			a_expr_mul();
			State = 8934;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,563,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 8930;
					_la = TokenStream.LA(1);
					if ( !(_la==PLUS || _la==MINUS) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					State = 8931;
					a_expr_mul();
					}
					} 
				}
				State = 8936;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,563,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class A_expr_mulContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public A_expr_caretContext[] a_expr_caret() {
			return GetRuleContexts<A_expr_caretContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public A_expr_caretContext a_expr_caret(int i) {
			return GetRuleContext<A_expr_caretContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] STAR() { return GetTokens(PostgreSQLParser.STAR); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STAR(int i) {
			return GetToken(PostgreSQLParser.STAR, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SLASH() { return GetTokens(PostgreSQLParser.SLASH); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SLASH(int i) {
			return GetToken(PostgreSQLParser.SLASH, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] PERCENT() { return GetTokens(PostgreSQLParser.PERCENT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PERCENT(int i) {
			return GetToken(PostgreSQLParser.PERCENT, i);
		}
		public A_expr_mulContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_a_expr_mul; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterA_expr_mul(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitA_expr_mul(this);
		}
	}

	[RuleVersion(0)]
	public A_expr_mulContext a_expr_mul() {
		A_expr_mulContext _localctx = new A_expr_mulContext(Context, State);
		EnterRule(_localctx, 1192, RULE_a_expr_mul);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 8937;
			a_expr_caret();
			State = 8942;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,564,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 8938;
					_la = TokenStream.LA(1);
					if ( !(((_la) & ~0x3f) == 0 && ((1L << _la) & 134234624L) != 0) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					State = 8939;
					a_expr_caret();
					}
					} 
				}
				State = 8944;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,564,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class A_expr_caretContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public A_expr_unary_signContext a_expr_unary_sign() {
			return GetRuleContext<A_expr_unary_signContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CARET() { return GetToken(PostgreSQLParser.CARET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public A_exprContext a_expr() {
			return GetRuleContext<A_exprContext>(0);
		}
		public A_expr_caretContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_a_expr_caret; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterA_expr_caret(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitA_expr_caret(this);
		}
	}

	[RuleVersion(0)]
	public A_expr_caretContext a_expr_caret() {
		A_expr_caretContext _localctx = new A_expr_caretContext(Context, State);
		EnterRule(_localctx, 1194, RULE_a_expr_caret);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8945;
			a_expr_unary_sign();
			State = 8948;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,565,Context) ) {
			case 1:
				{
				State = 8946;
				Match(CARET);
				State = 8947;
				a_expr();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class A_expr_unary_signContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public A_expr_at_time_zoneContext a_expr_at_time_zone() {
			return GetRuleContext<A_expr_at_time_zoneContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUS() { return GetToken(PostgreSQLParser.MINUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLUS() { return GetToken(PostgreSQLParser.PLUS, 0); }
		public A_expr_unary_signContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_a_expr_unary_sign; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterA_expr_unary_sign(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitA_expr_unary_sign(this);
		}
	}

	[RuleVersion(0)]
	public A_expr_unary_signContext a_expr_unary_sign() {
		A_expr_unary_signContext _localctx = new A_expr_unary_signContext(Context, State);
		EnterRule(_localctx, 1196, RULE_a_expr_unary_sign);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8951;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==PLUS || _la==MINUS) {
				{
				State = 8950;
				_la = TokenStream.LA(1);
				if ( !(_la==PLUS || _la==MINUS) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
			}

			State = 8953;
			a_expr_at_time_zone();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class A_expr_at_time_zoneContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public A_expr_collateContext a_expr_collate() {
			return GetRuleContext<A_expr_collateContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AT() { return GetToken(PostgreSQLParser.AT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TIME() { return GetToken(PostgreSQLParser.TIME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ZONE() { return GetToken(PostgreSQLParser.ZONE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public A_exprContext a_expr() {
			return GetRuleContext<A_exprContext>(0);
		}
		public A_expr_at_time_zoneContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_a_expr_at_time_zone; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterA_expr_at_time_zone(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitA_expr_at_time_zone(this);
		}
	}

	[RuleVersion(0)]
	public A_expr_at_time_zoneContext a_expr_at_time_zone() {
		A_expr_at_time_zoneContext _localctx = new A_expr_at_time_zoneContext(Context, State);
		EnterRule(_localctx, 1198, RULE_a_expr_at_time_zone);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8955;
			a_expr_collate();
			State = 8960;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,567,Context) ) {
			case 1:
				{
				State = 8956;
				Match(AT);
				State = 8957;
				Match(TIME);
				State = 8958;
				Match(ZONE);
				State = 8959;
				a_expr();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class A_expr_collateContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public A_expr_typecastContext a_expr_typecast() {
			return GetRuleContext<A_expr_typecastContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLLATE() { return GetToken(PostgreSQLParser.COLLATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Any_nameContext any_name() {
			return GetRuleContext<Any_nameContext>(0);
		}
		public A_expr_collateContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_a_expr_collate; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterA_expr_collate(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitA_expr_collate(this);
		}
	}

	[RuleVersion(0)]
	public A_expr_collateContext a_expr_collate() {
		A_expr_collateContext _localctx = new A_expr_collateContext(Context, State);
		EnterRule(_localctx, 1200, RULE_a_expr_collate);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8962;
			a_expr_typecast();
			State = 8965;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,568,Context) ) {
			case 1:
				{
				State = 8963;
				Match(COLLATE);
				State = 8964;
				any_name();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class A_expr_typecastContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public C_exprContext c_expr() {
			return GetRuleContext<C_exprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] TYPECAST() { return GetTokens(PostgreSQLParser.TYPECAST); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TYPECAST(int i) {
			return GetToken(PostgreSQLParser.TYPECAST, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypenameContext[] typename() {
			return GetRuleContexts<TypenameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypenameContext typename(int i) {
			return GetRuleContext<TypenameContext>(i);
		}
		public A_expr_typecastContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_a_expr_typecast; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterA_expr_typecast(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitA_expr_typecast(this);
		}
	}

	[RuleVersion(0)]
	public A_expr_typecastContext a_expr_typecast() {
		A_expr_typecastContext _localctx = new A_expr_typecastContext(Context, State);
		EnterRule(_localctx, 1202, RULE_a_expr_typecast);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8967;
			c_expr();
			State = 8972;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==TYPECAST) {
				{
				{
				State = 8968;
				Match(TYPECAST);
				State = 8969;
				typename();
				}
				}
				State = 8974;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class B_exprContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public C_exprContext c_expr() {
			return GetRuleContext<C_exprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public B_exprContext[] b_expr() {
			return GetRuleContexts<B_exprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public B_exprContext b_expr(int i) {
			return GetRuleContext<B_exprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLUS() { return GetToken(PostgreSQLParser.PLUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUS() { return GetToken(PostgreSQLParser.MINUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Qual_opContext qual_op() {
			return GetRuleContext<Qual_opContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CARET() { return GetToken(PostgreSQLParser.CARET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STAR() { return GetToken(PostgreSQLParser.STAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SLASH() { return GetToken(PostgreSQLParser.SLASH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PERCENT() { return GetToken(PostgreSQLParser.PERCENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LT() { return GetToken(PostgreSQLParser.LT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GT() { return GetToken(PostgreSQLParser.GT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL() { return GetToken(PostgreSQLParser.EQUAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LESS_EQUALS() { return GetToken(PostgreSQLParser.LESS_EQUALS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GREATER_EQUALS() { return GetToken(PostgreSQLParser.GREATER_EQUALS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT_EQUALS() { return GetToken(PostgreSQLParser.NOT_EQUALS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TYPECAST() { return GetToken(PostgreSQLParser.TYPECAST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypenameContext typename() {
			return GetRuleContext<TypenameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IS() { return GetToken(PostgreSQLParser.IS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DISTINCT() { return GetToken(PostgreSQLParser.DISTINCT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FROM() { return GetToken(PostgreSQLParser.FROM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OF() { return GetToken(PostgreSQLParser.OF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAREN() { return GetToken(PostgreSQLParser.OPEN_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Type_listContext type_list() {
			return GetRuleContext<Type_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAREN() { return GetToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOCUMENT_P() { return GetToken(PostgreSQLParser.DOCUMENT_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT() { return GetToken(PostgreSQLParser.NOT, 0); }
		public B_exprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_b_expr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterB_expr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitB_expr(this);
		}
	}

	[RuleVersion(0)]
	public B_exprContext b_expr() {
		return b_expr(0);
	}

	private B_exprContext b_expr(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		B_exprContext _localctx = new B_exprContext(Context, _parentState);
		B_exprContext _prevctx = _localctx;
		int _startState = 1204;
		EnterRecursionRule(_localctx, 1204, RULE_b_expr, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 8982;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,570,Context) ) {
			case 1:
				{
				State = 8976;
				c_expr();
				}
				break;
			case 2:
				{
				State = 8977;
				_la = TokenStream.LA(1);
				if ( !(_la==PLUS || _la==MINUS) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 8978;
				b_expr(9);
				}
				break;
			case 3:
				{
				State = 8979;
				qual_op();
				State = 8980;
				b_expr(3);
				}
				break;
			}
			Context.Stop = TokenStream.LT(-1);
			State = 9023;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,574,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 9021;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,573,Context) ) {
					case 1:
						{
						_localctx = new B_exprContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_b_expr);
						State = 8984;
						if (!(Precpred(Context, 8))) throw new FailedPredicateException(this, "Precpred(Context, 8)");
						State = 8985;
						Match(CARET);
						State = 8986;
						b_expr(9);
						}
						break;
					case 2:
						{
						_localctx = new B_exprContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_b_expr);
						State = 8987;
						if (!(Precpred(Context, 7))) throw new FailedPredicateException(this, "Precpred(Context, 7)");
						State = 8988;
						_la = TokenStream.LA(1);
						if ( !(((_la) & ~0x3f) == 0 && ((1L << _la) & 134234624L) != 0) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 8989;
						b_expr(8);
						}
						break;
					case 3:
						{
						_localctx = new B_exprContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_b_expr);
						State = 8990;
						if (!(Precpred(Context, 6))) throw new FailedPredicateException(this, "Precpred(Context, 6)");
						State = 8991;
						_la = TokenStream.LA(1);
						if ( !(_la==PLUS || _la==MINUS) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 8992;
						b_expr(7);
						}
						break;
					case 4:
						{
						_localctx = new B_exprContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_b_expr);
						State = 8993;
						if (!(Precpred(Context, 5))) throw new FailedPredicateException(this, "Precpred(Context, 5)");
						State = 8994;
						qual_op();
						State = 8995;
						b_expr(6);
						}
						break;
					case 5:
						{
						_localctx = new B_exprContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_b_expr);
						State = 8997;
						if (!(Precpred(Context, 4))) throw new FailedPredicateException(this, "Precpred(Context, 4)");
						State = 8998;
						_la = TokenStream.LA(1);
						if ( !(((_la) & ~0x3f) == 0 && ((1L << _la) & 44237824L) != 0) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 8999;
						b_expr(5);
						}
						break;
					case 6:
						{
						_localctx = new B_exprContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_b_expr);
						State = 9000;
						if (!(Precpred(Context, 10))) throw new FailedPredicateException(this, "Precpred(Context, 10)");
						State = 9001;
						Match(TYPECAST);
						State = 9002;
						typename();
						}
						break;
					case 7:
						{
						_localctx = new B_exprContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_b_expr);
						State = 9003;
						if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
						State = 9004;
						qual_op();
						}
						break;
					case 8:
						{
						_localctx = new B_exprContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_b_expr);
						State = 9005;
						if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
						State = 9006;
						Match(IS);
						State = 9008;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if (_la==NOT) {
							{
							State = 9007;
							Match(NOT);
							}
						}

						State = 9019;
						ErrorHandler.Sync(this);
						switch (TokenStream.LA(1)) {
						case DISTINCT:
							{
							State = 9010;
							Match(DISTINCT);
							State = 9011;
							Match(FROM);
							State = 9012;
							b_expr(0);
							}
							break;
						case OF:
							{
							State = 9013;
							Match(OF);
							State = 9014;
							Match(OPEN_PAREN);
							State = 9015;
							type_list();
							State = 9016;
							Match(CLOSE_PAREN);
							}
							break;
						case DOCUMENT_P:
							{
							State = 9018;
							Match(DOCUMENT_P);
							}
							break;
						default:
							throw new NoViableAltException(this);
						}
						}
						break;
					}
					} 
				}
				State = 9025;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,574,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class C_exprContext : ParserRuleContext {
		public C_exprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_c_expr; } }
	 
		public C_exprContext() { }
		public virtual void CopyFrom(C_exprContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class C_expr_existsContext : C_exprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXISTS() { return GetToken(PostgreSQLParser.EXISTS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Select_with_parensContext select_with_parens() {
			return GetRuleContext<Select_with_parensContext>(0);
		}
		public C_expr_existsContext(C_exprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterC_expr_exists(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitC_expr_exists(this);
		}
	}
	public partial class C_expr_caseContext : C_exprContext {
		[System.Diagnostics.DebuggerNonUserCode] public Case_exprContext case_expr() {
			return GetRuleContext<Case_exprContext>(0);
		}
		public C_expr_caseContext(C_exprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterC_expr_case(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitC_expr_case(this);
		}
	}
	public partial class C_expr_exprContext : C_exprContext {
		public A_exprContext a_expr_in_parens;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ARRAY() { return GetToken(PostgreSQLParser.ARRAY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Select_with_parensContext select_with_parens() {
			return GetRuleContext<Select_with_parensContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Array_exprContext array_expr() {
			return GetRuleContext<Array_exprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARAM() { return GetToken(PostgreSQLParser.PARAM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Opt_indirectionContext opt_indirection() {
			return GetRuleContext<Opt_indirectionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GROUPING() { return GetToken(PostgreSQLParser.GROUPING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAREN() { return GetToken(PostgreSQLParser.OPEN_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Expr_listContext expr_list() {
			return GetRuleContext<Expr_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAREN() { return GetToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNIQUE() { return GetToken(PostgreSQLParser.UNIQUE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ColumnrefContext columnref() {
			return GetRuleContext<ColumnrefContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AexprconstContext aexprconst() {
			return GetRuleContext<AexprconstContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PlsqlvariablenameContext plsqlvariablename() {
			return GetRuleContext<PlsqlvariablenameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public A_exprContext a_expr() {
			return GetRuleContext<A_exprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Func_exprContext func_expr() {
			return GetRuleContext<Func_exprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IndirectionContext indirection() {
			return GetRuleContext<IndirectionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Explicit_rowContext explicit_row() {
			return GetRuleContext<Explicit_rowContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Implicit_rowContext implicit_row() {
			return GetRuleContext<Implicit_rowContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RowContext[] row() {
			return GetRuleContexts<RowContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public RowContext row(int i) {
			return GetRuleContext<RowContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OVERLAPS() { return GetToken(PostgreSQLParser.OVERLAPS, 0); }
		public C_expr_exprContext(C_exprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterC_expr_expr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitC_expr_expr(this);
		}
	}

	[RuleVersion(0)]
	public C_exprContext c_expr() {
		C_exprContext _localctx = new C_exprContext(Context, State);
		EnterRule(_localctx, 1206, RULE_c_expr);
		try {
			State = 9062;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,577,Context) ) {
			case 1:
				_localctx = new C_expr_existsContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 9026;
				Match(EXISTS);
				State = 9027;
				select_with_parens();
				}
				break;
			case 2:
				_localctx = new C_expr_exprContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 9028;
				Match(ARRAY);
				State = 9031;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case OPEN_PAREN:
					{
					State = 9029;
					select_with_parens();
					}
					break;
				case OPEN_BRACKET:
					{
					State = 9030;
					array_expr();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 3:
				_localctx = new C_expr_exprContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 9033;
				Match(PARAM);
				State = 9034;
				opt_indirection();
				}
				break;
			case 4:
				_localctx = new C_expr_exprContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 9035;
				Match(GROUPING);
				State = 9036;
				Match(OPEN_PAREN);
				State = 9037;
				expr_list();
				State = 9038;
				Match(CLOSE_PAREN);
				}
				break;
			case 5:
				_localctx = new C_expr_exprContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 9040;
				Match(UNIQUE);
				State = 9041;
				select_with_parens();
				}
				break;
			case 6:
				_localctx = new C_expr_exprContext(_localctx);
				EnterOuterAlt(_localctx, 6);
				{
				State = 9042;
				columnref();
				}
				break;
			case 7:
				_localctx = new C_expr_exprContext(_localctx);
				EnterOuterAlt(_localctx, 7);
				{
				State = 9043;
				aexprconst();
				}
				break;
			case 8:
				_localctx = new C_expr_exprContext(_localctx);
				EnterOuterAlt(_localctx, 8);
				{
				State = 9044;
				plsqlvariablename();
				}
				break;
			case 9:
				_localctx = new C_expr_exprContext(_localctx);
				EnterOuterAlt(_localctx, 9);
				{
				State = 9045;
				Match(OPEN_PAREN);
				State = 9046;
				((C_expr_exprContext)_localctx).a_expr_in_parens = a_expr();
				State = 9047;
				Match(CLOSE_PAREN);
				State = 9048;
				opt_indirection();
				}
				break;
			case 10:
				_localctx = new C_expr_caseContext(_localctx);
				EnterOuterAlt(_localctx, 10);
				{
				State = 9050;
				case_expr();
				}
				break;
			case 11:
				_localctx = new C_expr_exprContext(_localctx);
				EnterOuterAlt(_localctx, 11);
				{
				State = 9051;
				func_expr();
				}
				break;
			case 12:
				_localctx = new C_expr_exprContext(_localctx);
				EnterOuterAlt(_localctx, 12);
				{
				State = 9052;
				select_with_parens();
				State = 9054;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,576,Context) ) {
				case 1:
					{
					State = 9053;
					indirection();
					}
					break;
				}
				}
				break;
			case 13:
				_localctx = new C_expr_exprContext(_localctx);
				EnterOuterAlt(_localctx, 13);
				{
				State = 9056;
				explicit_row();
				}
				break;
			case 14:
				_localctx = new C_expr_exprContext(_localctx);
				EnterOuterAlt(_localctx, 14);
				{
				State = 9057;
				implicit_row();
				}
				break;
			case 15:
				_localctx = new C_expr_exprContext(_localctx);
				EnterOuterAlt(_localctx, 15);
				{
				State = 9058;
				row();
				State = 9059;
				Match(OVERLAPS);
				State = 9060;
				row();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PlsqlvariablenameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLSQLVARIABLENAME() { return GetToken(PostgreSQLParser.PLSQLVARIABLENAME, 0); }
		public PlsqlvariablenameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_plsqlvariablename; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterPlsqlvariablename(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitPlsqlvariablename(this);
		}
	}

	[RuleVersion(0)]
	public PlsqlvariablenameContext plsqlvariablename() {
		PlsqlvariablenameContext _localctx = new PlsqlvariablenameContext(Context, State);
		EnterRule(_localctx, 1208, RULE_plsqlvariablename);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 9064;
			Match(PLSQLVARIABLENAME);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Func_applicationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Func_nameContext func_name() {
			return GetRuleContext<Func_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAREN() { return GetToken(PostgreSQLParser.OPEN_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAREN() { return GetToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Func_arg_listContext func_arg_list() {
			return GetRuleContext<Func_arg_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Opt_sort_clauseContext opt_sort_clause() {
			return GetRuleContext<Opt_sort_clauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARIADIC() { return GetToken(PostgreSQLParser.VARIADIC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Func_arg_exprContext func_arg_expr() {
			return GetRuleContext<Func_arg_exprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STAR() { return GetToken(PostgreSQLParser.STAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALL() { return GetToken(PostgreSQLParser.ALL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DISTINCT() { return GetToken(PostgreSQLParser.DISTINCT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(PostgreSQLParser.COMMA, 0); }
		public Func_applicationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_func_application; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterFunc_application(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitFunc_application(this);
		}
	}

	[RuleVersion(0)]
	public Func_applicationContext func_application() {
		Func_applicationContext _localctx = new Func_applicationContext(Context, State);
		EnterRule(_localctx, 1210, RULE_func_application);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 9066;
			func_name();
			State = 9067;
			Match(OPEN_PAREN);
			State = 9086;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case OPEN_PAREN:
			case PLUS:
			case MINUS:
			case PARAM:
			case Operator:
			case AND:
			case ARRAY:
			case CASE:
			case CAST:
			case COLLATE:
			case COLUMN:
			case CONSTRAINT:
			case CURRENT_CATALOG:
			case CURRENT_DATE:
			case CURRENT_ROLE:
			case CURRENT_TIME:
			case CURRENT_TIMESTAMP:
			case CURRENT_USER:
			case DEFAULT:
			case DO:
			case FALSE_P:
			case FETCH:
			case LOCALTIME:
			case LOCALTIMESTAMP:
			case NOT:
			case NULL_P:
			case SESSION_USER:
			case TABLE:
			case TRUE_P:
			case UNIQUE:
			case USER:
			case AUTHORIZATION:
			case BINARY:
			case COLLATION:
			case CONCURRENTLY:
			case CROSS:
			case CURRENT_SCHEMA:
			case FREEZE:
			case FULL:
			case ILIKE:
			case INNER_P:
			case IS:
			case ISNULL:
			case JOIN:
			case LEFT:
			case LIKE:
			case NATURAL:
			case NOTNULL:
			case OUTER_P:
			case OVER:
			case OVERLAPS:
			case RIGHT:
			case SIMILAR:
			case VERBOSE:
			case ABORT_P:
			case ABSOLUTE_P:
			case ACCESS:
			case ACTION:
			case ADD_P:
			case ADMIN:
			case AFTER:
			case AGGREGATE:
			case ALSO:
			case ALTER:
			case ALWAYS:
			case ASSERTION:
			case ASSIGNMENT:
			case AT:
			case ATTRIBUTE:
			case BACKWARD:
			case BEFORE:
			case BEGIN_P:
			case BY:
			case CACHE:
			case CALLED:
			case CASCADE:
			case CASCADED:
			case CATALOG:
			case CHAIN:
			case CHARACTERISTICS:
			case CHECKPOINT:
			case CLASS:
			case CLOSE:
			case CLUSTER:
			case COMMENT:
			case COMMENTS:
			case COMMIT:
			case COMMITTED:
			case CONFIGURATION:
			case CONNECTION:
			case CONSTRAINTS:
			case CONTENT_P:
			case CONTINUE_P:
			case CONVERSION_P:
			case COPY:
			case COST:
			case CSV:
			case CURSOR:
			case CYCLE:
			case DATA_P:
			case DATABASE:
			case DAY_P:
			case DEALLOCATE:
			case DECLARE:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE_P:
			case DELIMITER:
			case DELIMITERS:
			case DICTIONARY:
			case DISABLE_P:
			case DISCARD:
			case DOCUMENT_P:
			case DOMAIN_P:
			case DOUBLE_P:
			case DROP:
			case EACH:
			case ENABLE_P:
			case ENCODING:
			case ENCRYPTED:
			case ENUM_P:
			case ESCAPE:
			case EVENT:
			case EXCLUDE:
			case EXCLUDING:
			case EXCLUSIVE:
			case EXECUTE:
			case EXPLAIN:
			case EXTENSION:
			case EXTERNAL:
			case FAMILY:
			case FIRST_P:
			case FOLLOWING:
			case FORCE:
			case FORWARD:
			case FUNCTION:
			case FUNCTIONS:
			case GLOBAL:
			case GRANTED:
			case HANDLER:
			case HEADER_P:
			case HOLD:
			case HOUR_P:
			case IDENTITY_P:
			case IF_P:
			case IMMEDIATE:
			case IMMUTABLE:
			case IMPLICIT_P:
			case INCLUDING:
			case INCREMENT:
			case INDEX:
			case INDEXES:
			case INHERIT:
			case INHERITS:
			case INLINE_P:
			case INSENSITIVE:
			case INSERT:
			case INSTEAD:
			case INVOKER:
			case ISOLATION:
			case KEY:
			case LABEL:
			case LANGUAGE:
			case LARGE_P:
			case LAST_P:
			case LEAKPROOF:
			case LEVEL:
			case LISTEN:
			case LOAD:
			case LOCAL:
			case LOCATION:
			case LOCK_P:
			case MAPPING:
			case MATCH:
			case MATERIALIZED:
			case MAXVALUE:
			case MINUTE_P:
			case MINVALUE:
			case MODE:
			case MONTH_P:
			case MOVE:
			case NAME_P:
			case NAMES:
			case NEXT:
			case NO:
			case NOTHING:
			case NOTIFY:
			case NOWAIT:
			case NULLS_P:
			case OBJECT_P:
			case OF:
			case OFF:
			case OIDS:
			case OPERATOR:
			case OPTION:
			case OPTIONS:
			case OWNED:
			case OWNER:
			case PARSER:
			case PARTIAL:
			case PARTITION:
			case PASSING:
			case PASSWORD:
			case PLANS:
			case PRECEDING:
			case PREPARE:
			case PREPARED:
			case PRESERVE:
			case PRIOR:
			case PRIVILEGES:
			case PROCEDURAL:
			case PROCEDURE:
			case PROGRAM:
			case QUOTE:
			case RANGE:
			case READ:
			case REASSIGN:
			case RECHECK:
			case RECURSIVE:
			case REF:
			case REFRESH:
			case REINDEX:
			case RELATIVE_P:
			case RELEASE:
			case RENAME:
			case REPEATABLE:
			case REPLACE:
			case REPLICA:
			case RESET:
			case RESTART:
			case RESTRICT:
			case RETURNS:
			case REVOKE:
			case ROLE:
			case ROLLBACK:
			case ROWS:
			case RULE:
			case SAVEPOINT:
			case SCHEMA:
			case SCROLL:
			case SEARCH:
			case SECOND_P:
			case SECURITY:
			case SEQUENCE:
			case SEQUENCES:
			case SERIALIZABLE:
			case SERVER:
			case SESSION:
			case SET:
			case SHARE:
			case SHOW:
			case SIMPLE:
			case SNAPSHOT:
			case STABLE:
			case STANDALONE_P:
			case START:
			case STATEMENT:
			case STATISTICS:
			case STDIN:
			case STDOUT:
			case STORAGE:
			case STRICT_P:
			case STRIP_P:
			case SYSID:
			case SYSTEM_P:
			case TABLES:
			case TABLESPACE:
			case TEMP:
			case TEMPLATE:
			case TEMPORARY:
			case TEXT_P:
			case TRANSACTION:
			case TRIGGER:
			case TRUNCATE:
			case TRUSTED:
			case TYPE_P:
			case TYPES_P:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNENCRYPTED:
			case UNKNOWN:
			case UNLISTEN:
			case UNLOGGED:
			case UNTIL:
			case UPDATE:
			case VACUUM:
			case VALID:
			case VALIDATE:
			case VALIDATOR:
			case VARYING:
			case VERSION_P:
			case VIEW:
			case VOLATILE:
			case WHITESPACE_P:
			case WITHOUT:
			case WORK:
			case WRAPPER:
			case WRITE:
			case XML_P:
			case YEAR_P:
			case YES_P:
			case ZONE:
			case BETWEEN:
			case BIGINT:
			case BIT:
			case BOOLEAN_P:
			case CHAR_P:
			case CHARACTER:
			case COALESCE:
			case DEC:
			case DECIMAL_P:
			case EXISTS:
			case EXTRACT:
			case FLOAT_P:
			case GREATEST:
			case INOUT:
			case INT_P:
			case INTEGER:
			case INTERVAL:
			case LEAST:
			case NATIONAL:
			case NCHAR:
			case NONE:
			case NULLIF:
			case NUMERIC:
			case OVERLAY:
			case POSITION:
			case PRECISION:
			case REAL:
			case ROW:
			case SETOF:
			case SMALLINT:
			case SUBSTRING:
			case TIME:
			case TIMESTAMP:
			case TREAT:
			case TRIM:
			case VALUES:
			case VARCHAR:
			case XMLATTRIBUTES:
			case XMLCOMMENT:
			case XMLAGG:
			case XML_IS_WELL_FORMED:
			case XML_IS_WELL_FORMED_DOCUMENT:
			case XML_IS_WELL_FORMED_CONTENT:
			case XPATH:
			case XPATH_EXISTS:
			case XMLCONCAT:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLPARSE:
			case XMLPI:
			case XMLROOT:
			case XMLSERIALIZE:
			case CALL:
			case CURRENT_P:
			case ATTACH:
			case DETACH:
			case EXPRESSION:
			case GENERATED:
			case LOGGED:
			case STORED:
			case INCLUDE:
			case ROUTINE:
			case TRANSFORM:
			case IMPORT_P:
			case POLICY:
			case METHOD:
			case REFERENCING:
			case NEW:
			case OLD:
			case VALUE_P:
			case SUBSCRIPTION:
			case PUBLICATION:
			case OUT_P:
			case ROUTINES:
			case SCHEMAS:
			case PROCEDURES:
			case INPUT_P:
			case SUPPORT:
			case PARALLEL:
			case SQL_P:
			case DEPENDS:
			case OVERRIDING:
			case CONFLICT:
			case SKIP_P:
			case LOCKED:
			case TIES:
			case ROLLUP:
			case CUBE:
			case GROUPING:
			case SETS:
			case TABLESAMPLE:
			case ORDINALITY:
			case XMLTABLE:
			case COLUMNS:
			case XMLNAMESPACES:
			case ROWTYPE:
			case NORMALIZED:
			case WITHIN:
			case FILTER:
			case GROUPS:
			case OTHERS:
			case NFC:
			case NFD:
			case NFKC:
			case NFKD:
			case UESCAPE:
			case VIEWS:
			case NORMALIZE:
			case DUMP:
			case PRINT_STRICT_PARAMS:
			case VARIABLE_CONFLICT:
			case ERROR:
			case USE_VARIABLE:
			case USE_COLUMN:
			case ALIAS:
			case CONSTANT:
			case PERFORM:
			case GET:
			case DIAGNOSTICS:
			case STACKED:
			case ELSIF:
			case REVERSE:
			case SLICE:
			case EXIT:
			case RETURN:
			case QUERY:
			case RAISE:
			case SQLSTATE:
			case DEBUG:
			case LOG:
			case INFO:
			case NOTICE:
			case WARNING:
			case EXCEPTION:
			case ASSERT:
			case OPEN:
			case ABS:
			case CBRT:
			case CEIL:
			case CEILING:
			case DEGREES:
			case DIV:
			case EXP:
			case FACTORIAL:
			case FLOOR:
			case GCD:
			case LCM:
			case LN:
			case LOG10:
			case MIN_SCALE:
			case MOD:
			case PI:
			case POWER:
			case RADIANS:
			case ROUND:
			case SCALE:
			case SIGN:
			case SQRT:
			case TRIM_SCALE:
			case TRUNC:
			case WIDTH_BUCKET:
			case RANDOM:
			case SETSEED:
			case ACOS:
			case ACOSD:
			case ASIN:
			case ASIND:
			case ATAN:
			case ATAND:
			case ATAN2:
			case ATAN2D:
			case COS:
			case COSD:
			case COT:
			case COTD:
			case SIN:
			case SIND:
			case TAN:
			case TAND:
			case SINH:
			case COSH:
			case TANH:
			case ASINH:
			case ACOSH:
			case ATANH:
			case BIT_LENGTH:
			case CHAR_LENGTH:
			case CHARACTER_LENGTH:
			case LOWER:
			case OCTET_LENGTH:
			case UPPER:
			case ASCII:
			case BTRIM:
			case CHR:
			case CONCAT:
			case CONCAT_WS:
			case FORMAT:
			case INITCAP:
			case LENGTH:
			case LPAD:
			case LTRIM:
			case MD5:
			case PARSE_IDENT:
			case PG_CLIENT_ENCODING:
			case QUOTE_IDENT:
			case QUOTE_LITERAL:
			case QUOTE_NULLABLE:
			case REGEXP_COUNT:
			case REGEXP_INSTR:
			case REGEXP_LIKE:
			case REGEXP_MATCH:
			case REGEXP_MATCHES:
			case REGEXP_REPLACE:
			case REGEXP_SPLIT_TO_ARRAY:
			case REGEXP_SPLIT_TO_TABLE:
			case REGEXP_SUBSTR:
			case REPEAT:
			case RPAD:
			case RTRIM:
			case SPLIT_PART:
			case STARTS_WITH:
			case STRING_TO_ARRAY:
			case STRING_TO_TABLE:
			case STRPOS:
			case SUBSTR:
			case TO_ASCII:
			case TO_HEX:
			case TRANSLATE:
			case UNISTR:
			case AGE:
			case CLOCK_TIMESTAMP:
			case DATE_BIN:
			case DATE_PART:
			case DATE_TRUNC:
			case ISFINITE:
			case JUSTIFY_DAYS:
			case JUSTIFY_HOURS:
			case JUSTIFY_INTERVAL:
			case MAKE_DATE:
			case MAKE_INTERVAL:
			case MAKE_TIME:
			case MAKE_TIMESTAMP:
			case MAKE_TIMESTAMPTZ:
			case NOW:
			case STATEMENT_TIMESTAMP:
			case TIMEOFDAY:
			case TRANSACTION_TIMESTAMP:
			case TO_TIMESTAMP:
			case TO_CHAR:
			case TO_DATE:
			case TO_NUMBER:
			case Identifier:
			case QuotedIdentifier:
			case UnicodeQuotedIdentifier:
			case StringConstant:
			case UnicodeEscapeStringConstant:
			case BeginDollarStringConstant:
			case BinaryStringConstant:
			case HexadecimalStringConstant:
			case Integral:
			case Numeric:
			case PLSQLVARIABLENAME:
			case PLSQLIDENTIFIER:
			case EscapeStringConstant:
				{
				State = 9068;
				func_arg_list();
				State = 9072;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COMMA) {
					{
					State = 9069;
					Match(COMMA);
					State = 9070;
					Match(VARIADIC);
					State = 9071;
					func_arg_expr();
					}
				}

				State = 9074;
				opt_sort_clause();
				}
				break;
			case VARIADIC:
				{
				State = 9076;
				Match(VARIADIC);
				State = 9077;
				func_arg_expr();
				State = 9078;
				opt_sort_clause();
				}
				break;
			case ALL:
			case DISTINCT:
				{
				State = 9080;
				_la = TokenStream.LA(1);
				if ( !(_la==ALL || _la==DISTINCT) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 9081;
				func_arg_list();
				State = 9082;
				opt_sort_clause();
				}
				break;
			case STAR:
				{
				State = 9084;
				Match(STAR);
				}
				break;
			case CLOSE_PAREN:
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 9088;
			Match(CLOSE_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Func_exprContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Func_applicationContext func_application() {
			return GetRuleContext<Func_applicationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Within_group_clauseContext within_group_clause() {
			return GetRuleContext<Within_group_clauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Filter_clauseContext filter_clause() {
			return GetRuleContext<Filter_clauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Over_clauseContext over_clause() {
			return GetRuleContext<Over_clauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Func_expr_common_subexprContext func_expr_common_subexpr() {
			return GetRuleContext<Func_expr_common_subexprContext>(0);
		}
		public Func_exprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_func_expr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterFunc_expr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitFunc_expr(this);
		}
	}

	[RuleVersion(0)]
	public Func_exprContext func_expr() {
		Func_exprContext _localctx = new Func_exprContext(Context, State);
		EnterRule(_localctx, 1212, RULE_func_expr);
		try {
			State = 9096;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,580,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 9090;
				func_application();
				State = 9091;
				within_group_clause();
				State = 9092;
				filter_clause();
				State = 9093;
				over_clause();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 9095;
				func_expr_common_subexpr();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Func_expr_windowlessContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Func_applicationContext func_application() {
			return GetRuleContext<Func_applicationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Func_expr_common_subexprContext func_expr_common_subexpr() {
			return GetRuleContext<Func_expr_common_subexprContext>(0);
		}
		public Func_expr_windowlessContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_func_expr_windowless; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterFunc_expr_windowless(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitFunc_expr_windowless(this);
		}
	}

	[RuleVersion(0)]
	public Func_expr_windowlessContext func_expr_windowless() {
		Func_expr_windowlessContext _localctx = new Func_expr_windowlessContext(Context, State);
		EnterRule(_localctx, 1214, RULE_func_expr_windowless);
		try {
			State = 9100;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,581,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 9098;
				func_application();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 9099;
				func_expr_common_subexpr();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Func_expr_common_subexprContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLLATION() { return GetToken(PostgreSQLParser.COLLATION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOR() { return GetToken(PostgreSQLParser.FOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAREN() { return GetToken(PostgreSQLParser.OPEN_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public A_exprContext[] a_expr() {
			return GetRuleContexts<A_exprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public A_exprContext a_expr(int i) {
			return GetRuleContext<A_exprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAREN() { return GetToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CURRENT_DATE() { return GetToken(PostgreSQLParser.CURRENT_DATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CURRENT_TIME() { return GetToken(PostgreSQLParser.CURRENT_TIME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IconstContext iconst() {
			return GetRuleContext<IconstContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CURRENT_TIMESTAMP() { return GetToken(PostgreSQLParser.CURRENT_TIMESTAMP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOCALTIME() { return GetToken(PostgreSQLParser.LOCALTIME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOCALTIMESTAMP() { return GetToken(PostgreSQLParser.LOCALTIMESTAMP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CURRENT_ROLE() { return GetToken(PostgreSQLParser.CURRENT_ROLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CURRENT_USER() { return GetToken(PostgreSQLParser.CURRENT_USER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SESSION_USER() { return GetToken(PostgreSQLParser.SESSION_USER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode USER() { return GetToken(PostgreSQLParser.USER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CURRENT_CATALOG() { return GetToken(PostgreSQLParser.CURRENT_CATALOG, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CURRENT_SCHEMA() { return GetToken(PostgreSQLParser.CURRENT_SCHEMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CAST() { return GetToken(PostgreSQLParser.CAST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS() { return GetToken(PostgreSQLParser.AS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypenameContext typename() {
			return GetRuleContext<TypenameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXTRACT() { return GetToken(PostgreSQLParser.EXTRACT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Extract_listContext extract_list() {
			return GetRuleContext<Extract_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NORMALIZE() { return GetToken(PostgreSQLParser.NORMALIZE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(PostgreSQLParser.COMMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Unicode_normal_formContext unicode_normal_form() {
			return GetRuleContext<Unicode_normal_formContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OVERLAY() { return GetToken(PostgreSQLParser.OVERLAY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Overlay_listContext overlay_list() {
			return GetRuleContext<Overlay_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode POSITION() { return GetToken(PostgreSQLParser.POSITION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Position_listContext position_list() {
			return GetRuleContext<Position_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SUBSTRING() { return GetToken(PostgreSQLParser.SUBSTRING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Substr_listContext substr_list() {
			return GetRuleContext<Substr_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TREAT() { return GetToken(PostgreSQLParser.TREAT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRIM() { return GetToken(PostgreSQLParser.TRIM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Trim_listContext trim_list() {
			return GetRuleContext<Trim_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BOTH() { return GetToken(PostgreSQLParser.BOTH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEADING() { return GetToken(PostgreSQLParser.LEADING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRAILING() { return GetToken(PostgreSQLParser.TRAILING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NULLIF() { return GetToken(PostgreSQLParser.NULLIF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COALESCE() { return GetToken(PostgreSQLParser.COALESCE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Expr_listContext expr_list() {
			return GetRuleContext<Expr_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GREATEST() { return GetToken(PostgreSQLParser.GREATEST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEAST() { return GetToken(PostgreSQLParser.LEAST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode XMLCONCAT() { return GetToken(PostgreSQLParser.XMLCONCAT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode XMLELEMENT() { return GetToken(PostgreSQLParser.XMLELEMENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NAME_P() { return GetToken(PostgreSQLParser.NAME_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public CollabelContext collabel() {
			return GetRuleContext<CollabelContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Xml_attributesContext xml_attributes() {
			return GetRuleContext<Xml_attributesContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode XMLEXISTS() { return GetToken(PostgreSQLParser.XMLEXISTS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public C_exprContext c_expr() {
			return GetRuleContext<C_exprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Xmlexists_argumentContext xmlexists_argument() {
			return GetRuleContext<Xmlexists_argumentContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode XMLFOREST() { return GetToken(PostgreSQLParser.XMLFOREST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Xml_attribute_listContext xml_attribute_list() {
			return GetRuleContext<Xml_attribute_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode XMLPARSE() { return GetToken(PostgreSQLParser.XMLPARSE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Document_or_contentContext document_or_content() {
			return GetRuleContext<Document_or_contentContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Xml_whitespace_optionContext xml_whitespace_option() {
			return GetRuleContext<Xml_whitespace_optionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode XMLPI() { return GetToken(PostgreSQLParser.XMLPI, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode XMLROOT() { return GetToken(PostgreSQLParser.XMLROOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode XML_P() { return GetToken(PostgreSQLParser.XML_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Xml_root_versionContext xml_root_version() {
			return GetRuleContext<Xml_root_versionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Opt_xml_root_standaloneContext opt_xml_root_standalone() {
			return GetRuleContext<Opt_xml_root_standaloneContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode XMLSERIALIZE() { return GetToken(PostgreSQLParser.XMLSERIALIZE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SimpletypenameContext simpletypename() {
			return GetRuleContext<SimpletypenameContext>(0);
		}
		public Func_expr_common_subexprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_func_expr_common_subexpr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterFunc_expr_common_subexpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitFunc_expr_common_subexpr(this);
		}
	}

	[RuleVersion(0)]
	public Func_expr_common_subexprContext func_expr_common_subexpr() {
		Func_expr_common_subexprContext _localctx = new Func_expr_common_subexprContext(Context, State);
		EnterRule(_localctx, 1216, RULE_func_expr_common_subexpr);
		int _la;
		try {
			State = 9279;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case COLLATION:
				EnterOuterAlt(_localctx, 1);
				{
				State = 9102;
				Match(COLLATION);
				State = 9103;
				Match(FOR);
				State = 9104;
				Match(OPEN_PAREN);
				State = 9105;
				a_expr();
				State = 9106;
				Match(CLOSE_PAREN);
				}
				break;
			case CURRENT_DATE:
				EnterOuterAlt(_localctx, 2);
				{
				State = 9108;
				Match(CURRENT_DATE);
				}
				break;
			case CURRENT_TIME:
				EnterOuterAlt(_localctx, 3);
				{
				State = 9109;
				Match(CURRENT_TIME);
				State = 9114;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,582,Context) ) {
				case 1:
					{
					State = 9110;
					Match(OPEN_PAREN);
					State = 9111;
					iconst();
					State = 9112;
					Match(CLOSE_PAREN);
					}
					break;
				}
				}
				break;
			case CURRENT_TIMESTAMP:
				EnterOuterAlt(_localctx, 4);
				{
				State = 9116;
				Match(CURRENT_TIMESTAMP);
				State = 9121;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,583,Context) ) {
				case 1:
					{
					State = 9117;
					Match(OPEN_PAREN);
					State = 9118;
					iconst();
					State = 9119;
					Match(CLOSE_PAREN);
					}
					break;
				}
				}
				break;
			case LOCALTIME:
				EnterOuterAlt(_localctx, 5);
				{
				State = 9123;
				Match(LOCALTIME);
				State = 9128;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,584,Context) ) {
				case 1:
					{
					State = 9124;
					Match(OPEN_PAREN);
					State = 9125;
					iconst();
					State = 9126;
					Match(CLOSE_PAREN);
					}
					break;
				}
				}
				break;
			case LOCALTIMESTAMP:
				EnterOuterAlt(_localctx, 6);
				{
				State = 9130;
				Match(LOCALTIMESTAMP);
				State = 9135;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,585,Context) ) {
				case 1:
					{
					State = 9131;
					Match(OPEN_PAREN);
					State = 9132;
					iconst();
					State = 9133;
					Match(CLOSE_PAREN);
					}
					break;
				}
				}
				break;
			case CURRENT_ROLE:
				EnterOuterAlt(_localctx, 7);
				{
				State = 9137;
				Match(CURRENT_ROLE);
				}
				break;
			case CURRENT_USER:
				EnterOuterAlt(_localctx, 8);
				{
				State = 9138;
				Match(CURRENT_USER);
				}
				break;
			case SESSION_USER:
				EnterOuterAlt(_localctx, 9);
				{
				State = 9139;
				Match(SESSION_USER);
				}
				break;
			case USER:
				EnterOuterAlt(_localctx, 10);
				{
				State = 9140;
				Match(USER);
				}
				break;
			case CURRENT_CATALOG:
				EnterOuterAlt(_localctx, 11);
				{
				State = 9141;
				Match(CURRENT_CATALOG);
				}
				break;
			case CURRENT_SCHEMA:
				EnterOuterAlt(_localctx, 12);
				{
				State = 9142;
				Match(CURRENT_SCHEMA);
				}
				break;
			case CAST:
				EnterOuterAlt(_localctx, 13);
				{
				State = 9143;
				Match(CAST);
				State = 9144;
				Match(OPEN_PAREN);
				State = 9145;
				a_expr();
				State = 9146;
				Match(AS);
				State = 9147;
				typename();
				State = 9148;
				Match(CLOSE_PAREN);
				}
				break;
			case EXTRACT:
				EnterOuterAlt(_localctx, 14);
				{
				State = 9150;
				Match(EXTRACT);
				State = 9151;
				Match(OPEN_PAREN);
				State = 9152;
				extract_list();
				State = 9153;
				Match(CLOSE_PAREN);
				}
				break;
			case NORMALIZE:
				EnterOuterAlt(_localctx, 15);
				{
				State = 9155;
				Match(NORMALIZE);
				State = 9156;
				Match(OPEN_PAREN);
				State = 9157;
				a_expr();
				State = 9160;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COMMA) {
					{
					State = 9158;
					Match(COMMA);
					State = 9159;
					unicode_normal_form();
					}
				}

				State = 9162;
				Match(CLOSE_PAREN);
				}
				break;
			case OVERLAY:
				EnterOuterAlt(_localctx, 16);
				{
				State = 9164;
				Match(OVERLAY);
				State = 9165;
				Match(OPEN_PAREN);
				State = 9166;
				overlay_list();
				State = 9167;
				Match(CLOSE_PAREN);
				}
				break;
			case POSITION:
				EnterOuterAlt(_localctx, 17);
				{
				State = 9169;
				Match(POSITION);
				State = 9170;
				Match(OPEN_PAREN);
				State = 9171;
				position_list();
				State = 9172;
				Match(CLOSE_PAREN);
				}
				break;
			case SUBSTRING:
				EnterOuterAlt(_localctx, 18);
				{
				State = 9174;
				Match(SUBSTRING);
				State = 9175;
				Match(OPEN_PAREN);
				State = 9176;
				substr_list();
				State = 9177;
				Match(CLOSE_PAREN);
				}
				break;
			case TREAT:
				EnterOuterAlt(_localctx, 19);
				{
				State = 9179;
				Match(TREAT);
				State = 9180;
				Match(OPEN_PAREN);
				State = 9181;
				a_expr();
				State = 9182;
				Match(AS);
				State = 9183;
				typename();
				State = 9184;
				Match(CLOSE_PAREN);
				}
				break;
			case TRIM:
				EnterOuterAlt(_localctx, 20);
				{
				State = 9186;
				Match(TRIM);
				State = 9187;
				Match(OPEN_PAREN);
				State = 9189;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la - 39)) & ~0x3f) == 0 && ((1L << (_la - 39)) & 72057611217797121L) != 0) {
					{
					State = 9188;
					_la = TokenStream.LA(1);
					if ( !((((_la - 39)) & ~0x3f) == 0 && ((1L << (_la - 39)) & 72057611217797121L) != 0) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
				}

				State = 9191;
				trim_list();
				State = 9192;
				Match(CLOSE_PAREN);
				}
				break;
			case NULLIF:
				EnterOuterAlt(_localctx, 21);
				{
				State = 9194;
				Match(NULLIF);
				State = 9195;
				Match(OPEN_PAREN);
				State = 9196;
				a_expr();
				State = 9197;
				Match(COMMA);
				State = 9198;
				a_expr();
				State = 9199;
				Match(CLOSE_PAREN);
				}
				break;
			case COALESCE:
				EnterOuterAlt(_localctx, 22);
				{
				State = 9201;
				Match(COALESCE);
				State = 9202;
				Match(OPEN_PAREN);
				State = 9203;
				expr_list();
				State = 9204;
				Match(CLOSE_PAREN);
				}
				break;
			case GREATEST:
				EnterOuterAlt(_localctx, 23);
				{
				State = 9206;
				Match(GREATEST);
				State = 9207;
				Match(OPEN_PAREN);
				State = 9208;
				expr_list();
				State = 9209;
				Match(CLOSE_PAREN);
				}
				break;
			case LEAST:
				EnterOuterAlt(_localctx, 24);
				{
				State = 9211;
				Match(LEAST);
				State = 9212;
				Match(OPEN_PAREN);
				State = 9213;
				expr_list();
				State = 9214;
				Match(CLOSE_PAREN);
				}
				break;
			case XMLCONCAT:
				EnterOuterAlt(_localctx, 25);
				{
				State = 9216;
				Match(XMLCONCAT);
				State = 9217;
				Match(OPEN_PAREN);
				State = 9218;
				expr_list();
				State = 9219;
				Match(CLOSE_PAREN);
				}
				break;
			case XMLELEMENT:
				EnterOuterAlt(_localctx, 26);
				{
				State = 9221;
				Match(XMLELEMENT);
				State = 9222;
				Match(OPEN_PAREN);
				State = 9223;
				Match(NAME_P);
				State = 9224;
				collabel();
				State = 9230;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COMMA) {
					{
					State = 9225;
					Match(COMMA);
					State = 9228;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,588,Context) ) {
					case 1:
						{
						State = 9226;
						xml_attributes();
						}
						break;
					case 2:
						{
						State = 9227;
						expr_list();
						}
						break;
					}
					}
				}

				State = 9232;
				Match(CLOSE_PAREN);
				}
				break;
			case XMLEXISTS:
				EnterOuterAlt(_localctx, 27);
				{
				State = 9234;
				Match(XMLEXISTS);
				State = 9235;
				Match(OPEN_PAREN);
				State = 9236;
				c_expr();
				State = 9237;
				xmlexists_argument();
				State = 9238;
				Match(CLOSE_PAREN);
				}
				break;
			case XMLFOREST:
				EnterOuterAlt(_localctx, 28);
				{
				State = 9240;
				Match(XMLFOREST);
				State = 9241;
				Match(OPEN_PAREN);
				State = 9242;
				xml_attribute_list();
				State = 9243;
				Match(CLOSE_PAREN);
				}
				break;
			case XMLPARSE:
				EnterOuterAlt(_localctx, 29);
				{
				State = 9245;
				Match(XMLPARSE);
				State = 9246;
				Match(OPEN_PAREN);
				State = 9247;
				document_or_content();
				State = 9248;
				a_expr();
				State = 9249;
				xml_whitespace_option();
				State = 9250;
				Match(CLOSE_PAREN);
				}
				break;
			case XMLPI:
				EnterOuterAlt(_localctx, 30);
				{
				State = 9252;
				Match(XMLPI);
				State = 9253;
				Match(OPEN_PAREN);
				State = 9254;
				Match(NAME_P);
				State = 9255;
				collabel();
				State = 9258;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COMMA) {
					{
					State = 9256;
					Match(COMMA);
					State = 9257;
					a_expr();
					}
				}

				State = 9260;
				Match(CLOSE_PAREN);
				}
				break;
			case XMLROOT:
				EnterOuterAlt(_localctx, 31);
				{
				State = 9262;
				Match(XMLROOT);
				State = 9263;
				Match(OPEN_PAREN);
				State = 9264;
				Match(XML_P);
				State = 9265;
				a_expr();
				State = 9266;
				Match(COMMA);
				State = 9267;
				xml_root_version();
				State = 9268;
				opt_xml_root_standalone();
				State = 9269;
				Match(CLOSE_PAREN);
				}
				break;
			case XMLSERIALIZE:
				EnterOuterAlt(_localctx, 32);
				{
				State = 9271;
				Match(XMLSERIALIZE);
				State = 9272;
				Match(OPEN_PAREN);
				State = 9273;
				document_or_content();
				State = 9274;
				a_expr();
				State = 9275;
				Match(AS);
				State = 9276;
				simpletypename();
				State = 9277;
				Match(CLOSE_PAREN);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Xml_root_versionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VERSION_P() { return GetToken(PostgreSQLParser.VERSION_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public A_exprContext a_expr() {
			return GetRuleContext<A_exprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NO() { return GetToken(PostgreSQLParser.NO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VALUE_P() { return GetToken(PostgreSQLParser.VALUE_P, 0); }
		public Xml_root_versionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_xml_root_version; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterXml_root_version(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitXml_root_version(this);
		}
	}

	[RuleVersion(0)]
	public Xml_root_versionContext xml_root_version() {
		Xml_root_versionContext _localctx = new Xml_root_versionContext(Context, State);
		EnterRule(_localctx, 1218, RULE_xml_root_version);
		try {
			State = 9286;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,592,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 9281;
				Match(VERSION_P);
				State = 9282;
				a_expr();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 9283;
				Match(VERSION_P);
				State = 9284;
				Match(NO);
				State = 9285;
				Match(VALUE_P);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Opt_xml_root_standaloneContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(PostgreSQLParser.COMMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STANDALONE_P() { return GetToken(PostgreSQLParser.STANDALONE_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode YES_P() { return GetToken(PostgreSQLParser.YES_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NO() { return GetToken(PostgreSQLParser.NO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VALUE_P() { return GetToken(PostgreSQLParser.VALUE_P, 0); }
		public Opt_xml_root_standaloneContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_opt_xml_root_standalone; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterOpt_xml_root_standalone(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitOpt_xml_root_standalone(this);
		}
	}

	[RuleVersion(0)]
	public Opt_xml_root_standaloneContext opt_xml_root_standalone() {
		Opt_xml_root_standaloneContext _localctx = new Opt_xml_root_standaloneContext(Context, State);
		EnterRule(_localctx, 1220, RULE_opt_xml_root_standalone);
		try {
			State = 9299;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,593,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 9288;
				Match(COMMA);
				State = 9289;
				Match(STANDALONE_P);
				State = 9290;
				Match(YES_P);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 9291;
				Match(COMMA);
				State = 9292;
				Match(STANDALONE_P);
				State = 9293;
				Match(NO);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 9294;
				Match(COMMA);
				State = 9295;
				Match(STANDALONE_P);
				State = 9296;
				Match(NO);
				State = 9297;
				Match(VALUE_P);
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Xml_attributesContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode XMLATTRIBUTES() { return GetToken(PostgreSQLParser.XMLATTRIBUTES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAREN() { return GetToken(PostgreSQLParser.OPEN_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Xml_attribute_listContext xml_attribute_list() {
			return GetRuleContext<Xml_attribute_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAREN() { return GetToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public Xml_attributesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_xml_attributes; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterXml_attributes(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitXml_attributes(this);
		}
	}

	[RuleVersion(0)]
	public Xml_attributesContext xml_attributes() {
		Xml_attributesContext _localctx = new Xml_attributesContext(Context, State);
		EnterRule(_localctx, 1222, RULE_xml_attributes);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 9301;
			Match(XMLATTRIBUTES);
			State = 9302;
			Match(OPEN_PAREN);
			State = 9303;
			xml_attribute_list();
			State = 9304;
			Match(CLOSE_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Xml_attribute_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Xml_attribute_elContext[] xml_attribute_el() {
			return GetRuleContexts<Xml_attribute_elContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Xml_attribute_elContext xml_attribute_el(int i) {
			return GetRuleContext<Xml_attribute_elContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(PostgreSQLParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(PostgreSQLParser.COMMA, i);
		}
		public Xml_attribute_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_xml_attribute_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterXml_attribute_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitXml_attribute_list(this);
		}
	}

	[RuleVersion(0)]
	public Xml_attribute_listContext xml_attribute_list() {
		Xml_attribute_listContext _localctx = new Xml_attribute_listContext(Context, State);
		EnterRule(_localctx, 1224, RULE_xml_attribute_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 9306;
			xml_attribute_el();
			State = 9311;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 9307;
				Match(COMMA);
				State = 9308;
				xml_attribute_el();
				}
				}
				State = 9313;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Xml_attribute_elContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public A_exprContext a_expr() {
			return GetRuleContext<A_exprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS() { return GetToken(PostgreSQLParser.AS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public CollabelContext collabel() {
			return GetRuleContext<CollabelContext>(0);
		}
		public Xml_attribute_elContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_xml_attribute_el; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterXml_attribute_el(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitXml_attribute_el(this);
		}
	}

	[RuleVersion(0)]
	public Xml_attribute_elContext xml_attribute_el() {
		Xml_attribute_elContext _localctx = new Xml_attribute_elContext(Context, State);
		EnterRule(_localctx, 1226, RULE_xml_attribute_el);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 9314;
			a_expr();
			State = 9317;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==AS) {
				{
				State = 9315;
				Match(AS);
				State = 9316;
				collabel();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Document_or_contentContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOCUMENT_P() { return GetToken(PostgreSQLParser.DOCUMENT_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONTENT_P() { return GetToken(PostgreSQLParser.CONTENT_P, 0); }
		public Document_or_contentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_document_or_content; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterDocument_or_content(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitDocument_or_content(this);
		}
	}

	[RuleVersion(0)]
	public Document_or_contentContext document_or_content() {
		Document_or_contentContext _localctx = new Document_or_contentContext(Context, State);
		EnterRule(_localctx, 1228, RULE_document_or_content);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 9319;
			_la = TokenStream.LA(1);
			if ( !(_la==CONTENT_P || _la==DOCUMENT_P) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Xml_whitespace_optionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PRESERVE() { return GetToken(PostgreSQLParser.PRESERVE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WHITESPACE_P() { return GetToken(PostgreSQLParser.WHITESPACE_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRIP_P() { return GetToken(PostgreSQLParser.STRIP_P, 0); }
		public Xml_whitespace_optionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_xml_whitespace_option; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterXml_whitespace_option(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitXml_whitespace_option(this);
		}
	}

	[RuleVersion(0)]
	public Xml_whitespace_optionContext xml_whitespace_option() {
		Xml_whitespace_optionContext _localctx = new Xml_whitespace_optionContext(Context, State);
		EnterRule(_localctx, 1230, RULE_xml_whitespace_option);
		try {
			State = 9326;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case PRESERVE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 9321;
				Match(PRESERVE);
				State = 9322;
				Match(WHITESPACE_P);
				}
				break;
			case STRIP_P:
				EnterOuterAlt(_localctx, 2);
				{
				State = 9323;
				Match(STRIP_P);
				State = 9324;
				Match(WHITESPACE_P);
				}
				break;
			case CLOSE_PAREN:
				EnterOuterAlt(_localctx, 3);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Xmlexists_argumentContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PASSING() { return GetToken(PostgreSQLParser.PASSING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public C_exprContext c_expr() {
			return GetRuleContext<C_exprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Xml_passing_mechContext[] xml_passing_mech() {
			return GetRuleContexts<Xml_passing_mechContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Xml_passing_mechContext xml_passing_mech(int i) {
			return GetRuleContext<Xml_passing_mechContext>(i);
		}
		public Xmlexists_argumentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_xmlexists_argument; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterXmlexists_argument(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitXmlexists_argument(this);
		}
	}

	[RuleVersion(0)]
	public Xmlexists_argumentContext xmlexists_argument() {
		Xmlexists_argumentContext _localctx = new Xmlexists_argumentContext(Context, State);
		EnterRule(_localctx, 1232, RULE_xmlexists_argument);
		try {
			State = 9343;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,597,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 9328;
				Match(PASSING);
				State = 9329;
				c_expr();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 9330;
				Match(PASSING);
				State = 9331;
				c_expr();
				State = 9332;
				xml_passing_mech();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 9334;
				Match(PASSING);
				State = 9335;
				xml_passing_mech();
				State = 9336;
				c_expr();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 9338;
				Match(PASSING);
				State = 9339;
				xml_passing_mech();
				State = 9340;
				c_expr();
				State = 9341;
				xml_passing_mech();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Xml_passing_mechContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BY() { return GetToken(PostgreSQLParser.BY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REF() { return GetToken(PostgreSQLParser.REF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VALUE_P() { return GetToken(PostgreSQLParser.VALUE_P, 0); }
		public Xml_passing_mechContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_xml_passing_mech; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterXml_passing_mech(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitXml_passing_mech(this);
		}
	}

	[RuleVersion(0)]
	public Xml_passing_mechContext xml_passing_mech() {
		Xml_passing_mechContext _localctx = new Xml_passing_mechContext(Context, State);
		EnterRule(_localctx, 1234, RULE_xml_passing_mech);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 9345;
			Match(BY);
			State = 9346;
			_la = TokenStream.LA(1);
			if ( !(_la==REF || _la==VALUE_P) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Within_group_clauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WITHIN() { return GetToken(PostgreSQLParser.WITHIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GROUP_P() { return GetToken(PostgreSQLParser.GROUP_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAREN() { return GetToken(PostgreSQLParser.OPEN_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Sort_clauseContext sort_clause() {
			return GetRuleContext<Sort_clauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAREN() { return GetToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public Within_group_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_within_group_clause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterWithin_group_clause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitWithin_group_clause(this);
		}
	}

	[RuleVersion(0)]
	public Within_group_clauseContext within_group_clause() {
		Within_group_clauseContext _localctx = new Within_group_clauseContext(Context, State);
		EnterRule(_localctx, 1236, RULE_within_group_clause);
		try {
			State = 9355;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,598,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 9348;
				Match(WITHIN);
				State = 9349;
				Match(GROUP_P);
				State = 9350;
				Match(OPEN_PAREN);
				State = 9351;
				sort_clause();
				State = 9352;
				Match(CLOSE_PAREN);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Filter_clauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FILTER() { return GetToken(PostgreSQLParser.FILTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAREN() { return GetToken(PostgreSQLParser.OPEN_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WHERE() { return GetToken(PostgreSQLParser.WHERE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public A_exprContext a_expr() {
			return GetRuleContext<A_exprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAREN() { return GetToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public Filter_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_filter_clause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterFilter_clause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitFilter_clause(this);
		}
	}

	[RuleVersion(0)]
	public Filter_clauseContext filter_clause() {
		Filter_clauseContext _localctx = new Filter_clauseContext(Context, State);
		EnterRule(_localctx, 1238, RULE_filter_clause);
		try {
			State = 9364;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,599,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 9357;
				Match(FILTER);
				State = 9358;
				Match(OPEN_PAREN);
				State = 9359;
				Match(WHERE);
				State = 9360;
				a_expr();
				State = 9361;
				Match(CLOSE_PAREN);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Window_clauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WINDOW() { return GetToken(PostgreSQLParser.WINDOW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Window_definition_listContext window_definition_list() {
			return GetRuleContext<Window_definition_listContext>(0);
		}
		public Window_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_window_clause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterWindow_clause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitWindow_clause(this);
		}
	}

	[RuleVersion(0)]
	public Window_clauseContext window_clause() {
		Window_clauseContext _localctx = new Window_clauseContext(Context, State);
		EnterRule(_localctx, 1240, RULE_window_clause);
		try {
			State = 9369;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case WINDOW:
				EnterOuterAlt(_localctx, 1);
				{
				State = 9366;
				Match(WINDOW);
				State = 9367;
				window_definition_list();
				}
				break;
			case Eof:
			case OPEN_PAREN:
			case CLOSE_PAREN:
			case COMMA:
			case SEMI:
			case ANALYSE:
			case ANALYZE:
			case CREATE:
			case DO:
			case EXCEPT:
			case FETCH:
			case FOR:
			case GRANT:
			case INTERSECT:
			case INTO:
			case LIMIT:
			case OFFSET:
			case ON:
			case ORDER:
			case RETURNING:
			case SELECT:
			case TABLE:
			case THEN:
			case UNION:
			case USING:
			case WHEN:
			case WITH:
			case ABORT_P:
			case ALTER:
			case BEGIN_P:
			case CHECKPOINT:
			case CLOSE:
			case CLUSTER:
			case COMMENT:
			case COMMIT:
			case COPY:
			case DEALLOCATE:
			case DECLARE:
			case DELETE_P:
			case DISCARD:
			case DROP:
			case EXECUTE:
			case EXPLAIN:
			case INSERT:
			case LISTEN:
			case LOAD:
			case LOCK_P:
			case MERGE:
			case MOVE:
			case NOTIFY:
			case PREPARE:
			case REASSIGN:
			case REFRESH:
			case REINDEX:
			case RELEASE:
			case RESET:
			case REVOKE:
			case ROLLBACK:
			case SAVEPOINT:
			case SECURITY:
			case SET:
			case SHOW:
			case START:
			case TRUNCATE:
			case UNLISTEN:
			case UPDATE:
			case VACUUM:
			case VALUES:
			case CALL:
			case IMPORT_P:
			case END_P:
			case LOOP:
			case MetaCommand:
				EnterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Window_definition_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Window_definitionContext[] window_definition() {
			return GetRuleContexts<Window_definitionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Window_definitionContext window_definition(int i) {
			return GetRuleContext<Window_definitionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(PostgreSQLParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(PostgreSQLParser.COMMA, i);
		}
		public Window_definition_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_window_definition_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterWindow_definition_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitWindow_definition_list(this);
		}
	}

	[RuleVersion(0)]
	public Window_definition_listContext window_definition_list() {
		Window_definition_listContext _localctx = new Window_definition_listContext(Context, State);
		EnterRule(_localctx, 1242, RULE_window_definition_list);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 9371;
			window_definition();
			State = 9376;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,601,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 9372;
					Match(COMMA);
					State = 9373;
					window_definition();
					}
					} 
				}
				State = 9378;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,601,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Window_definitionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ColidContext colid() {
			return GetRuleContext<ColidContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS() { return GetToken(PostgreSQLParser.AS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Window_specificationContext window_specification() {
			return GetRuleContext<Window_specificationContext>(0);
		}
		public Window_definitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_window_definition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterWindow_definition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitWindow_definition(this);
		}
	}

	[RuleVersion(0)]
	public Window_definitionContext window_definition() {
		Window_definitionContext _localctx = new Window_definitionContext(Context, State);
		EnterRule(_localctx, 1244, RULE_window_definition);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 9379;
			colid();
			State = 9380;
			Match(AS);
			State = 9381;
			window_specification();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Over_clauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OVER() { return GetToken(PostgreSQLParser.OVER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Window_specificationContext window_specification() {
			return GetRuleContext<Window_specificationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ColidContext colid() {
			return GetRuleContext<ColidContext>(0);
		}
		public Over_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_over_clause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterOver_clause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitOver_clause(this);
		}
	}

	[RuleVersion(0)]
	public Over_clauseContext over_clause() {
		Over_clauseContext _localctx = new Over_clauseContext(Context, State);
		EnterRule(_localctx, 1246, RULE_over_clause);
		try {
			State = 9389;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,603,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 9383;
				Match(OVER);
				State = 9386;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case OPEN_PAREN:
					{
					State = 9384;
					window_specification();
					}
					break;
				case AND:
				case ARRAY:
				case COLLATE:
				case COLUMN:
				case CONSTRAINT:
				case DEFAULT:
				case DO:
				case FETCH:
				case TABLE:
				case IS:
				case LEFT:
				case OUTER_P:
				case OVER:
				case RIGHT:
				case ABORT_P:
				case ABSOLUTE_P:
				case ACCESS:
				case ACTION:
				case ADD_P:
				case ADMIN:
				case AFTER:
				case AGGREGATE:
				case ALSO:
				case ALTER:
				case ALWAYS:
				case ASSERTION:
				case ASSIGNMENT:
				case AT:
				case ATTRIBUTE:
				case BACKWARD:
				case BEFORE:
				case BEGIN_P:
				case BY:
				case CACHE:
				case CALLED:
				case CASCADE:
				case CASCADED:
				case CATALOG:
				case CHAIN:
				case CHARACTERISTICS:
				case CHECKPOINT:
				case CLASS:
				case CLOSE:
				case CLUSTER:
				case COMMENT:
				case COMMENTS:
				case COMMIT:
				case COMMITTED:
				case CONFIGURATION:
				case CONNECTION:
				case CONSTRAINTS:
				case CONTENT_P:
				case CONTINUE_P:
				case CONVERSION_P:
				case COPY:
				case COST:
				case CSV:
				case CURSOR:
				case CYCLE:
				case DATA_P:
				case DATABASE:
				case DAY_P:
				case DEALLOCATE:
				case DECLARE:
				case DEFAULTS:
				case DEFERRED:
				case DEFINER:
				case DELETE_P:
				case DELIMITER:
				case DELIMITERS:
				case DICTIONARY:
				case DISABLE_P:
				case DISCARD:
				case DOCUMENT_P:
				case DOMAIN_P:
				case DOUBLE_P:
				case DROP:
				case EACH:
				case ENABLE_P:
				case ENCODING:
				case ENCRYPTED:
				case ENUM_P:
				case ESCAPE:
				case EVENT:
				case EXCLUDE:
				case EXCLUDING:
				case EXCLUSIVE:
				case EXECUTE:
				case EXPLAIN:
				case EXTENSION:
				case EXTERNAL:
				case FAMILY:
				case FIRST_P:
				case FOLLOWING:
				case FORCE:
				case FORWARD:
				case FUNCTION:
				case FUNCTIONS:
				case GLOBAL:
				case GRANTED:
				case HANDLER:
				case HEADER_P:
				case HOLD:
				case HOUR_P:
				case IDENTITY_P:
				case IF_P:
				case IMMEDIATE:
				case IMMUTABLE:
				case IMPLICIT_P:
				case INCLUDING:
				case INCREMENT:
				case INDEX:
				case INDEXES:
				case INHERIT:
				case INHERITS:
				case INLINE_P:
				case INSENSITIVE:
				case INSERT:
				case INSTEAD:
				case INVOKER:
				case ISOLATION:
				case KEY:
				case LABEL:
				case LANGUAGE:
				case LARGE_P:
				case LAST_P:
				case LEAKPROOF:
				case LEVEL:
				case LISTEN:
				case LOAD:
				case LOCAL:
				case LOCATION:
				case LOCK_P:
				case MAPPING:
				case MATCH:
				case MATERIALIZED:
				case MAXVALUE:
				case MINUTE_P:
				case MINVALUE:
				case MODE:
				case MONTH_P:
				case MOVE:
				case NAME_P:
				case NAMES:
				case NEXT:
				case NO:
				case NOTHING:
				case NOTIFY:
				case NOWAIT:
				case NULLS_P:
				case OBJECT_P:
				case OF:
				case OFF:
				case OIDS:
				case OPERATOR:
				case OPTION:
				case OPTIONS:
				case OWNED:
				case OWNER:
				case PARSER:
				case PARTIAL:
				case PARTITION:
				case PASSING:
				case PASSWORD:
				case PLANS:
				case PRECEDING:
				case PREPARE:
				case PREPARED:
				case PRESERVE:
				case PRIOR:
				case PRIVILEGES:
				case PROCEDURAL:
				case PROCEDURE:
				case PROGRAM:
				case QUOTE:
				case RANGE:
				case READ:
				case REASSIGN:
				case RECHECK:
				case RECURSIVE:
				case REF:
				case REFRESH:
				case REINDEX:
				case RELATIVE_P:
				case RELEASE:
				case RENAME:
				case REPEATABLE:
				case REPLACE:
				case REPLICA:
				case RESET:
				case RESTART:
				case RESTRICT:
				case RETURNS:
				case REVOKE:
				case ROLE:
				case ROLLBACK:
				case ROWS:
				case RULE:
				case SAVEPOINT:
				case SCHEMA:
				case SCROLL:
				case SEARCH:
				case SECOND_P:
				case SECURITY:
				case SEQUENCE:
				case SEQUENCES:
				case SERIALIZABLE:
				case SERVER:
				case SESSION:
				case SET:
				case SHARE:
				case SHOW:
				case SIMPLE:
				case SNAPSHOT:
				case STABLE:
				case STANDALONE_P:
				case START:
				case STATEMENT:
				case STATISTICS:
				case STDIN:
				case STDOUT:
				case STORAGE:
				case STRICT_P:
				case STRIP_P:
				case SYSID:
				case SYSTEM_P:
				case TABLES:
				case TABLESPACE:
				case TEMP:
				case TEMPLATE:
				case TEMPORARY:
				case TEXT_P:
				case TRANSACTION:
				case TRIGGER:
				case TRUNCATE:
				case TRUSTED:
				case TYPE_P:
				case TYPES_P:
				case UNBOUNDED:
				case UNCOMMITTED:
				case UNENCRYPTED:
				case UNKNOWN:
				case UNLISTEN:
				case UNLOGGED:
				case UNTIL:
				case UPDATE:
				case VACUUM:
				case VALID:
				case VALIDATE:
				case VALIDATOR:
				case VARYING:
				case VERSION_P:
				case VIEW:
				case VOLATILE:
				case WHITESPACE_P:
				case WITHOUT:
				case WORK:
				case WRAPPER:
				case WRITE:
				case XML_P:
				case YEAR_P:
				case YES_P:
				case ZONE:
				case BETWEEN:
				case BIGINT:
				case BIT:
				case BOOLEAN_P:
				case CHAR_P:
				case CHARACTER:
				case COALESCE:
				case DEC:
				case DECIMAL_P:
				case EXISTS:
				case EXTRACT:
				case FLOAT_P:
				case GREATEST:
				case INOUT:
				case INT_P:
				case INTEGER:
				case INTERVAL:
				case LEAST:
				case NATIONAL:
				case NCHAR:
				case NONE:
				case NULLIF:
				case NUMERIC:
				case OVERLAY:
				case POSITION:
				case PRECISION:
				case REAL:
				case ROW:
				case SETOF:
				case SMALLINT:
				case SUBSTRING:
				case TIME:
				case TIMESTAMP:
				case TREAT:
				case TRIM:
				case VALUES:
				case VARCHAR:
				case XMLATTRIBUTES:
				case XMLCOMMENT:
				case XMLAGG:
				case XML_IS_WELL_FORMED:
				case XML_IS_WELL_FORMED_DOCUMENT:
				case XML_IS_WELL_FORMED_CONTENT:
				case XPATH:
				case XPATH_EXISTS:
				case XMLCONCAT:
				case XMLELEMENT:
				case XMLEXISTS:
				case XMLFOREST:
				case XMLPARSE:
				case XMLPI:
				case XMLROOT:
				case XMLSERIALIZE:
				case CALL:
				case CURRENT_P:
				case ATTACH:
				case DETACH:
				case EXPRESSION:
				case GENERATED:
				case LOGGED:
				case STORED:
				case INCLUDE:
				case ROUTINE:
				case TRANSFORM:
				case IMPORT_P:
				case POLICY:
				case METHOD:
				case REFERENCING:
				case NEW:
				case OLD:
				case VALUE_P:
				case SUBSCRIPTION:
				case PUBLICATION:
				case OUT_P:
				case ROUTINES:
				case SCHEMAS:
				case PROCEDURES:
				case INPUT_P:
				case SUPPORT:
				case PARALLEL:
				case SQL_P:
				case DEPENDS:
				case OVERRIDING:
				case CONFLICT:
				case SKIP_P:
				case LOCKED:
				case TIES:
				case ROLLUP:
				case CUBE:
				case GROUPING:
				case SETS:
				case ORDINALITY:
				case XMLTABLE:
				case COLUMNS:
				case XMLNAMESPACES:
				case ROWTYPE:
				case NORMALIZED:
				case WITHIN:
				case FILTER:
				case GROUPS:
				case OTHERS:
				case NFC:
				case NFD:
				case NFKC:
				case NFKD:
				case UESCAPE:
				case VIEWS:
				case NORMALIZE:
				case DUMP:
				case PRINT_STRICT_PARAMS:
				case VARIABLE_CONFLICT:
				case ERROR:
				case USE_VARIABLE:
				case USE_COLUMN:
				case ALIAS:
				case CONSTANT:
				case PERFORM:
				case GET:
				case DIAGNOSTICS:
				case STACKED:
				case ELSIF:
				case REVERSE:
				case SLICE:
				case EXIT:
				case RETURN:
				case QUERY:
				case RAISE:
				case SQLSTATE:
				case DEBUG:
				case LOG:
				case INFO:
				case NOTICE:
				case WARNING:
				case EXCEPTION:
				case ASSERT:
				case OPEN:
				case ABS:
				case CBRT:
				case CEIL:
				case CEILING:
				case DEGREES:
				case DIV:
				case EXP:
				case FACTORIAL:
				case FLOOR:
				case GCD:
				case LCM:
				case LN:
				case LOG10:
				case MIN_SCALE:
				case MOD:
				case PI:
				case POWER:
				case RADIANS:
				case ROUND:
				case SCALE:
				case SIGN:
				case SQRT:
				case TRIM_SCALE:
				case TRUNC:
				case WIDTH_BUCKET:
				case RANDOM:
				case SETSEED:
				case ACOS:
				case ACOSD:
				case ASIN:
				case ASIND:
				case ATAN:
				case ATAND:
				case ATAN2:
				case ATAN2D:
				case COS:
				case COSD:
				case COT:
				case COTD:
				case SIN:
				case SIND:
				case TAN:
				case TAND:
				case SINH:
				case COSH:
				case TANH:
				case ASINH:
				case ACOSH:
				case ATANH:
				case BIT_LENGTH:
				case CHAR_LENGTH:
				case CHARACTER_LENGTH:
				case LOWER:
				case OCTET_LENGTH:
				case UPPER:
				case ASCII:
				case BTRIM:
				case CHR:
				case CONCAT:
				case CONCAT_WS:
				case FORMAT:
				case INITCAP:
				case LENGTH:
				case LPAD:
				case LTRIM:
				case MD5:
				case PARSE_IDENT:
				case PG_CLIENT_ENCODING:
				case QUOTE_IDENT:
				case QUOTE_LITERAL:
				case QUOTE_NULLABLE:
				case REGEXP_COUNT:
				case REGEXP_INSTR:
				case REGEXP_LIKE:
				case REGEXP_MATCH:
				case REGEXP_MATCHES:
				case REGEXP_REPLACE:
				case REGEXP_SPLIT_TO_ARRAY:
				case REGEXP_SPLIT_TO_TABLE:
				case REGEXP_SUBSTR:
				case REPEAT:
				case RPAD:
				case RTRIM:
				case SPLIT_PART:
				case STARTS_WITH:
				case STRING_TO_ARRAY:
				case STRING_TO_TABLE:
				case STRPOS:
				case SUBSTR:
				case TO_ASCII:
				case TO_HEX:
				case TRANSLATE:
				case UNISTR:
				case AGE:
				case CLOCK_TIMESTAMP:
				case DATE_BIN:
				case DATE_PART:
				case DATE_TRUNC:
				case ISFINITE:
				case JUSTIFY_DAYS:
				case JUSTIFY_HOURS:
				case JUSTIFY_INTERVAL:
				case MAKE_DATE:
				case MAKE_INTERVAL:
				case MAKE_TIME:
				case MAKE_TIMESTAMP:
				case MAKE_TIMESTAMPTZ:
				case NOW:
				case STATEMENT_TIMESTAMP:
				case TIMEOFDAY:
				case TRANSACTION_TIMESTAMP:
				case TO_TIMESTAMP:
				case TO_CHAR:
				case TO_DATE:
				case TO_NUMBER:
				case Identifier:
				case QuotedIdentifier:
				case UnicodeQuotedIdentifier:
				case PLSQLVARIABLENAME:
				case PLSQLIDENTIFIER:
					{
					State = 9385;
					colid();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Window_specificationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAREN() { return GetToken(PostgreSQLParser.OPEN_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Opt_existing_window_nameContext opt_existing_window_name() {
			return GetRuleContext<Opt_existing_window_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Opt_partition_clauseContext opt_partition_clause() {
			return GetRuleContext<Opt_partition_clauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Opt_sort_clauseContext opt_sort_clause() {
			return GetRuleContext<Opt_sort_clauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Opt_frame_clauseContext opt_frame_clause() {
			return GetRuleContext<Opt_frame_clauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAREN() { return GetToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public Window_specificationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_window_specification; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterWindow_specification(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitWindow_specification(this);
		}
	}

	[RuleVersion(0)]
	public Window_specificationContext window_specification() {
		Window_specificationContext _localctx = new Window_specificationContext(Context, State);
		EnterRule(_localctx, 1248, RULE_window_specification);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 9391;
			Match(OPEN_PAREN);
			State = 9392;
			opt_existing_window_name();
			State = 9393;
			opt_partition_clause();
			State = 9394;
			opt_sort_clause();
			State = 9395;
			opt_frame_clause();
			State = 9396;
			Match(CLOSE_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Opt_existing_window_nameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ColidContext colid() {
			return GetRuleContext<ColidContext>(0);
		}
		public Opt_existing_window_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_opt_existing_window_name; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterOpt_existing_window_name(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitOpt_existing_window_name(this);
		}
	}

	[RuleVersion(0)]
	public Opt_existing_window_nameContext opt_existing_window_name() {
		Opt_existing_window_nameContext _localctx = new Opt_existing_window_nameContext(Context, State);
		EnterRule(_localctx, 1250, RULE_opt_existing_window_name);
		try {
			State = 9400;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,604,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 9398;
				colid();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Opt_partition_clauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARTITION() { return GetToken(PostgreSQLParser.PARTITION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BY() { return GetToken(PostgreSQLParser.BY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Expr_listContext expr_list() {
			return GetRuleContext<Expr_listContext>(0);
		}
		public Opt_partition_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_opt_partition_clause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterOpt_partition_clause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitOpt_partition_clause(this);
		}
	}

	[RuleVersion(0)]
	public Opt_partition_clauseContext opt_partition_clause() {
		Opt_partition_clauseContext _localctx = new Opt_partition_clauseContext(Context, State);
		EnterRule(_localctx, 1252, RULE_opt_partition_clause);
		try {
			State = 9406;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case PARTITION:
				EnterOuterAlt(_localctx, 1);
				{
				State = 9402;
				Match(PARTITION);
				State = 9403;
				Match(BY);
				State = 9404;
				expr_list();
				}
				break;
			case CLOSE_PAREN:
			case ORDER:
			case RANGE:
			case ROWS:
			case GROUPS:
				EnterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Opt_frame_clauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RANGE() { return GetToken(PostgreSQLParser.RANGE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Frame_extentContext frame_extent() {
			return GetRuleContext<Frame_extentContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Opt_window_exclusion_clauseContext opt_window_exclusion_clause() {
			return GetRuleContext<Opt_window_exclusion_clauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROWS() { return GetToken(PostgreSQLParser.ROWS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GROUPS() { return GetToken(PostgreSQLParser.GROUPS, 0); }
		public Opt_frame_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_opt_frame_clause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterOpt_frame_clause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitOpt_frame_clause(this);
		}
	}

	[RuleVersion(0)]
	public Opt_frame_clauseContext opt_frame_clause() {
		Opt_frame_clauseContext _localctx = new Opt_frame_clauseContext(Context, State);
		EnterRule(_localctx, 1254, RULE_opt_frame_clause);
		try {
			State = 9421;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case RANGE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 9408;
				Match(RANGE);
				State = 9409;
				frame_extent();
				State = 9410;
				opt_window_exclusion_clause();
				}
				break;
			case ROWS:
				EnterOuterAlt(_localctx, 2);
				{
				State = 9412;
				Match(ROWS);
				State = 9413;
				frame_extent();
				State = 9414;
				opt_window_exclusion_clause();
				}
				break;
			case GROUPS:
				EnterOuterAlt(_localctx, 3);
				{
				State = 9416;
				Match(GROUPS);
				State = 9417;
				frame_extent();
				State = 9418;
				opt_window_exclusion_clause();
				}
				break;
			case CLOSE_PAREN:
				EnterOuterAlt(_localctx, 4);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Frame_extentContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Frame_boundContext[] frame_bound() {
			return GetRuleContexts<Frame_boundContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Frame_boundContext frame_bound(int i) {
			return GetRuleContext<Frame_boundContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BETWEEN() { return GetToken(PostgreSQLParser.BETWEEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AND() { return GetToken(PostgreSQLParser.AND, 0); }
		public Frame_extentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_frame_extent; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterFrame_extent(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitFrame_extent(this);
		}
	}

	[RuleVersion(0)]
	public Frame_extentContext frame_extent() {
		Frame_extentContext _localctx = new Frame_extentContext(Context, State);
		EnterRule(_localctx, 1256, RULE_frame_extent);
		try {
			State = 9429;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,607,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 9423;
				frame_bound();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 9424;
				Match(BETWEEN);
				State = 9425;
				frame_bound();
				State = 9426;
				Match(AND);
				State = 9427;
				frame_bound();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Frame_boundContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNBOUNDED() { return GetToken(PostgreSQLParser.UNBOUNDED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PRECEDING() { return GetToken(PostgreSQLParser.PRECEDING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOLLOWING() { return GetToken(PostgreSQLParser.FOLLOWING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CURRENT_P() { return GetToken(PostgreSQLParser.CURRENT_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROW() { return GetToken(PostgreSQLParser.ROW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public A_exprContext a_expr() {
			return GetRuleContext<A_exprContext>(0);
		}
		public Frame_boundContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_frame_bound; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterFrame_bound(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitFrame_bound(this);
		}
	}

	[RuleVersion(0)]
	public Frame_boundContext frame_bound() {
		Frame_boundContext _localctx = new Frame_boundContext(Context, State);
		EnterRule(_localctx, 1258, RULE_frame_bound);
		int _la;
		try {
			State = 9438;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,608,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 9431;
				Match(UNBOUNDED);
				State = 9432;
				_la = TokenStream.LA(1);
				if ( !(_la==FOLLOWING || _la==PRECEDING) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 9433;
				Match(CURRENT_P);
				State = 9434;
				Match(ROW);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 9435;
				a_expr();
				State = 9436;
				_la = TokenStream.LA(1);
				if ( !(_la==FOLLOWING || _la==PRECEDING) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Opt_window_exclusion_clauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXCLUDE() { return GetToken(PostgreSQLParser.EXCLUDE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CURRENT_P() { return GetToken(PostgreSQLParser.CURRENT_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROW() { return GetToken(PostgreSQLParser.ROW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GROUP_P() { return GetToken(PostgreSQLParser.GROUP_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TIES() { return GetToken(PostgreSQLParser.TIES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NO() { return GetToken(PostgreSQLParser.NO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OTHERS() { return GetToken(PostgreSQLParser.OTHERS, 0); }
		public Opt_window_exclusion_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_opt_window_exclusion_clause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterOpt_window_exclusion_clause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitOpt_window_exclusion_clause(this);
		}
	}

	[RuleVersion(0)]
	public Opt_window_exclusion_clauseContext opt_window_exclusion_clause() {
		Opt_window_exclusion_clauseContext _localctx = new Opt_window_exclusion_clauseContext(Context, State);
		EnterRule(_localctx, 1260, RULE_opt_window_exclusion_clause);
		try {
			State = 9450;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case EXCLUDE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 9440;
				Match(EXCLUDE);
				State = 9447;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case CURRENT_P:
					{
					State = 9441;
					Match(CURRENT_P);
					State = 9442;
					Match(ROW);
					}
					break;
				case GROUP_P:
					{
					State = 9443;
					Match(GROUP_P);
					}
					break;
				case TIES:
					{
					State = 9444;
					Match(TIES);
					}
					break;
				case NO:
					{
					State = 9445;
					Match(NO);
					State = 9446;
					Match(OTHERS);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case CLOSE_PAREN:
				EnterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RowContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROW() { return GetToken(PostgreSQLParser.ROW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAREN() { return GetToken(PostgreSQLParser.OPEN_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAREN() { return GetToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Expr_listContext expr_list() {
			return GetRuleContext<Expr_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(PostgreSQLParser.COMMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public A_exprContext a_expr() {
			return GetRuleContext<A_exprContext>(0);
		}
		public RowContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_row; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterRow(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitRow(this);
		}
	}

	[RuleVersion(0)]
	public RowContext row() {
		RowContext _localctx = new RowContext(Context, State);
		EnterRule(_localctx, 1262, RULE_row);
		int _la;
		try {
			State = 9464;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ROW:
				EnterOuterAlt(_localctx, 1);
				{
				State = 9452;
				Match(ROW);
				State = 9453;
				Match(OPEN_PAREN);
				State = 9455;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (((_la) & ~0x3f) == 0 && ((1L << _la) & 3620818277858553860L) != 0 || (((_la - 75)) & ~0x3f) == 0 && ((1L << (_la - 75)) & -2120073201L) != 0 || (((_la - 139)) & ~0x3f) == 0 && ((1L << (_la - 139)) & -17L) != 0 || (((_la - 203)) & ~0x3f) == 0 && ((1L << (_la - 203)) & -2533274790395905L) != 0 || (((_la - 267)) & ~0x3f) == 0 && ((1L << (_la - 267)) & -1L) != 0 || (((_la - 331)) & ~0x3f) == 0 && ((1L << (_la - 331)) & -1L) != 0 || (((_la - 395)) & ~0x3f) == 0 && ((1L << (_la - 395)) & -1152921504606846977L) != 0 || (((_la - 459)) & ~0x3f) == 0 && ((1L << (_la - 459)) & -2306018931074138113L) != 0 || (((_la - 523)) & ~0x3f) == 0 && ((1L << (_la - 523)) & -1L) != 0 || (((_la - 587)) & ~0x3f) == 0 && ((1L << (_la - 587)) & -6300535878691323905L) != 0 || (((_la - 651)) & ~0x3f) == 0 && ((1L << (_la - 651)) & 2104593L) != 0) {
					{
					State = 9454;
					expr_list();
					}
				}

				State = 9457;
				Match(CLOSE_PAREN);
				}
				break;
			case OPEN_PAREN:
				EnterOuterAlt(_localctx, 2);
				{
				State = 9458;
				Match(OPEN_PAREN);
				State = 9459;
				expr_list();
				State = 9460;
				Match(COMMA);
				State = 9461;
				a_expr();
				State = 9462;
				Match(CLOSE_PAREN);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Explicit_rowContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROW() { return GetToken(PostgreSQLParser.ROW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAREN() { return GetToken(PostgreSQLParser.OPEN_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAREN() { return GetToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Expr_listContext expr_list() {
			return GetRuleContext<Expr_listContext>(0);
		}
		public Explicit_rowContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_explicit_row; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterExplicit_row(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitExplicit_row(this);
		}
	}

	[RuleVersion(0)]
	public Explicit_rowContext explicit_row() {
		Explicit_rowContext _localctx = new Explicit_rowContext(Context, State);
		EnterRule(_localctx, 1264, RULE_explicit_row);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 9466;
			Match(ROW);
			State = 9467;
			Match(OPEN_PAREN);
			State = 9469;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (((_la) & ~0x3f) == 0 && ((1L << _la) & 3620818277858553860L) != 0 || (((_la - 75)) & ~0x3f) == 0 && ((1L << (_la - 75)) & -2120073201L) != 0 || (((_la - 139)) & ~0x3f) == 0 && ((1L << (_la - 139)) & -17L) != 0 || (((_la - 203)) & ~0x3f) == 0 && ((1L << (_la - 203)) & -2533274790395905L) != 0 || (((_la - 267)) & ~0x3f) == 0 && ((1L << (_la - 267)) & -1L) != 0 || (((_la - 331)) & ~0x3f) == 0 && ((1L << (_la - 331)) & -1L) != 0 || (((_la - 395)) & ~0x3f) == 0 && ((1L << (_la - 395)) & -1152921504606846977L) != 0 || (((_la - 459)) & ~0x3f) == 0 && ((1L << (_la - 459)) & -2306018931074138113L) != 0 || (((_la - 523)) & ~0x3f) == 0 && ((1L << (_la - 523)) & -1L) != 0 || (((_la - 587)) & ~0x3f) == 0 && ((1L << (_la - 587)) & -6300535878691323905L) != 0 || (((_la - 651)) & ~0x3f) == 0 && ((1L << (_la - 651)) & 2104593L) != 0) {
				{
				State = 9468;
				expr_list();
				}
			}

			State = 9471;
			Match(CLOSE_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Implicit_rowContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAREN() { return GetToken(PostgreSQLParser.OPEN_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Expr_listContext expr_list() {
			return GetRuleContext<Expr_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(PostgreSQLParser.COMMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public A_exprContext a_expr() {
			return GetRuleContext<A_exprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAREN() { return GetToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public Implicit_rowContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_implicit_row; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterImplicit_row(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitImplicit_row(this);
		}
	}

	[RuleVersion(0)]
	public Implicit_rowContext implicit_row() {
		Implicit_rowContext _localctx = new Implicit_rowContext(Context, State);
		EnterRule(_localctx, 1266, RULE_implicit_row);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 9473;
			Match(OPEN_PAREN);
			State = 9474;
			expr_list();
			State = 9475;
			Match(COMMA);
			State = 9476;
			a_expr();
			State = 9477;
			Match(CLOSE_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Sub_typeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ANY() { return GetToken(PostgreSQLParser.ANY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SOME() { return GetToken(PostgreSQLParser.SOME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALL() { return GetToken(PostgreSQLParser.ALL, 0); }
		public Sub_typeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sub_type; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterSub_type(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitSub_type(this);
		}
	}

	[RuleVersion(0)]
	public Sub_typeContext sub_type() {
		Sub_typeContext _localctx = new Sub_typeContext(Context, State);
		EnterRule(_localctx, 1268, RULE_sub_type);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 9479;
			_la = TokenStream.LA(1);
			if ( !((((_la - 30)) & ~0x3f) == 0 && ((1L << (_la - 30)) & 1152921504606846993L) != 0) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class All_opContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Operator() { return GetToken(PostgreSQLParser.Operator, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public MathopContext mathop() {
			return GetRuleContext<MathopContext>(0);
		}
		public All_opContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_all_op; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterAll_op(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitAll_op(this);
		}
	}

	[RuleVersion(0)]
	public All_opContext all_op() {
		All_opContext _localctx = new All_opContext(Context, State);
		EnterRule(_localctx, 1270, RULE_all_op);
		try {
			State = 9483;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Operator:
				EnterOuterAlt(_localctx, 1);
				{
				State = 9481;
				Match(Operator);
				}
				break;
			case STAR:
			case EQUAL:
			case PLUS:
			case MINUS:
			case SLASH:
			case CARET:
			case LT:
			case GT:
			case LESS_EQUALS:
			case GREATER_EQUALS:
			case NOT_EQUALS:
			case PERCENT:
				EnterOuterAlt(_localctx, 2);
				{
				State = 9482;
				mathop();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MathopContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLUS() { return GetToken(PostgreSQLParser.PLUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUS() { return GetToken(PostgreSQLParser.MINUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STAR() { return GetToken(PostgreSQLParser.STAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SLASH() { return GetToken(PostgreSQLParser.SLASH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PERCENT() { return GetToken(PostgreSQLParser.PERCENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CARET() { return GetToken(PostgreSQLParser.CARET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LT() { return GetToken(PostgreSQLParser.LT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GT() { return GetToken(PostgreSQLParser.GT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL() { return GetToken(PostgreSQLParser.EQUAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LESS_EQUALS() { return GetToken(PostgreSQLParser.LESS_EQUALS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GREATER_EQUALS() { return GetToken(PostgreSQLParser.GREATER_EQUALS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT_EQUALS() { return GetToken(PostgreSQLParser.NOT_EQUALS, 0); }
		public MathopContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_mathop; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterMathop(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitMathop(this);
		}
	}

	[RuleVersion(0)]
	public MathopContext mathop() {
		MathopContext _localctx = new MathopContext(Context, State);
		EnterRule(_localctx, 1272, RULE_mathop);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 9485;
			_la = TokenStream.LA(1);
			if ( !(((_la) & ~0x3f) == 0 && ((1L << _la) & 178517504L) != 0) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Qual_opContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Operator() { return GetToken(PostgreSQLParser.Operator, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPERATOR() { return GetToken(PostgreSQLParser.OPERATOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAREN() { return GetToken(PostgreSQLParser.OPEN_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Any_operatorContext any_operator() {
			return GetRuleContext<Any_operatorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAREN() { return GetToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public Qual_opContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_qual_op; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterQual_op(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitQual_op(this);
		}
	}

	[RuleVersion(0)]
	public Qual_opContext qual_op() {
		Qual_opContext _localctx = new Qual_opContext(Context, State);
		EnterRule(_localctx, 1274, RULE_qual_op);
		try {
			State = 9493;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Operator:
				EnterOuterAlt(_localctx, 1);
				{
				State = 9487;
				Match(Operator);
				}
				break;
			case OPERATOR:
				EnterOuterAlt(_localctx, 2);
				{
				State = 9488;
				Match(OPERATOR);
				State = 9489;
				Match(OPEN_PAREN);
				State = 9490;
				any_operator();
				State = 9491;
				Match(CLOSE_PAREN);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Qual_all_opContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public All_opContext all_op() {
			return GetRuleContext<All_opContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPERATOR() { return GetToken(PostgreSQLParser.OPERATOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAREN() { return GetToken(PostgreSQLParser.OPEN_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Any_operatorContext any_operator() {
			return GetRuleContext<Any_operatorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAREN() { return GetToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public Qual_all_opContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_qual_all_op; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterQual_all_op(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitQual_all_op(this);
		}
	}

	[RuleVersion(0)]
	public Qual_all_opContext qual_all_op() {
		Qual_all_opContext _localctx = new Qual_all_opContext(Context, State);
		EnterRule(_localctx, 1276, RULE_qual_all_op);
		try {
			State = 9501;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case STAR:
			case EQUAL:
			case PLUS:
			case MINUS:
			case SLASH:
			case CARET:
			case LT:
			case GT:
			case LESS_EQUALS:
			case GREATER_EQUALS:
			case NOT_EQUALS:
			case PERCENT:
			case Operator:
				EnterOuterAlt(_localctx, 1);
				{
				State = 9495;
				all_op();
				}
				break;
			case OPERATOR:
				EnterOuterAlt(_localctx, 2);
				{
				State = 9496;
				Match(OPERATOR);
				State = 9497;
				Match(OPEN_PAREN);
				State = 9498;
				any_operator();
				State = 9499;
				Match(CLOSE_PAREN);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Subquery_OpContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public All_opContext all_op() {
			return GetRuleContext<All_opContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPERATOR() { return GetToken(PostgreSQLParser.OPERATOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAREN() { return GetToken(PostgreSQLParser.OPEN_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Any_operatorContext any_operator() {
			return GetRuleContext<Any_operatorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAREN() { return GetToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LIKE() { return GetToken(PostgreSQLParser.LIKE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT() { return GetToken(PostgreSQLParser.NOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ILIKE() { return GetToken(PostgreSQLParser.ILIKE, 0); }
		public Subquery_OpContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_subquery_Op; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterSubquery_Op(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitSubquery_Op(this);
		}
	}

	[RuleVersion(0)]
	public Subquery_OpContext subquery_Op() {
		Subquery_OpContext _localctx = new Subquery_OpContext(Context, State);
		EnterRule(_localctx, 1278, RULE_subquery_Op);
		try {
			State = 9515;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,617,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 9503;
				all_op();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 9504;
				Match(OPERATOR);
				State = 9505;
				Match(OPEN_PAREN);
				State = 9506;
				any_operator();
				State = 9507;
				Match(CLOSE_PAREN);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 9509;
				Match(LIKE);
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 9510;
				Match(NOT);
				State = 9511;
				Match(LIKE);
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 9512;
				Match(ILIKE);
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 9513;
				Match(NOT);
				State = 9514;
				Match(ILIKE);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Expr_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public A_exprContext[] a_expr() {
			return GetRuleContexts<A_exprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public A_exprContext a_expr(int i) {
			return GetRuleContext<A_exprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(PostgreSQLParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(PostgreSQLParser.COMMA, i);
		}
		public Expr_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expr_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterExpr_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitExpr_list(this);
		}
	}

	[RuleVersion(0)]
	public Expr_listContext expr_list() {
		Expr_listContext _localctx = new Expr_listContext(Context, State);
		EnterRule(_localctx, 1280, RULE_expr_list);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 9517;
			a_expr();
			State = 9522;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,618,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 9518;
					Match(COMMA);
					State = 9519;
					a_expr();
					}
					} 
				}
				State = 9524;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,618,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Func_arg_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Func_arg_exprContext[] func_arg_expr() {
			return GetRuleContexts<Func_arg_exprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Func_arg_exprContext func_arg_expr(int i) {
			return GetRuleContext<Func_arg_exprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(PostgreSQLParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(PostgreSQLParser.COMMA, i);
		}
		public Func_arg_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_func_arg_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterFunc_arg_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitFunc_arg_list(this);
		}
	}

	[RuleVersion(0)]
	public Func_arg_listContext func_arg_list() {
		Func_arg_listContext _localctx = new Func_arg_listContext(Context, State);
		EnterRule(_localctx, 1282, RULE_func_arg_list);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 9525;
			func_arg_expr();
			State = 9530;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,619,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 9526;
					Match(COMMA);
					State = 9527;
					func_arg_expr();
					}
					} 
				}
				State = 9532;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,619,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Func_arg_exprContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public A_exprContext a_expr() {
			return GetRuleContext<A_exprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Param_nameContext param_name() {
			return GetRuleContext<Param_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON_EQUALS() { return GetToken(PostgreSQLParser.COLON_EQUALS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUALS_GREATER() { return GetToken(PostgreSQLParser.EQUALS_GREATER, 0); }
		public Func_arg_exprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_func_arg_expr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterFunc_arg_expr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitFunc_arg_expr(this);
		}
	}

	[RuleVersion(0)]
	public Func_arg_exprContext func_arg_expr() {
		Func_arg_exprContext _localctx = new Func_arg_exprContext(Context, State);
		EnterRule(_localctx, 1284, RULE_func_arg_expr);
		int _la;
		try {
			State = 9538;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,620,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 9533;
				a_expr();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 9534;
				param_name();
				State = 9535;
				_la = TokenStream.LA(1);
				if ( !(_la==COLON_EQUALS || _la==EQUALS_GREATER) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 9536;
				a_expr();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Type_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypenameContext[] typename() {
			return GetRuleContexts<TypenameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypenameContext typename(int i) {
			return GetRuleContext<TypenameContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(PostgreSQLParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(PostgreSQLParser.COMMA, i);
		}
		public Type_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterType_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitType_list(this);
		}
	}

	[RuleVersion(0)]
	public Type_listContext type_list() {
		Type_listContext _localctx = new Type_listContext(Context, State);
		EnterRule(_localctx, 1286, RULE_type_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 9540;
			typename();
			State = 9545;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 9541;
				Match(COMMA);
				State = 9542;
				typename();
				}
				}
				State = 9547;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Array_exprContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_BRACKET() { return GetToken(PostgreSQLParser.OPEN_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_BRACKET() { return GetToken(PostgreSQLParser.CLOSE_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Expr_listContext expr_list() {
			return GetRuleContext<Expr_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Array_expr_listContext array_expr_list() {
			return GetRuleContext<Array_expr_listContext>(0);
		}
		public Array_exprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_array_expr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterArray_expr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitArray_expr(this);
		}
	}

	[RuleVersion(0)]
	public Array_exprContext array_expr() {
		Array_exprContext _localctx = new Array_exprContext(Context, State);
		EnterRule(_localctx, 1288, RULE_array_expr);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 9548;
			Match(OPEN_BRACKET);
			State = 9551;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case OPEN_PAREN:
			case PLUS:
			case MINUS:
			case PARAM:
			case Operator:
			case AND:
			case ARRAY:
			case CASE:
			case CAST:
			case COLLATE:
			case COLUMN:
			case CONSTRAINT:
			case CURRENT_CATALOG:
			case CURRENT_DATE:
			case CURRENT_ROLE:
			case CURRENT_TIME:
			case CURRENT_TIMESTAMP:
			case CURRENT_USER:
			case DEFAULT:
			case DO:
			case FALSE_P:
			case FETCH:
			case LOCALTIME:
			case LOCALTIMESTAMP:
			case NOT:
			case NULL_P:
			case SESSION_USER:
			case TABLE:
			case TRUE_P:
			case UNIQUE:
			case USER:
			case AUTHORIZATION:
			case BINARY:
			case COLLATION:
			case CONCURRENTLY:
			case CROSS:
			case CURRENT_SCHEMA:
			case FREEZE:
			case FULL:
			case ILIKE:
			case INNER_P:
			case IS:
			case ISNULL:
			case JOIN:
			case LEFT:
			case LIKE:
			case NATURAL:
			case NOTNULL:
			case OUTER_P:
			case OVER:
			case OVERLAPS:
			case RIGHT:
			case SIMILAR:
			case VERBOSE:
			case ABORT_P:
			case ABSOLUTE_P:
			case ACCESS:
			case ACTION:
			case ADD_P:
			case ADMIN:
			case AFTER:
			case AGGREGATE:
			case ALSO:
			case ALTER:
			case ALWAYS:
			case ASSERTION:
			case ASSIGNMENT:
			case AT:
			case ATTRIBUTE:
			case BACKWARD:
			case BEFORE:
			case BEGIN_P:
			case BY:
			case CACHE:
			case CALLED:
			case CASCADE:
			case CASCADED:
			case CATALOG:
			case CHAIN:
			case CHARACTERISTICS:
			case CHECKPOINT:
			case CLASS:
			case CLOSE:
			case CLUSTER:
			case COMMENT:
			case COMMENTS:
			case COMMIT:
			case COMMITTED:
			case CONFIGURATION:
			case CONNECTION:
			case CONSTRAINTS:
			case CONTENT_P:
			case CONTINUE_P:
			case CONVERSION_P:
			case COPY:
			case COST:
			case CSV:
			case CURSOR:
			case CYCLE:
			case DATA_P:
			case DATABASE:
			case DAY_P:
			case DEALLOCATE:
			case DECLARE:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE_P:
			case DELIMITER:
			case DELIMITERS:
			case DICTIONARY:
			case DISABLE_P:
			case DISCARD:
			case DOCUMENT_P:
			case DOMAIN_P:
			case DOUBLE_P:
			case DROP:
			case EACH:
			case ENABLE_P:
			case ENCODING:
			case ENCRYPTED:
			case ENUM_P:
			case ESCAPE:
			case EVENT:
			case EXCLUDE:
			case EXCLUDING:
			case EXCLUSIVE:
			case EXECUTE:
			case EXPLAIN:
			case EXTENSION:
			case EXTERNAL:
			case FAMILY:
			case FIRST_P:
			case FOLLOWING:
			case FORCE:
			case FORWARD:
			case FUNCTION:
			case FUNCTIONS:
			case GLOBAL:
			case GRANTED:
			case HANDLER:
			case HEADER_P:
			case HOLD:
			case HOUR_P:
			case IDENTITY_P:
			case IF_P:
			case IMMEDIATE:
			case IMMUTABLE:
			case IMPLICIT_P:
			case INCLUDING:
			case INCREMENT:
			case INDEX:
			case INDEXES:
			case INHERIT:
			case INHERITS:
			case INLINE_P:
			case INSENSITIVE:
			case INSERT:
			case INSTEAD:
			case INVOKER:
			case ISOLATION:
			case KEY:
			case LABEL:
			case LANGUAGE:
			case LARGE_P:
			case LAST_P:
			case LEAKPROOF:
			case LEVEL:
			case LISTEN:
			case LOAD:
			case LOCAL:
			case LOCATION:
			case LOCK_P:
			case MAPPING:
			case MATCH:
			case MATERIALIZED:
			case MAXVALUE:
			case MINUTE_P:
			case MINVALUE:
			case MODE:
			case MONTH_P:
			case MOVE:
			case NAME_P:
			case NAMES:
			case NEXT:
			case NO:
			case NOTHING:
			case NOTIFY:
			case NOWAIT:
			case NULLS_P:
			case OBJECT_P:
			case OF:
			case OFF:
			case OIDS:
			case OPERATOR:
			case OPTION:
			case OPTIONS:
			case OWNED:
			case OWNER:
			case PARSER:
			case PARTIAL:
			case PARTITION:
			case PASSING:
			case PASSWORD:
			case PLANS:
			case PRECEDING:
			case PREPARE:
			case PREPARED:
			case PRESERVE:
			case PRIOR:
			case PRIVILEGES:
			case PROCEDURAL:
			case PROCEDURE:
			case PROGRAM:
			case QUOTE:
			case RANGE:
			case READ:
			case REASSIGN:
			case RECHECK:
			case RECURSIVE:
			case REF:
			case REFRESH:
			case REINDEX:
			case RELATIVE_P:
			case RELEASE:
			case RENAME:
			case REPEATABLE:
			case REPLACE:
			case REPLICA:
			case RESET:
			case RESTART:
			case RESTRICT:
			case RETURNS:
			case REVOKE:
			case ROLE:
			case ROLLBACK:
			case ROWS:
			case RULE:
			case SAVEPOINT:
			case SCHEMA:
			case SCROLL:
			case SEARCH:
			case SECOND_P:
			case SECURITY:
			case SEQUENCE:
			case SEQUENCES:
			case SERIALIZABLE:
			case SERVER:
			case SESSION:
			case SET:
			case SHARE:
			case SHOW:
			case SIMPLE:
			case SNAPSHOT:
			case STABLE:
			case STANDALONE_P:
			case START:
			case STATEMENT:
			case STATISTICS:
			case STDIN:
			case STDOUT:
			case STORAGE:
			case STRICT_P:
			case STRIP_P:
			case SYSID:
			case SYSTEM_P:
			case TABLES:
			case TABLESPACE:
			case TEMP:
			case TEMPLATE:
			case TEMPORARY:
			case TEXT_P:
			case TRANSACTION:
			case TRIGGER:
			case TRUNCATE:
			case TRUSTED:
			case TYPE_P:
			case TYPES_P:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNENCRYPTED:
			case UNKNOWN:
			case UNLISTEN:
			case UNLOGGED:
			case UNTIL:
			case UPDATE:
			case VACUUM:
			case VALID:
			case VALIDATE:
			case VALIDATOR:
			case VARYING:
			case VERSION_P:
			case VIEW:
			case VOLATILE:
			case WHITESPACE_P:
			case WITHOUT:
			case WORK:
			case WRAPPER:
			case WRITE:
			case XML_P:
			case YEAR_P:
			case YES_P:
			case ZONE:
			case BETWEEN:
			case BIGINT:
			case BIT:
			case BOOLEAN_P:
			case CHAR_P:
			case CHARACTER:
			case COALESCE:
			case DEC:
			case DECIMAL_P:
			case EXISTS:
			case EXTRACT:
			case FLOAT_P:
			case GREATEST:
			case INOUT:
			case INT_P:
			case INTEGER:
			case INTERVAL:
			case LEAST:
			case NATIONAL:
			case NCHAR:
			case NONE:
			case NULLIF:
			case NUMERIC:
			case OVERLAY:
			case POSITION:
			case PRECISION:
			case REAL:
			case ROW:
			case SETOF:
			case SMALLINT:
			case SUBSTRING:
			case TIME:
			case TIMESTAMP:
			case TREAT:
			case TRIM:
			case VALUES:
			case VARCHAR:
			case XMLATTRIBUTES:
			case XMLCOMMENT:
			case XMLAGG:
			case XML_IS_WELL_FORMED:
			case XML_IS_WELL_FORMED_DOCUMENT:
			case XML_IS_WELL_FORMED_CONTENT:
			case XPATH:
			case XPATH_EXISTS:
			case XMLCONCAT:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLPARSE:
			case XMLPI:
			case XMLROOT:
			case XMLSERIALIZE:
			case CALL:
			case CURRENT_P:
			case ATTACH:
			case DETACH:
			case EXPRESSION:
			case GENERATED:
			case LOGGED:
			case STORED:
			case INCLUDE:
			case ROUTINE:
			case TRANSFORM:
			case IMPORT_P:
			case POLICY:
			case METHOD:
			case REFERENCING:
			case NEW:
			case OLD:
			case VALUE_P:
			case SUBSCRIPTION:
			case PUBLICATION:
			case OUT_P:
			case ROUTINES:
			case SCHEMAS:
			case PROCEDURES:
			case INPUT_P:
			case SUPPORT:
			case PARALLEL:
			case SQL_P:
			case DEPENDS:
			case OVERRIDING:
			case CONFLICT:
			case SKIP_P:
			case LOCKED:
			case TIES:
			case ROLLUP:
			case CUBE:
			case GROUPING:
			case SETS:
			case TABLESAMPLE:
			case ORDINALITY:
			case XMLTABLE:
			case COLUMNS:
			case XMLNAMESPACES:
			case ROWTYPE:
			case NORMALIZED:
			case WITHIN:
			case FILTER:
			case GROUPS:
			case OTHERS:
			case NFC:
			case NFD:
			case NFKC:
			case NFKD:
			case UESCAPE:
			case VIEWS:
			case NORMALIZE:
			case DUMP:
			case PRINT_STRICT_PARAMS:
			case VARIABLE_CONFLICT:
			case ERROR:
			case USE_VARIABLE:
			case USE_COLUMN:
			case ALIAS:
			case CONSTANT:
			case PERFORM:
			case GET:
			case DIAGNOSTICS:
			case STACKED:
			case ELSIF:
			case REVERSE:
			case SLICE:
			case EXIT:
			case RETURN:
			case QUERY:
			case RAISE:
			case SQLSTATE:
			case DEBUG:
			case LOG:
			case INFO:
			case NOTICE:
			case WARNING:
			case EXCEPTION:
			case ASSERT:
			case OPEN:
			case ABS:
			case CBRT:
			case CEIL:
			case CEILING:
			case DEGREES:
			case DIV:
			case EXP:
			case FACTORIAL:
			case FLOOR:
			case GCD:
			case LCM:
			case LN:
			case LOG10:
			case MIN_SCALE:
			case MOD:
			case PI:
			case POWER:
			case RADIANS:
			case ROUND:
			case SCALE:
			case SIGN:
			case SQRT:
			case TRIM_SCALE:
			case TRUNC:
			case WIDTH_BUCKET:
			case RANDOM:
			case SETSEED:
			case ACOS:
			case ACOSD:
			case ASIN:
			case ASIND:
			case ATAN:
			case ATAND:
			case ATAN2:
			case ATAN2D:
			case COS:
			case COSD:
			case COT:
			case COTD:
			case SIN:
			case SIND:
			case TAN:
			case TAND:
			case SINH:
			case COSH:
			case TANH:
			case ASINH:
			case ACOSH:
			case ATANH:
			case BIT_LENGTH:
			case CHAR_LENGTH:
			case CHARACTER_LENGTH:
			case LOWER:
			case OCTET_LENGTH:
			case UPPER:
			case ASCII:
			case BTRIM:
			case CHR:
			case CONCAT:
			case CONCAT_WS:
			case FORMAT:
			case INITCAP:
			case LENGTH:
			case LPAD:
			case LTRIM:
			case MD5:
			case PARSE_IDENT:
			case PG_CLIENT_ENCODING:
			case QUOTE_IDENT:
			case QUOTE_LITERAL:
			case QUOTE_NULLABLE:
			case REGEXP_COUNT:
			case REGEXP_INSTR:
			case REGEXP_LIKE:
			case REGEXP_MATCH:
			case REGEXP_MATCHES:
			case REGEXP_REPLACE:
			case REGEXP_SPLIT_TO_ARRAY:
			case REGEXP_SPLIT_TO_TABLE:
			case REGEXP_SUBSTR:
			case REPEAT:
			case RPAD:
			case RTRIM:
			case SPLIT_PART:
			case STARTS_WITH:
			case STRING_TO_ARRAY:
			case STRING_TO_TABLE:
			case STRPOS:
			case SUBSTR:
			case TO_ASCII:
			case TO_HEX:
			case TRANSLATE:
			case UNISTR:
			case AGE:
			case CLOCK_TIMESTAMP:
			case DATE_BIN:
			case DATE_PART:
			case DATE_TRUNC:
			case ISFINITE:
			case JUSTIFY_DAYS:
			case JUSTIFY_HOURS:
			case JUSTIFY_INTERVAL:
			case MAKE_DATE:
			case MAKE_INTERVAL:
			case MAKE_TIME:
			case MAKE_TIMESTAMP:
			case MAKE_TIMESTAMPTZ:
			case NOW:
			case STATEMENT_TIMESTAMP:
			case TIMEOFDAY:
			case TRANSACTION_TIMESTAMP:
			case TO_TIMESTAMP:
			case TO_CHAR:
			case TO_DATE:
			case TO_NUMBER:
			case Identifier:
			case QuotedIdentifier:
			case UnicodeQuotedIdentifier:
			case StringConstant:
			case UnicodeEscapeStringConstant:
			case BeginDollarStringConstant:
			case BinaryStringConstant:
			case HexadecimalStringConstant:
			case Integral:
			case Numeric:
			case PLSQLVARIABLENAME:
			case PLSQLIDENTIFIER:
			case EscapeStringConstant:
				{
				State = 9549;
				expr_list();
				}
				break;
			case OPEN_BRACKET:
				{
				State = 9550;
				array_expr_list();
				}
				break;
			case CLOSE_BRACKET:
				break;
			default:
				break;
			}
			State = 9553;
			Match(CLOSE_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Array_expr_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Array_exprContext[] array_expr() {
			return GetRuleContexts<Array_exprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Array_exprContext array_expr(int i) {
			return GetRuleContext<Array_exprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(PostgreSQLParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(PostgreSQLParser.COMMA, i);
		}
		public Array_expr_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_array_expr_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterArray_expr_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitArray_expr_list(this);
		}
	}

	[RuleVersion(0)]
	public Array_expr_listContext array_expr_list() {
		Array_expr_listContext _localctx = new Array_expr_listContext(Context, State);
		EnterRule(_localctx, 1290, RULE_array_expr_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 9555;
			array_expr();
			State = 9560;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 9556;
				Match(COMMA);
				State = 9557;
				array_expr();
				}
				}
				State = 9562;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Extract_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Extract_argContext extract_arg() {
			return GetRuleContext<Extract_argContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FROM() { return GetToken(PostgreSQLParser.FROM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public A_exprContext a_expr() {
			return GetRuleContext<A_exprContext>(0);
		}
		public Extract_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_extract_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterExtract_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitExtract_list(this);
		}
	}

	[RuleVersion(0)]
	public Extract_listContext extract_list() {
		Extract_listContext _localctx = new Extract_listContext(Context, State);
		EnterRule(_localctx, 1292, RULE_extract_list);
		try {
			State = 9568;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case AND:
			case ARRAY:
			case COLLATE:
			case COLUMN:
			case CONSTRAINT:
			case DEFAULT:
			case DO:
			case FETCH:
			case TABLE:
			case IS:
			case OUTER_P:
			case ABSOLUTE_P:
			case BACKWARD:
			case CHAIN:
			case CLOSE:
			case COMMIT:
			case CONTINUE_P:
			case CURSOR:
			case DAY_P:
			case FIRST_P:
			case FORWARD:
			case HOUR_P:
			case INSERT:
			case LAST_P:
			case MINUTE_P:
			case MONTH_P:
			case MOVE:
			case NEXT:
			case NO:
			case OPTION:
			case PRIOR:
			case RELATIVE_P:
			case RESET:
			case ROLLBACK:
			case SCHEMA:
			case SCROLL:
			case SECOND_P:
			case SET:
			case TYPE_P:
			case YEAR_P:
			case CALL:
			case CURRENT_P:
			case ROWTYPE:
			case DUMP:
			case PRINT_STRICT_PARAMS:
			case VARIABLE_CONFLICT:
			case ERROR:
			case USE_VARIABLE:
			case USE_COLUMN:
			case ALIAS:
			case CONSTANT:
			case PERFORM:
			case GET:
			case DIAGNOSTICS:
			case STACKED:
			case ELSIF:
			case SLICE:
			case EXIT:
			case RETURN:
			case QUERY:
			case RAISE:
			case SQLSTATE:
			case DEBUG:
			case INFO:
			case NOTICE:
			case WARNING:
			case EXCEPTION:
			case ASSERT:
			case OPEN:
			case Identifier:
			case QuotedIdentifier:
			case UnicodeQuotedIdentifier:
			case StringConstant:
			case UnicodeEscapeStringConstant:
			case BeginDollarStringConstant:
			case PLSQLVARIABLENAME:
			case PLSQLIDENTIFIER:
			case EscapeStringConstant:
				EnterOuterAlt(_localctx, 1);
				{
				State = 9563;
				extract_arg();
				State = 9564;
				Match(FROM);
				State = 9565;
				a_expr();
				}
				break;
			case CLOSE_PAREN:
				EnterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Extract_argContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode YEAR_P() { return GetToken(PostgreSQLParser.YEAR_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MONTH_P() { return GetToken(PostgreSQLParser.MONTH_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DAY_P() { return GetToken(PostgreSQLParser.DAY_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HOUR_P() { return GetToken(PostgreSQLParser.HOUR_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUTE_P() { return GetToken(PostgreSQLParser.MINUTE_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SECOND_P() { return GetToken(PostgreSQLParser.SECOND_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SconstContext sconst() {
			return GetRuleContext<SconstContext>(0);
		}
		public Extract_argContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_extract_arg; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterExtract_arg(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitExtract_arg(this);
		}
	}

	[RuleVersion(0)]
	public Extract_argContext extract_arg() {
		Extract_argContext _localctx = new Extract_argContext(Context, State);
		EnterRule(_localctx, 1294, RULE_extract_arg);
		try {
			State = 9578;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case AND:
			case ARRAY:
			case COLLATE:
			case COLUMN:
			case CONSTRAINT:
			case DEFAULT:
			case DO:
			case FETCH:
			case TABLE:
			case IS:
			case OUTER_P:
			case ABSOLUTE_P:
			case BACKWARD:
			case CHAIN:
			case CLOSE:
			case COMMIT:
			case CONTINUE_P:
			case CURSOR:
			case FIRST_P:
			case FORWARD:
			case INSERT:
			case LAST_P:
			case MOVE:
			case NEXT:
			case NO:
			case OPTION:
			case PRIOR:
			case RELATIVE_P:
			case RESET:
			case ROLLBACK:
			case SCHEMA:
			case SCROLL:
			case SET:
			case TYPE_P:
			case CALL:
			case CURRENT_P:
			case ROWTYPE:
			case DUMP:
			case PRINT_STRICT_PARAMS:
			case VARIABLE_CONFLICT:
			case ERROR:
			case USE_VARIABLE:
			case USE_COLUMN:
			case ALIAS:
			case CONSTANT:
			case PERFORM:
			case GET:
			case DIAGNOSTICS:
			case STACKED:
			case ELSIF:
			case SLICE:
			case EXIT:
			case RETURN:
			case QUERY:
			case RAISE:
			case SQLSTATE:
			case DEBUG:
			case INFO:
			case NOTICE:
			case WARNING:
			case EXCEPTION:
			case ASSERT:
			case OPEN:
			case Identifier:
			case QuotedIdentifier:
			case UnicodeQuotedIdentifier:
			case PLSQLVARIABLENAME:
			case PLSQLIDENTIFIER:
				EnterOuterAlt(_localctx, 1);
				{
				State = 9570;
				identifier();
				}
				break;
			case YEAR_P:
				EnterOuterAlt(_localctx, 2);
				{
				State = 9571;
				Match(YEAR_P);
				}
				break;
			case MONTH_P:
				EnterOuterAlt(_localctx, 3);
				{
				State = 9572;
				Match(MONTH_P);
				}
				break;
			case DAY_P:
				EnterOuterAlt(_localctx, 4);
				{
				State = 9573;
				Match(DAY_P);
				}
				break;
			case HOUR_P:
				EnterOuterAlt(_localctx, 5);
				{
				State = 9574;
				Match(HOUR_P);
				}
				break;
			case MINUTE_P:
				EnterOuterAlt(_localctx, 6);
				{
				State = 9575;
				Match(MINUTE_P);
				}
				break;
			case SECOND_P:
				EnterOuterAlt(_localctx, 7);
				{
				State = 9576;
				Match(SECOND_P);
				}
				break;
			case StringConstant:
			case UnicodeEscapeStringConstant:
			case BeginDollarStringConstant:
			case EscapeStringConstant:
				EnterOuterAlt(_localctx, 8);
				{
				State = 9577;
				sconst();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Unicode_normal_formContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NFC() { return GetToken(PostgreSQLParser.NFC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NFD() { return GetToken(PostgreSQLParser.NFD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NFKC() { return GetToken(PostgreSQLParser.NFKC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NFKD() { return GetToken(PostgreSQLParser.NFKD, 0); }
		public Unicode_normal_formContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unicode_normal_form; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterUnicode_normal_form(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitUnicode_normal_form(this);
		}
	}

	[RuleVersion(0)]
	public Unicode_normal_formContext unicode_normal_form() {
		Unicode_normal_formContext _localctx = new Unicode_normal_formContext(Context, State);
		EnterRule(_localctx, 1296, RULE_unicode_normal_form);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 9580;
			_la = TokenStream.LA(1);
			if ( !((((_la - 484)) & ~0x3f) == 0 && ((1L << (_la - 484)) & 15L) != 0) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Overlay_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public A_exprContext[] a_expr() {
			return GetRuleContexts<A_exprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public A_exprContext a_expr(int i) {
			return GetRuleContext<A_exprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLACING() { return GetToken(PostgreSQLParser.PLACING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FROM() { return GetToken(PostgreSQLParser.FROM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOR() { return GetToken(PostgreSQLParser.FOR, 0); }
		public Overlay_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_overlay_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterOverlay_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitOverlay_list(this);
		}
	}

	[RuleVersion(0)]
	public Overlay_listContext overlay_list() {
		Overlay_listContext _localctx = new Overlay_listContext(Context, State);
		EnterRule(_localctx, 1298, RULE_overlay_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 9582;
			a_expr();
			State = 9583;
			Match(PLACING);
			State = 9584;
			a_expr();
			State = 9585;
			Match(FROM);
			State = 9586;
			a_expr();
			State = 9589;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==FOR) {
				{
				State = 9587;
				Match(FOR);
				State = 9588;
				a_expr();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Position_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public B_exprContext[] b_expr() {
			return GetRuleContexts<B_exprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public B_exprContext b_expr(int i) {
			return GetRuleContext<B_exprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IN_P() { return GetToken(PostgreSQLParser.IN_P, 0); }
		public Position_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_position_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterPosition_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitPosition_list(this);
		}
	}

	[RuleVersion(0)]
	public Position_listContext position_list() {
		Position_listContext _localctx = new Position_listContext(Context, State);
		EnterRule(_localctx, 1300, RULE_position_list);
		try {
			State = 9596;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case OPEN_PAREN:
			case PLUS:
			case MINUS:
			case PARAM:
			case Operator:
			case AND:
			case ARRAY:
			case CASE:
			case CAST:
			case COLLATE:
			case COLUMN:
			case CONSTRAINT:
			case CURRENT_CATALOG:
			case CURRENT_DATE:
			case CURRENT_ROLE:
			case CURRENT_TIME:
			case CURRENT_TIMESTAMP:
			case CURRENT_USER:
			case DEFAULT:
			case DO:
			case FALSE_P:
			case FETCH:
			case LOCALTIME:
			case LOCALTIMESTAMP:
			case NULL_P:
			case SESSION_USER:
			case TABLE:
			case TRUE_P:
			case UNIQUE:
			case USER:
			case AUTHORIZATION:
			case BINARY:
			case COLLATION:
			case CONCURRENTLY:
			case CROSS:
			case CURRENT_SCHEMA:
			case FREEZE:
			case FULL:
			case ILIKE:
			case INNER_P:
			case IS:
			case ISNULL:
			case JOIN:
			case LEFT:
			case LIKE:
			case NATURAL:
			case NOTNULL:
			case OUTER_P:
			case OVER:
			case OVERLAPS:
			case RIGHT:
			case SIMILAR:
			case VERBOSE:
			case ABORT_P:
			case ABSOLUTE_P:
			case ACCESS:
			case ACTION:
			case ADD_P:
			case ADMIN:
			case AFTER:
			case AGGREGATE:
			case ALSO:
			case ALTER:
			case ALWAYS:
			case ASSERTION:
			case ASSIGNMENT:
			case AT:
			case ATTRIBUTE:
			case BACKWARD:
			case BEFORE:
			case BEGIN_P:
			case BY:
			case CACHE:
			case CALLED:
			case CASCADE:
			case CASCADED:
			case CATALOG:
			case CHAIN:
			case CHARACTERISTICS:
			case CHECKPOINT:
			case CLASS:
			case CLOSE:
			case CLUSTER:
			case COMMENT:
			case COMMENTS:
			case COMMIT:
			case COMMITTED:
			case CONFIGURATION:
			case CONNECTION:
			case CONSTRAINTS:
			case CONTENT_P:
			case CONTINUE_P:
			case CONVERSION_P:
			case COPY:
			case COST:
			case CSV:
			case CURSOR:
			case CYCLE:
			case DATA_P:
			case DATABASE:
			case DAY_P:
			case DEALLOCATE:
			case DECLARE:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE_P:
			case DELIMITER:
			case DELIMITERS:
			case DICTIONARY:
			case DISABLE_P:
			case DISCARD:
			case DOCUMENT_P:
			case DOMAIN_P:
			case DOUBLE_P:
			case DROP:
			case EACH:
			case ENABLE_P:
			case ENCODING:
			case ENCRYPTED:
			case ENUM_P:
			case ESCAPE:
			case EVENT:
			case EXCLUDE:
			case EXCLUDING:
			case EXCLUSIVE:
			case EXECUTE:
			case EXPLAIN:
			case EXTENSION:
			case EXTERNAL:
			case FAMILY:
			case FIRST_P:
			case FOLLOWING:
			case FORCE:
			case FORWARD:
			case FUNCTION:
			case FUNCTIONS:
			case GLOBAL:
			case GRANTED:
			case HANDLER:
			case HEADER_P:
			case HOLD:
			case HOUR_P:
			case IDENTITY_P:
			case IF_P:
			case IMMEDIATE:
			case IMMUTABLE:
			case IMPLICIT_P:
			case INCLUDING:
			case INCREMENT:
			case INDEX:
			case INDEXES:
			case INHERIT:
			case INHERITS:
			case INLINE_P:
			case INSENSITIVE:
			case INSERT:
			case INSTEAD:
			case INVOKER:
			case ISOLATION:
			case KEY:
			case LABEL:
			case LANGUAGE:
			case LARGE_P:
			case LAST_P:
			case LEAKPROOF:
			case LEVEL:
			case LISTEN:
			case LOAD:
			case LOCAL:
			case LOCATION:
			case LOCK_P:
			case MAPPING:
			case MATCH:
			case MATERIALIZED:
			case MAXVALUE:
			case MINUTE_P:
			case MINVALUE:
			case MODE:
			case MONTH_P:
			case MOVE:
			case NAME_P:
			case NAMES:
			case NEXT:
			case NO:
			case NOTHING:
			case NOTIFY:
			case NOWAIT:
			case NULLS_P:
			case OBJECT_P:
			case OF:
			case OFF:
			case OIDS:
			case OPERATOR:
			case OPTION:
			case OPTIONS:
			case OWNED:
			case OWNER:
			case PARSER:
			case PARTIAL:
			case PARTITION:
			case PASSING:
			case PASSWORD:
			case PLANS:
			case PRECEDING:
			case PREPARE:
			case PREPARED:
			case PRESERVE:
			case PRIOR:
			case PRIVILEGES:
			case PROCEDURAL:
			case PROCEDURE:
			case PROGRAM:
			case QUOTE:
			case RANGE:
			case READ:
			case REASSIGN:
			case RECHECK:
			case RECURSIVE:
			case REF:
			case REFRESH:
			case REINDEX:
			case RELATIVE_P:
			case RELEASE:
			case RENAME:
			case REPEATABLE:
			case REPLACE:
			case REPLICA:
			case RESET:
			case RESTART:
			case RESTRICT:
			case RETURNS:
			case REVOKE:
			case ROLE:
			case ROLLBACK:
			case ROWS:
			case RULE:
			case SAVEPOINT:
			case SCHEMA:
			case SCROLL:
			case SEARCH:
			case SECOND_P:
			case SECURITY:
			case SEQUENCE:
			case SEQUENCES:
			case SERIALIZABLE:
			case SERVER:
			case SESSION:
			case SET:
			case SHARE:
			case SHOW:
			case SIMPLE:
			case SNAPSHOT:
			case STABLE:
			case STANDALONE_P:
			case START:
			case STATEMENT:
			case STATISTICS:
			case STDIN:
			case STDOUT:
			case STORAGE:
			case STRICT_P:
			case STRIP_P:
			case SYSID:
			case SYSTEM_P:
			case TABLES:
			case TABLESPACE:
			case TEMP:
			case TEMPLATE:
			case TEMPORARY:
			case TEXT_P:
			case TRANSACTION:
			case TRIGGER:
			case TRUNCATE:
			case TRUSTED:
			case TYPE_P:
			case TYPES_P:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNENCRYPTED:
			case UNKNOWN:
			case UNLISTEN:
			case UNLOGGED:
			case UNTIL:
			case UPDATE:
			case VACUUM:
			case VALID:
			case VALIDATE:
			case VALIDATOR:
			case VARYING:
			case VERSION_P:
			case VIEW:
			case VOLATILE:
			case WHITESPACE_P:
			case WITHOUT:
			case WORK:
			case WRAPPER:
			case WRITE:
			case XML_P:
			case YEAR_P:
			case YES_P:
			case ZONE:
			case BETWEEN:
			case BIGINT:
			case BIT:
			case BOOLEAN_P:
			case CHAR_P:
			case CHARACTER:
			case COALESCE:
			case DEC:
			case DECIMAL_P:
			case EXISTS:
			case EXTRACT:
			case FLOAT_P:
			case GREATEST:
			case INOUT:
			case INT_P:
			case INTEGER:
			case INTERVAL:
			case LEAST:
			case NATIONAL:
			case NCHAR:
			case NONE:
			case NULLIF:
			case NUMERIC:
			case OVERLAY:
			case POSITION:
			case PRECISION:
			case REAL:
			case ROW:
			case SETOF:
			case SMALLINT:
			case SUBSTRING:
			case TIME:
			case TIMESTAMP:
			case TREAT:
			case TRIM:
			case VALUES:
			case VARCHAR:
			case XMLATTRIBUTES:
			case XMLCOMMENT:
			case XMLAGG:
			case XML_IS_WELL_FORMED:
			case XML_IS_WELL_FORMED_DOCUMENT:
			case XML_IS_WELL_FORMED_CONTENT:
			case XPATH:
			case XPATH_EXISTS:
			case XMLCONCAT:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLPARSE:
			case XMLPI:
			case XMLROOT:
			case XMLSERIALIZE:
			case CALL:
			case CURRENT_P:
			case ATTACH:
			case DETACH:
			case EXPRESSION:
			case GENERATED:
			case LOGGED:
			case STORED:
			case INCLUDE:
			case ROUTINE:
			case TRANSFORM:
			case IMPORT_P:
			case POLICY:
			case METHOD:
			case REFERENCING:
			case NEW:
			case OLD:
			case VALUE_P:
			case SUBSCRIPTION:
			case PUBLICATION:
			case OUT_P:
			case ROUTINES:
			case SCHEMAS:
			case PROCEDURES:
			case INPUT_P:
			case SUPPORT:
			case PARALLEL:
			case SQL_P:
			case DEPENDS:
			case OVERRIDING:
			case CONFLICT:
			case SKIP_P:
			case LOCKED:
			case TIES:
			case ROLLUP:
			case CUBE:
			case GROUPING:
			case SETS:
			case TABLESAMPLE:
			case ORDINALITY:
			case XMLTABLE:
			case COLUMNS:
			case XMLNAMESPACES:
			case ROWTYPE:
			case NORMALIZED:
			case WITHIN:
			case FILTER:
			case GROUPS:
			case OTHERS:
			case NFC:
			case NFD:
			case NFKC:
			case NFKD:
			case UESCAPE:
			case VIEWS:
			case NORMALIZE:
			case DUMP:
			case PRINT_STRICT_PARAMS:
			case VARIABLE_CONFLICT:
			case ERROR:
			case USE_VARIABLE:
			case USE_COLUMN:
			case ALIAS:
			case CONSTANT:
			case PERFORM:
			case GET:
			case DIAGNOSTICS:
			case STACKED:
			case ELSIF:
			case REVERSE:
			case SLICE:
			case EXIT:
			case RETURN:
			case QUERY:
			case RAISE:
			case SQLSTATE:
			case DEBUG:
			case LOG:
			case INFO:
			case NOTICE:
			case WARNING:
			case EXCEPTION:
			case ASSERT:
			case OPEN:
			case ABS:
			case CBRT:
			case CEIL:
			case CEILING:
			case DEGREES:
			case DIV:
			case EXP:
			case FACTORIAL:
			case FLOOR:
			case GCD:
			case LCM:
			case LN:
			case LOG10:
			case MIN_SCALE:
			case MOD:
			case PI:
			case POWER:
			case RADIANS:
			case ROUND:
			case SCALE:
			case SIGN:
			case SQRT:
			case TRIM_SCALE:
			case TRUNC:
			case WIDTH_BUCKET:
			case RANDOM:
			case SETSEED:
			case ACOS:
			case ACOSD:
			case ASIN:
			case ASIND:
			case ATAN:
			case ATAND:
			case ATAN2:
			case ATAN2D:
			case COS:
			case COSD:
			case COT:
			case COTD:
			case SIN:
			case SIND:
			case TAN:
			case TAND:
			case SINH:
			case COSH:
			case TANH:
			case ASINH:
			case ACOSH:
			case ATANH:
			case BIT_LENGTH:
			case CHAR_LENGTH:
			case CHARACTER_LENGTH:
			case LOWER:
			case OCTET_LENGTH:
			case UPPER:
			case ASCII:
			case BTRIM:
			case CHR:
			case CONCAT:
			case CONCAT_WS:
			case FORMAT:
			case INITCAP:
			case LENGTH:
			case LPAD:
			case LTRIM:
			case MD5:
			case PARSE_IDENT:
			case PG_CLIENT_ENCODING:
			case QUOTE_IDENT:
			case QUOTE_LITERAL:
			case QUOTE_NULLABLE:
			case REGEXP_COUNT:
			case REGEXP_INSTR:
			case REGEXP_LIKE:
			case REGEXP_MATCH:
			case REGEXP_MATCHES:
			case REGEXP_REPLACE:
			case REGEXP_SPLIT_TO_ARRAY:
			case REGEXP_SPLIT_TO_TABLE:
			case REGEXP_SUBSTR:
			case REPEAT:
			case RPAD:
			case RTRIM:
			case SPLIT_PART:
			case STARTS_WITH:
			case STRING_TO_ARRAY:
			case STRING_TO_TABLE:
			case STRPOS:
			case SUBSTR:
			case TO_ASCII:
			case TO_HEX:
			case TRANSLATE:
			case UNISTR:
			case AGE:
			case CLOCK_TIMESTAMP:
			case DATE_BIN:
			case DATE_PART:
			case DATE_TRUNC:
			case ISFINITE:
			case JUSTIFY_DAYS:
			case JUSTIFY_HOURS:
			case JUSTIFY_INTERVAL:
			case MAKE_DATE:
			case MAKE_INTERVAL:
			case MAKE_TIME:
			case MAKE_TIMESTAMP:
			case MAKE_TIMESTAMPTZ:
			case NOW:
			case STATEMENT_TIMESTAMP:
			case TIMEOFDAY:
			case TRANSACTION_TIMESTAMP:
			case TO_TIMESTAMP:
			case TO_CHAR:
			case TO_DATE:
			case TO_NUMBER:
			case Identifier:
			case QuotedIdentifier:
			case UnicodeQuotedIdentifier:
			case StringConstant:
			case UnicodeEscapeStringConstant:
			case BeginDollarStringConstant:
			case BinaryStringConstant:
			case HexadecimalStringConstant:
			case Integral:
			case Numeric:
			case PLSQLVARIABLENAME:
			case PLSQLIDENTIFIER:
			case EscapeStringConstant:
				EnterOuterAlt(_localctx, 1);
				{
				State = 9591;
				b_expr(0);
				State = 9592;
				Match(IN_P);
				State = 9593;
				b_expr(0);
				}
				break;
			case CLOSE_PAREN:
				EnterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Substr_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public A_exprContext[] a_expr() {
			return GetRuleContexts<A_exprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public A_exprContext a_expr(int i) {
			return GetRuleContext<A_exprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FROM() { return GetToken(PostgreSQLParser.FROM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOR() { return GetToken(PostgreSQLParser.FOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SIMILAR() { return GetToken(PostgreSQLParser.SIMILAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ESCAPE() { return GetToken(PostgreSQLParser.ESCAPE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Expr_listContext expr_list() {
			return GetRuleContext<Expr_listContext>(0);
		}
		public Substr_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_substr_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterSubstr_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitSubstr_list(this);
		}
	}

	[RuleVersion(0)]
	public Substr_listContext substr_list() {
		Substr_listContext _localctx = new Substr_listContext(Context, State);
		EnterRule(_localctx, 1302, RULE_substr_list);
		try {
			State = 9625;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,628,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 9598;
				a_expr();
				State = 9599;
				Match(FROM);
				State = 9600;
				a_expr();
				State = 9601;
				Match(FOR);
				State = 9602;
				a_expr();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 9604;
				a_expr();
				State = 9605;
				Match(FOR);
				State = 9606;
				a_expr();
				State = 9607;
				Match(FROM);
				State = 9608;
				a_expr();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 9610;
				a_expr();
				State = 9611;
				Match(FROM);
				State = 9612;
				a_expr();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 9614;
				a_expr();
				State = 9615;
				Match(FOR);
				State = 9616;
				a_expr();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 9618;
				a_expr();
				State = 9619;
				Match(SIMILAR);
				State = 9620;
				a_expr();
				State = 9621;
				Match(ESCAPE);
				State = 9622;
				a_expr();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 9624;
				expr_list();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Trim_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public A_exprContext a_expr() {
			return GetRuleContext<A_exprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FROM() { return GetToken(PostgreSQLParser.FROM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Expr_listContext expr_list() {
			return GetRuleContext<Expr_listContext>(0);
		}
		public Trim_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_trim_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterTrim_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitTrim_list(this);
		}
	}

	[RuleVersion(0)]
	public Trim_listContext trim_list() {
		Trim_listContext _localctx = new Trim_listContext(Context, State);
		EnterRule(_localctx, 1304, RULE_trim_list);
		try {
			State = 9634;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,629,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 9627;
				a_expr();
				State = 9628;
				Match(FROM);
				State = 9629;
				expr_list();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 9631;
				Match(FROM);
				State = 9632;
				expr_list();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 9633;
				expr_list();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class In_exprContext : ParserRuleContext {
		public In_exprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_in_expr; } }
	 
		public In_exprContext() { }
		public virtual void CopyFrom(In_exprContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class In_expr_listContext : In_exprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAREN() { return GetToken(PostgreSQLParser.OPEN_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Expr_listContext expr_list() {
			return GetRuleContext<Expr_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAREN() { return GetToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public In_expr_listContext(In_exprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterIn_expr_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitIn_expr_list(this);
		}
	}
	public partial class In_expr_selectContext : In_exprContext {
		[System.Diagnostics.DebuggerNonUserCode] public Select_with_parensContext select_with_parens() {
			return GetRuleContext<Select_with_parensContext>(0);
		}
		public In_expr_selectContext(In_exprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterIn_expr_select(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitIn_expr_select(this);
		}
	}

	[RuleVersion(0)]
	public In_exprContext in_expr() {
		In_exprContext _localctx = new In_exprContext(Context, State);
		EnterRule(_localctx, 1306, RULE_in_expr);
		try {
			State = 9641;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,630,Context) ) {
			case 1:
				_localctx = new In_expr_selectContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 9636;
				select_with_parens();
				}
				break;
			case 2:
				_localctx = new In_expr_listContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 9637;
				Match(OPEN_PAREN);
				State = 9638;
				expr_list();
				State = 9639;
				Match(CLOSE_PAREN);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Case_exprContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CASE() { return GetToken(PostgreSQLParser.CASE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Case_argContext case_arg() {
			return GetRuleContext<Case_argContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public When_clause_listContext when_clause_list() {
			return GetRuleContext<When_clause_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Case_defaultContext case_default() {
			return GetRuleContext<Case_defaultContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END_P() { return GetToken(PostgreSQLParser.END_P, 0); }
		public Case_exprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_case_expr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterCase_expr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitCase_expr(this);
		}
	}

	[RuleVersion(0)]
	public Case_exprContext case_expr() {
		Case_exprContext _localctx = new Case_exprContext(Context, State);
		EnterRule(_localctx, 1308, RULE_case_expr);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 9643;
			Match(CASE);
			State = 9644;
			case_arg();
			State = 9645;
			when_clause_list();
			State = 9646;
			case_default();
			State = 9647;
			Match(END_P);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class When_clause_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public When_clauseContext[] when_clause() {
			return GetRuleContexts<When_clauseContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public When_clauseContext when_clause(int i) {
			return GetRuleContext<When_clauseContext>(i);
		}
		public When_clause_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_when_clause_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterWhen_clause_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitWhen_clause_list(this);
		}
	}

	[RuleVersion(0)]
	public When_clause_listContext when_clause_list() {
		When_clause_listContext _localctx = new When_clause_listContext(Context, State);
		EnterRule(_localctx, 1310, RULE_when_clause_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 9650;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 9649;
				when_clause();
				}
				}
				State = 9652;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==WHEN );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class When_clauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WHEN() { return GetToken(PostgreSQLParser.WHEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public A_exprContext[] a_expr() {
			return GetRuleContexts<A_exprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public A_exprContext a_expr(int i) {
			return GetRuleContext<A_exprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode THEN() { return GetToken(PostgreSQLParser.THEN, 0); }
		public When_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_when_clause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterWhen_clause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitWhen_clause(this);
		}
	}

	[RuleVersion(0)]
	public When_clauseContext when_clause() {
		When_clauseContext _localctx = new When_clauseContext(Context, State);
		EnterRule(_localctx, 1312, RULE_when_clause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 9654;
			Match(WHEN);
			State = 9655;
			a_expr();
			State = 9656;
			Match(THEN);
			State = 9657;
			a_expr();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Case_defaultContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ELSE() { return GetToken(PostgreSQLParser.ELSE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public A_exprContext a_expr() {
			return GetRuleContext<A_exprContext>(0);
		}
		public Case_defaultContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_case_default; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterCase_default(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitCase_default(this);
		}
	}

	[RuleVersion(0)]
	public Case_defaultContext case_default() {
		Case_defaultContext _localctx = new Case_defaultContext(Context, State);
		EnterRule(_localctx, 1314, RULE_case_default);
		try {
			State = 9662;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ELSE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 9659;
				Match(ELSE);
				State = 9660;
				a_expr();
				}
				break;
			case END_P:
				EnterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Case_argContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public A_exprContext a_expr() {
			return GetRuleContext<A_exprContext>(0);
		}
		public Case_argContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_case_arg; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterCase_arg(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitCase_arg(this);
		}
	}

	[RuleVersion(0)]
	public Case_argContext case_arg() {
		Case_argContext _localctx = new Case_argContext(Context, State);
		EnterRule(_localctx, 1316, RULE_case_arg);
		try {
			State = 9666;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case OPEN_PAREN:
			case PLUS:
			case MINUS:
			case PARAM:
			case Operator:
			case AND:
			case ARRAY:
			case CASE:
			case CAST:
			case COLLATE:
			case COLUMN:
			case CONSTRAINT:
			case CURRENT_CATALOG:
			case CURRENT_DATE:
			case CURRENT_ROLE:
			case CURRENT_TIME:
			case CURRENT_TIMESTAMP:
			case CURRENT_USER:
			case DEFAULT:
			case DO:
			case FALSE_P:
			case FETCH:
			case LOCALTIME:
			case LOCALTIMESTAMP:
			case NOT:
			case NULL_P:
			case SESSION_USER:
			case TABLE:
			case TRUE_P:
			case UNIQUE:
			case USER:
			case AUTHORIZATION:
			case BINARY:
			case COLLATION:
			case CONCURRENTLY:
			case CROSS:
			case CURRENT_SCHEMA:
			case FREEZE:
			case FULL:
			case ILIKE:
			case INNER_P:
			case IS:
			case ISNULL:
			case JOIN:
			case LEFT:
			case LIKE:
			case NATURAL:
			case NOTNULL:
			case OUTER_P:
			case OVER:
			case OVERLAPS:
			case RIGHT:
			case SIMILAR:
			case VERBOSE:
			case ABORT_P:
			case ABSOLUTE_P:
			case ACCESS:
			case ACTION:
			case ADD_P:
			case ADMIN:
			case AFTER:
			case AGGREGATE:
			case ALSO:
			case ALTER:
			case ALWAYS:
			case ASSERTION:
			case ASSIGNMENT:
			case AT:
			case ATTRIBUTE:
			case BACKWARD:
			case BEFORE:
			case BEGIN_P:
			case BY:
			case CACHE:
			case CALLED:
			case CASCADE:
			case CASCADED:
			case CATALOG:
			case CHAIN:
			case CHARACTERISTICS:
			case CHECKPOINT:
			case CLASS:
			case CLOSE:
			case CLUSTER:
			case COMMENT:
			case COMMENTS:
			case COMMIT:
			case COMMITTED:
			case CONFIGURATION:
			case CONNECTION:
			case CONSTRAINTS:
			case CONTENT_P:
			case CONTINUE_P:
			case CONVERSION_P:
			case COPY:
			case COST:
			case CSV:
			case CURSOR:
			case CYCLE:
			case DATA_P:
			case DATABASE:
			case DAY_P:
			case DEALLOCATE:
			case DECLARE:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE_P:
			case DELIMITER:
			case DELIMITERS:
			case DICTIONARY:
			case DISABLE_P:
			case DISCARD:
			case DOCUMENT_P:
			case DOMAIN_P:
			case DOUBLE_P:
			case DROP:
			case EACH:
			case ENABLE_P:
			case ENCODING:
			case ENCRYPTED:
			case ENUM_P:
			case ESCAPE:
			case EVENT:
			case EXCLUDE:
			case EXCLUDING:
			case EXCLUSIVE:
			case EXECUTE:
			case EXPLAIN:
			case EXTENSION:
			case EXTERNAL:
			case FAMILY:
			case FIRST_P:
			case FOLLOWING:
			case FORCE:
			case FORWARD:
			case FUNCTION:
			case FUNCTIONS:
			case GLOBAL:
			case GRANTED:
			case HANDLER:
			case HEADER_P:
			case HOLD:
			case HOUR_P:
			case IDENTITY_P:
			case IF_P:
			case IMMEDIATE:
			case IMMUTABLE:
			case IMPLICIT_P:
			case INCLUDING:
			case INCREMENT:
			case INDEX:
			case INDEXES:
			case INHERIT:
			case INHERITS:
			case INLINE_P:
			case INSENSITIVE:
			case INSERT:
			case INSTEAD:
			case INVOKER:
			case ISOLATION:
			case KEY:
			case LABEL:
			case LANGUAGE:
			case LARGE_P:
			case LAST_P:
			case LEAKPROOF:
			case LEVEL:
			case LISTEN:
			case LOAD:
			case LOCAL:
			case LOCATION:
			case LOCK_P:
			case MAPPING:
			case MATCH:
			case MATERIALIZED:
			case MAXVALUE:
			case MINUTE_P:
			case MINVALUE:
			case MODE:
			case MONTH_P:
			case MOVE:
			case NAME_P:
			case NAMES:
			case NEXT:
			case NO:
			case NOTHING:
			case NOTIFY:
			case NOWAIT:
			case NULLS_P:
			case OBJECT_P:
			case OF:
			case OFF:
			case OIDS:
			case OPERATOR:
			case OPTION:
			case OPTIONS:
			case OWNED:
			case OWNER:
			case PARSER:
			case PARTIAL:
			case PARTITION:
			case PASSING:
			case PASSWORD:
			case PLANS:
			case PRECEDING:
			case PREPARE:
			case PREPARED:
			case PRESERVE:
			case PRIOR:
			case PRIVILEGES:
			case PROCEDURAL:
			case PROCEDURE:
			case PROGRAM:
			case QUOTE:
			case RANGE:
			case READ:
			case REASSIGN:
			case RECHECK:
			case RECURSIVE:
			case REF:
			case REFRESH:
			case REINDEX:
			case RELATIVE_P:
			case RELEASE:
			case RENAME:
			case REPEATABLE:
			case REPLACE:
			case REPLICA:
			case RESET:
			case RESTART:
			case RESTRICT:
			case RETURNS:
			case REVOKE:
			case ROLE:
			case ROLLBACK:
			case ROWS:
			case RULE:
			case SAVEPOINT:
			case SCHEMA:
			case SCROLL:
			case SEARCH:
			case SECOND_P:
			case SECURITY:
			case SEQUENCE:
			case SEQUENCES:
			case SERIALIZABLE:
			case SERVER:
			case SESSION:
			case SET:
			case SHARE:
			case SHOW:
			case SIMPLE:
			case SNAPSHOT:
			case STABLE:
			case STANDALONE_P:
			case START:
			case STATEMENT:
			case STATISTICS:
			case STDIN:
			case STDOUT:
			case STORAGE:
			case STRICT_P:
			case STRIP_P:
			case SYSID:
			case SYSTEM_P:
			case TABLES:
			case TABLESPACE:
			case TEMP:
			case TEMPLATE:
			case TEMPORARY:
			case TEXT_P:
			case TRANSACTION:
			case TRIGGER:
			case TRUNCATE:
			case TRUSTED:
			case TYPE_P:
			case TYPES_P:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNENCRYPTED:
			case UNKNOWN:
			case UNLISTEN:
			case UNLOGGED:
			case UNTIL:
			case UPDATE:
			case VACUUM:
			case VALID:
			case VALIDATE:
			case VALIDATOR:
			case VARYING:
			case VERSION_P:
			case VIEW:
			case VOLATILE:
			case WHITESPACE_P:
			case WITHOUT:
			case WORK:
			case WRAPPER:
			case WRITE:
			case XML_P:
			case YEAR_P:
			case YES_P:
			case ZONE:
			case BETWEEN:
			case BIGINT:
			case BIT:
			case BOOLEAN_P:
			case CHAR_P:
			case CHARACTER:
			case COALESCE:
			case DEC:
			case DECIMAL_P:
			case EXISTS:
			case EXTRACT:
			case FLOAT_P:
			case GREATEST:
			case INOUT:
			case INT_P:
			case INTEGER:
			case INTERVAL:
			case LEAST:
			case NATIONAL:
			case NCHAR:
			case NONE:
			case NULLIF:
			case NUMERIC:
			case OVERLAY:
			case POSITION:
			case PRECISION:
			case REAL:
			case ROW:
			case SETOF:
			case SMALLINT:
			case SUBSTRING:
			case TIME:
			case TIMESTAMP:
			case TREAT:
			case TRIM:
			case VALUES:
			case VARCHAR:
			case XMLATTRIBUTES:
			case XMLCOMMENT:
			case XMLAGG:
			case XML_IS_WELL_FORMED:
			case XML_IS_WELL_FORMED_DOCUMENT:
			case XML_IS_WELL_FORMED_CONTENT:
			case XPATH:
			case XPATH_EXISTS:
			case XMLCONCAT:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLPARSE:
			case XMLPI:
			case XMLROOT:
			case XMLSERIALIZE:
			case CALL:
			case CURRENT_P:
			case ATTACH:
			case DETACH:
			case EXPRESSION:
			case GENERATED:
			case LOGGED:
			case STORED:
			case INCLUDE:
			case ROUTINE:
			case TRANSFORM:
			case IMPORT_P:
			case POLICY:
			case METHOD:
			case REFERENCING:
			case NEW:
			case OLD:
			case VALUE_P:
			case SUBSCRIPTION:
			case PUBLICATION:
			case OUT_P:
			case ROUTINES:
			case SCHEMAS:
			case PROCEDURES:
			case INPUT_P:
			case SUPPORT:
			case PARALLEL:
			case SQL_P:
			case DEPENDS:
			case OVERRIDING:
			case CONFLICT:
			case SKIP_P:
			case LOCKED:
			case TIES:
			case ROLLUP:
			case CUBE:
			case GROUPING:
			case SETS:
			case TABLESAMPLE:
			case ORDINALITY:
			case XMLTABLE:
			case COLUMNS:
			case XMLNAMESPACES:
			case ROWTYPE:
			case NORMALIZED:
			case WITHIN:
			case FILTER:
			case GROUPS:
			case OTHERS:
			case NFC:
			case NFD:
			case NFKC:
			case NFKD:
			case UESCAPE:
			case VIEWS:
			case NORMALIZE:
			case DUMP:
			case PRINT_STRICT_PARAMS:
			case VARIABLE_CONFLICT:
			case ERROR:
			case USE_VARIABLE:
			case USE_COLUMN:
			case ALIAS:
			case CONSTANT:
			case PERFORM:
			case GET:
			case DIAGNOSTICS:
			case STACKED:
			case ELSIF:
			case REVERSE:
			case SLICE:
			case EXIT:
			case RETURN:
			case QUERY:
			case RAISE:
			case SQLSTATE:
			case DEBUG:
			case LOG:
			case INFO:
			case NOTICE:
			case WARNING:
			case EXCEPTION:
			case ASSERT:
			case OPEN:
			case ABS:
			case CBRT:
			case CEIL:
			case CEILING:
			case DEGREES:
			case DIV:
			case EXP:
			case FACTORIAL:
			case FLOOR:
			case GCD:
			case LCM:
			case LN:
			case LOG10:
			case MIN_SCALE:
			case MOD:
			case PI:
			case POWER:
			case RADIANS:
			case ROUND:
			case SCALE:
			case SIGN:
			case SQRT:
			case TRIM_SCALE:
			case TRUNC:
			case WIDTH_BUCKET:
			case RANDOM:
			case SETSEED:
			case ACOS:
			case ACOSD:
			case ASIN:
			case ASIND:
			case ATAN:
			case ATAND:
			case ATAN2:
			case ATAN2D:
			case COS:
			case COSD:
			case COT:
			case COTD:
			case SIN:
			case SIND:
			case TAN:
			case TAND:
			case SINH:
			case COSH:
			case TANH:
			case ASINH:
			case ACOSH:
			case ATANH:
			case BIT_LENGTH:
			case CHAR_LENGTH:
			case CHARACTER_LENGTH:
			case LOWER:
			case OCTET_LENGTH:
			case UPPER:
			case ASCII:
			case BTRIM:
			case CHR:
			case CONCAT:
			case CONCAT_WS:
			case FORMAT:
			case INITCAP:
			case LENGTH:
			case LPAD:
			case LTRIM:
			case MD5:
			case PARSE_IDENT:
			case PG_CLIENT_ENCODING:
			case QUOTE_IDENT:
			case QUOTE_LITERAL:
			case QUOTE_NULLABLE:
			case REGEXP_COUNT:
			case REGEXP_INSTR:
			case REGEXP_LIKE:
			case REGEXP_MATCH:
			case REGEXP_MATCHES:
			case REGEXP_REPLACE:
			case REGEXP_SPLIT_TO_ARRAY:
			case REGEXP_SPLIT_TO_TABLE:
			case REGEXP_SUBSTR:
			case REPEAT:
			case RPAD:
			case RTRIM:
			case SPLIT_PART:
			case STARTS_WITH:
			case STRING_TO_ARRAY:
			case STRING_TO_TABLE:
			case STRPOS:
			case SUBSTR:
			case TO_ASCII:
			case TO_HEX:
			case TRANSLATE:
			case UNISTR:
			case AGE:
			case CLOCK_TIMESTAMP:
			case DATE_BIN:
			case DATE_PART:
			case DATE_TRUNC:
			case ISFINITE:
			case JUSTIFY_DAYS:
			case JUSTIFY_HOURS:
			case JUSTIFY_INTERVAL:
			case MAKE_DATE:
			case MAKE_INTERVAL:
			case MAKE_TIME:
			case MAKE_TIMESTAMP:
			case MAKE_TIMESTAMPTZ:
			case NOW:
			case STATEMENT_TIMESTAMP:
			case TIMEOFDAY:
			case TRANSACTION_TIMESTAMP:
			case TO_TIMESTAMP:
			case TO_CHAR:
			case TO_DATE:
			case TO_NUMBER:
			case Identifier:
			case QuotedIdentifier:
			case UnicodeQuotedIdentifier:
			case StringConstant:
			case UnicodeEscapeStringConstant:
			case BeginDollarStringConstant:
			case BinaryStringConstant:
			case HexadecimalStringConstant:
			case Integral:
			case Numeric:
			case PLSQLVARIABLENAME:
			case PLSQLIDENTIFIER:
			case EscapeStringConstant:
				EnterOuterAlt(_localctx, 1);
				{
				State = 9664;
				a_expr();
				}
				break;
			case WHEN:
				EnterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ColumnrefContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ColidContext colid() {
			return GetRuleContext<ColidContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IndirectionContext indirection() {
			return GetRuleContext<IndirectionContext>(0);
		}
		public ColumnrefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_columnref; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterColumnref(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitColumnref(this);
		}
	}

	[RuleVersion(0)]
	public ColumnrefContext columnref() {
		ColumnrefContext _localctx = new ColumnrefContext(Context, State);
		EnterRule(_localctx, 1318, RULE_columnref);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 9668;
			colid();
			State = 9670;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,634,Context) ) {
			case 1:
				{
				State = 9669;
				indirection();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Indirection_elContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT() { return GetToken(PostgreSQLParser.DOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Attr_nameContext attr_name() {
			return GetRuleContext<Attr_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STAR() { return GetToken(PostgreSQLParser.STAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_BRACKET() { return GetToken(PostgreSQLParser.OPEN_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_BRACKET() { return GetToken(PostgreSQLParser.CLOSE_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public A_exprContext a_expr() {
			return GetRuleContext<A_exprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Opt_slice_boundContext[] opt_slice_bound() {
			return GetRuleContexts<Opt_slice_boundContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Opt_slice_boundContext opt_slice_bound(int i) {
			return GetRuleContext<Opt_slice_boundContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(PostgreSQLParser.COLON, 0); }
		public Indirection_elContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_indirection_el; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterIndirection_el(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitIndirection_el(this);
		}
	}

	[RuleVersion(0)]
	public Indirection_elContext indirection_el() {
		Indirection_elContext _localctx = new Indirection_elContext(Context, State);
		EnterRule(_localctx, 1320, RULE_indirection_el);
		try {
			State = 9687;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case DOT:
				EnterOuterAlt(_localctx, 1);
				{
				State = 9672;
				Match(DOT);
				State = 9675;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case ALL:
				case ANALYSE:
				case ANALYZE:
				case AND:
				case ANY:
				case ARRAY:
				case AS:
				case ASC:
				case ASYMMETRIC:
				case BOTH:
				case CASE:
				case CAST:
				case CHECK:
				case COLLATE:
				case COLUMN:
				case CONSTRAINT:
				case CREATE:
				case CURRENT_CATALOG:
				case CURRENT_DATE:
				case CURRENT_ROLE:
				case CURRENT_TIME:
				case CURRENT_TIMESTAMP:
				case CURRENT_USER:
				case DEFAULT:
				case DEFERRABLE:
				case DESC:
				case DISTINCT:
				case DO:
				case ELSE:
				case EXCEPT:
				case FALSE_P:
				case FETCH:
				case FOR:
				case FOREIGN:
				case FROM:
				case GRANT:
				case GROUP_P:
				case HAVING:
				case IN_P:
				case INITIALLY:
				case INTERSECT:
				case LATERAL_P:
				case LEADING:
				case LIMIT:
				case LOCALTIME:
				case LOCALTIMESTAMP:
				case NOT:
				case NULL_P:
				case OFFSET:
				case ON:
				case ONLY:
				case OR:
				case ORDER:
				case PLACING:
				case PRIMARY:
				case REFERENCES:
				case RETURNING:
				case SELECT:
				case SESSION_USER:
				case SOME:
				case SYMMETRIC:
				case TABLE:
				case THEN:
				case TO:
				case TRAILING:
				case TRUE_P:
				case UNION:
				case UNIQUE:
				case USER:
				case USING:
				case VARIADIC:
				case WHEN:
				case WHERE:
				case WINDOW:
				case WITH:
				case AUTHORIZATION:
				case BINARY:
				case COLLATION:
				case CONCURRENTLY:
				case CROSS:
				case CURRENT_SCHEMA:
				case FREEZE:
				case FULL:
				case ILIKE:
				case INNER_P:
				case IS:
				case ISNULL:
				case JOIN:
				case LIKE:
				case NATURAL:
				case NOTNULL:
				case OUTER_P:
				case OVER:
				case OVERLAPS:
				case SIMILAR:
				case VERBOSE:
				case ABORT_P:
				case ABSOLUTE_P:
				case ACCESS:
				case ACTION:
				case ADD_P:
				case ADMIN:
				case AFTER:
				case AGGREGATE:
				case ALSO:
				case ALTER:
				case ALWAYS:
				case ASSERTION:
				case ASSIGNMENT:
				case AT:
				case ATTRIBUTE:
				case BACKWARD:
				case BEFORE:
				case BEGIN_P:
				case BY:
				case CACHE:
				case CALLED:
				case CASCADE:
				case CASCADED:
				case CATALOG:
				case CHAIN:
				case CHARACTERISTICS:
				case CHECKPOINT:
				case CLASS:
				case CLOSE:
				case CLUSTER:
				case COMMENT:
				case COMMENTS:
				case COMMIT:
				case COMMITTED:
				case CONFIGURATION:
				case CONNECTION:
				case CONSTRAINTS:
				case CONTENT_P:
				case CONTINUE_P:
				case CONVERSION_P:
				case COPY:
				case COST:
				case CSV:
				case CURSOR:
				case CYCLE:
				case DATA_P:
				case DATABASE:
				case DAY_P:
				case DEALLOCATE:
				case DECLARE:
				case DEFAULTS:
				case DEFERRED:
				case DEFINER:
				case DELETE_P:
				case DELIMITER:
				case DELIMITERS:
				case DICTIONARY:
				case DISABLE_P:
				case DISCARD:
				case DOCUMENT_P:
				case DOMAIN_P:
				case DOUBLE_P:
				case DROP:
				case EACH:
				case ENABLE_P:
				case ENCODING:
				case ENCRYPTED:
				case ENUM_P:
				case ESCAPE:
				case EVENT:
				case EXCLUDE:
				case EXCLUDING:
				case EXCLUSIVE:
				case EXECUTE:
				case EXPLAIN:
				case EXTENSION:
				case EXTERNAL:
				case FAMILY:
				case FIRST_P:
				case FOLLOWING:
				case FORCE:
				case FORWARD:
				case FUNCTION:
				case FUNCTIONS:
				case GLOBAL:
				case GRANTED:
				case HANDLER:
				case HEADER_P:
				case HOLD:
				case HOUR_P:
				case IDENTITY_P:
				case IF_P:
				case IMMEDIATE:
				case IMMUTABLE:
				case IMPLICIT_P:
				case INCLUDING:
				case INCREMENT:
				case INDEX:
				case INDEXES:
				case INHERIT:
				case INHERITS:
				case INLINE_P:
				case INSENSITIVE:
				case INSERT:
				case INSTEAD:
				case INVOKER:
				case ISOLATION:
				case KEY:
				case LABEL:
				case LANGUAGE:
				case LARGE_P:
				case LAST_P:
				case LEAKPROOF:
				case LEVEL:
				case LISTEN:
				case LOAD:
				case LOCAL:
				case LOCATION:
				case LOCK_P:
				case MAPPING:
				case MATCH:
				case MATERIALIZED:
				case MAXVALUE:
				case MINUTE_P:
				case MINVALUE:
				case MODE:
				case MONTH_P:
				case MOVE:
				case NAME_P:
				case NAMES:
				case NEXT:
				case NO:
				case NOTHING:
				case NOTIFY:
				case NOWAIT:
				case NULLS_P:
				case OBJECT_P:
				case OF:
				case OFF:
				case OIDS:
				case OPERATOR:
				case OPTION:
				case OPTIONS:
				case OWNED:
				case OWNER:
				case PARSER:
				case PARTIAL:
				case PARTITION:
				case PASSING:
				case PASSWORD:
				case PLANS:
				case PRECEDING:
				case PREPARE:
				case PREPARED:
				case PRESERVE:
				case PRIOR:
				case PRIVILEGES:
				case PROCEDURAL:
				case PROCEDURE:
				case PROGRAM:
				case QUOTE:
				case RANGE:
				case READ:
				case REASSIGN:
				case RECHECK:
				case RECURSIVE:
				case REF:
				case REFRESH:
				case REINDEX:
				case RELATIVE_P:
				case RELEASE:
				case RENAME:
				case REPEATABLE:
				case REPLACE:
				case REPLICA:
				case RESET:
				case RESTART:
				case RESTRICT:
				case RETURNS:
				case REVOKE:
				case ROLE:
				case ROLLBACK:
				case ROWS:
				case RULE:
				case SAVEPOINT:
				case SCHEMA:
				case SCROLL:
				case SEARCH:
				case SECOND_P:
				case SECURITY:
				case SEQUENCE:
				case SEQUENCES:
				case SERIALIZABLE:
				case SERVER:
				case SESSION:
				case SET:
				case SHARE:
				case SHOW:
				case SIMPLE:
				case SNAPSHOT:
				case STABLE:
				case STANDALONE_P:
				case START:
				case STATEMENT:
				case STATISTICS:
				case STDIN:
				case STDOUT:
				case STORAGE:
				case STRICT_P:
				case STRIP_P:
				case SYSID:
				case SYSTEM_P:
				case TABLES:
				case TABLESPACE:
				case TEMP:
				case TEMPLATE:
				case TEMPORARY:
				case TEXT_P:
				case TRANSACTION:
				case TRIGGER:
				case TRUNCATE:
				case TRUSTED:
				case TYPE_P:
				case TYPES_P:
				case UNBOUNDED:
				case UNCOMMITTED:
				case UNENCRYPTED:
				case UNKNOWN:
				case UNLISTEN:
				case UNLOGGED:
				case UNTIL:
				case UPDATE:
				case VACUUM:
				case VALID:
				case VALIDATE:
				case VALIDATOR:
				case VARYING:
				case VERSION_P:
				case VIEW:
				case VOLATILE:
				case WHITESPACE_P:
				case WITHOUT:
				case WORK:
				case WRAPPER:
				case WRITE:
				case XML_P:
				case YEAR_P:
				case YES_P:
				case ZONE:
				case BETWEEN:
				case BIGINT:
				case BIT:
				case BOOLEAN_P:
				case CHAR_P:
				case CHARACTER:
				case COALESCE:
				case DEC:
				case DECIMAL_P:
				case EXISTS:
				case EXTRACT:
				case FLOAT_P:
				case GREATEST:
				case INOUT:
				case INT_P:
				case INTEGER:
				case INTERVAL:
				case LEAST:
				case NATIONAL:
				case NCHAR:
				case NONE:
				case NULLIF:
				case NUMERIC:
				case OVERLAY:
				case POSITION:
				case PRECISION:
				case REAL:
				case ROW:
				case SETOF:
				case SMALLINT:
				case SUBSTRING:
				case TIME:
				case TIMESTAMP:
				case TREAT:
				case TRIM:
				case VALUES:
				case VARCHAR:
				case XMLATTRIBUTES:
				case XMLCOMMENT:
				case XMLAGG:
				case XML_IS_WELL_FORMED:
				case XML_IS_WELL_FORMED_DOCUMENT:
				case XML_IS_WELL_FORMED_CONTENT:
				case XPATH:
				case XPATH_EXISTS:
				case XMLCONCAT:
				case XMLELEMENT:
				case XMLEXISTS:
				case XMLFOREST:
				case XMLPARSE:
				case XMLPI:
				case XMLROOT:
				case XMLSERIALIZE:
				case CALL:
				case CURRENT_P:
				case ATTACH:
				case DETACH:
				case EXPRESSION:
				case GENERATED:
				case LOGGED:
				case STORED:
				case INCLUDE:
				case ROUTINE:
				case TRANSFORM:
				case IMPORT_P:
				case POLICY:
				case METHOD:
				case REFERENCING:
				case NEW:
				case OLD:
				case VALUE_P:
				case SUBSCRIPTION:
				case PUBLICATION:
				case OUT_P:
				case END_P:
				case ROUTINES:
				case SCHEMAS:
				case PROCEDURES:
				case INPUT_P:
				case SUPPORT:
				case PARALLEL:
				case SQL_P:
				case DEPENDS:
				case OVERRIDING:
				case CONFLICT:
				case SKIP_P:
				case LOCKED:
				case TIES:
				case ROLLUP:
				case CUBE:
				case GROUPING:
				case SETS:
				case TABLESAMPLE:
				case ORDINALITY:
				case XMLTABLE:
				case COLUMNS:
				case XMLNAMESPACES:
				case ROWTYPE:
				case NORMALIZED:
				case WITHIN:
				case FILTER:
				case GROUPS:
				case OTHERS:
				case NFC:
				case NFD:
				case NFKC:
				case NFKD:
				case UESCAPE:
				case VIEWS:
				case NORMALIZE:
				case DUMP:
				case PRINT_STRICT_PARAMS:
				case VARIABLE_CONFLICT:
				case ERROR:
				case USE_VARIABLE:
				case USE_COLUMN:
				case ALIAS:
				case CONSTANT:
				case PERFORM:
				case GET:
				case DIAGNOSTICS:
				case STACKED:
				case ELSIF:
				case REVERSE:
				case SLICE:
				case EXIT:
				case RETURN:
				case QUERY:
				case RAISE:
				case SQLSTATE:
				case DEBUG:
				case LOG:
				case INFO:
				case NOTICE:
				case WARNING:
				case EXCEPTION:
				case ASSERT:
				case OPEN:
				case ABS:
				case CBRT:
				case CEIL:
				case CEILING:
				case DEGREES:
				case DIV:
				case EXP:
				case FACTORIAL:
				case FLOOR:
				case GCD:
				case LCM:
				case LN:
				case LOG10:
				case MIN_SCALE:
				case MOD:
				case PI:
				case POWER:
				case RADIANS:
				case ROUND:
				case SCALE:
				case SIGN:
				case SQRT:
				case TRIM_SCALE:
				case TRUNC:
				case WIDTH_BUCKET:
				case RANDOM:
				case SETSEED:
				case ACOS:
				case ACOSD:
				case ASIN:
				case ASIND:
				case ATAN:
				case ATAND:
				case ATAN2:
				case ATAN2D:
				case COS:
				case COSD:
				case COT:
				case COTD:
				case SIN:
				case SIND:
				case TAN:
				case TAND:
				case SINH:
				case COSH:
				case TANH:
				case ASINH:
				case ACOSH:
				case ATANH:
				case BIT_LENGTH:
				case CHAR_LENGTH:
				case CHARACTER_LENGTH:
				case LOWER:
				case OCTET_LENGTH:
				case UPPER:
				case ASCII:
				case BTRIM:
				case CHR:
				case CONCAT:
				case CONCAT_WS:
				case FORMAT:
				case INITCAP:
				case LENGTH:
				case LPAD:
				case LTRIM:
				case MD5:
				case PARSE_IDENT:
				case PG_CLIENT_ENCODING:
				case QUOTE_IDENT:
				case QUOTE_LITERAL:
				case QUOTE_NULLABLE:
				case REGEXP_COUNT:
				case REGEXP_INSTR:
				case REGEXP_LIKE:
				case REGEXP_MATCH:
				case REGEXP_MATCHES:
				case REGEXP_REPLACE:
				case REGEXP_SPLIT_TO_ARRAY:
				case REGEXP_SPLIT_TO_TABLE:
				case REGEXP_SUBSTR:
				case REPEAT:
				case RPAD:
				case RTRIM:
				case SPLIT_PART:
				case STARTS_WITH:
				case STRING_TO_ARRAY:
				case STRING_TO_TABLE:
				case STRPOS:
				case SUBSTR:
				case TO_ASCII:
				case TO_HEX:
				case TRANSLATE:
				case UNISTR:
				case AGE:
				case CLOCK_TIMESTAMP:
				case DATE_BIN:
				case DATE_PART:
				case DATE_TRUNC:
				case ISFINITE:
				case JUSTIFY_DAYS:
				case JUSTIFY_HOURS:
				case JUSTIFY_INTERVAL:
				case MAKE_DATE:
				case MAKE_INTERVAL:
				case MAKE_TIME:
				case MAKE_TIMESTAMP:
				case MAKE_TIMESTAMPTZ:
				case NOW:
				case STATEMENT_TIMESTAMP:
				case TIMEOFDAY:
				case TRANSACTION_TIMESTAMP:
				case TO_TIMESTAMP:
				case TO_CHAR:
				case TO_DATE:
				case TO_NUMBER:
				case Identifier:
				case QuotedIdentifier:
				case UnicodeQuotedIdentifier:
				case PLSQLVARIABLENAME:
				case PLSQLIDENTIFIER:
					{
					State = 9673;
					attr_name();
					}
					break;
				case STAR:
					{
					State = 9674;
					Match(STAR);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case OPEN_BRACKET:
				EnterOuterAlt(_localctx, 2);
				{
				State = 9677;
				Match(OPEN_BRACKET);
				State = 9683;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,636,Context) ) {
				case 1:
					{
					State = 9678;
					a_expr();
					}
					break;
				case 2:
					{
					State = 9679;
					opt_slice_bound();
					State = 9680;
					Match(COLON);
					State = 9681;
					opt_slice_bound();
					}
					break;
				}
				State = 9685;
				Match(CLOSE_BRACKET);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Opt_slice_boundContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public A_exprContext a_expr() {
			return GetRuleContext<A_exprContext>(0);
		}
		public Opt_slice_boundContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_opt_slice_bound; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterOpt_slice_bound(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitOpt_slice_bound(this);
		}
	}

	[RuleVersion(0)]
	public Opt_slice_boundContext opt_slice_bound() {
		Opt_slice_boundContext _localctx = new Opt_slice_boundContext(Context, State);
		EnterRule(_localctx, 1322, RULE_opt_slice_bound);
		try {
			State = 9691;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case OPEN_PAREN:
			case PLUS:
			case MINUS:
			case PARAM:
			case Operator:
			case AND:
			case ARRAY:
			case CASE:
			case CAST:
			case COLLATE:
			case COLUMN:
			case CONSTRAINT:
			case CURRENT_CATALOG:
			case CURRENT_DATE:
			case CURRENT_ROLE:
			case CURRENT_TIME:
			case CURRENT_TIMESTAMP:
			case CURRENT_USER:
			case DEFAULT:
			case DO:
			case FALSE_P:
			case FETCH:
			case LOCALTIME:
			case LOCALTIMESTAMP:
			case NOT:
			case NULL_P:
			case SESSION_USER:
			case TABLE:
			case TRUE_P:
			case UNIQUE:
			case USER:
			case AUTHORIZATION:
			case BINARY:
			case COLLATION:
			case CONCURRENTLY:
			case CROSS:
			case CURRENT_SCHEMA:
			case FREEZE:
			case FULL:
			case ILIKE:
			case INNER_P:
			case IS:
			case ISNULL:
			case JOIN:
			case LEFT:
			case LIKE:
			case NATURAL:
			case NOTNULL:
			case OUTER_P:
			case OVER:
			case OVERLAPS:
			case RIGHT:
			case SIMILAR:
			case VERBOSE:
			case ABORT_P:
			case ABSOLUTE_P:
			case ACCESS:
			case ACTION:
			case ADD_P:
			case ADMIN:
			case AFTER:
			case AGGREGATE:
			case ALSO:
			case ALTER:
			case ALWAYS:
			case ASSERTION:
			case ASSIGNMENT:
			case AT:
			case ATTRIBUTE:
			case BACKWARD:
			case BEFORE:
			case BEGIN_P:
			case BY:
			case CACHE:
			case CALLED:
			case CASCADE:
			case CASCADED:
			case CATALOG:
			case CHAIN:
			case CHARACTERISTICS:
			case CHECKPOINT:
			case CLASS:
			case CLOSE:
			case CLUSTER:
			case COMMENT:
			case COMMENTS:
			case COMMIT:
			case COMMITTED:
			case CONFIGURATION:
			case CONNECTION:
			case CONSTRAINTS:
			case CONTENT_P:
			case CONTINUE_P:
			case CONVERSION_P:
			case COPY:
			case COST:
			case CSV:
			case CURSOR:
			case CYCLE:
			case DATA_P:
			case DATABASE:
			case DAY_P:
			case DEALLOCATE:
			case DECLARE:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE_P:
			case DELIMITER:
			case DELIMITERS:
			case DICTIONARY:
			case DISABLE_P:
			case DISCARD:
			case DOCUMENT_P:
			case DOMAIN_P:
			case DOUBLE_P:
			case DROP:
			case EACH:
			case ENABLE_P:
			case ENCODING:
			case ENCRYPTED:
			case ENUM_P:
			case ESCAPE:
			case EVENT:
			case EXCLUDE:
			case EXCLUDING:
			case EXCLUSIVE:
			case EXECUTE:
			case EXPLAIN:
			case EXTENSION:
			case EXTERNAL:
			case FAMILY:
			case FIRST_P:
			case FOLLOWING:
			case FORCE:
			case FORWARD:
			case FUNCTION:
			case FUNCTIONS:
			case GLOBAL:
			case GRANTED:
			case HANDLER:
			case HEADER_P:
			case HOLD:
			case HOUR_P:
			case IDENTITY_P:
			case IF_P:
			case IMMEDIATE:
			case IMMUTABLE:
			case IMPLICIT_P:
			case INCLUDING:
			case INCREMENT:
			case INDEX:
			case INDEXES:
			case INHERIT:
			case INHERITS:
			case INLINE_P:
			case INSENSITIVE:
			case INSERT:
			case INSTEAD:
			case INVOKER:
			case ISOLATION:
			case KEY:
			case LABEL:
			case LANGUAGE:
			case LARGE_P:
			case LAST_P:
			case LEAKPROOF:
			case LEVEL:
			case LISTEN:
			case LOAD:
			case LOCAL:
			case LOCATION:
			case LOCK_P:
			case MAPPING:
			case MATCH:
			case MATERIALIZED:
			case MAXVALUE:
			case MINUTE_P:
			case MINVALUE:
			case MODE:
			case MONTH_P:
			case MOVE:
			case NAME_P:
			case NAMES:
			case NEXT:
			case NO:
			case NOTHING:
			case NOTIFY:
			case NOWAIT:
			case NULLS_P:
			case OBJECT_P:
			case OF:
			case OFF:
			case OIDS:
			case OPERATOR:
			case OPTION:
			case OPTIONS:
			case OWNED:
			case OWNER:
			case PARSER:
			case PARTIAL:
			case PARTITION:
			case PASSING:
			case PASSWORD:
			case PLANS:
			case PRECEDING:
			case PREPARE:
			case PREPARED:
			case PRESERVE:
			case PRIOR:
			case PRIVILEGES:
			case PROCEDURAL:
			case PROCEDURE:
			case PROGRAM:
			case QUOTE:
			case RANGE:
			case READ:
			case REASSIGN:
			case RECHECK:
			case RECURSIVE:
			case REF:
			case REFRESH:
			case REINDEX:
			case RELATIVE_P:
			case RELEASE:
			case RENAME:
			case REPEATABLE:
			case REPLACE:
			case REPLICA:
			case RESET:
			case RESTART:
			case RESTRICT:
			case RETURNS:
			case REVOKE:
			case ROLE:
			case ROLLBACK:
			case ROWS:
			case RULE:
			case SAVEPOINT:
			case SCHEMA:
			case SCROLL:
			case SEARCH:
			case SECOND_P:
			case SECURITY:
			case SEQUENCE:
			case SEQUENCES:
			case SERIALIZABLE:
			case SERVER:
			case SESSION:
			case SET:
			case SHARE:
			case SHOW:
			case SIMPLE:
			case SNAPSHOT:
			case STABLE:
			case STANDALONE_P:
			case START:
			case STATEMENT:
			case STATISTICS:
			case STDIN:
			case STDOUT:
			case STORAGE:
			case STRICT_P:
			case STRIP_P:
			case SYSID:
			case SYSTEM_P:
			case TABLES:
			case TABLESPACE:
			case TEMP:
			case TEMPLATE:
			case TEMPORARY:
			case TEXT_P:
			case TRANSACTION:
			case TRIGGER:
			case TRUNCATE:
			case TRUSTED:
			case TYPE_P:
			case TYPES_P:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNENCRYPTED:
			case UNKNOWN:
			case UNLISTEN:
			case UNLOGGED:
			case UNTIL:
			case UPDATE:
			case VACUUM:
			case VALID:
			case VALIDATE:
			case VALIDATOR:
			case VARYING:
			case VERSION_P:
			case VIEW:
			case VOLATILE:
			case WHITESPACE_P:
			case WITHOUT:
			case WORK:
			case WRAPPER:
			case WRITE:
			case XML_P:
			case YEAR_P:
			case YES_P:
			case ZONE:
			case BETWEEN:
			case BIGINT:
			case BIT:
			case BOOLEAN_P:
			case CHAR_P:
			case CHARACTER:
			case COALESCE:
			case DEC:
			case DECIMAL_P:
			case EXISTS:
			case EXTRACT:
			case FLOAT_P:
			case GREATEST:
			case INOUT:
			case INT_P:
			case INTEGER:
			case INTERVAL:
			case LEAST:
			case NATIONAL:
			case NCHAR:
			case NONE:
			case NULLIF:
			case NUMERIC:
			case OVERLAY:
			case POSITION:
			case PRECISION:
			case REAL:
			case ROW:
			case SETOF:
			case SMALLINT:
			case SUBSTRING:
			case TIME:
			case TIMESTAMP:
			case TREAT:
			case TRIM:
			case VALUES:
			case VARCHAR:
			case XMLATTRIBUTES:
			case XMLCOMMENT:
			case XMLAGG:
			case XML_IS_WELL_FORMED:
			case XML_IS_WELL_FORMED_DOCUMENT:
			case XML_IS_WELL_FORMED_CONTENT:
			case XPATH:
			case XPATH_EXISTS:
			case XMLCONCAT:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLPARSE:
			case XMLPI:
			case XMLROOT:
			case XMLSERIALIZE:
			case CALL:
			case CURRENT_P:
			case ATTACH:
			case DETACH:
			case EXPRESSION:
			case GENERATED:
			case LOGGED:
			case STORED:
			case INCLUDE:
			case ROUTINE:
			case TRANSFORM:
			case IMPORT_P:
			case POLICY:
			case METHOD:
			case REFERENCING:
			case NEW:
			case OLD:
			case VALUE_P:
			case SUBSCRIPTION:
			case PUBLICATION:
			case OUT_P:
			case ROUTINES:
			case SCHEMAS:
			case PROCEDURES:
			case INPUT_P:
			case SUPPORT:
			case PARALLEL:
			case SQL_P:
			case DEPENDS:
			case OVERRIDING:
			case CONFLICT:
			case SKIP_P:
			case LOCKED:
			case TIES:
			case ROLLUP:
			case CUBE:
			case GROUPING:
			case SETS:
			case TABLESAMPLE:
			case ORDINALITY:
			case XMLTABLE:
			case COLUMNS:
			case XMLNAMESPACES:
			case ROWTYPE:
			case NORMALIZED:
			case WITHIN:
			case FILTER:
			case GROUPS:
			case OTHERS:
			case NFC:
			case NFD:
			case NFKC:
			case NFKD:
			case UESCAPE:
			case VIEWS:
			case NORMALIZE:
			case DUMP:
			case PRINT_STRICT_PARAMS:
			case VARIABLE_CONFLICT:
			case ERROR:
			case USE_VARIABLE:
			case USE_COLUMN:
			case ALIAS:
			case CONSTANT:
			case PERFORM:
			case GET:
			case DIAGNOSTICS:
			case STACKED:
			case ELSIF:
			case REVERSE:
			case SLICE:
			case EXIT:
			case RETURN:
			case QUERY:
			case RAISE:
			case SQLSTATE:
			case DEBUG:
			case LOG:
			case INFO:
			case NOTICE:
			case WARNING:
			case EXCEPTION:
			case ASSERT:
			case OPEN:
			case ABS:
			case CBRT:
			case CEIL:
			case CEILING:
			case DEGREES:
			case DIV:
			case EXP:
			case FACTORIAL:
			case FLOOR:
			case GCD:
			case LCM:
			case LN:
			case LOG10:
			case MIN_SCALE:
			case MOD:
			case PI:
			case POWER:
			case RADIANS:
			case ROUND:
			case SCALE:
			case SIGN:
			case SQRT:
			case TRIM_SCALE:
			case TRUNC:
			case WIDTH_BUCKET:
			case RANDOM:
			case SETSEED:
			case ACOS:
			case ACOSD:
			case ASIN:
			case ASIND:
			case ATAN:
			case ATAND:
			case ATAN2:
			case ATAN2D:
			case COS:
			case COSD:
			case COT:
			case COTD:
			case SIN:
			case SIND:
			case TAN:
			case TAND:
			case SINH:
			case COSH:
			case TANH:
			case ASINH:
			case ACOSH:
			case ATANH:
			case BIT_LENGTH:
			case CHAR_LENGTH:
			case CHARACTER_LENGTH:
			case LOWER:
			case OCTET_LENGTH:
			case UPPER:
			case ASCII:
			case BTRIM:
			case CHR:
			case CONCAT:
			case CONCAT_WS:
			case FORMAT:
			case INITCAP:
			case LENGTH:
			case LPAD:
			case LTRIM:
			case MD5:
			case PARSE_IDENT:
			case PG_CLIENT_ENCODING:
			case QUOTE_IDENT:
			case QUOTE_LITERAL:
			case QUOTE_NULLABLE:
			case REGEXP_COUNT:
			case REGEXP_INSTR:
			case REGEXP_LIKE:
			case REGEXP_MATCH:
			case REGEXP_MATCHES:
			case REGEXP_REPLACE:
			case REGEXP_SPLIT_TO_ARRAY:
			case REGEXP_SPLIT_TO_TABLE:
			case REGEXP_SUBSTR:
			case REPEAT:
			case RPAD:
			case RTRIM:
			case SPLIT_PART:
			case STARTS_WITH:
			case STRING_TO_ARRAY:
			case STRING_TO_TABLE:
			case STRPOS:
			case SUBSTR:
			case TO_ASCII:
			case TO_HEX:
			case TRANSLATE:
			case UNISTR:
			case AGE:
			case CLOCK_TIMESTAMP:
			case DATE_BIN:
			case DATE_PART:
			case DATE_TRUNC:
			case ISFINITE:
			case JUSTIFY_DAYS:
			case JUSTIFY_HOURS:
			case JUSTIFY_INTERVAL:
			case MAKE_DATE:
			case MAKE_INTERVAL:
			case MAKE_TIME:
			case MAKE_TIMESTAMP:
			case MAKE_TIMESTAMPTZ:
			case NOW:
			case STATEMENT_TIMESTAMP:
			case TIMEOFDAY:
			case TRANSACTION_TIMESTAMP:
			case TO_TIMESTAMP:
			case TO_CHAR:
			case TO_DATE:
			case TO_NUMBER:
			case Identifier:
			case QuotedIdentifier:
			case UnicodeQuotedIdentifier:
			case StringConstant:
			case UnicodeEscapeStringConstant:
			case BeginDollarStringConstant:
			case BinaryStringConstant:
			case HexadecimalStringConstant:
			case Integral:
			case Numeric:
			case PLSQLVARIABLENAME:
			case PLSQLIDENTIFIER:
			case EscapeStringConstant:
				EnterOuterAlt(_localctx, 1);
				{
				State = 9689;
				a_expr();
				}
				break;
			case CLOSE_BRACKET:
			case COLON:
				EnterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IndirectionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Indirection_elContext[] indirection_el() {
			return GetRuleContexts<Indirection_elContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Indirection_elContext indirection_el(int i) {
			return GetRuleContext<Indirection_elContext>(i);
		}
		public IndirectionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_indirection; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterIndirection(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitIndirection(this);
		}
	}

	[RuleVersion(0)]
	public IndirectionContext indirection() {
		IndirectionContext _localctx = new IndirectionContext(Context, State);
		EnterRule(_localctx, 1324, RULE_indirection);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 9694;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 9693;
					indirection_el();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 9696;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,639,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Opt_indirectionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Indirection_elContext[] indirection_el() {
			return GetRuleContexts<Indirection_elContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Indirection_elContext indirection_el(int i) {
			return GetRuleContext<Indirection_elContext>(i);
		}
		public Opt_indirectionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_opt_indirection; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterOpt_indirection(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitOpt_indirection(this);
		}
	}

	[RuleVersion(0)]
	public Opt_indirectionContext opt_indirection() {
		Opt_indirectionContext _localctx = new Opt_indirectionContext(Context, State);
		EnterRule(_localctx, 1326, RULE_opt_indirection);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 9701;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,640,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 9698;
					indirection_el();
					}
					} 
				}
				State = 9703;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,640,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Opt_target_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Target_listContext target_list() {
			return GetRuleContext<Target_listContext>(0);
		}
		public Opt_target_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_opt_target_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterOpt_target_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitOpt_target_list(this);
		}
	}

	[RuleVersion(0)]
	public Opt_target_listContext opt_target_list() {
		Opt_target_listContext _localctx = new Opt_target_listContext(Context, State);
		EnterRule(_localctx, 1328, RULE_opt_target_list);
		try {
			State = 9706;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,641,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 9704;
				target_list();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Target_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Target_elContext[] target_el() {
			return GetRuleContexts<Target_elContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Target_elContext target_el(int i) {
			return GetRuleContext<Target_elContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(PostgreSQLParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(PostgreSQLParser.COMMA, i);
		}
		public Target_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_target_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterTarget_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitTarget_list(this);
		}
	}

	[RuleVersion(0)]
	public Target_listContext target_list() {
		Target_listContext _localctx = new Target_listContext(Context, State);
		EnterRule(_localctx, 1330, RULE_target_list);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 9708;
			target_el();
			State = 9713;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,642,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 9709;
					Match(COMMA);
					State = 9710;
					target_el();
					}
					} 
				}
				State = 9715;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,642,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Target_elContext : ParserRuleContext {
		public Target_elContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_target_el; } }
	 
		public Target_elContext() { }
		public virtual void CopyFrom(Target_elContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class Target_labelContext : Target_elContext {
		[System.Diagnostics.DebuggerNonUserCode] public A_exprContext a_expr() {
			return GetRuleContext<A_exprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS() { return GetToken(PostgreSQLParser.AS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public CollabelContext collabel() {
			return GetRuleContext<CollabelContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public Target_labelContext(Target_elContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterTarget_label(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitTarget_label(this);
		}
	}
	public partial class Target_starContext : Target_elContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STAR() { return GetToken(PostgreSQLParser.STAR, 0); }
		public Target_starContext(Target_elContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterTarget_star(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitTarget_star(this);
		}
	}

	[RuleVersion(0)]
	public Target_elContext target_el() {
		Target_elContext _localctx = new Target_elContext(Context, State);
		EnterRule(_localctx, 1332, RULE_target_el);
		try {
			State = 9724;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case OPEN_PAREN:
			case PLUS:
			case MINUS:
			case PARAM:
			case Operator:
			case AND:
			case ARRAY:
			case CASE:
			case CAST:
			case COLLATE:
			case COLUMN:
			case CONSTRAINT:
			case CURRENT_CATALOG:
			case CURRENT_DATE:
			case CURRENT_ROLE:
			case CURRENT_TIME:
			case CURRENT_TIMESTAMP:
			case CURRENT_USER:
			case DEFAULT:
			case DO:
			case FALSE_P:
			case FETCH:
			case LOCALTIME:
			case LOCALTIMESTAMP:
			case NOT:
			case NULL_P:
			case SESSION_USER:
			case TABLE:
			case TRUE_P:
			case UNIQUE:
			case USER:
			case AUTHORIZATION:
			case BINARY:
			case COLLATION:
			case CONCURRENTLY:
			case CROSS:
			case CURRENT_SCHEMA:
			case FREEZE:
			case FULL:
			case ILIKE:
			case INNER_P:
			case IS:
			case ISNULL:
			case JOIN:
			case LEFT:
			case LIKE:
			case NATURAL:
			case NOTNULL:
			case OUTER_P:
			case OVER:
			case OVERLAPS:
			case RIGHT:
			case SIMILAR:
			case VERBOSE:
			case ABORT_P:
			case ABSOLUTE_P:
			case ACCESS:
			case ACTION:
			case ADD_P:
			case ADMIN:
			case AFTER:
			case AGGREGATE:
			case ALSO:
			case ALTER:
			case ALWAYS:
			case ASSERTION:
			case ASSIGNMENT:
			case AT:
			case ATTRIBUTE:
			case BACKWARD:
			case BEFORE:
			case BEGIN_P:
			case BY:
			case CACHE:
			case CALLED:
			case CASCADE:
			case CASCADED:
			case CATALOG:
			case CHAIN:
			case CHARACTERISTICS:
			case CHECKPOINT:
			case CLASS:
			case CLOSE:
			case CLUSTER:
			case COMMENT:
			case COMMENTS:
			case COMMIT:
			case COMMITTED:
			case CONFIGURATION:
			case CONNECTION:
			case CONSTRAINTS:
			case CONTENT_P:
			case CONTINUE_P:
			case CONVERSION_P:
			case COPY:
			case COST:
			case CSV:
			case CURSOR:
			case CYCLE:
			case DATA_P:
			case DATABASE:
			case DAY_P:
			case DEALLOCATE:
			case DECLARE:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE_P:
			case DELIMITER:
			case DELIMITERS:
			case DICTIONARY:
			case DISABLE_P:
			case DISCARD:
			case DOCUMENT_P:
			case DOMAIN_P:
			case DOUBLE_P:
			case DROP:
			case EACH:
			case ENABLE_P:
			case ENCODING:
			case ENCRYPTED:
			case ENUM_P:
			case ESCAPE:
			case EVENT:
			case EXCLUDE:
			case EXCLUDING:
			case EXCLUSIVE:
			case EXECUTE:
			case EXPLAIN:
			case EXTENSION:
			case EXTERNAL:
			case FAMILY:
			case FIRST_P:
			case FOLLOWING:
			case FORCE:
			case FORWARD:
			case FUNCTION:
			case FUNCTIONS:
			case GLOBAL:
			case GRANTED:
			case HANDLER:
			case HEADER_P:
			case HOLD:
			case HOUR_P:
			case IDENTITY_P:
			case IF_P:
			case IMMEDIATE:
			case IMMUTABLE:
			case IMPLICIT_P:
			case INCLUDING:
			case INCREMENT:
			case INDEX:
			case INDEXES:
			case INHERIT:
			case INHERITS:
			case INLINE_P:
			case INSENSITIVE:
			case INSERT:
			case INSTEAD:
			case INVOKER:
			case ISOLATION:
			case KEY:
			case LABEL:
			case LANGUAGE:
			case LARGE_P:
			case LAST_P:
			case LEAKPROOF:
			case LEVEL:
			case LISTEN:
			case LOAD:
			case LOCAL:
			case LOCATION:
			case LOCK_P:
			case MAPPING:
			case MATCH:
			case MATERIALIZED:
			case MAXVALUE:
			case MINUTE_P:
			case MINVALUE:
			case MODE:
			case MONTH_P:
			case MOVE:
			case NAME_P:
			case NAMES:
			case NEXT:
			case NO:
			case NOTHING:
			case NOTIFY:
			case NOWAIT:
			case NULLS_P:
			case OBJECT_P:
			case OF:
			case OFF:
			case OIDS:
			case OPERATOR:
			case OPTION:
			case OPTIONS:
			case OWNED:
			case OWNER:
			case PARSER:
			case PARTIAL:
			case PARTITION:
			case PASSING:
			case PASSWORD:
			case PLANS:
			case PRECEDING:
			case PREPARE:
			case PREPARED:
			case PRESERVE:
			case PRIOR:
			case PRIVILEGES:
			case PROCEDURAL:
			case PROCEDURE:
			case PROGRAM:
			case QUOTE:
			case RANGE:
			case READ:
			case REASSIGN:
			case RECHECK:
			case RECURSIVE:
			case REF:
			case REFRESH:
			case REINDEX:
			case RELATIVE_P:
			case RELEASE:
			case RENAME:
			case REPEATABLE:
			case REPLACE:
			case REPLICA:
			case RESET:
			case RESTART:
			case RESTRICT:
			case RETURNS:
			case REVOKE:
			case ROLE:
			case ROLLBACK:
			case ROWS:
			case RULE:
			case SAVEPOINT:
			case SCHEMA:
			case SCROLL:
			case SEARCH:
			case SECOND_P:
			case SECURITY:
			case SEQUENCE:
			case SEQUENCES:
			case SERIALIZABLE:
			case SERVER:
			case SESSION:
			case SET:
			case SHARE:
			case SHOW:
			case SIMPLE:
			case SNAPSHOT:
			case STABLE:
			case STANDALONE_P:
			case START:
			case STATEMENT:
			case STATISTICS:
			case STDIN:
			case STDOUT:
			case STORAGE:
			case STRICT_P:
			case STRIP_P:
			case SYSID:
			case SYSTEM_P:
			case TABLES:
			case TABLESPACE:
			case TEMP:
			case TEMPLATE:
			case TEMPORARY:
			case TEXT_P:
			case TRANSACTION:
			case TRIGGER:
			case TRUNCATE:
			case TRUSTED:
			case TYPE_P:
			case TYPES_P:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNENCRYPTED:
			case UNKNOWN:
			case UNLISTEN:
			case UNLOGGED:
			case UNTIL:
			case UPDATE:
			case VACUUM:
			case VALID:
			case VALIDATE:
			case VALIDATOR:
			case VARYING:
			case VERSION_P:
			case VIEW:
			case VOLATILE:
			case WHITESPACE_P:
			case WITHOUT:
			case WORK:
			case WRAPPER:
			case WRITE:
			case XML_P:
			case YEAR_P:
			case YES_P:
			case ZONE:
			case BETWEEN:
			case BIGINT:
			case BIT:
			case BOOLEAN_P:
			case CHAR_P:
			case CHARACTER:
			case COALESCE:
			case DEC:
			case DECIMAL_P:
			case EXISTS:
			case EXTRACT:
			case FLOAT_P:
			case GREATEST:
			case INOUT:
			case INT_P:
			case INTEGER:
			case INTERVAL:
			case LEAST:
			case NATIONAL:
			case NCHAR:
			case NONE:
			case NULLIF:
			case NUMERIC:
			case OVERLAY:
			case POSITION:
			case PRECISION:
			case REAL:
			case ROW:
			case SETOF:
			case SMALLINT:
			case SUBSTRING:
			case TIME:
			case TIMESTAMP:
			case TREAT:
			case TRIM:
			case VALUES:
			case VARCHAR:
			case XMLATTRIBUTES:
			case XMLCOMMENT:
			case XMLAGG:
			case XML_IS_WELL_FORMED:
			case XML_IS_WELL_FORMED_DOCUMENT:
			case XML_IS_WELL_FORMED_CONTENT:
			case XPATH:
			case XPATH_EXISTS:
			case XMLCONCAT:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLPARSE:
			case XMLPI:
			case XMLROOT:
			case XMLSERIALIZE:
			case CALL:
			case CURRENT_P:
			case ATTACH:
			case DETACH:
			case EXPRESSION:
			case GENERATED:
			case LOGGED:
			case STORED:
			case INCLUDE:
			case ROUTINE:
			case TRANSFORM:
			case IMPORT_P:
			case POLICY:
			case METHOD:
			case REFERENCING:
			case NEW:
			case OLD:
			case VALUE_P:
			case SUBSCRIPTION:
			case PUBLICATION:
			case OUT_P:
			case ROUTINES:
			case SCHEMAS:
			case PROCEDURES:
			case INPUT_P:
			case SUPPORT:
			case PARALLEL:
			case SQL_P:
			case DEPENDS:
			case OVERRIDING:
			case CONFLICT:
			case SKIP_P:
			case LOCKED:
			case TIES:
			case ROLLUP:
			case CUBE:
			case GROUPING:
			case SETS:
			case TABLESAMPLE:
			case ORDINALITY:
			case XMLTABLE:
			case COLUMNS:
			case XMLNAMESPACES:
			case ROWTYPE:
			case NORMALIZED:
			case WITHIN:
			case FILTER:
			case GROUPS:
			case OTHERS:
			case NFC:
			case NFD:
			case NFKC:
			case NFKD:
			case UESCAPE:
			case VIEWS:
			case NORMALIZE:
			case DUMP:
			case PRINT_STRICT_PARAMS:
			case VARIABLE_CONFLICT:
			case ERROR:
			case USE_VARIABLE:
			case USE_COLUMN:
			case ALIAS:
			case CONSTANT:
			case PERFORM:
			case GET:
			case DIAGNOSTICS:
			case STACKED:
			case ELSIF:
			case REVERSE:
			case SLICE:
			case EXIT:
			case RETURN:
			case QUERY:
			case RAISE:
			case SQLSTATE:
			case DEBUG:
			case LOG:
			case INFO:
			case NOTICE:
			case WARNING:
			case EXCEPTION:
			case ASSERT:
			case OPEN:
			case ABS:
			case CBRT:
			case CEIL:
			case CEILING:
			case DEGREES:
			case DIV:
			case EXP:
			case FACTORIAL:
			case FLOOR:
			case GCD:
			case LCM:
			case LN:
			case LOG10:
			case MIN_SCALE:
			case MOD:
			case PI:
			case POWER:
			case RADIANS:
			case ROUND:
			case SCALE:
			case SIGN:
			case SQRT:
			case TRIM_SCALE:
			case TRUNC:
			case WIDTH_BUCKET:
			case RANDOM:
			case SETSEED:
			case ACOS:
			case ACOSD:
			case ASIN:
			case ASIND:
			case ATAN:
			case ATAND:
			case ATAN2:
			case ATAN2D:
			case COS:
			case COSD:
			case COT:
			case COTD:
			case SIN:
			case SIND:
			case TAN:
			case TAND:
			case SINH:
			case COSH:
			case TANH:
			case ASINH:
			case ACOSH:
			case ATANH:
			case BIT_LENGTH:
			case CHAR_LENGTH:
			case CHARACTER_LENGTH:
			case LOWER:
			case OCTET_LENGTH:
			case UPPER:
			case ASCII:
			case BTRIM:
			case CHR:
			case CONCAT:
			case CONCAT_WS:
			case FORMAT:
			case INITCAP:
			case LENGTH:
			case LPAD:
			case LTRIM:
			case MD5:
			case PARSE_IDENT:
			case PG_CLIENT_ENCODING:
			case QUOTE_IDENT:
			case QUOTE_LITERAL:
			case QUOTE_NULLABLE:
			case REGEXP_COUNT:
			case REGEXP_INSTR:
			case REGEXP_LIKE:
			case REGEXP_MATCH:
			case REGEXP_MATCHES:
			case REGEXP_REPLACE:
			case REGEXP_SPLIT_TO_ARRAY:
			case REGEXP_SPLIT_TO_TABLE:
			case REGEXP_SUBSTR:
			case REPEAT:
			case RPAD:
			case RTRIM:
			case SPLIT_PART:
			case STARTS_WITH:
			case STRING_TO_ARRAY:
			case STRING_TO_TABLE:
			case STRPOS:
			case SUBSTR:
			case TO_ASCII:
			case TO_HEX:
			case TRANSLATE:
			case UNISTR:
			case AGE:
			case CLOCK_TIMESTAMP:
			case DATE_BIN:
			case DATE_PART:
			case DATE_TRUNC:
			case ISFINITE:
			case JUSTIFY_DAYS:
			case JUSTIFY_HOURS:
			case JUSTIFY_INTERVAL:
			case MAKE_DATE:
			case MAKE_INTERVAL:
			case MAKE_TIME:
			case MAKE_TIMESTAMP:
			case MAKE_TIMESTAMPTZ:
			case NOW:
			case STATEMENT_TIMESTAMP:
			case TIMEOFDAY:
			case TRANSACTION_TIMESTAMP:
			case TO_TIMESTAMP:
			case TO_CHAR:
			case TO_DATE:
			case TO_NUMBER:
			case Identifier:
			case QuotedIdentifier:
			case UnicodeQuotedIdentifier:
			case StringConstant:
			case UnicodeEscapeStringConstant:
			case BeginDollarStringConstant:
			case BinaryStringConstant:
			case HexadecimalStringConstant:
			case Integral:
			case Numeric:
			case PLSQLVARIABLENAME:
			case PLSQLIDENTIFIER:
			case EscapeStringConstant:
				_localctx = new Target_labelContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 9716;
				a_expr();
				State = 9721;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,643,Context) ) {
				case 1:
					{
					State = 9717;
					Match(AS);
					State = 9718;
					collabel();
					}
					break;
				case 2:
					{
					State = 9719;
					identifier();
					}
					break;
				case 3:
					{
					}
					break;
				}
				}
				break;
			case STAR:
				_localctx = new Target_starContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 9723;
				Match(STAR);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Qualified_name_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Qualified_nameContext[] qualified_name() {
			return GetRuleContexts<Qualified_nameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Qualified_nameContext qualified_name(int i) {
			return GetRuleContext<Qualified_nameContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(PostgreSQLParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(PostgreSQLParser.COMMA, i);
		}
		public Qualified_name_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_qualified_name_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterQualified_name_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitQualified_name_list(this);
		}
	}

	[RuleVersion(0)]
	public Qualified_name_listContext qualified_name_list() {
		Qualified_name_listContext _localctx = new Qualified_name_listContext(Context, State);
		EnterRule(_localctx, 1334, RULE_qualified_name_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 9726;
			qualified_name();
			State = 9731;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 9727;
				Match(COMMA);
				State = 9728;
				qualified_name();
				}
				}
				State = 9733;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Qualified_nameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ColidContext colid() {
			return GetRuleContext<ColidContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IndirectionContext indirection() {
			return GetRuleContext<IndirectionContext>(0);
		}
		public Qualified_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_qualified_name; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterQualified_name(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitQualified_name(this);
		}
	}

	[RuleVersion(0)]
	public Qualified_nameContext qualified_name() {
		Qualified_nameContext _localctx = new Qualified_nameContext(Context, State);
		EnterRule(_localctx, 1336, RULE_qualified_name);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 9734;
			colid();
			State = 9736;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==OPEN_BRACKET || _la==DOT) {
				{
				State = 9735;
				indirection();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Name_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NameContext[] name() {
			return GetRuleContexts<NameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public NameContext name(int i) {
			return GetRuleContext<NameContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(PostgreSQLParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(PostgreSQLParser.COMMA, i);
		}
		public Name_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_name_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterName_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitName_list(this);
		}
	}

	[RuleVersion(0)]
	public Name_listContext name_list() {
		Name_listContext _localctx = new Name_listContext(Context, State);
		EnterRule(_localctx, 1338, RULE_name_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 9738;
			name();
			State = 9743;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 9739;
				Match(COMMA);
				State = 9740;
				name();
				}
				}
				State = 9745;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ColidContext colid() {
			return GetRuleContext<ColidContext>(0);
		}
		public NameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_name; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitName(this);
		}
	}

	[RuleVersion(0)]
	public NameContext name() {
		NameContext _localctx = new NameContext(Context, State);
		EnterRule(_localctx, 1340, RULE_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 9746;
			colid();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Attr_nameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public CollabelContext collabel() {
			return GetRuleContext<CollabelContext>(0);
		}
		public Attr_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_attr_name; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterAttr_name(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitAttr_name(this);
		}
	}

	[RuleVersion(0)]
	public Attr_nameContext attr_name() {
		Attr_nameContext _localctx = new Attr_nameContext(Context, State);
		EnterRule(_localctx, 1342, RULE_attr_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 9748;
			collabel();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class File_nameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SconstContext sconst() {
			return GetRuleContext<SconstContext>(0);
		}
		public File_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_file_name; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterFile_name(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitFile_name(this);
		}
	}

	[RuleVersion(0)]
	public File_nameContext file_name() {
		File_nameContext _localctx = new File_nameContext(Context, State);
		EnterRule(_localctx, 1344, RULE_file_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 9750;
			sconst();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Func_nameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Builtin_function_nameContext builtin_function_name() {
			return GetRuleContext<Builtin_function_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Type_function_nameContext type_function_name() {
			return GetRuleContext<Type_function_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ColidContext colid() {
			return GetRuleContext<ColidContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IndirectionContext indirection() {
			return GetRuleContext<IndirectionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFT() { return GetToken(PostgreSQLParser.LEFT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHT() { return GetToken(PostgreSQLParser.RIGHT, 0); }
		public Func_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_func_name; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterFunc_name(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitFunc_name(this);
		}
	}

	[RuleVersion(0)]
	public Func_nameContext func_name() {
		Func_nameContext _localctx = new Func_nameContext(Context, State);
		EnterRule(_localctx, 1346, RULE_func_name);
		try {
			State = 9759;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,648,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 9752;
				builtin_function_name();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 9753;
				type_function_name();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 9754;
				colid();
				State = 9755;
				indirection();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 9757;
				Match(LEFT);
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 9758;
				Match(RIGHT);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AexprconstContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IconstContext iconst() {
			return GetRuleContext<IconstContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FconstContext fconst() {
			return GetRuleContext<FconstContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SconstContext sconst() {
			return GetRuleContext<SconstContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BconstContext bconst() {
			return GetRuleContext<BconstContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public XconstContext xconst() {
			return GetRuleContext<XconstContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Func_nameContext func_name() {
			return GetRuleContext<Func_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAREN() { return GetToken(PostgreSQLParser.OPEN_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Func_arg_listContext func_arg_list() {
			return GetRuleContext<Func_arg_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Opt_sort_clauseContext opt_sort_clause() {
			return GetRuleContext<Opt_sort_clauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAREN() { return GetToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ConsttypenameContext consttypename() {
			return GetRuleContext<ConsttypenameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ConstintervalContext constinterval() {
			return GetRuleContext<ConstintervalContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Opt_intervalContext opt_interval() {
			return GetRuleContext<Opt_intervalContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRUE_P() { return GetToken(PostgreSQLParser.TRUE_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FALSE_P() { return GetToken(PostgreSQLParser.FALSE_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NULL_P() { return GetToken(PostgreSQLParser.NULL_P, 0); }
		public AexprconstContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_aexprconst; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterAexprconst(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitAexprconst(this);
		}
	}

	[RuleVersion(0)]
	public AexprconstContext aexprconst() {
		AexprconstContext _localctx = new AexprconstContext(Context, State);
		EnterRule(_localctx, 1348, RULE_aexprconst);
		try {
			State = 9793;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,651,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 9761;
				iconst();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 9762;
				fconst();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 9763;
				sconst();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 9764;
				bconst();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 9765;
				xconst();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 9766;
				func_name();
				State = 9774;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case StringConstant:
				case UnicodeEscapeStringConstant:
				case BeginDollarStringConstant:
				case EscapeStringConstant:
					{
					State = 9767;
					sconst();
					}
					break;
				case OPEN_PAREN:
					{
					State = 9768;
					Match(OPEN_PAREN);
					State = 9769;
					func_arg_list();
					State = 9770;
					opt_sort_clause();
					State = 9771;
					Match(CLOSE_PAREN);
					State = 9772;
					sconst();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 9776;
				consttypename();
				State = 9777;
				sconst();
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 9779;
				constinterval();
				State = 9788;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case StringConstant:
				case UnicodeEscapeStringConstant:
				case BeginDollarStringConstant:
				case EscapeStringConstant:
					{
					State = 9780;
					sconst();
					State = 9781;
					opt_interval();
					}
					break;
				case OPEN_PAREN:
					{
					State = 9783;
					Match(OPEN_PAREN);
					State = 9784;
					iconst();
					State = 9785;
					Match(CLOSE_PAREN);
					State = 9786;
					sconst();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 9790;
				Match(TRUE_P);
				}
				break;
			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 9791;
				Match(FALSE_P);
				}
				break;
			case 11:
				EnterOuterAlt(_localctx, 11);
				{
				State = 9792;
				Match(NULL_P);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class XconstContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HexadecimalStringConstant() { return GetToken(PostgreSQLParser.HexadecimalStringConstant, 0); }
		public XconstContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_xconst; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterXconst(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitXconst(this);
		}
	}

	[RuleVersion(0)]
	public XconstContext xconst() {
		XconstContext _localctx = new XconstContext(Context, State);
		EnterRule(_localctx, 1350, RULE_xconst);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 9795;
			Match(HexadecimalStringConstant);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BconstContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BinaryStringConstant() { return GetToken(PostgreSQLParser.BinaryStringConstant, 0); }
		public BconstContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_bconst; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterBconst(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitBconst(this);
		}
	}

	[RuleVersion(0)]
	public BconstContext bconst() {
		BconstContext _localctx = new BconstContext(Context, State);
		EnterRule(_localctx, 1352, RULE_bconst);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 9797;
			Match(BinaryStringConstant);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FconstContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Numeric() { return GetToken(PostgreSQLParser.Numeric, 0); }
		public FconstContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fconst; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterFconst(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitFconst(this);
		}
	}

	[RuleVersion(0)]
	public FconstContext fconst() {
		FconstContext _localctx = new FconstContext(Context, State);
		EnterRule(_localctx, 1354, RULE_fconst);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 9799;
			Match(Numeric);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IconstContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Integral() { return GetToken(PostgreSQLParser.Integral, 0); }
		public IconstContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_iconst; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterIconst(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitIconst(this);
		}
	}

	[RuleVersion(0)]
	public IconstContext iconst() {
		IconstContext _localctx = new IconstContext(Context, State);
		EnterRule(_localctx, 1356, RULE_iconst);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 9801;
			Match(Integral);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SconstContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AnysconstContext anysconst() {
			return GetRuleContext<AnysconstContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Opt_uescapeContext opt_uescape() {
			return GetRuleContext<Opt_uescapeContext>(0);
		}
		public SconstContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sconst; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterSconst(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitSconst(this);
		}
	}

	[RuleVersion(0)]
	public SconstContext sconst() {
		SconstContext _localctx = new SconstContext(Context, State);
		EnterRule(_localctx, 1358, RULE_sconst);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 9803;
			anysconst();
			State = 9804;
			opt_uescape();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AnysconstContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode StringConstant() { return GetToken(PostgreSQLParser.StringConstant, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UnicodeEscapeStringConstant() { return GetToken(PostgreSQLParser.UnicodeEscapeStringConstant, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BeginDollarStringConstant() { return GetToken(PostgreSQLParser.BeginDollarStringConstant, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EndDollarStringConstant() { return GetToken(PostgreSQLParser.EndDollarStringConstant, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] DollarText() { return GetTokens(PostgreSQLParser.DollarText); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DollarText(int i) {
			return GetToken(PostgreSQLParser.DollarText, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EscapeStringConstant() { return GetToken(PostgreSQLParser.EscapeStringConstant, 0); }
		public AnysconstContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_anysconst; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterAnysconst(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitAnysconst(this);
		}
	}

	[RuleVersion(0)]
	public AnysconstContext anysconst() {
		AnysconstContext _localctx = new AnysconstContext(Context, State);
		EnterRule(_localctx, 1360, RULE_anysconst);
		int _la;
		try {
			State = 9817;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case StringConstant:
				EnterOuterAlt(_localctx, 1);
				{
				State = 9806;
				Match(StringConstant);
				}
				break;
			case UnicodeEscapeStringConstant:
				EnterOuterAlt(_localctx, 2);
				{
				State = 9807;
				Match(UnicodeEscapeStringConstant);
				}
				break;
			case BeginDollarStringConstant:
				EnterOuterAlt(_localctx, 3);
				{
				State = 9808;
				Match(BeginDollarStringConstant);
				State = 9812;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==DollarText) {
					{
					{
					State = 9809;
					Match(DollarText);
					}
					}
					State = 9814;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 9815;
				Match(EndDollarStringConstant);
				}
				break;
			case EscapeStringConstant:
				EnterOuterAlt(_localctx, 4);
				{
				State = 9816;
				Match(EscapeStringConstant);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Opt_uescapeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UESCAPE() { return GetToken(PostgreSQLParser.UESCAPE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public AnysconstContext anysconst() {
			return GetRuleContext<AnysconstContext>(0);
		}
		public Opt_uescapeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_opt_uescape; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterOpt_uescape(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitOpt_uescape(this);
		}
	}

	[RuleVersion(0)]
	public Opt_uescapeContext opt_uescape() {
		Opt_uescapeContext _localctx = new Opt_uescapeContext(Context, State);
		EnterRule(_localctx, 1362, RULE_opt_uescape);
		try {
			State = 9822;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,654,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 9819;
				Match(UESCAPE);
				State = 9820;
				anysconst();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SignediconstContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IconstContext iconst() {
			return GetRuleContext<IconstContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLUS() { return GetToken(PostgreSQLParser.PLUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUS() { return GetToken(PostgreSQLParser.MINUS, 0); }
		public SignediconstContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_signediconst; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterSignediconst(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitSignediconst(this);
		}
	}

	[RuleVersion(0)]
	public SignediconstContext signediconst() {
		SignediconstContext _localctx = new SignediconstContext(Context, State);
		EnterRule(_localctx, 1364, RULE_signediconst);
		try {
			State = 9829;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Integral:
				EnterOuterAlt(_localctx, 1);
				{
				State = 9824;
				iconst();
				}
				break;
			case PLUS:
				EnterOuterAlt(_localctx, 2);
				{
				State = 9825;
				Match(PLUS);
				State = 9826;
				iconst();
				}
				break;
			case MINUS:
				EnterOuterAlt(_localctx, 3);
				{
				State = 9827;
				Match(MINUS);
				State = 9828;
				iconst();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RoleidContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public RolespecContext rolespec() {
			return GetRuleContext<RolespecContext>(0);
		}
		public RoleidContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_roleid; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterRoleid(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitRoleid(this);
		}
	}

	[RuleVersion(0)]
	public RoleidContext roleid() {
		RoleidContext _localctx = new RoleidContext(Context, State);
		EnterRule(_localctx, 1366, RULE_roleid);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 9831;
			rolespec();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RolespecContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NonreservedwordContext nonreservedword() {
			return GetRuleContext<NonreservedwordContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CURRENT_USER() { return GetToken(PostgreSQLParser.CURRENT_USER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SESSION_USER() { return GetToken(PostgreSQLParser.SESSION_USER, 0); }
		public RolespecContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rolespec; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterRolespec(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitRolespec(this);
		}
	}

	[RuleVersion(0)]
	public RolespecContext rolespec() {
		RolespecContext _localctx = new RolespecContext(Context, State);
		EnterRule(_localctx, 1368, RULE_rolespec);
		try {
			State = 9836;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case AND:
			case ARRAY:
			case COLLATE:
			case COLUMN:
			case CONSTRAINT:
			case DEFAULT:
			case DO:
			case FETCH:
			case TABLE:
			case AUTHORIZATION:
			case BINARY:
			case COLLATION:
			case CONCURRENTLY:
			case CROSS:
			case CURRENT_SCHEMA:
			case FREEZE:
			case FULL:
			case ILIKE:
			case INNER_P:
			case IS:
			case ISNULL:
			case JOIN:
			case LIKE:
			case NATURAL:
			case NOTNULL:
			case OUTER_P:
			case OVER:
			case OVERLAPS:
			case SIMILAR:
			case VERBOSE:
			case ABORT_P:
			case ABSOLUTE_P:
			case ACCESS:
			case ACTION:
			case ADD_P:
			case ADMIN:
			case AFTER:
			case AGGREGATE:
			case ALSO:
			case ALTER:
			case ALWAYS:
			case ASSERTION:
			case ASSIGNMENT:
			case AT:
			case ATTRIBUTE:
			case BACKWARD:
			case BEFORE:
			case BEGIN_P:
			case BY:
			case CACHE:
			case CALLED:
			case CASCADE:
			case CASCADED:
			case CATALOG:
			case CHAIN:
			case CHARACTERISTICS:
			case CHECKPOINT:
			case CLASS:
			case CLOSE:
			case CLUSTER:
			case COMMENT:
			case COMMENTS:
			case COMMIT:
			case COMMITTED:
			case CONFIGURATION:
			case CONNECTION:
			case CONSTRAINTS:
			case CONTENT_P:
			case CONTINUE_P:
			case CONVERSION_P:
			case COPY:
			case COST:
			case CSV:
			case CURSOR:
			case CYCLE:
			case DATA_P:
			case DATABASE:
			case DAY_P:
			case DEALLOCATE:
			case DECLARE:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE_P:
			case DELIMITER:
			case DELIMITERS:
			case DICTIONARY:
			case DISABLE_P:
			case DISCARD:
			case DOCUMENT_P:
			case DOMAIN_P:
			case DOUBLE_P:
			case DROP:
			case EACH:
			case ENABLE_P:
			case ENCODING:
			case ENCRYPTED:
			case ENUM_P:
			case ESCAPE:
			case EVENT:
			case EXCLUDE:
			case EXCLUDING:
			case EXCLUSIVE:
			case EXECUTE:
			case EXPLAIN:
			case EXTENSION:
			case EXTERNAL:
			case FAMILY:
			case FIRST_P:
			case FOLLOWING:
			case FORCE:
			case FORWARD:
			case FUNCTION:
			case FUNCTIONS:
			case GLOBAL:
			case GRANTED:
			case HANDLER:
			case HEADER_P:
			case HOLD:
			case HOUR_P:
			case IDENTITY_P:
			case IF_P:
			case IMMEDIATE:
			case IMMUTABLE:
			case IMPLICIT_P:
			case INCLUDING:
			case INCREMENT:
			case INDEX:
			case INDEXES:
			case INHERIT:
			case INHERITS:
			case INLINE_P:
			case INSENSITIVE:
			case INSERT:
			case INSTEAD:
			case INVOKER:
			case ISOLATION:
			case KEY:
			case LABEL:
			case LANGUAGE:
			case LARGE_P:
			case LAST_P:
			case LEAKPROOF:
			case LEVEL:
			case LISTEN:
			case LOAD:
			case LOCAL:
			case LOCATION:
			case LOCK_P:
			case MAPPING:
			case MATCH:
			case MATERIALIZED:
			case MAXVALUE:
			case MINUTE_P:
			case MINVALUE:
			case MODE:
			case MONTH_P:
			case MOVE:
			case NAME_P:
			case NAMES:
			case NEXT:
			case NO:
			case NOTHING:
			case NOTIFY:
			case NOWAIT:
			case NULLS_P:
			case OBJECT_P:
			case OF:
			case OFF:
			case OIDS:
			case OPERATOR:
			case OPTION:
			case OPTIONS:
			case OWNED:
			case OWNER:
			case PARSER:
			case PARTIAL:
			case PARTITION:
			case PASSING:
			case PASSWORD:
			case PLANS:
			case PRECEDING:
			case PREPARE:
			case PREPARED:
			case PRESERVE:
			case PRIOR:
			case PRIVILEGES:
			case PROCEDURAL:
			case PROCEDURE:
			case PROGRAM:
			case QUOTE:
			case RANGE:
			case READ:
			case REASSIGN:
			case RECHECK:
			case RECURSIVE:
			case REF:
			case REFRESH:
			case REINDEX:
			case RELATIVE_P:
			case RELEASE:
			case RENAME:
			case REPEATABLE:
			case REPLACE:
			case REPLICA:
			case RESET:
			case RESTART:
			case RESTRICT:
			case RETURNS:
			case REVOKE:
			case ROLE:
			case ROLLBACK:
			case ROWS:
			case RULE:
			case SAVEPOINT:
			case SCHEMA:
			case SCROLL:
			case SEARCH:
			case SECOND_P:
			case SECURITY:
			case SEQUENCE:
			case SEQUENCES:
			case SERIALIZABLE:
			case SERVER:
			case SESSION:
			case SET:
			case SHARE:
			case SHOW:
			case SIMPLE:
			case SNAPSHOT:
			case STABLE:
			case STANDALONE_P:
			case START:
			case STATEMENT:
			case STATISTICS:
			case STDIN:
			case STDOUT:
			case STORAGE:
			case STRICT_P:
			case STRIP_P:
			case SYSID:
			case SYSTEM_P:
			case TABLES:
			case TABLESPACE:
			case TEMP:
			case TEMPLATE:
			case TEMPORARY:
			case TEXT_P:
			case TRANSACTION:
			case TRIGGER:
			case TRUNCATE:
			case TRUSTED:
			case TYPE_P:
			case TYPES_P:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNENCRYPTED:
			case UNKNOWN:
			case UNLISTEN:
			case UNLOGGED:
			case UNTIL:
			case UPDATE:
			case VACUUM:
			case VALID:
			case VALIDATE:
			case VALIDATOR:
			case VARYING:
			case VERSION_P:
			case VIEW:
			case VOLATILE:
			case WHITESPACE_P:
			case WITHOUT:
			case WORK:
			case WRAPPER:
			case WRITE:
			case XML_P:
			case YEAR_P:
			case YES_P:
			case ZONE:
			case BETWEEN:
			case BIGINT:
			case BIT:
			case BOOLEAN_P:
			case CHAR_P:
			case CHARACTER:
			case COALESCE:
			case DEC:
			case DECIMAL_P:
			case EXISTS:
			case EXTRACT:
			case FLOAT_P:
			case GREATEST:
			case INOUT:
			case INT_P:
			case INTEGER:
			case INTERVAL:
			case LEAST:
			case NATIONAL:
			case NCHAR:
			case NONE:
			case NULLIF:
			case NUMERIC:
			case OVERLAY:
			case POSITION:
			case PRECISION:
			case REAL:
			case ROW:
			case SETOF:
			case SMALLINT:
			case SUBSTRING:
			case TIME:
			case TIMESTAMP:
			case TREAT:
			case TRIM:
			case VALUES:
			case VARCHAR:
			case XMLATTRIBUTES:
			case XMLCOMMENT:
			case XMLAGG:
			case XML_IS_WELL_FORMED:
			case XML_IS_WELL_FORMED_DOCUMENT:
			case XML_IS_WELL_FORMED_CONTENT:
			case XPATH:
			case XPATH_EXISTS:
			case XMLCONCAT:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLPARSE:
			case XMLPI:
			case XMLROOT:
			case XMLSERIALIZE:
			case CALL:
			case CURRENT_P:
			case ATTACH:
			case DETACH:
			case EXPRESSION:
			case GENERATED:
			case LOGGED:
			case STORED:
			case INCLUDE:
			case ROUTINE:
			case TRANSFORM:
			case IMPORT_P:
			case POLICY:
			case METHOD:
			case REFERENCING:
			case NEW:
			case OLD:
			case VALUE_P:
			case SUBSCRIPTION:
			case PUBLICATION:
			case OUT_P:
			case ROUTINES:
			case SCHEMAS:
			case PROCEDURES:
			case INPUT_P:
			case SUPPORT:
			case PARALLEL:
			case SQL_P:
			case DEPENDS:
			case OVERRIDING:
			case CONFLICT:
			case SKIP_P:
			case LOCKED:
			case TIES:
			case ROLLUP:
			case CUBE:
			case GROUPING:
			case SETS:
			case TABLESAMPLE:
			case ORDINALITY:
			case XMLTABLE:
			case COLUMNS:
			case XMLNAMESPACES:
			case ROWTYPE:
			case NORMALIZED:
			case WITHIN:
			case FILTER:
			case GROUPS:
			case OTHERS:
			case NFC:
			case NFD:
			case NFKC:
			case NFKD:
			case UESCAPE:
			case VIEWS:
			case NORMALIZE:
			case DUMP:
			case PRINT_STRICT_PARAMS:
			case VARIABLE_CONFLICT:
			case ERROR:
			case USE_VARIABLE:
			case USE_COLUMN:
			case ALIAS:
			case CONSTANT:
			case PERFORM:
			case GET:
			case DIAGNOSTICS:
			case STACKED:
			case ELSIF:
			case REVERSE:
			case SLICE:
			case EXIT:
			case RETURN:
			case QUERY:
			case RAISE:
			case SQLSTATE:
			case DEBUG:
			case LOG:
			case INFO:
			case NOTICE:
			case WARNING:
			case EXCEPTION:
			case ASSERT:
			case OPEN:
			case ABS:
			case CBRT:
			case CEIL:
			case CEILING:
			case DEGREES:
			case DIV:
			case EXP:
			case FACTORIAL:
			case FLOOR:
			case GCD:
			case LCM:
			case LN:
			case LOG10:
			case MIN_SCALE:
			case MOD:
			case PI:
			case POWER:
			case RADIANS:
			case ROUND:
			case SCALE:
			case SIGN:
			case SQRT:
			case TRIM_SCALE:
			case TRUNC:
			case WIDTH_BUCKET:
			case RANDOM:
			case SETSEED:
			case ACOS:
			case ACOSD:
			case ASIN:
			case ASIND:
			case ATAN:
			case ATAND:
			case ATAN2:
			case ATAN2D:
			case COS:
			case COSD:
			case COT:
			case COTD:
			case SIN:
			case SIND:
			case TAN:
			case TAND:
			case SINH:
			case COSH:
			case TANH:
			case ASINH:
			case ACOSH:
			case ATANH:
			case BIT_LENGTH:
			case CHAR_LENGTH:
			case CHARACTER_LENGTH:
			case LOWER:
			case OCTET_LENGTH:
			case UPPER:
			case ASCII:
			case BTRIM:
			case CHR:
			case CONCAT:
			case CONCAT_WS:
			case FORMAT:
			case INITCAP:
			case LENGTH:
			case LPAD:
			case LTRIM:
			case MD5:
			case PARSE_IDENT:
			case PG_CLIENT_ENCODING:
			case QUOTE_IDENT:
			case QUOTE_LITERAL:
			case QUOTE_NULLABLE:
			case REGEXP_COUNT:
			case REGEXP_INSTR:
			case REGEXP_LIKE:
			case REGEXP_MATCH:
			case REGEXP_MATCHES:
			case REGEXP_REPLACE:
			case REGEXP_SPLIT_TO_ARRAY:
			case REGEXP_SPLIT_TO_TABLE:
			case REGEXP_SUBSTR:
			case REPEAT:
			case RPAD:
			case RTRIM:
			case SPLIT_PART:
			case STARTS_WITH:
			case STRING_TO_ARRAY:
			case STRING_TO_TABLE:
			case STRPOS:
			case SUBSTR:
			case TO_ASCII:
			case TO_HEX:
			case TRANSLATE:
			case UNISTR:
			case AGE:
			case CLOCK_TIMESTAMP:
			case DATE_BIN:
			case DATE_PART:
			case DATE_TRUNC:
			case ISFINITE:
			case JUSTIFY_DAYS:
			case JUSTIFY_HOURS:
			case JUSTIFY_INTERVAL:
			case MAKE_DATE:
			case MAKE_INTERVAL:
			case MAKE_TIME:
			case MAKE_TIMESTAMP:
			case MAKE_TIMESTAMPTZ:
			case NOW:
			case STATEMENT_TIMESTAMP:
			case TIMEOFDAY:
			case TRANSACTION_TIMESTAMP:
			case TO_TIMESTAMP:
			case TO_CHAR:
			case TO_DATE:
			case TO_NUMBER:
			case Identifier:
			case QuotedIdentifier:
			case UnicodeQuotedIdentifier:
			case PLSQLVARIABLENAME:
			case PLSQLIDENTIFIER:
				EnterOuterAlt(_localctx, 1);
				{
				State = 9833;
				nonreservedword();
				}
				break;
			case CURRENT_USER:
				EnterOuterAlt(_localctx, 2);
				{
				State = 9834;
				Match(CURRENT_USER);
				}
				break;
			case SESSION_USER:
				EnterOuterAlt(_localctx, 3);
				{
				State = 9835;
				Match(SESSION_USER);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Role_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public RolespecContext[] rolespec() {
			return GetRuleContexts<RolespecContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public RolespecContext rolespec(int i) {
			return GetRuleContext<RolespecContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(PostgreSQLParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(PostgreSQLParser.COMMA, i);
		}
		public Role_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_role_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterRole_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitRole_list(this);
		}
	}

	[RuleVersion(0)]
	public Role_listContext role_list() {
		Role_listContext _localctx = new Role_listContext(Context, State);
		EnterRule(_localctx, 1370, RULE_role_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 9838;
			rolespec();
			State = 9843;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 9839;
				Match(COMMA);
				State = 9840;
				rolespec();
				}
				}
				State = 9845;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ColidContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Unreserved_keywordContext unreserved_keyword() {
			return GetRuleContext<Unreserved_keywordContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Col_name_keywordContext col_name_keyword() {
			return GetRuleContext<Col_name_keywordContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Plsql_unreserved_keywordContext plsql_unreserved_keyword() {
			return GetRuleContext<Plsql_unreserved_keywordContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFT() { return GetToken(PostgreSQLParser.LEFT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHT() { return GetToken(PostgreSQLParser.RIGHT, 0); }
		public ColidContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_colid; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterColid(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitColid(this);
		}
	}

	[RuleVersion(0)]
	public ColidContext colid() {
		ColidContext _localctx = new ColidContext(Context, State);
		EnterRule(_localctx, 1372, RULE_colid);
		try {
			State = 9852;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,658,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 9846;
				identifier();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 9847;
				unreserved_keyword();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 9848;
				col_name_keyword();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 9849;
				plsql_unreserved_keyword();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 9850;
				Match(LEFT);
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 9851;
				Match(RIGHT);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Table_aliasContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Unreserved_keywordContext unreserved_keyword() {
			return GetRuleContext<Unreserved_keywordContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Col_name_keywordContext col_name_keyword() {
			return GetRuleContext<Col_name_keywordContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Plsql_unreserved_keywordContext plsql_unreserved_keyword() {
			return GetRuleContext<Plsql_unreserved_keywordContext>(0);
		}
		public Table_aliasContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_table_alias; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterTable_alias(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitTable_alias(this);
		}
	}

	[RuleVersion(0)]
	public Table_aliasContext table_alias() {
		Table_aliasContext _localctx = new Table_aliasContext(Context, State);
		EnterRule(_localctx, 1374, RULE_table_alias);
		try {
			State = 9858;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,659,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 9854;
				identifier();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 9855;
				unreserved_keyword();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 9856;
				col_name_keyword();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 9857;
				plsql_unreserved_keyword();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Type_function_nameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Unreserved_keywordContext unreserved_keyword() {
			return GetRuleContext<Unreserved_keywordContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Plsql_unreserved_keywordContext plsql_unreserved_keyword() {
			return GetRuleContext<Plsql_unreserved_keywordContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Type_func_name_keywordContext type_func_name_keyword() {
			return GetRuleContext<Type_func_name_keywordContext>(0);
		}
		public Type_function_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type_function_name; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterType_function_name(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitType_function_name(this);
		}
	}

	[RuleVersion(0)]
	public Type_function_nameContext type_function_name() {
		Type_function_nameContext _localctx = new Type_function_nameContext(Context, State);
		EnterRule(_localctx, 1376, RULE_type_function_name);
		try {
			State = 9864;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,660,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 9860;
				identifier();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 9861;
				unreserved_keyword();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 9862;
				plsql_unreserved_keyword();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 9863;
				type_func_name_keyword();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NonreservedwordContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Unreserved_keywordContext unreserved_keyword() {
			return GetRuleContext<Unreserved_keywordContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Col_name_keywordContext col_name_keyword() {
			return GetRuleContext<Col_name_keywordContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Type_func_name_keywordContext type_func_name_keyword() {
			return GetRuleContext<Type_func_name_keywordContext>(0);
		}
		public NonreservedwordContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_nonreservedword; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterNonreservedword(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitNonreservedword(this);
		}
	}

	[RuleVersion(0)]
	public NonreservedwordContext nonreservedword() {
		NonreservedwordContext _localctx = new NonreservedwordContext(Context, State);
		EnterRule(_localctx, 1378, RULE_nonreservedword);
		try {
			State = 9870;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,661,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 9866;
				identifier();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 9867;
				unreserved_keyword();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 9868;
				col_name_keyword();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 9869;
				type_func_name_keyword();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CollabelContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Plsql_unreserved_keywordContext plsql_unreserved_keyword() {
			return GetRuleContext<Plsql_unreserved_keywordContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Unreserved_keywordContext unreserved_keyword() {
			return GetRuleContext<Unreserved_keywordContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Col_name_keywordContext col_name_keyword() {
			return GetRuleContext<Col_name_keywordContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Type_func_name_keywordContext type_func_name_keyword() {
			return GetRuleContext<Type_func_name_keywordContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Reserved_keywordContext reserved_keyword() {
			return GetRuleContext<Reserved_keywordContext>(0);
		}
		public CollabelContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_collabel; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterCollabel(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitCollabel(this);
		}
	}

	[RuleVersion(0)]
	public CollabelContext collabel() {
		CollabelContext _localctx = new CollabelContext(Context, State);
		EnterRule(_localctx, 1380, RULE_collabel);
		try {
			State = 9878;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,662,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 9872;
				identifier();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 9873;
				plsql_unreserved_keyword();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 9874;
				unreserved_keyword();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 9875;
				col_name_keyword();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 9876;
				type_func_name_keyword();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 9877;
				reserved_keyword();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IdentifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(PostgreSQLParser.Identifier, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Opt_uescapeContext opt_uescape() {
			return GetRuleContext<Opt_uescapeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode QuotedIdentifier() { return GetToken(PostgreSQLParser.QuotedIdentifier, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UnicodeQuotedIdentifier() { return GetToken(PostgreSQLParser.UnicodeQuotedIdentifier, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public PlsqlvariablenameContext plsqlvariablename() {
			return GetRuleContext<PlsqlvariablenameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PlsqlidentifierContext plsqlidentifier() {
			return GetRuleContext<PlsqlidentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Plsql_unreserved_keywordContext plsql_unreserved_keyword() {
			return GetRuleContext<Plsql_unreserved_keywordContext>(0);
		}
		public IdentifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_identifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterIdentifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitIdentifier(this);
		}
	}

	[RuleVersion(0)]
	public IdentifierContext identifier() {
		IdentifierContext _localctx = new IdentifierContext(Context, State);
		EnterRule(_localctx, 1382, RULE_identifier);
		try {
			State = 9887;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Identifier:
				EnterOuterAlt(_localctx, 1);
				{
				State = 9880;
				Match(Identifier);
				State = 9881;
				opt_uescape();
				}
				break;
			case QuotedIdentifier:
				EnterOuterAlt(_localctx, 2);
				{
				State = 9882;
				Match(QuotedIdentifier);
				}
				break;
			case UnicodeQuotedIdentifier:
				EnterOuterAlt(_localctx, 3);
				{
				State = 9883;
				Match(UnicodeQuotedIdentifier);
				}
				break;
			case PLSQLVARIABLENAME:
				EnterOuterAlt(_localctx, 4);
				{
				State = 9884;
				plsqlvariablename();
				}
				break;
			case PLSQLIDENTIFIER:
				EnterOuterAlt(_localctx, 5);
				{
				State = 9885;
				plsqlidentifier();
				}
				break;
			case AND:
			case ARRAY:
			case COLLATE:
			case COLUMN:
			case CONSTRAINT:
			case DEFAULT:
			case DO:
			case FETCH:
			case TABLE:
			case IS:
			case OUTER_P:
			case ABSOLUTE_P:
			case BACKWARD:
			case CHAIN:
			case CLOSE:
			case COMMIT:
			case CONTINUE_P:
			case CURSOR:
			case FIRST_P:
			case FORWARD:
			case INSERT:
			case LAST_P:
			case MOVE:
			case NEXT:
			case NO:
			case OPTION:
			case PRIOR:
			case RELATIVE_P:
			case RESET:
			case ROLLBACK:
			case SCHEMA:
			case SCROLL:
			case SET:
			case TYPE_P:
			case CALL:
			case CURRENT_P:
			case ROWTYPE:
			case DUMP:
			case PRINT_STRICT_PARAMS:
			case VARIABLE_CONFLICT:
			case ERROR:
			case USE_VARIABLE:
			case USE_COLUMN:
			case ALIAS:
			case CONSTANT:
			case PERFORM:
			case GET:
			case DIAGNOSTICS:
			case STACKED:
			case ELSIF:
			case SLICE:
			case EXIT:
			case RETURN:
			case QUERY:
			case RAISE:
			case SQLSTATE:
			case DEBUG:
			case INFO:
			case NOTICE:
			case WARNING:
			case EXCEPTION:
			case ASSERT:
			case OPEN:
				EnterOuterAlt(_localctx, 6);
				{
				State = 9886;
				plsql_unreserved_keyword();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PlsqlidentifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLSQLIDENTIFIER() { return GetToken(PostgreSQLParser.PLSQLIDENTIFIER, 0); }
		public PlsqlidentifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_plsqlidentifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterPlsqlidentifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitPlsqlidentifier(this);
		}
	}

	[RuleVersion(0)]
	public PlsqlidentifierContext plsqlidentifier() {
		PlsqlidentifierContext _localctx = new PlsqlidentifierContext(Context, State);
		EnterRule(_localctx, 1384, RULE_plsqlidentifier);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 9889;
			Match(PLSQLIDENTIFIER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Unreserved_keywordContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ABORT_P() { return GetToken(PostgreSQLParser.ABORT_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ABSOLUTE_P() { return GetToken(PostgreSQLParser.ABSOLUTE_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ACCESS() { return GetToken(PostgreSQLParser.ACCESS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ACTION() { return GetToken(PostgreSQLParser.ACTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ADD_P() { return GetToken(PostgreSQLParser.ADD_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ADMIN() { return GetToken(PostgreSQLParser.ADMIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AFTER() { return GetToken(PostgreSQLParser.AFTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AGGREGATE() { return GetToken(PostgreSQLParser.AGGREGATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALSO() { return GetToken(PostgreSQLParser.ALSO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALTER() { return GetToken(PostgreSQLParser.ALTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALWAYS() { return GetToken(PostgreSQLParser.ALWAYS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSERTION() { return GetToken(PostgreSQLParser.ASSERTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGNMENT() { return GetToken(PostgreSQLParser.ASSIGNMENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AT() { return GetToken(PostgreSQLParser.AT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ATTACH() { return GetToken(PostgreSQLParser.ATTACH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ATTRIBUTE() { return GetToken(PostgreSQLParser.ATTRIBUTE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BACKWARD() { return GetToken(PostgreSQLParser.BACKWARD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BEFORE() { return GetToken(PostgreSQLParser.BEFORE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BEGIN_P() { return GetToken(PostgreSQLParser.BEGIN_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BY() { return GetToken(PostgreSQLParser.BY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CACHE() { return GetToken(PostgreSQLParser.CACHE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CALL() { return GetToken(PostgreSQLParser.CALL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CALLED() { return GetToken(PostgreSQLParser.CALLED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CASCADE() { return GetToken(PostgreSQLParser.CASCADE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CASCADED() { return GetToken(PostgreSQLParser.CASCADED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CATALOG() { return GetToken(PostgreSQLParser.CATALOG, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHAIN() { return GetToken(PostgreSQLParser.CHAIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHARACTERISTICS() { return GetToken(PostgreSQLParser.CHARACTERISTICS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHECKPOINT() { return GetToken(PostgreSQLParser.CHECKPOINT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLASS() { return GetToken(PostgreSQLParser.CLASS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE() { return GetToken(PostgreSQLParser.CLOSE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLUSTER() { return GetToken(PostgreSQLParser.CLUSTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLUMNS() { return GetToken(PostgreSQLParser.COLUMNS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMENT() { return GetToken(PostgreSQLParser.COMMENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMENTS() { return GetToken(PostgreSQLParser.COMMENTS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMIT() { return GetToken(PostgreSQLParser.COMMIT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMITTED() { return GetToken(PostgreSQLParser.COMMITTED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONFIGURATION() { return GetToken(PostgreSQLParser.CONFIGURATION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONFLICT() { return GetToken(PostgreSQLParser.CONFLICT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONNECTION() { return GetToken(PostgreSQLParser.CONNECTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONSTRAINTS() { return GetToken(PostgreSQLParser.CONSTRAINTS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONTENT_P() { return GetToken(PostgreSQLParser.CONTENT_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONTINUE_P() { return GetToken(PostgreSQLParser.CONTINUE_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONVERSION_P() { return GetToken(PostgreSQLParser.CONVERSION_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COPY() { return GetToken(PostgreSQLParser.COPY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COST() { return GetToken(PostgreSQLParser.COST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CSV() { return GetToken(PostgreSQLParser.CSV, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CUBE() { return GetToken(PostgreSQLParser.CUBE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CURRENT_P() { return GetToken(PostgreSQLParser.CURRENT_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CURSOR() { return GetToken(PostgreSQLParser.CURSOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CYCLE() { return GetToken(PostgreSQLParser.CYCLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DATA_P() { return GetToken(PostgreSQLParser.DATA_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DATABASE() { return GetToken(PostgreSQLParser.DATABASE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DAY_P() { return GetToken(PostgreSQLParser.DAY_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEALLOCATE() { return GetToken(PostgreSQLParser.DEALLOCATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DECLARE() { return GetToken(PostgreSQLParser.DECLARE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFAULTS() { return GetToken(PostgreSQLParser.DEFAULTS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFERRED() { return GetToken(PostgreSQLParser.DEFERRED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFINER() { return GetToken(PostgreSQLParser.DEFINER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DELETE_P() { return GetToken(PostgreSQLParser.DELETE_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DELIMITER() { return GetToken(PostgreSQLParser.DELIMITER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DELIMITERS() { return GetToken(PostgreSQLParser.DELIMITERS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEPENDS() { return GetToken(PostgreSQLParser.DEPENDS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DETACH() { return GetToken(PostgreSQLParser.DETACH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DICTIONARY() { return GetToken(PostgreSQLParser.DICTIONARY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DISABLE_P() { return GetToken(PostgreSQLParser.DISABLE_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DISCARD() { return GetToken(PostgreSQLParser.DISCARD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOCUMENT_P() { return GetToken(PostgreSQLParser.DOCUMENT_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOMAIN_P() { return GetToken(PostgreSQLParser.DOMAIN_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOUBLE_P() { return GetToken(PostgreSQLParser.DOUBLE_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DROP() { return GetToken(PostgreSQLParser.DROP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EACH() { return GetToken(PostgreSQLParser.EACH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ENABLE_P() { return GetToken(PostgreSQLParser.ENABLE_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ENCODING() { return GetToken(PostgreSQLParser.ENCODING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ENCRYPTED() { return GetToken(PostgreSQLParser.ENCRYPTED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ENUM_P() { return GetToken(PostgreSQLParser.ENUM_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ESCAPE() { return GetToken(PostgreSQLParser.ESCAPE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EVENT() { return GetToken(PostgreSQLParser.EVENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXCLUDE() { return GetToken(PostgreSQLParser.EXCLUDE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXCLUDING() { return GetToken(PostgreSQLParser.EXCLUDING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXCLUSIVE() { return GetToken(PostgreSQLParser.EXCLUSIVE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXECUTE() { return GetToken(PostgreSQLParser.EXECUTE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXPLAIN() { return GetToken(PostgreSQLParser.EXPLAIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXPRESSION() { return GetToken(PostgreSQLParser.EXPRESSION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXTENSION() { return GetToken(PostgreSQLParser.EXTENSION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXTERNAL() { return GetToken(PostgreSQLParser.EXTERNAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FAMILY() { return GetToken(PostgreSQLParser.FAMILY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FILTER() { return GetToken(PostgreSQLParser.FILTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FIRST_P() { return GetToken(PostgreSQLParser.FIRST_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOLLOWING() { return GetToken(PostgreSQLParser.FOLLOWING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FORCE() { return GetToken(PostgreSQLParser.FORCE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FORWARD() { return GetToken(PostgreSQLParser.FORWARD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FUNCTION() { return GetToken(PostgreSQLParser.FUNCTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FUNCTIONS() { return GetToken(PostgreSQLParser.FUNCTIONS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GENERATED() { return GetToken(PostgreSQLParser.GENERATED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GLOBAL() { return GetToken(PostgreSQLParser.GLOBAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GRANTED() { return GetToken(PostgreSQLParser.GRANTED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GROUPS() { return GetToken(PostgreSQLParser.GROUPS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HANDLER() { return GetToken(PostgreSQLParser.HANDLER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HEADER_P() { return GetToken(PostgreSQLParser.HEADER_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HOLD() { return GetToken(PostgreSQLParser.HOLD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HOUR_P() { return GetToken(PostgreSQLParser.HOUR_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTITY_P() { return GetToken(PostgreSQLParser.IDENTITY_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF_P() { return GetToken(PostgreSQLParser.IF_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IMMEDIATE() { return GetToken(PostgreSQLParser.IMMEDIATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IMMUTABLE() { return GetToken(PostgreSQLParser.IMMUTABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IMPLICIT_P() { return GetToken(PostgreSQLParser.IMPLICIT_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IMPORT_P() { return GetToken(PostgreSQLParser.IMPORT_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INCLUDE() { return GetToken(PostgreSQLParser.INCLUDE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INCLUDING() { return GetToken(PostgreSQLParser.INCLUDING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INCREMENT() { return GetToken(PostgreSQLParser.INCREMENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INDEX() { return GetToken(PostgreSQLParser.INDEX, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INDEXES() { return GetToken(PostgreSQLParser.INDEXES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INHERIT() { return GetToken(PostgreSQLParser.INHERIT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INHERITS() { return GetToken(PostgreSQLParser.INHERITS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INLINE_P() { return GetToken(PostgreSQLParser.INLINE_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INPUT_P() { return GetToken(PostgreSQLParser.INPUT_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INSENSITIVE() { return GetToken(PostgreSQLParser.INSENSITIVE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INSERT() { return GetToken(PostgreSQLParser.INSERT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INSTEAD() { return GetToken(PostgreSQLParser.INSTEAD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INVOKER() { return GetToken(PostgreSQLParser.INVOKER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ISOLATION() { return GetToken(PostgreSQLParser.ISOLATION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEY() { return GetToken(PostgreSQLParser.KEY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LABEL() { return GetToken(PostgreSQLParser.LABEL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LANGUAGE() { return GetToken(PostgreSQLParser.LANGUAGE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LARGE_P() { return GetToken(PostgreSQLParser.LARGE_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LAST_P() { return GetToken(PostgreSQLParser.LAST_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEAKPROOF() { return GetToken(PostgreSQLParser.LEAKPROOF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEVEL() { return GetToken(PostgreSQLParser.LEVEL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LISTEN() { return GetToken(PostgreSQLParser.LISTEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOAD() { return GetToken(PostgreSQLParser.LOAD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOCAL() { return GetToken(PostgreSQLParser.LOCAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOCATION() { return GetToken(PostgreSQLParser.LOCATION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOCK_P() { return GetToken(PostgreSQLParser.LOCK_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOCKED() { return GetToken(PostgreSQLParser.LOCKED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOGGED() { return GetToken(PostgreSQLParser.LOGGED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MAPPING() { return GetToken(PostgreSQLParser.MAPPING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MATCH() { return GetToken(PostgreSQLParser.MATCH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MATERIALIZED() { return GetToken(PostgreSQLParser.MATERIALIZED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MAXVALUE() { return GetToken(PostgreSQLParser.MAXVALUE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode METHOD() { return GetToken(PostgreSQLParser.METHOD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUTE_P() { return GetToken(PostgreSQLParser.MINUTE_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINVALUE() { return GetToken(PostgreSQLParser.MINVALUE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MODE() { return GetToken(PostgreSQLParser.MODE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MONTH_P() { return GetToken(PostgreSQLParser.MONTH_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MOVE() { return GetToken(PostgreSQLParser.MOVE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NAME_P() { return GetToken(PostgreSQLParser.NAME_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NAMES() { return GetToken(PostgreSQLParser.NAMES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NEW() { return GetToken(PostgreSQLParser.NEW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NEXT() { return GetToken(PostgreSQLParser.NEXT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NFC() { return GetToken(PostgreSQLParser.NFC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NFD() { return GetToken(PostgreSQLParser.NFD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NFKC() { return GetToken(PostgreSQLParser.NFKC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NFKD() { return GetToken(PostgreSQLParser.NFKD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NO() { return GetToken(PostgreSQLParser.NO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NORMALIZED() { return GetToken(PostgreSQLParser.NORMALIZED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOTHING() { return GetToken(PostgreSQLParser.NOTHING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOTIFY() { return GetToken(PostgreSQLParser.NOTIFY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOWAIT() { return GetToken(PostgreSQLParser.NOWAIT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NULLS_P() { return GetToken(PostgreSQLParser.NULLS_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OBJECT_P() { return GetToken(PostgreSQLParser.OBJECT_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OF() { return GetToken(PostgreSQLParser.OF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OFF() { return GetToken(PostgreSQLParser.OFF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OIDS() { return GetToken(PostgreSQLParser.OIDS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OLD() { return GetToken(PostgreSQLParser.OLD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPERATOR() { return GetToken(PostgreSQLParser.OPERATOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPTION() { return GetToken(PostgreSQLParser.OPTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPTIONS() { return GetToken(PostgreSQLParser.OPTIONS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ORDINALITY() { return GetToken(PostgreSQLParser.ORDINALITY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OTHERS() { return GetToken(PostgreSQLParser.OTHERS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OVER() { return GetToken(PostgreSQLParser.OVER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OVERRIDING() { return GetToken(PostgreSQLParser.OVERRIDING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OWNED() { return GetToken(PostgreSQLParser.OWNED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OWNER() { return GetToken(PostgreSQLParser.OWNER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARALLEL() { return GetToken(PostgreSQLParser.PARALLEL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARSER() { return GetToken(PostgreSQLParser.PARSER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARTIAL() { return GetToken(PostgreSQLParser.PARTIAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARTITION() { return GetToken(PostgreSQLParser.PARTITION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PASSING() { return GetToken(PostgreSQLParser.PASSING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PASSWORD() { return GetToken(PostgreSQLParser.PASSWORD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLANS() { return GetToken(PostgreSQLParser.PLANS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode POLICY() { return GetToken(PostgreSQLParser.POLICY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PRECEDING() { return GetToken(PostgreSQLParser.PRECEDING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PREPARE() { return GetToken(PostgreSQLParser.PREPARE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PREPARED() { return GetToken(PostgreSQLParser.PREPARED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PRESERVE() { return GetToken(PostgreSQLParser.PRESERVE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PRIOR() { return GetToken(PostgreSQLParser.PRIOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PRIVILEGES() { return GetToken(PostgreSQLParser.PRIVILEGES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PROCEDURAL() { return GetToken(PostgreSQLParser.PROCEDURAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PROCEDURE() { return GetToken(PostgreSQLParser.PROCEDURE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PROCEDURES() { return GetToken(PostgreSQLParser.PROCEDURES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PROGRAM() { return GetToken(PostgreSQLParser.PROGRAM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PUBLICATION() { return GetToken(PostgreSQLParser.PUBLICATION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode QUOTE() { return GetToken(PostgreSQLParser.QUOTE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RANGE() { return GetToken(PostgreSQLParser.RANGE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode READ() { return GetToken(PostgreSQLParser.READ, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REASSIGN() { return GetToken(PostgreSQLParser.REASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RECHECK() { return GetToken(PostgreSQLParser.RECHECK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RECURSIVE() { return GetToken(PostgreSQLParser.RECURSIVE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REF() { return GetToken(PostgreSQLParser.REF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REFERENCING() { return GetToken(PostgreSQLParser.REFERENCING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REFRESH() { return GetToken(PostgreSQLParser.REFRESH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REINDEX() { return GetToken(PostgreSQLParser.REINDEX, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RELATIVE_P() { return GetToken(PostgreSQLParser.RELATIVE_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RELEASE() { return GetToken(PostgreSQLParser.RELEASE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RENAME() { return GetToken(PostgreSQLParser.RENAME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REPEATABLE() { return GetToken(PostgreSQLParser.REPEATABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REPLICA() { return GetToken(PostgreSQLParser.REPLICA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RESET() { return GetToken(PostgreSQLParser.RESET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RESTART() { return GetToken(PostgreSQLParser.RESTART, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RESTRICT() { return GetToken(PostgreSQLParser.RESTRICT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RETURNS() { return GetToken(PostgreSQLParser.RETURNS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REVOKE() { return GetToken(PostgreSQLParser.REVOKE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROLE() { return GetToken(PostgreSQLParser.ROLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROLLBACK() { return GetToken(PostgreSQLParser.ROLLBACK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROLLUP() { return GetToken(PostgreSQLParser.ROLLUP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROUTINE() { return GetToken(PostgreSQLParser.ROUTINE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROUTINES() { return GetToken(PostgreSQLParser.ROUTINES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROWS() { return GetToken(PostgreSQLParser.ROWS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RULE() { return GetToken(PostgreSQLParser.RULE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SAVEPOINT() { return GetToken(PostgreSQLParser.SAVEPOINT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SCHEMA() { return GetToken(PostgreSQLParser.SCHEMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SCHEMAS() { return GetToken(PostgreSQLParser.SCHEMAS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SCROLL() { return GetToken(PostgreSQLParser.SCROLL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEARCH() { return GetToken(PostgreSQLParser.SEARCH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SECOND_P() { return GetToken(PostgreSQLParser.SECOND_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SECURITY() { return GetToken(PostgreSQLParser.SECURITY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEQUENCE() { return GetToken(PostgreSQLParser.SEQUENCE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEQUENCES() { return GetToken(PostgreSQLParser.SEQUENCES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SERIALIZABLE() { return GetToken(PostgreSQLParser.SERIALIZABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SERVER() { return GetToken(PostgreSQLParser.SERVER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SESSION() { return GetToken(PostgreSQLParser.SESSION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SET() { return GetToken(PostgreSQLParser.SET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SETS() { return GetToken(PostgreSQLParser.SETS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SHARE() { return GetToken(PostgreSQLParser.SHARE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SHOW() { return GetToken(PostgreSQLParser.SHOW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SIMPLE() { return GetToken(PostgreSQLParser.SIMPLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SKIP_P() { return GetToken(PostgreSQLParser.SKIP_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SNAPSHOT() { return GetToken(PostgreSQLParser.SNAPSHOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SQL_P() { return GetToken(PostgreSQLParser.SQL_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STABLE() { return GetToken(PostgreSQLParser.STABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STANDALONE_P() { return GetToken(PostgreSQLParser.STANDALONE_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode START() { return GetToken(PostgreSQLParser.START, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STATEMENT() { return GetToken(PostgreSQLParser.STATEMENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STATISTICS() { return GetToken(PostgreSQLParser.STATISTICS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STDIN() { return GetToken(PostgreSQLParser.STDIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STDOUT() { return GetToken(PostgreSQLParser.STDOUT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STORAGE() { return GetToken(PostgreSQLParser.STORAGE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STORED() { return GetToken(PostgreSQLParser.STORED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRICT_P() { return GetToken(PostgreSQLParser.STRICT_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRIP_P() { return GetToken(PostgreSQLParser.STRIP_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SUBSCRIPTION() { return GetToken(PostgreSQLParser.SUBSCRIPTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SUPPORT() { return GetToken(PostgreSQLParser.SUPPORT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SYSID() { return GetToken(PostgreSQLParser.SYSID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SYSTEM_P() { return GetToken(PostgreSQLParser.SYSTEM_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLES() { return GetToken(PostgreSQLParser.TABLES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLESPACE() { return GetToken(PostgreSQLParser.TABLESPACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TEMP() { return GetToken(PostgreSQLParser.TEMP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TEMPLATE() { return GetToken(PostgreSQLParser.TEMPLATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TEMPORARY() { return GetToken(PostgreSQLParser.TEMPORARY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TEXT_P() { return GetToken(PostgreSQLParser.TEXT_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TIES() { return GetToken(PostgreSQLParser.TIES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRANSACTION() { return GetToken(PostgreSQLParser.TRANSACTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRANSFORM() { return GetToken(PostgreSQLParser.TRANSFORM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRIGGER() { return GetToken(PostgreSQLParser.TRIGGER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRUNCATE() { return GetToken(PostgreSQLParser.TRUNCATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRUSTED() { return GetToken(PostgreSQLParser.TRUSTED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TYPE_P() { return GetToken(PostgreSQLParser.TYPE_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TYPES_P() { return GetToken(PostgreSQLParser.TYPES_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UESCAPE() { return GetToken(PostgreSQLParser.UESCAPE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNBOUNDED() { return GetToken(PostgreSQLParser.UNBOUNDED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNCOMMITTED() { return GetToken(PostgreSQLParser.UNCOMMITTED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNENCRYPTED() { return GetToken(PostgreSQLParser.UNENCRYPTED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNKNOWN() { return GetToken(PostgreSQLParser.UNKNOWN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNLISTEN() { return GetToken(PostgreSQLParser.UNLISTEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNLOGGED() { return GetToken(PostgreSQLParser.UNLOGGED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNTIL() { return GetToken(PostgreSQLParser.UNTIL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UPDATE() { return GetToken(PostgreSQLParser.UPDATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VACUUM() { return GetToken(PostgreSQLParser.VACUUM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VALID() { return GetToken(PostgreSQLParser.VALID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VALIDATE() { return GetToken(PostgreSQLParser.VALIDATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VALIDATOR() { return GetToken(PostgreSQLParser.VALIDATOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VALUE_P() { return GetToken(PostgreSQLParser.VALUE_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARYING() { return GetToken(PostgreSQLParser.VARYING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VERSION_P() { return GetToken(PostgreSQLParser.VERSION_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VIEW() { return GetToken(PostgreSQLParser.VIEW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VIEWS() { return GetToken(PostgreSQLParser.VIEWS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VOLATILE() { return GetToken(PostgreSQLParser.VOLATILE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WHITESPACE_P() { return GetToken(PostgreSQLParser.WHITESPACE_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WITHIN() { return GetToken(PostgreSQLParser.WITHIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WITHOUT() { return GetToken(PostgreSQLParser.WITHOUT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WORK() { return GetToken(PostgreSQLParser.WORK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WRAPPER() { return GetToken(PostgreSQLParser.WRAPPER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WRITE() { return GetToken(PostgreSQLParser.WRITE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode XML_P() { return GetToken(PostgreSQLParser.XML_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode YEAR_P() { return GetToken(PostgreSQLParser.YEAR_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode YES_P() { return GetToken(PostgreSQLParser.YES_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ZONE() { return GetToken(PostgreSQLParser.ZONE, 0); }
		public Unreserved_keywordContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unreserved_keyword; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterUnreserved_keyword(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitUnreserved_keyword(this);
		}
	}

	[RuleVersion(0)]
	public Unreserved_keywordContext unreserved_keyword() {
		Unreserved_keywordContext _localctx = new Unreserved_keywordContext(Context, State);
		EnterRule(_localctx, 1386, RULE_unreserved_keyword);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 9891;
			_la = TokenStream.LA(1);
			if ( !((((_la - 124)) & ~0x3f) == 0 && ((1L << (_la - 124)) & -524319L) != 0 || (((_la - 188)) & ~0x3f) == 0 && ((1L << (_la - 188)) & 9223372036854775807L) != 0 || (((_la - 252)) & ~0x3f) == 0 && ((1L << (_la - 252)) & -9007199254740997L) != 0 || (((_la - 316)) & ~0x3f) == 0 && ((1L << (_la - 316)) & -1L) != 0 || (((_la - 380)) & ~0x3f) == 0 && ((1L << (_la - 380)) & -18014398509481983L) != 0 || (((_la - 444)) & ~0x3f) == 0 && ((1L << (_la - 444)) & 70340155798527L) != 0) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Col_name_keywordContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BETWEEN() { return GetToken(PostgreSQLParser.BETWEEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BIGINT() { return GetToken(PostgreSQLParser.BIGINT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BitContext bit() {
			return GetRuleContext<BitContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BOOLEAN_P() { return GetToken(PostgreSQLParser.BOOLEAN_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHAR_P() { return GetToken(PostgreSQLParser.CHAR_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public CharacterContext character() {
			return GetRuleContext<CharacterContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COALESCE() { return GetToken(PostgreSQLParser.COALESCE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEC() { return GetToken(PostgreSQLParser.DEC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DECIMAL_P() { return GetToken(PostgreSQLParser.DECIMAL_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXISTS() { return GetToken(PostgreSQLParser.EXISTS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXTRACT() { return GetToken(PostgreSQLParser.EXTRACT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FLOAT_P() { return GetToken(PostgreSQLParser.FLOAT_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GREATEST() { return GetToken(PostgreSQLParser.GREATEST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GROUPING() { return GetToken(PostgreSQLParser.GROUPING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INOUT() { return GetToken(PostgreSQLParser.INOUT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INT_P() { return GetToken(PostgreSQLParser.INT_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTEGER() { return GetToken(PostgreSQLParser.INTEGER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTERVAL() { return GetToken(PostgreSQLParser.INTERVAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEAST() { return GetToken(PostgreSQLParser.LEAST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NATIONAL() { return GetToken(PostgreSQLParser.NATIONAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NCHAR() { return GetToken(PostgreSQLParser.NCHAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NONE() { return GetToken(PostgreSQLParser.NONE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NORMALIZE() { return GetToken(PostgreSQLParser.NORMALIZE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NULLIF() { return GetToken(PostgreSQLParser.NULLIF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NumericContext numeric() {
			return GetRuleContext<NumericContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OUT_P() { return GetToken(PostgreSQLParser.OUT_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OVERLAY() { return GetToken(PostgreSQLParser.OVERLAY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode POSITION() { return GetToken(PostgreSQLParser.POSITION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PRECISION() { return GetToken(PostgreSQLParser.PRECISION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REAL() { return GetToken(PostgreSQLParser.REAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROW() { return GetToken(PostgreSQLParser.ROW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SETOF() { return GetToken(PostgreSQLParser.SETOF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SMALLINT() { return GetToken(PostgreSQLParser.SMALLINT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SUBSTRING() { return GetToken(PostgreSQLParser.SUBSTRING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TIME() { return GetToken(PostgreSQLParser.TIME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TIMESTAMP() { return GetToken(PostgreSQLParser.TIMESTAMP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TREAT() { return GetToken(PostgreSQLParser.TREAT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRIM() { return GetToken(PostgreSQLParser.TRIM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VALUES() { return GetToken(PostgreSQLParser.VALUES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARCHAR() { return GetToken(PostgreSQLParser.VARCHAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode XMLATTRIBUTES() { return GetToken(PostgreSQLParser.XMLATTRIBUTES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode XMLCONCAT() { return GetToken(PostgreSQLParser.XMLCONCAT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode XMLELEMENT() { return GetToken(PostgreSQLParser.XMLELEMENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode XMLEXISTS() { return GetToken(PostgreSQLParser.XMLEXISTS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode XMLFOREST() { return GetToken(PostgreSQLParser.XMLFOREST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode XMLNAMESPACES() { return GetToken(PostgreSQLParser.XMLNAMESPACES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode XMLPARSE() { return GetToken(PostgreSQLParser.XMLPARSE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode XMLPI() { return GetToken(PostgreSQLParser.XMLPI, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode XMLROOT() { return GetToken(PostgreSQLParser.XMLROOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode XMLSERIALIZE() { return GetToken(PostgreSQLParser.XMLSERIALIZE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode XMLTABLE() { return GetToken(PostgreSQLParser.XMLTABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Builtin_function_nameContext builtin_function_name() {
			return GetRuleContext<Builtin_function_nameContext>(0);
		}
		public Col_name_keywordContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_col_name_keyword; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterCol_name_keyword(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitCol_name_keyword(this);
		}
	}

	[RuleVersion(0)]
	public Col_name_keywordContext col_name_keyword() {
		Col_name_keywordContext _localctx = new Col_name_keywordContext(Context, State);
		EnterRule(_localctx, 1388, RULE_col_name_keyword);
		try {
			State = 9945;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,664,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 9893;
				Match(BETWEEN);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 9894;
				Match(BIGINT);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 9895;
				bit();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 9896;
				Match(BOOLEAN_P);
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 9897;
				Match(CHAR_P);
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 9898;
				character();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 9899;
				Match(COALESCE);
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 9900;
				Match(DEC);
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 9901;
				Match(DECIMAL_P);
				}
				break;
			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 9902;
				Match(EXISTS);
				}
				break;
			case 11:
				EnterOuterAlt(_localctx, 11);
				{
				State = 9903;
				Match(EXTRACT);
				}
				break;
			case 12:
				EnterOuterAlt(_localctx, 12);
				{
				State = 9904;
				Match(FLOAT_P);
				}
				break;
			case 13:
				EnterOuterAlt(_localctx, 13);
				{
				State = 9905;
				Match(GREATEST);
				}
				break;
			case 14:
				EnterOuterAlt(_localctx, 14);
				{
				State = 9906;
				Match(GROUPING);
				}
				break;
			case 15:
				EnterOuterAlt(_localctx, 15);
				{
				State = 9907;
				Match(INOUT);
				}
				break;
			case 16:
				EnterOuterAlt(_localctx, 16);
				{
				State = 9908;
				Match(INT_P);
				}
				break;
			case 17:
				EnterOuterAlt(_localctx, 17);
				{
				State = 9909;
				Match(INTEGER);
				}
				break;
			case 18:
				EnterOuterAlt(_localctx, 18);
				{
				State = 9910;
				Match(INTERVAL);
				}
				break;
			case 19:
				EnterOuterAlt(_localctx, 19);
				{
				State = 9911;
				Match(LEAST);
				}
				break;
			case 20:
				EnterOuterAlt(_localctx, 20);
				{
				State = 9912;
				Match(NATIONAL);
				}
				break;
			case 21:
				EnterOuterAlt(_localctx, 21);
				{
				State = 9913;
				Match(NCHAR);
				}
				break;
			case 22:
				EnterOuterAlt(_localctx, 22);
				{
				State = 9914;
				Match(NONE);
				}
				break;
			case 23:
				EnterOuterAlt(_localctx, 23);
				{
				State = 9915;
				Match(NORMALIZE);
				}
				break;
			case 24:
				EnterOuterAlt(_localctx, 24);
				{
				State = 9916;
				Match(NULLIF);
				}
				break;
			case 25:
				EnterOuterAlt(_localctx, 25);
				{
				State = 9917;
				numeric();
				}
				break;
			case 26:
				EnterOuterAlt(_localctx, 26);
				{
				State = 9918;
				Match(OUT_P);
				}
				break;
			case 27:
				EnterOuterAlt(_localctx, 27);
				{
				State = 9919;
				Match(OVERLAY);
				}
				break;
			case 28:
				EnterOuterAlt(_localctx, 28);
				{
				State = 9920;
				Match(POSITION);
				}
				break;
			case 29:
				EnterOuterAlt(_localctx, 29);
				{
				State = 9921;
				Match(PRECISION);
				}
				break;
			case 30:
				EnterOuterAlt(_localctx, 30);
				{
				State = 9922;
				Match(REAL);
				}
				break;
			case 31:
				EnterOuterAlt(_localctx, 31);
				{
				State = 9923;
				Match(ROW);
				}
				break;
			case 32:
				EnterOuterAlt(_localctx, 32);
				{
				State = 9924;
				Match(SETOF);
				}
				break;
			case 33:
				EnterOuterAlt(_localctx, 33);
				{
				State = 9925;
				Match(SMALLINT);
				}
				break;
			case 34:
				EnterOuterAlt(_localctx, 34);
				{
				State = 9926;
				Match(SUBSTRING);
				}
				break;
			case 35:
				EnterOuterAlt(_localctx, 35);
				{
				State = 9927;
				Match(TIME);
				}
				break;
			case 36:
				EnterOuterAlt(_localctx, 36);
				{
				State = 9928;
				Match(TIMESTAMP);
				}
				break;
			case 37:
				EnterOuterAlt(_localctx, 37);
				{
				State = 9929;
				Match(TREAT);
				}
				break;
			case 38:
				EnterOuterAlt(_localctx, 38);
				{
				State = 9930;
				Match(TRIM);
				}
				break;
			case 39:
				EnterOuterAlt(_localctx, 39);
				{
				State = 9931;
				Match(VALUES);
				}
				break;
			case 40:
				EnterOuterAlt(_localctx, 40);
				{
				State = 9932;
				Match(VARCHAR);
				}
				break;
			case 41:
				EnterOuterAlt(_localctx, 41);
				{
				State = 9933;
				Match(XMLATTRIBUTES);
				}
				break;
			case 42:
				EnterOuterAlt(_localctx, 42);
				{
				State = 9934;
				Match(XMLCONCAT);
				}
				break;
			case 43:
				EnterOuterAlt(_localctx, 43);
				{
				State = 9935;
				Match(XMLELEMENT);
				}
				break;
			case 44:
				EnterOuterAlt(_localctx, 44);
				{
				State = 9936;
				Match(XMLEXISTS);
				}
				break;
			case 45:
				EnterOuterAlt(_localctx, 45);
				{
				State = 9937;
				Match(XMLFOREST);
				}
				break;
			case 46:
				EnterOuterAlt(_localctx, 46);
				{
				State = 9938;
				Match(XMLNAMESPACES);
				}
				break;
			case 47:
				EnterOuterAlt(_localctx, 47);
				{
				State = 9939;
				Match(XMLPARSE);
				}
				break;
			case 48:
				EnterOuterAlt(_localctx, 48);
				{
				State = 9940;
				Match(XMLPI);
				}
				break;
			case 49:
				EnterOuterAlt(_localctx, 49);
				{
				State = 9941;
				Match(XMLROOT);
				}
				break;
			case 50:
				EnterOuterAlt(_localctx, 50);
				{
				State = 9942;
				Match(XMLSERIALIZE);
				}
				break;
			case 51:
				EnterOuterAlt(_localctx, 51);
				{
				State = 9943;
				Match(XMLTABLE);
				}
				break;
			case 52:
				EnterOuterAlt(_localctx, 52);
				{
				State = 9944;
				builtin_function_name();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Type_func_name_keywordContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AUTHORIZATION() { return GetToken(PostgreSQLParser.AUTHORIZATION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BINARY() { return GetToken(PostgreSQLParser.BINARY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLLATION() { return GetToken(PostgreSQLParser.COLLATION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONCURRENTLY() { return GetToken(PostgreSQLParser.CONCURRENTLY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CROSS() { return GetToken(PostgreSQLParser.CROSS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CURRENT_SCHEMA() { return GetToken(PostgreSQLParser.CURRENT_SCHEMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FREEZE() { return GetToken(PostgreSQLParser.FREEZE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FULL() { return GetToken(PostgreSQLParser.FULL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ILIKE() { return GetToken(PostgreSQLParser.ILIKE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INNER_P() { return GetToken(PostgreSQLParser.INNER_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IS() { return GetToken(PostgreSQLParser.IS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ISNULL() { return GetToken(PostgreSQLParser.ISNULL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode JOIN() { return GetToken(PostgreSQLParser.JOIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LIKE() { return GetToken(PostgreSQLParser.LIKE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NATURAL() { return GetToken(PostgreSQLParser.NATURAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOTNULL() { return GetToken(PostgreSQLParser.NOTNULL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OUTER_P() { return GetToken(PostgreSQLParser.OUTER_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OVERLAPS() { return GetToken(PostgreSQLParser.OVERLAPS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SIMILAR() { return GetToken(PostgreSQLParser.SIMILAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLESAMPLE() { return GetToken(PostgreSQLParser.TABLESAMPLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VERBOSE() { return GetToken(PostgreSQLParser.VERBOSE, 0); }
		public Type_func_name_keywordContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type_func_name_keyword; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterType_func_name_keyword(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitType_func_name_keyword(this);
		}
	}

	[RuleVersion(0)]
	public Type_func_name_keywordContext type_func_name_keyword() {
		Type_func_name_keywordContext _localctx = new Type_func_name_keywordContext(Context, State);
		EnterRule(_localctx, 1390, RULE_type_func_name_keyword);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 9947;
			_la = TokenStream.LA(1);
			if ( !((((_la - 106)) & ~0x3f) == 0 && ((1L << (_la - 106)) & 7069695L) != 0 || _la==TABLESAMPLE) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Reserved_keywordContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALL() { return GetToken(PostgreSQLParser.ALL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ANALYSE() { return GetToken(PostgreSQLParser.ANALYSE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ANALYZE() { return GetToken(PostgreSQLParser.ANALYZE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AND() { return GetToken(PostgreSQLParser.AND, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ANY() { return GetToken(PostgreSQLParser.ANY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ARRAY() { return GetToken(PostgreSQLParser.ARRAY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS() { return GetToken(PostgreSQLParser.AS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASC() { return GetToken(PostgreSQLParser.ASC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASYMMETRIC() { return GetToken(PostgreSQLParser.ASYMMETRIC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BOTH() { return GetToken(PostgreSQLParser.BOTH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CASE() { return GetToken(PostgreSQLParser.CASE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CAST() { return GetToken(PostgreSQLParser.CAST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHECK() { return GetToken(PostgreSQLParser.CHECK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLLATE() { return GetToken(PostgreSQLParser.COLLATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLUMN() { return GetToken(PostgreSQLParser.COLUMN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONSTRAINT() { return GetToken(PostgreSQLParser.CONSTRAINT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CREATE() { return GetToken(PostgreSQLParser.CREATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CURRENT_CATALOG() { return GetToken(PostgreSQLParser.CURRENT_CATALOG, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CURRENT_DATE() { return GetToken(PostgreSQLParser.CURRENT_DATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CURRENT_ROLE() { return GetToken(PostgreSQLParser.CURRENT_ROLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CURRENT_TIME() { return GetToken(PostgreSQLParser.CURRENT_TIME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CURRENT_TIMESTAMP() { return GetToken(PostgreSQLParser.CURRENT_TIMESTAMP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CURRENT_USER() { return GetToken(PostgreSQLParser.CURRENT_USER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFERRABLE() { return GetToken(PostgreSQLParser.DEFERRABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DESC() { return GetToken(PostgreSQLParser.DESC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DISTINCT() { return GetToken(PostgreSQLParser.DISTINCT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DO() { return GetToken(PostgreSQLParser.DO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ELSE() { return GetToken(PostgreSQLParser.ELSE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END_P() { return GetToken(PostgreSQLParser.END_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXCEPT() { return GetToken(PostgreSQLParser.EXCEPT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FALSE_P() { return GetToken(PostgreSQLParser.FALSE_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FETCH() { return GetToken(PostgreSQLParser.FETCH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOR() { return GetToken(PostgreSQLParser.FOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOREIGN() { return GetToken(PostgreSQLParser.FOREIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FROM() { return GetToken(PostgreSQLParser.FROM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GRANT() { return GetToken(PostgreSQLParser.GRANT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GROUP_P() { return GetToken(PostgreSQLParser.GROUP_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HAVING() { return GetToken(PostgreSQLParser.HAVING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IN_P() { return GetToken(PostgreSQLParser.IN_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INITIALLY() { return GetToken(PostgreSQLParser.INITIALLY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTERSECT() { return GetToken(PostgreSQLParser.INTERSECT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LATERAL_P() { return GetToken(PostgreSQLParser.LATERAL_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEADING() { return GetToken(PostgreSQLParser.LEADING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LIMIT() { return GetToken(PostgreSQLParser.LIMIT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOCALTIME() { return GetToken(PostgreSQLParser.LOCALTIME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOCALTIMESTAMP() { return GetToken(PostgreSQLParser.LOCALTIMESTAMP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT() { return GetToken(PostgreSQLParser.NOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NULL_P() { return GetToken(PostgreSQLParser.NULL_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OFFSET() { return GetToken(PostgreSQLParser.OFFSET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ON() { return GetToken(PostgreSQLParser.ON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ONLY() { return GetToken(PostgreSQLParser.ONLY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OR() { return GetToken(PostgreSQLParser.OR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ORDER() { return GetToken(PostgreSQLParser.ORDER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLACING() { return GetToken(PostgreSQLParser.PLACING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PRIMARY() { return GetToken(PostgreSQLParser.PRIMARY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REFERENCES() { return GetToken(PostgreSQLParser.REFERENCES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RETURNING() { return GetToken(PostgreSQLParser.RETURNING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SELECT() { return GetToken(PostgreSQLParser.SELECT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SESSION_USER() { return GetToken(PostgreSQLParser.SESSION_USER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SOME() { return GetToken(PostgreSQLParser.SOME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SYMMETRIC() { return GetToken(PostgreSQLParser.SYMMETRIC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLE() { return GetToken(PostgreSQLParser.TABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode THEN() { return GetToken(PostgreSQLParser.THEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TO() { return GetToken(PostgreSQLParser.TO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRAILING() { return GetToken(PostgreSQLParser.TRAILING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRUE_P() { return GetToken(PostgreSQLParser.TRUE_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNION() { return GetToken(PostgreSQLParser.UNION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNIQUE() { return GetToken(PostgreSQLParser.UNIQUE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode USER() { return GetToken(PostgreSQLParser.USER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode USING() { return GetToken(PostgreSQLParser.USING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARIADIC() { return GetToken(PostgreSQLParser.VARIADIC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WHEN() { return GetToken(PostgreSQLParser.WHEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WHERE() { return GetToken(PostgreSQLParser.WHERE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WINDOW() { return GetToken(PostgreSQLParser.WINDOW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WITH() { return GetToken(PostgreSQLParser.WITH, 0); }
		public Reserved_keywordContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_reserved_keyword; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterReserved_keyword(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitReserved_keyword(this);
		}
	}

	[RuleVersion(0)]
	public Reserved_keywordContext reserved_keyword() {
		Reserved_keywordContext _localctx = new Reserved_keywordContext(Context, State);
		EnterRule(_localctx, 1392, RULE_reserved_keyword);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 9949;
			_la = TokenStream.LA(1);
			if ( !(((_la) & ~0x3f) == 0 && ((1L << _la) & -9007200328482816L) != 0 || (((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & 4398046510975L) != 0 || _la==END_P) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Builtin_function_nameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode XMLCOMMENT() { return GetToken(PostgreSQLParser.XMLCOMMENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode XML_IS_WELL_FORMED() { return GetToken(PostgreSQLParser.XML_IS_WELL_FORMED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode XML_IS_WELL_FORMED_DOCUMENT() { return GetToken(PostgreSQLParser.XML_IS_WELL_FORMED_DOCUMENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode XML_IS_WELL_FORMED_CONTENT() { return GetToken(PostgreSQLParser.XML_IS_WELL_FORMED_CONTENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode XMLAGG() { return GetToken(PostgreSQLParser.XMLAGG, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode XPATH() { return GetToken(PostgreSQLParser.XPATH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode XPATH_EXISTS() { return GetToken(PostgreSQLParser.XPATH_EXISTS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ABS() { return GetToken(PostgreSQLParser.ABS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CBRT() { return GetToken(PostgreSQLParser.CBRT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CEIL() { return GetToken(PostgreSQLParser.CEIL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CEILING() { return GetToken(PostgreSQLParser.CEILING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEGREES() { return GetToken(PostgreSQLParser.DEGREES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DIV() { return GetToken(PostgreSQLParser.DIV, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXP() { return GetToken(PostgreSQLParser.EXP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FACTORIAL() { return GetToken(PostgreSQLParser.FACTORIAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FLOOR() { return GetToken(PostgreSQLParser.FLOOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GCD() { return GetToken(PostgreSQLParser.GCD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LCM() { return GetToken(PostgreSQLParser.LCM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LN() { return GetToken(PostgreSQLParser.LN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOG() { return GetToken(PostgreSQLParser.LOG, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOG10() { return GetToken(PostgreSQLParser.LOG10, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MIN_SCALE() { return GetToken(PostgreSQLParser.MIN_SCALE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MOD() { return GetToken(PostgreSQLParser.MOD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PI() { return GetToken(PostgreSQLParser.PI, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode POWER() { return GetToken(PostgreSQLParser.POWER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RADIANS() { return GetToken(PostgreSQLParser.RADIANS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROUND() { return GetToken(PostgreSQLParser.ROUND, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SCALE() { return GetToken(PostgreSQLParser.SCALE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SIGN() { return GetToken(PostgreSQLParser.SIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SQRT() { return GetToken(PostgreSQLParser.SQRT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRIM_SCALE() { return GetToken(PostgreSQLParser.TRIM_SCALE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRUNC() { return GetToken(PostgreSQLParser.TRUNC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WIDTH_BUCKET() { return GetToken(PostgreSQLParser.WIDTH_BUCKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RANDOM() { return GetToken(PostgreSQLParser.RANDOM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SETSEED() { return GetToken(PostgreSQLParser.SETSEED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ACOS() { return GetToken(PostgreSQLParser.ACOS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ACOSD() { return GetToken(PostgreSQLParser.ACOSD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ACOSH() { return GetToken(PostgreSQLParser.ACOSH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASIN() { return GetToken(PostgreSQLParser.ASIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASIND() { return GetToken(PostgreSQLParser.ASIND, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASINH() { return GetToken(PostgreSQLParser.ASINH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ATAN() { return GetToken(PostgreSQLParser.ATAN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ATAND() { return GetToken(PostgreSQLParser.ATAND, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ATANH() { return GetToken(PostgreSQLParser.ATANH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ATAN2() { return GetToken(PostgreSQLParser.ATAN2, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ATAN2D() { return GetToken(PostgreSQLParser.ATAN2D, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COS() { return GetToken(PostgreSQLParser.COS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COSD() { return GetToken(PostgreSQLParser.COSD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COSH() { return GetToken(PostgreSQLParser.COSH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COT() { return GetToken(PostgreSQLParser.COT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COTD() { return GetToken(PostgreSQLParser.COTD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SIN() { return GetToken(PostgreSQLParser.SIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SIND() { return GetToken(PostgreSQLParser.SIND, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SINH() { return GetToken(PostgreSQLParser.SINH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TAN() { return GetToken(PostgreSQLParser.TAN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TAND() { return GetToken(PostgreSQLParser.TAND, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TANH() { return GetToken(PostgreSQLParser.TANH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BIT_LENGTH() { return GetToken(PostgreSQLParser.BIT_LENGTH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHAR_LENGTH() { return GetToken(PostgreSQLParser.CHAR_LENGTH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHARACTER_LENGTH() { return GetToken(PostgreSQLParser.CHARACTER_LENGTH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOWER() { return GetToken(PostgreSQLParser.LOWER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OCTET_LENGTH() { return GetToken(PostgreSQLParser.OCTET_LENGTH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UPPER() { return GetToken(PostgreSQLParser.UPPER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASCII() { return GetToken(PostgreSQLParser.ASCII, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BTRIM() { return GetToken(PostgreSQLParser.BTRIM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHR() { return GetToken(PostgreSQLParser.CHR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONCAT() { return GetToken(PostgreSQLParser.CONCAT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONCAT_WS() { return GetToken(PostgreSQLParser.CONCAT_WS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FORMAT() { return GetToken(PostgreSQLParser.FORMAT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INITCAP() { return GetToken(PostgreSQLParser.INITCAP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LENGTH() { return GetToken(PostgreSQLParser.LENGTH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAD() { return GetToken(PostgreSQLParser.LPAD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LTRIM() { return GetToken(PostgreSQLParser.LTRIM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MD5() { return GetToken(PostgreSQLParser.MD5, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARSE_IDENT() { return GetToken(PostgreSQLParser.PARSE_IDENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PG_CLIENT_ENCODING() { return GetToken(PostgreSQLParser.PG_CLIENT_ENCODING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode QUOTE_IDENT() { return GetToken(PostgreSQLParser.QUOTE_IDENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode QUOTE_LITERAL() { return GetToken(PostgreSQLParser.QUOTE_LITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode QUOTE_NULLABLE() { return GetToken(PostgreSQLParser.QUOTE_NULLABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REGEXP_COUNT() { return GetToken(PostgreSQLParser.REGEXP_COUNT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REGEXP_INSTR() { return GetToken(PostgreSQLParser.REGEXP_INSTR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REGEXP_LIKE() { return GetToken(PostgreSQLParser.REGEXP_LIKE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REGEXP_MATCH() { return GetToken(PostgreSQLParser.REGEXP_MATCH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REGEXP_MATCHES() { return GetToken(PostgreSQLParser.REGEXP_MATCHES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REGEXP_REPLACE() { return GetToken(PostgreSQLParser.REGEXP_REPLACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REGEXP_SPLIT_TO_ARRAY() { return GetToken(PostgreSQLParser.REGEXP_SPLIT_TO_ARRAY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REGEXP_SPLIT_TO_TABLE() { return GetToken(PostgreSQLParser.REGEXP_SPLIT_TO_TABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REGEXP_SUBSTR() { return GetToken(PostgreSQLParser.REGEXP_SUBSTR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REPEAT() { return GetToken(PostgreSQLParser.REPEAT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REPLACE() { return GetToken(PostgreSQLParser.REPLACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REVERSE() { return GetToken(PostgreSQLParser.REVERSE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAD() { return GetToken(PostgreSQLParser.RPAD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RTRIM() { return GetToken(PostgreSQLParser.RTRIM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SPLIT_PART() { return GetToken(PostgreSQLParser.SPLIT_PART, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STARTS_WITH() { return GetToken(PostgreSQLParser.STARTS_WITH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_TO_ARRAY() { return GetToken(PostgreSQLParser.STRING_TO_ARRAY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_TO_TABLE() { return GetToken(PostgreSQLParser.STRING_TO_TABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRPOS() { return GetToken(PostgreSQLParser.STRPOS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SUBSTR() { return GetToken(PostgreSQLParser.SUBSTR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TO_ASCII() { return GetToken(PostgreSQLParser.TO_ASCII, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TO_HEX() { return GetToken(PostgreSQLParser.TO_HEX, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRANSLATE() { return GetToken(PostgreSQLParser.TRANSLATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNISTR() { return GetToken(PostgreSQLParser.UNISTR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AGE() { return GetToken(PostgreSQLParser.AGE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DATE_BIN() { return GetToken(PostgreSQLParser.DATE_BIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DATE_PART() { return GetToken(PostgreSQLParser.DATE_PART, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DATE_TRUNC() { return GetToken(PostgreSQLParser.DATE_TRUNC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ISFINITE() { return GetToken(PostgreSQLParser.ISFINITE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode JUSTIFY_DAYS() { return GetToken(PostgreSQLParser.JUSTIFY_DAYS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode JUSTIFY_HOURS() { return GetToken(PostgreSQLParser.JUSTIFY_HOURS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode JUSTIFY_INTERVAL() { return GetToken(PostgreSQLParser.JUSTIFY_INTERVAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MAKE_DATE() { return GetToken(PostgreSQLParser.MAKE_DATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MAKE_INTERVAL() { return GetToken(PostgreSQLParser.MAKE_INTERVAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MAKE_TIME() { return GetToken(PostgreSQLParser.MAKE_TIME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MAKE_TIMESTAMP() { return GetToken(PostgreSQLParser.MAKE_TIMESTAMP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MAKE_TIMESTAMPTZ() { return GetToken(PostgreSQLParser.MAKE_TIMESTAMPTZ, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOCK_TIMESTAMP() { return GetToken(PostgreSQLParser.CLOCK_TIMESTAMP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOW() { return GetToken(PostgreSQLParser.NOW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STATEMENT_TIMESTAMP() { return GetToken(PostgreSQLParser.STATEMENT_TIMESTAMP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TIMEOFDAY() { return GetToken(PostgreSQLParser.TIMEOFDAY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRANSACTION_TIMESTAMP() { return GetToken(PostgreSQLParser.TRANSACTION_TIMESTAMP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TO_TIMESTAMP() { return GetToken(PostgreSQLParser.TO_TIMESTAMP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TO_CHAR() { return GetToken(PostgreSQLParser.TO_CHAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TO_DATE() { return GetToken(PostgreSQLParser.TO_DATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TO_NUMBER() { return GetToken(PostgreSQLParser.TO_NUMBER, 0); }
		public Builtin_function_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_builtin_function_name; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterBuiltin_function_name(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitBuiltin_function_name(this);
		}
	}

	[RuleVersion(0)]
	public Builtin_function_nameContext builtin_function_name() {
		Builtin_function_nameContext _localctx = new Builtin_function_nameContext(Context, State);
		EnterRule(_localctx, 1394, RULE_builtin_function_name);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 9951;
			_la = TokenStream.LA(1);
			if ( !(_la==REPLACE || (((_la - 419)) & ~0x3f) == 0 && ((1L << (_la - 419)) & 127L) != 0 || (((_la - 505)) & ~0x3f) == 0 && ((1L << (_la - 505)) & -130559L) != 0 || (((_la - 569)) & ~0x3f) == 0 && ((1L << (_la - 569)) & -1L) != 0 || (((_la - 633)) & ~0x3f) == 0 && ((1L << (_la - 633)) & 15L) != 0) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Pl_functionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Comp_optionsContext comp_options() {
			return GetRuleContext<Comp_optionsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Pl_blockContext pl_block() {
			return GetRuleContext<Pl_blockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Opt_semiContext opt_semi() {
			return GetRuleContext<Opt_semiContext>(0);
		}
		public Pl_functionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pl_function; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterPl_function(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitPl_function(this);
		}
	}

	[RuleVersion(0)]
	public Pl_functionContext pl_function() {
		Pl_functionContext _localctx = new Pl_functionContext(Context, State);
		EnterRule(_localctx, 1396, RULE_pl_function);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 9953;
			comp_options();
			State = 9954;
			pl_block();
			State = 9955;
			opt_semi();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Comp_optionsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Comp_optionContext[] comp_option() {
			return GetRuleContexts<Comp_optionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Comp_optionContext comp_option(int i) {
			return GetRuleContext<Comp_optionContext>(i);
		}
		public Comp_optionsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_comp_options; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterComp_options(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitComp_options(this);
		}
	}

	[RuleVersion(0)]
	public Comp_optionsContext comp_options() {
		Comp_optionsContext _localctx = new Comp_optionsContext(Context, State);
		EnterRule(_localctx, 1398, RULE_comp_options);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 9960;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==Operator) {
				{
				{
				State = 9957;
				comp_option();
				}
				}
				State = 9962;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Comp_optionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SharpContext sharp() {
			return GetRuleContext<SharpContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPTION() { return GetToken(PostgreSQLParser.OPTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DUMP() { return GetToken(PostgreSQLParser.DUMP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PRINT_STRICT_PARAMS() { return GetToken(PostgreSQLParser.PRINT_STRICT_PARAMS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Option_valueContext option_value() {
			return GetRuleContext<Option_valueContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARIABLE_CONFLICT() { return GetToken(PostgreSQLParser.VARIABLE_CONFLICT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ERROR() { return GetToken(PostgreSQLParser.ERROR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode USE_VARIABLE() { return GetToken(PostgreSQLParser.USE_VARIABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode USE_COLUMN() { return GetToken(PostgreSQLParser.USE_COLUMN, 0); }
		public Comp_optionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_comp_option; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterComp_option(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitComp_option(this);
		}
	}

	[RuleVersion(0)]
	public Comp_optionContext comp_option() {
		Comp_optionContext _localctx = new Comp_optionContext(Context, State);
		EnterRule(_localctx, 1400, RULE_comp_option);
		try {
			State = 9983;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,666,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 9963;
				sharp();
				State = 9964;
				Match(OPTION);
				State = 9965;
				Match(DUMP);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 9967;
				sharp();
				State = 9968;
				Match(PRINT_STRICT_PARAMS);
				State = 9969;
				option_value();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 9971;
				sharp();
				State = 9972;
				Match(VARIABLE_CONFLICT);
				State = 9973;
				Match(ERROR);
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 9975;
				sharp();
				State = 9976;
				Match(VARIABLE_CONFLICT);
				State = 9977;
				Match(USE_VARIABLE);
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 9979;
				sharp();
				State = 9980;
				Match(VARIABLE_CONFLICT);
				State = 9981;
				Match(USE_COLUMN);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SharpContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Operator() { return GetToken(PostgreSQLParser.Operator, 0); }
		public SharpContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sharp; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterSharp(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitSharp(this);
		}
	}

	[RuleVersion(0)]
	public SharpContext sharp() {
		SharpContext _localctx = new SharpContext(Context, State);
		EnterRule(_localctx, 1402, RULE_sharp);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 9985;
			Match(Operator);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Option_valueContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SconstContext sconst() {
			return GetRuleContext<SconstContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Reserved_keywordContext reserved_keyword() {
			return GetRuleContext<Reserved_keywordContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Plsql_unreserved_keywordContext plsql_unreserved_keyword() {
			return GetRuleContext<Plsql_unreserved_keywordContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Unreserved_keywordContext unreserved_keyword() {
			return GetRuleContext<Unreserved_keywordContext>(0);
		}
		public Option_valueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_option_value; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterOption_value(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitOption_value(this);
		}
	}

	[RuleVersion(0)]
	public Option_valueContext option_value() {
		Option_valueContext _localctx = new Option_valueContext(Context, State);
		EnterRule(_localctx, 1404, RULE_option_value);
		try {
			State = 9991;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,667,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 9987;
				sconst();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 9988;
				reserved_keyword();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 9989;
				plsql_unreserved_keyword();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 9990;
				unreserved_keyword();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Opt_semiContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(PostgreSQLParser.SEMI, 0); }
		public Opt_semiContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_opt_semi; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterOpt_semi(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitOpt_semi(this);
		}
	}

	[RuleVersion(0)]
	public Opt_semiContext opt_semi() {
		Opt_semiContext _localctx = new Opt_semiContext(Context, State);
		EnterRule(_localctx, 1406, RULE_opt_semi);
		try {
			State = 9995;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Eof:
				EnterOuterAlt(_localctx, 1);
				{
				}
				break;
			case SEMI:
				EnterOuterAlt(_localctx, 2);
				{
				State = 9994;
				Match(SEMI);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Pl_blockContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Decl_sectContext decl_sect() {
			return GetRuleContext<Decl_sectContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BEGIN_P() { return GetToken(PostgreSQLParser.BEGIN_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Proc_sectContext proc_sect() {
			return GetRuleContext<Proc_sectContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Exception_sectContext exception_sect() {
			return GetRuleContext<Exception_sectContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END_P() { return GetToken(PostgreSQLParser.END_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Opt_labelContext opt_label() {
			return GetRuleContext<Opt_labelContext>(0);
		}
		public Pl_blockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pl_block; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterPl_block(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitPl_block(this);
		}
	}

	[RuleVersion(0)]
	public Pl_blockContext pl_block() {
		Pl_blockContext _localctx = new Pl_blockContext(Context, State);
		EnterRule(_localctx, 1408, RULE_pl_block);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 9997;
			decl_sect();
			State = 9998;
			Match(BEGIN_P);
			State = 9999;
			proc_sect();
			State = 10000;
			exception_sect();
			State = 10001;
			Match(END_P);
			State = 10002;
			opt_label();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Decl_sectContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Opt_block_labelContext opt_block_label() {
			return GetRuleContext<Opt_block_labelContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Decl_startContext decl_start() {
			return GetRuleContext<Decl_startContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Decl_stmtsContext decl_stmts() {
			return GetRuleContext<Decl_stmtsContext>(0);
		}
		public Decl_sectContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_decl_sect; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterDecl_sect(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitDecl_sect(this);
		}
	}

	[RuleVersion(0)]
	public Decl_sectContext decl_sect() {
		Decl_sectContext _localctx = new Decl_sectContext(Context, State);
		EnterRule(_localctx, 1410, RULE_decl_sect);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 10004;
			opt_block_label();
			State = 10009;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==DECLARE) {
				{
				State = 10005;
				decl_start();
				State = 10007;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,669,Context) ) {
				case 1:
					{
					State = 10006;
					decl_stmts();
					}
					break;
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Decl_startContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DECLARE() { return GetToken(PostgreSQLParser.DECLARE, 0); }
		public Decl_startContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_decl_start; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterDecl_start(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitDecl_start(this);
		}
	}

	[RuleVersion(0)]
	public Decl_startContext decl_start() {
		Decl_startContext _localctx = new Decl_startContext(Context, State);
		EnterRule(_localctx, 1412, RULE_decl_start);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 10011;
			Match(DECLARE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Decl_stmtsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Decl_stmtContext[] decl_stmt() {
			return GetRuleContexts<Decl_stmtContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Decl_stmtContext decl_stmt(int i) {
			return GetRuleContext<Decl_stmtContext>(i);
		}
		public Decl_stmtsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_decl_stmts; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterDecl_stmts(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitDecl_stmts(this);
		}
	}

	[RuleVersion(0)]
	public Decl_stmtsContext decl_stmts() {
		Decl_stmtsContext _localctx = new Decl_stmtsContext(Context, State);
		EnterRule(_localctx, 1414, RULE_decl_stmts);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 10014;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 10013;
					decl_stmt();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 10016;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,671,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Label_declContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LESS_LESS() { return GetToken(PostgreSQLParser.LESS_LESS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Any_identifierContext any_identifier() {
			return GetRuleContext<Any_identifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GREATER_GREATER() { return GetToken(PostgreSQLParser.GREATER_GREATER, 0); }
		public Label_declContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_label_decl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterLabel_decl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitLabel_decl(this);
		}
	}

	[RuleVersion(0)]
	public Label_declContext label_decl() {
		Label_declContext _localctx = new Label_declContext(Context, State);
		EnterRule(_localctx, 1416, RULE_label_decl);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 10018;
			Match(LESS_LESS);
			State = 10019;
			any_identifier();
			State = 10020;
			Match(GREATER_GREATER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Decl_stmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Decl_statementContext decl_statement() {
			return GetRuleContext<Decl_statementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DECLARE() { return GetToken(PostgreSQLParser.DECLARE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Label_declContext label_decl() {
			return GetRuleContext<Label_declContext>(0);
		}
		public Decl_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_decl_stmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterDecl_stmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitDecl_stmt(this);
		}
	}

	[RuleVersion(0)]
	public Decl_stmtContext decl_stmt() {
		Decl_stmtContext _localctx = new Decl_stmtContext(Context, State);
		EnterRule(_localctx, 1418, RULE_decl_stmt);
		try {
			State = 10025;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,672,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 10022;
				decl_statement();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 10023;
				Match(DECLARE);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 10024;
				label_decl();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Decl_statementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Decl_varnameContext decl_varname() {
			return GetRuleContext<Decl_varnameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(PostgreSQLParser.SEMI, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALIAS() { return GetToken(PostgreSQLParser.ALIAS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOR() { return GetToken(PostgreSQLParser.FOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Decl_aliasitemContext decl_aliasitem() {
			return GetRuleContext<Decl_aliasitemContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Decl_constContext decl_const() {
			return GetRuleContext<Decl_constContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Decl_datatypeContext decl_datatype() {
			return GetRuleContext<Decl_datatypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Decl_collateContext decl_collate() {
			return GetRuleContext<Decl_collateContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Decl_notnullContext decl_notnull() {
			return GetRuleContext<Decl_notnullContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Decl_defvalContext decl_defval() {
			return GetRuleContext<Decl_defvalContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Opt_scrollableContext opt_scrollable() {
			return GetRuleContext<Opt_scrollableContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CURSOR() { return GetToken(PostgreSQLParser.CURSOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Decl_cursor_argsContext decl_cursor_args() {
			return GetRuleContext<Decl_cursor_argsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Decl_is_forContext decl_is_for() {
			return GetRuleContext<Decl_is_forContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Decl_cursor_queryContext decl_cursor_query() {
			return GetRuleContext<Decl_cursor_queryContext>(0);
		}
		public Decl_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_decl_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterDecl_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitDecl_statement(this);
		}
	}

	[RuleVersion(0)]
	public Decl_statementContext decl_statement() {
		Decl_statementContext _localctx = new Decl_statementContext(Context, State);
		EnterRule(_localctx, 1420, RULE_decl_statement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 10027;
			decl_varname();
			State = 10043;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,673,Context) ) {
			case 1:
				{
				State = 10028;
				Match(ALIAS);
				State = 10029;
				Match(FOR);
				State = 10030;
				decl_aliasitem();
				}
				break;
			case 2:
				{
				State = 10031;
				decl_const();
				State = 10032;
				decl_datatype();
				State = 10033;
				decl_collate();
				State = 10034;
				decl_notnull();
				State = 10035;
				decl_defval();
				}
				break;
			case 3:
				{
				State = 10037;
				opt_scrollable();
				State = 10038;
				Match(CURSOR);
				State = 10039;
				decl_cursor_args();
				State = 10040;
				decl_is_for();
				State = 10041;
				decl_cursor_query();
				}
				break;
			}
			State = 10045;
			Match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Opt_scrollableContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NO() { return GetToken(PostgreSQLParser.NO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SCROLL() { return GetToken(PostgreSQLParser.SCROLL, 0); }
		public Opt_scrollableContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_opt_scrollable; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterOpt_scrollable(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitOpt_scrollable(this);
		}
	}

	[RuleVersion(0)]
	public Opt_scrollableContext opt_scrollable() {
		Opt_scrollableContext _localctx = new Opt_scrollableContext(Context, State);
		EnterRule(_localctx, 1422, RULE_opt_scrollable);
		try {
			State = 10051;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case CURSOR:
				EnterOuterAlt(_localctx, 1);
				{
				}
				break;
			case NO:
				EnterOuterAlt(_localctx, 2);
				{
				State = 10048;
				Match(NO);
				State = 10049;
				Match(SCROLL);
				}
				break;
			case SCROLL:
				EnterOuterAlt(_localctx, 3);
				{
				State = 10050;
				Match(SCROLL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Decl_cursor_queryContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SelectstmtContext selectstmt() {
			return GetRuleContext<SelectstmtContext>(0);
		}
		public Decl_cursor_queryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_decl_cursor_query; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterDecl_cursor_query(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitDecl_cursor_query(this);
		}
	}

	[RuleVersion(0)]
	public Decl_cursor_queryContext decl_cursor_query() {
		Decl_cursor_queryContext _localctx = new Decl_cursor_queryContext(Context, State);
		EnterRule(_localctx, 1424, RULE_decl_cursor_query);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 10053;
			selectstmt();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Decl_cursor_argsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAREN() { return GetToken(PostgreSQLParser.OPEN_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Decl_cursor_arglistContext decl_cursor_arglist() {
			return GetRuleContext<Decl_cursor_arglistContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAREN() { return GetToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public Decl_cursor_argsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_decl_cursor_args; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterDecl_cursor_args(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitDecl_cursor_args(this);
		}
	}

	[RuleVersion(0)]
	public Decl_cursor_argsContext decl_cursor_args() {
		Decl_cursor_argsContext _localctx = new Decl_cursor_argsContext(Context, State);
		EnterRule(_localctx, 1426, RULE_decl_cursor_args);
		try {
			State = 10060;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case FOR:
			case IS:
				EnterOuterAlt(_localctx, 1);
				{
				}
				break;
			case OPEN_PAREN:
				EnterOuterAlt(_localctx, 2);
				{
				State = 10056;
				Match(OPEN_PAREN);
				State = 10057;
				decl_cursor_arglist();
				State = 10058;
				Match(CLOSE_PAREN);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Decl_cursor_arglistContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Decl_cursor_argContext[] decl_cursor_arg() {
			return GetRuleContexts<Decl_cursor_argContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Decl_cursor_argContext decl_cursor_arg(int i) {
			return GetRuleContext<Decl_cursor_argContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(PostgreSQLParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(PostgreSQLParser.COMMA, i);
		}
		public Decl_cursor_arglistContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_decl_cursor_arglist; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterDecl_cursor_arglist(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitDecl_cursor_arglist(this);
		}
	}

	[RuleVersion(0)]
	public Decl_cursor_arglistContext decl_cursor_arglist() {
		Decl_cursor_arglistContext _localctx = new Decl_cursor_arglistContext(Context, State);
		EnterRule(_localctx, 1428, RULE_decl_cursor_arglist);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 10062;
			decl_cursor_arg();
			State = 10067;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 10063;
				Match(COMMA);
				State = 10064;
				decl_cursor_arg();
				}
				}
				State = 10069;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Decl_cursor_argContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Decl_varnameContext decl_varname() {
			return GetRuleContext<Decl_varnameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Decl_datatypeContext decl_datatype() {
			return GetRuleContext<Decl_datatypeContext>(0);
		}
		public Decl_cursor_argContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_decl_cursor_arg; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterDecl_cursor_arg(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitDecl_cursor_arg(this);
		}
	}

	[RuleVersion(0)]
	public Decl_cursor_argContext decl_cursor_arg() {
		Decl_cursor_argContext _localctx = new Decl_cursor_argContext(Context, State);
		EnterRule(_localctx, 1430, RULE_decl_cursor_arg);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 10070;
			decl_varname();
			State = 10071;
			decl_datatype();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Decl_is_forContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IS() { return GetToken(PostgreSQLParser.IS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOR() { return GetToken(PostgreSQLParser.FOR, 0); }
		public Decl_is_forContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_decl_is_for; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterDecl_is_for(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitDecl_is_for(this);
		}
	}

	[RuleVersion(0)]
	public Decl_is_forContext decl_is_for() {
		Decl_is_forContext _localctx = new Decl_is_forContext(Context, State);
		EnterRule(_localctx, 1432, RULE_decl_is_for);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 10073;
			_la = TokenStream.LA(1);
			if ( !(_la==FOR || _la==IS) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Decl_aliasitemContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARAM() { return GetToken(PostgreSQLParser.PARAM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ColidContext colid() {
			return GetRuleContext<ColidContext>(0);
		}
		public Decl_aliasitemContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_decl_aliasitem; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterDecl_aliasitem(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitDecl_aliasitem(this);
		}
	}

	[RuleVersion(0)]
	public Decl_aliasitemContext decl_aliasitem() {
		Decl_aliasitemContext _localctx = new Decl_aliasitemContext(Context, State);
		EnterRule(_localctx, 1434, RULE_decl_aliasitem);
		try {
			State = 10077;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case PARAM:
				EnterOuterAlt(_localctx, 1);
				{
				State = 10075;
				Match(PARAM);
				}
				break;
			case AND:
			case ARRAY:
			case COLLATE:
			case COLUMN:
			case CONSTRAINT:
			case DEFAULT:
			case DO:
			case FETCH:
			case TABLE:
			case IS:
			case LEFT:
			case OUTER_P:
			case OVER:
			case RIGHT:
			case ABORT_P:
			case ABSOLUTE_P:
			case ACCESS:
			case ACTION:
			case ADD_P:
			case ADMIN:
			case AFTER:
			case AGGREGATE:
			case ALSO:
			case ALTER:
			case ALWAYS:
			case ASSERTION:
			case ASSIGNMENT:
			case AT:
			case ATTRIBUTE:
			case BACKWARD:
			case BEFORE:
			case BEGIN_P:
			case BY:
			case CACHE:
			case CALLED:
			case CASCADE:
			case CASCADED:
			case CATALOG:
			case CHAIN:
			case CHARACTERISTICS:
			case CHECKPOINT:
			case CLASS:
			case CLOSE:
			case CLUSTER:
			case COMMENT:
			case COMMENTS:
			case COMMIT:
			case COMMITTED:
			case CONFIGURATION:
			case CONNECTION:
			case CONSTRAINTS:
			case CONTENT_P:
			case CONTINUE_P:
			case CONVERSION_P:
			case COPY:
			case COST:
			case CSV:
			case CURSOR:
			case CYCLE:
			case DATA_P:
			case DATABASE:
			case DAY_P:
			case DEALLOCATE:
			case DECLARE:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE_P:
			case DELIMITER:
			case DELIMITERS:
			case DICTIONARY:
			case DISABLE_P:
			case DISCARD:
			case DOCUMENT_P:
			case DOMAIN_P:
			case DOUBLE_P:
			case DROP:
			case EACH:
			case ENABLE_P:
			case ENCODING:
			case ENCRYPTED:
			case ENUM_P:
			case ESCAPE:
			case EVENT:
			case EXCLUDE:
			case EXCLUDING:
			case EXCLUSIVE:
			case EXECUTE:
			case EXPLAIN:
			case EXTENSION:
			case EXTERNAL:
			case FAMILY:
			case FIRST_P:
			case FOLLOWING:
			case FORCE:
			case FORWARD:
			case FUNCTION:
			case FUNCTIONS:
			case GLOBAL:
			case GRANTED:
			case HANDLER:
			case HEADER_P:
			case HOLD:
			case HOUR_P:
			case IDENTITY_P:
			case IF_P:
			case IMMEDIATE:
			case IMMUTABLE:
			case IMPLICIT_P:
			case INCLUDING:
			case INCREMENT:
			case INDEX:
			case INDEXES:
			case INHERIT:
			case INHERITS:
			case INLINE_P:
			case INSENSITIVE:
			case INSERT:
			case INSTEAD:
			case INVOKER:
			case ISOLATION:
			case KEY:
			case LABEL:
			case LANGUAGE:
			case LARGE_P:
			case LAST_P:
			case LEAKPROOF:
			case LEVEL:
			case LISTEN:
			case LOAD:
			case LOCAL:
			case LOCATION:
			case LOCK_P:
			case MAPPING:
			case MATCH:
			case MATERIALIZED:
			case MAXVALUE:
			case MINUTE_P:
			case MINVALUE:
			case MODE:
			case MONTH_P:
			case MOVE:
			case NAME_P:
			case NAMES:
			case NEXT:
			case NO:
			case NOTHING:
			case NOTIFY:
			case NOWAIT:
			case NULLS_P:
			case OBJECT_P:
			case OF:
			case OFF:
			case OIDS:
			case OPERATOR:
			case OPTION:
			case OPTIONS:
			case OWNED:
			case OWNER:
			case PARSER:
			case PARTIAL:
			case PARTITION:
			case PASSING:
			case PASSWORD:
			case PLANS:
			case PRECEDING:
			case PREPARE:
			case PREPARED:
			case PRESERVE:
			case PRIOR:
			case PRIVILEGES:
			case PROCEDURAL:
			case PROCEDURE:
			case PROGRAM:
			case QUOTE:
			case RANGE:
			case READ:
			case REASSIGN:
			case RECHECK:
			case RECURSIVE:
			case REF:
			case REFRESH:
			case REINDEX:
			case RELATIVE_P:
			case RELEASE:
			case RENAME:
			case REPEATABLE:
			case REPLACE:
			case REPLICA:
			case RESET:
			case RESTART:
			case RESTRICT:
			case RETURNS:
			case REVOKE:
			case ROLE:
			case ROLLBACK:
			case ROWS:
			case RULE:
			case SAVEPOINT:
			case SCHEMA:
			case SCROLL:
			case SEARCH:
			case SECOND_P:
			case SECURITY:
			case SEQUENCE:
			case SEQUENCES:
			case SERIALIZABLE:
			case SERVER:
			case SESSION:
			case SET:
			case SHARE:
			case SHOW:
			case SIMPLE:
			case SNAPSHOT:
			case STABLE:
			case STANDALONE_P:
			case START:
			case STATEMENT:
			case STATISTICS:
			case STDIN:
			case STDOUT:
			case STORAGE:
			case STRICT_P:
			case STRIP_P:
			case SYSID:
			case SYSTEM_P:
			case TABLES:
			case TABLESPACE:
			case TEMP:
			case TEMPLATE:
			case TEMPORARY:
			case TEXT_P:
			case TRANSACTION:
			case TRIGGER:
			case TRUNCATE:
			case TRUSTED:
			case TYPE_P:
			case TYPES_P:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNENCRYPTED:
			case UNKNOWN:
			case UNLISTEN:
			case UNLOGGED:
			case UNTIL:
			case UPDATE:
			case VACUUM:
			case VALID:
			case VALIDATE:
			case VALIDATOR:
			case VARYING:
			case VERSION_P:
			case VIEW:
			case VOLATILE:
			case WHITESPACE_P:
			case WITHOUT:
			case WORK:
			case WRAPPER:
			case WRITE:
			case XML_P:
			case YEAR_P:
			case YES_P:
			case ZONE:
			case BETWEEN:
			case BIGINT:
			case BIT:
			case BOOLEAN_P:
			case CHAR_P:
			case CHARACTER:
			case COALESCE:
			case DEC:
			case DECIMAL_P:
			case EXISTS:
			case EXTRACT:
			case FLOAT_P:
			case GREATEST:
			case INOUT:
			case INT_P:
			case INTEGER:
			case INTERVAL:
			case LEAST:
			case NATIONAL:
			case NCHAR:
			case NONE:
			case NULLIF:
			case NUMERIC:
			case OVERLAY:
			case POSITION:
			case PRECISION:
			case REAL:
			case ROW:
			case SETOF:
			case SMALLINT:
			case SUBSTRING:
			case TIME:
			case TIMESTAMP:
			case TREAT:
			case TRIM:
			case VALUES:
			case VARCHAR:
			case XMLATTRIBUTES:
			case XMLCOMMENT:
			case XMLAGG:
			case XML_IS_WELL_FORMED:
			case XML_IS_WELL_FORMED_DOCUMENT:
			case XML_IS_WELL_FORMED_CONTENT:
			case XPATH:
			case XPATH_EXISTS:
			case XMLCONCAT:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLPARSE:
			case XMLPI:
			case XMLROOT:
			case XMLSERIALIZE:
			case CALL:
			case CURRENT_P:
			case ATTACH:
			case DETACH:
			case EXPRESSION:
			case GENERATED:
			case LOGGED:
			case STORED:
			case INCLUDE:
			case ROUTINE:
			case TRANSFORM:
			case IMPORT_P:
			case POLICY:
			case METHOD:
			case REFERENCING:
			case NEW:
			case OLD:
			case VALUE_P:
			case SUBSCRIPTION:
			case PUBLICATION:
			case OUT_P:
			case ROUTINES:
			case SCHEMAS:
			case PROCEDURES:
			case INPUT_P:
			case SUPPORT:
			case PARALLEL:
			case SQL_P:
			case DEPENDS:
			case OVERRIDING:
			case CONFLICT:
			case SKIP_P:
			case LOCKED:
			case TIES:
			case ROLLUP:
			case CUBE:
			case GROUPING:
			case SETS:
			case ORDINALITY:
			case XMLTABLE:
			case COLUMNS:
			case XMLNAMESPACES:
			case ROWTYPE:
			case NORMALIZED:
			case WITHIN:
			case FILTER:
			case GROUPS:
			case OTHERS:
			case NFC:
			case NFD:
			case NFKC:
			case NFKD:
			case UESCAPE:
			case VIEWS:
			case NORMALIZE:
			case DUMP:
			case PRINT_STRICT_PARAMS:
			case VARIABLE_CONFLICT:
			case ERROR:
			case USE_VARIABLE:
			case USE_COLUMN:
			case ALIAS:
			case CONSTANT:
			case PERFORM:
			case GET:
			case DIAGNOSTICS:
			case STACKED:
			case ELSIF:
			case REVERSE:
			case SLICE:
			case EXIT:
			case RETURN:
			case QUERY:
			case RAISE:
			case SQLSTATE:
			case DEBUG:
			case LOG:
			case INFO:
			case NOTICE:
			case WARNING:
			case EXCEPTION:
			case ASSERT:
			case OPEN:
			case ABS:
			case CBRT:
			case CEIL:
			case CEILING:
			case DEGREES:
			case DIV:
			case EXP:
			case FACTORIAL:
			case FLOOR:
			case GCD:
			case LCM:
			case LN:
			case LOG10:
			case MIN_SCALE:
			case MOD:
			case PI:
			case POWER:
			case RADIANS:
			case ROUND:
			case SCALE:
			case SIGN:
			case SQRT:
			case TRIM_SCALE:
			case TRUNC:
			case WIDTH_BUCKET:
			case RANDOM:
			case SETSEED:
			case ACOS:
			case ACOSD:
			case ASIN:
			case ASIND:
			case ATAN:
			case ATAND:
			case ATAN2:
			case ATAN2D:
			case COS:
			case COSD:
			case COT:
			case COTD:
			case SIN:
			case SIND:
			case TAN:
			case TAND:
			case SINH:
			case COSH:
			case TANH:
			case ASINH:
			case ACOSH:
			case ATANH:
			case BIT_LENGTH:
			case CHAR_LENGTH:
			case CHARACTER_LENGTH:
			case LOWER:
			case OCTET_LENGTH:
			case UPPER:
			case ASCII:
			case BTRIM:
			case CHR:
			case CONCAT:
			case CONCAT_WS:
			case FORMAT:
			case INITCAP:
			case LENGTH:
			case LPAD:
			case LTRIM:
			case MD5:
			case PARSE_IDENT:
			case PG_CLIENT_ENCODING:
			case QUOTE_IDENT:
			case QUOTE_LITERAL:
			case QUOTE_NULLABLE:
			case REGEXP_COUNT:
			case REGEXP_INSTR:
			case REGEXP_LIKE:
			case REGEXP_MATCH:
			case REGEXP_MATCHES:
			case REGEXP_REPLACE:
			case REGEXP_SPLIT_TO_ARRAY:
			case REGEXP_SPLIT_TO_TABLE:
			case REGEXP_SUBSTR:
			case REPEAT:
			case RPAD:
			case RTRIM:
			case SPLIT_PART:
			case STARTS_WITH:
			case STRING_TO_ARRAY:
			case STRING_TO_TABLE:
			case STRPOS:
			case SUBSTR:
			case TO_ASCII:
			case TO_HEX:
			case TRANSLATE:
			case UNISTR:
			case AGE:
			case CLOCK_TIMESTAMP:
			case DATE_BIN:
			case DATE_PART:
			case DATE_TRUNC:
			case ISFINITE:
			case JUSTIFY_DAYS:
			case JUSTIFY_HOURS:
			case JUSTIFY_INTERVAL:
			case MAKE_DATE:
			case MAKE_INTERVAL:
			case MAKE_TIME:
			case MAKE_TIMESTAMP:
			case MAKE_TIMESTAMPTZ:
			case NOW:
			case STATEMENT_TIMESTAMP:
			case TIMEOFDAY:
			case TRANSACTION_TIMESTAMP:
			case TO_TIMESTAMP:
			case TO_CHAR:
			case TO_DATE:
			case TO_NUMBER:
			case Identifier:
			case QuotedIdentifier:
			case UnicodeQuotedIdentifier:
			case PLSQLVARIABLENAME:
			case PLSQLIDENTIFIER:
				EnterOuterAlt(_localctx, 2);
				{
				State = 10076;
				colid();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Decl_varnameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Any_identifierContext any_identifier() {
			return GetRuleContext<Any_identifierContext>(0);
		}
		public Decl_varnameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_decl_varname; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterDecl_varname(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitDecl_varname(this);
		}
	}

	[RuleVersion(0)]
	public Decl_varnameContext decl_varname() {
		Decl_varnameContext _localctx = new Decl_varnameContext(Context, State);
		EnterRule(_localctx, 1436, RULE_decl_varname);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 10079;
			any_identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Decl_constContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONSTANT() { return GetToken(PostgreSQLParser.CONSTANT, 0); }
		public Decl_constContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_decl_const; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterDecl_const(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitDecl_const(this);
		}
	}

	[RuleVersion(0)]
	public Decl_constContext decl_const() {
		Decl_constContext _localctx = new Decl_constContext(Context, State);
		EnterRule(_localctx, 1438, RULE_decl_const);
		try {
			State = 10083;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,678,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 10082;
				Match(CONSTANT);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Decl_datatypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypenameContext typename() {
			return GetRuleContext<TypenameContext>(0);
		}
		public Decl_datatypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_decl_datatype; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterDecl_datatype(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitDecl_datatype(this);
		}
	}

	[RuleVersion(0)]
	public Decl_datatypeContext decl_datatype() {
		Decl_datatypeContext _localctx = new Decl_datatypeContext(Context, State);
		EnterRule(_localctx, 1440, RULE_decl_datatype);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 10085;
			typename();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Decl_collateContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLLATE() { return GetToken(PostgreSQLParser.COLLATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Any_nameContext any_name() {
			return GetRuleContext<Any_nameContext>(0);
		}
		public Decl_collateContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_decl_collate; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterDecl_collate(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitDecl_collate(this);
		}
	}

	[RuleVersion(0)]
	public Decl_collateContext decl_collate() {
		Decl_collateContext _localctx = new Decl_collateContext(Context, State);
		EnterRule(_localctx, 1442, RULE_decl_collate);
		try {
			State = 10090;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case SEMI:
			case EQUAL:
			case COLON_EQUALS:
			case DEFAULT:
			case NOT:
				EnterOuterAlt(_localctx, 1);
				{
				}
				break;
			case COLLATE:
				EnterOuterAlt(_localctx, 2);
				{
				State = 10088;
				Match(COLLATE);
				State = 10089;
				any_name();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Decl_notnullContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT() { return GetToken(PostgreSQLParser.NOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NULL_P() { return GetToken(PostgreSQLParser.NULL_P, 0); }
		public Decl_notnullContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_decl_notnull; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterDecl_notnull(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitDecl_notnull(this);
		}
	}

	[RuleVersion(0)]
	public Decl_notnullContext decl_notnull() {
		Decl_notnullContext _localctx = new Decl_notnullContext(Context, State);
		EnterRule(_localctx, 1444, RULE_decl_notnull);
		try {
			State = 10095;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case SEMI:
			case EQUAL:
			case COLON_EQUALS:
			case DEFAULT:
				EnterOuterAlt(_localctx, 1);
				{
				}
				break;
			case NOT:
				EnterOuterAlt(_localctx, 2);
				{
				State = 10093;
				Match(NOT);
				State = 10094;
				Match(NULL_P);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Decl_defvalContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Decl_defkeyContext decl_defkey() {
			return GetRuleContext<Decl_defkeyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Sql_expressionContext sql_expression() {
			return GetRuleContext<Sql_expressionContext>(0);
		}
		public Decl_defvalContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_decl_defval; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterDecl_defval(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitDecl_defval(this);
		}
	}

	[RuleVersion(0)]
	public Decl_defvalContext decl_defval() {
		Decl_defvalContext _localctx = new Decl_defvalContext(Context, State);
		EnterRule(_localctx, 1446, RULE_decl_defval);
		try {
			State = 10101;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case SEMI:
				EnterOuterAlt(_localctx, 1);
				{
				}
				break;
			case EQUAL:
			case COLON_EQUALS:
			case DEFAULT:
				EnterOuterAlt(_localctx, 2);
				{
				State = 10098;
				decl_defkey();
				State = 10099;
				sql_expression();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Decl_defkeyContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Assign_operatorContext assign_operator() {
			return GetRuleContext<Assign_operatorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFAULT() { return GetToken(PostgreSQLParser.DEFAULT, 0); }
		public Decl_defkeyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_decl_defkey; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterDecl_defkey(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitDecl_defkey(this);
		}
	}

	[RuleVersion(0)]
	public Decl_defkeyContext decl_defkey() {
		Decl_defkeyContext _localctx = new Decl_defkeyContext(Context, State);
		EnterRule(_localctx, 1448, RULE_decl_defkey);
		try {
			State = 10105;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case EQUAL:
			case COLON_EQUALS:
				EnterOuterAlt(_localctx, 1);
				{
				State = 10103;
				assign_operator();
				}
				break;
			case DEFAULT:
				EnterOuterAlt(_localctx, 2);
				{
				State = 10104;
				Match(DEFAULT);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Assign_operatorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL() { return GetToken(PostgreSQLParser.EQUAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON_EQUALS() { return GetToken(PostgreSQLParser.COLON_EQUALS, 0); }
		public Assign_operatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assign_operator; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterAssign_operator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitAssign_operator(this);
		}
	}

	[RuleVersion(0)]
	public Assign_operatorContext assign_operator() {
		Assign_operatorContext _localctx = new Assign_operatorContext(Context, State);
		EnterRule(_localctx, 1450, RULE_assign_operator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 10107;
			_la = TokenStream.LA(1);
			if ( !(_la==EQUAL || _la==COLON_EQUALS) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Proc_sectContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Proc_stmtContext[] proc_stmt() {
			return GetRuleContexts<Proc_stmtContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Proc_stmtContext proc_stmt(int i) {
			return GetRuleContext<Proc_stmtContext>(i);
		}
		public Proc_sectContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_proc_sect; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterProc_sect(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitProc_sect(this);
		}
	}

	[RuleVersion(0)]
	public Proc_sectContext proc_sect() {
		Proc_sectContext _localctx = new Proc_sectContext(Context, State);
		EnterRule(_localctx, 1452, RULE_proc_sect);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 10112;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,683,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 10109;
					proc_stmt();
					}
					} 
				}
				State = 10114;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,683,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Proc_stmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Pl_blockContext pl_block() {
			return GetRuleContext<Pl_blockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(PostgreSQLParser.SEMI, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Stmt_returnContext stmt_return() {
			return GetRuleContext<Stmt_returnContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Stmt_raiseContext stmt_raise() {
			return GetRuleContext<Stmt_raiseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Stmt_assignContext stmt_assign() {
			return GetRuleContext<Stmt_assignContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Stmt_ifContext stmt_if() {
			return GetRuleContext<Stmt_ifContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Stmt_caseContext stmt_case() {
			return GetRuleContext<Stmt_caseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Stmt_loopContext stmt_loop() {
			return GetRuleContext<Stmt_loopContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Stmt_whileContext stmt_while() {
			return GetRuleContext<Stmt_whileContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Stmt_forContext stmt_for() {
			return GetRuleContext<Stmt_forContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Stmt_foreach_aContext stmt_foreach_a() {
			return GetRuleContext<Stmt_foreach_aContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Stmt_exitContext stmt_exit() {
			return GetRuleContext<Stmt_exitContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Stmt_assertContext stmt_assert() {
			return GetRuleContext<Stmt_assertContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Stmt_execsqlContext stmt_execsql() {
			return GetRuleContext<Stmt_execsqlContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Stmt_dynexecuteContext stmt_dynexecute() {
			return GetRuleContext<Stmt_dynexecuteContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Stmt_performContext stmt_perform() {
			return GetRuleContext<Stmt_performContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Stmt_callContext stmt_call() {
			return GetRuleContext<Stmt_callContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Stmt_getdiagContext stmt_getdiag() {
			return GetRuleContext<Stmt_getdiagContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Stmt_openContext stmt_open() {
			return GetRuleContext<Stmt_openContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Stmt_fetchContext stmt_fetch() {
			return GetRuleContext<Stmt_fetchContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Stmt_moveContext stmt_move() {
			return GetRuleContext<Stmt_moveContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Stmt_closeContext stmt_close() {
			return GetRuleContext<Stmt_closeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Stmt_nullContext stmt_null() {
			return GetRuleContext<Stmt_nullContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Stmt_commitContext stmt_commit() {
			return GetRuleContext<Stmt_commitContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Stmt_rollbackContext stmt_rollback() {
			return GetRuleContext<Stmt_rollbackContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Stmt_setContext stmt_set() {
			return GetRuleContext<Stmt_setContext>(0);
		}
		public Proc_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_proc_stmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterProc_stmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitProc_stmt(this);
		}
	}

	[RuleVersion(0)]
	public Proc_stmtContext proc_stmt() {
		Proc_stmtContext _localctx = new Proc_stmtContext(Context, State);
		EnterRule(_localctx, 1454, RULE_proc_stmt);
		try {
			State = 10142;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,684,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 10115;
				pl_block();
				State = 10116;
				Match(SEMI);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 10118;
				stmt_return();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 10119;
				stmt_raise();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 10120;
				stmt_assign();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 10121;
				stmt_if();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 10122;
				stmt_case();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 10123;
				stmt_loop();
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 10124;
				stmt_while();
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 10125;
				stmt_for();
				}
				break;
			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 10126;
				stmt_foreach_a();
				}
				break;
			case 11:
				EnterOuterAlt(_localctx, 11);
				{
				State = 10127;
				stmt_exit();
				}
				break;
			case 12:
				EnterOuterAlt(_localctx, 12);
				{
				State = 10128;
				stmt_assert();
				}
				break;
			case 13:
				EnterOuterAlt(_localctx, 13);
				{
				State = 10129;
				stmt_execsql();
				}
				break;
			case 14:
				EnterOuterAlt(_localctx, 14);
				{
				State = 10130;
				stmt_dynexecute();
				}
				break;
			case 15:
				EnterOuterAlt(_localctx, 15);
				{
				State = 10131;
				stmt_perform();
				}
				break;
			case 16:
				EnterOuterAlt(_localctx, 16);
				{
				State = 10132;
				stmt_call();
				}
				break;
			case 17:
				EnterOuterAlt(_localctx, 17);
				{
				State = 10133;
				stmt_getdiag();
				}
				break;
			case 18:
				EnterOuterAlt(_localctx, 18);
				{
				State = 10134;
				stmt_open();
				}
				break;
			case 19:
				EnterOuterAlt(_localctx, 19);
				{
				State = 10135;
				stmt_fetch();
				}
				break;
			case 20:
				EnterOuterAlt(_localctx, 20);
				{
				State = 10136;
				stmt_move();
				}
				break;
			case 21:
				EnterOuterAlt(_localctx, 21);
				{
				State = 10137;
				stmt_close();
				}
				break;
			case 22:
				EnterOuterAlt(_localctx, 22);
				{
				State = 10138;
				stmt_null();
				}
				break;
			case 23:
				EnterOuterAlt(_localctx, 23);
				{
				State = 10139;
				stmt_commit();
				}
				break;
			case 24:
				EnterOuterAlt(_localctx, 24);
				{
				State = 10140;
				stmt_rollback();
				}
				break;
			case 25:
				EnterOuterAlt(_localctx, 25);
				{
				State = 10141;
				stmt_set();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Stmt_performContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PERFORM() { return GetToken(PostgreSQLParser.PERFORM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Expr_until_semiContext expr_until_semi() {
			return GetRuleContext<Expr_until_semiContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(PostgreSQLParser.SEMI, 0); }
		public Stmt_performContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stmt_perform; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterStmt_perform(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitStmt_perform(this);
		}
	}

	[RuleVersion(0)]
	public Stmt_performContext stmt_perform() {
		Stmt_performContext _localctx = new Stmt_performContext(Context, State);
		EnterRule(_localctx, 1456, RULE_stmt_perform);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 10144;
			Match(PERFORM);
			State = 10145;
			expr_until_semi();
			State = 10146;
			Match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Stmt_callContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CALL() { return GetToken(PostgreSQLParser.CALL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Any_identifierContext any_identifier() {
			return GetRuleContext<Any_identifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAREN() { return GetToken(PostgreSQLParser.OPEN_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Opt_expr_listContext opt_expr_list() {
			return GetRuleContext<Opt_expr_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAREN() { return GetToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(PostgreSQLParser.SEMI, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DO() { return GetToken(PostgreSQLParser.DO, 0); }
		public Stmt_callContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stmt_call; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterStmt_call(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitStmt_call(this);
		}
	}

	[RuleVersion(0)]
	public Stmt_callContext stmt_call() {
		Stmt_callContext _localctx = new Stmt_callContext(Context, State);
		EnterRule(_localctx, 1458, RULE_stmt_call);
		try {
			State = 10162;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case CALL:
				EnterOuterAlt(_localctx, 1);
				{
				State = 10148;
				Match(CALL);
				State = 10149;
				any_identifier();
				State = 10150;
				Match(OPEN_PAREN);
				State = 10151;
				opt_expr_list();
				State = 10152;
				Match(CLOSE_PAREN);
				State = 10153;
				Match(SEMI);
				}
				break;
			case DO:
				EnterOuterAlt(_localctx, 2);
				{
				State = 10155;
				Match(DO);
				State = 10156;
				any_identifier();
				State = 10157;
				Match(OPEN_PAREN);
				State = 10158;
				opt_expr_list();
				State = 10159;
				Match(CLOSE_PAREN);
				State = 10160;
				Match(SEMI);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Opt_expr_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Expr_listContext expr_list() {
			return GetRuleContext<Expr_listContext>(0);
		}
		public Opt_expr_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_opt_expr_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterOpt_expr_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitOpt_expr_list(this);
		}
	}

	[RuleVersion(0)]
	public Opt_expr_listContext opt_expr_list() {
		Opt_expr_listContext _localctx = new Opt_expr_listContext(Context, State);
		EnterRule(_localctx, 1460, RULE_opt_expr_list);
		try {
			State = 10166;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case CLOSE_PAREN:
				EnterOuterAlt(_localctx, 1);
				{
				}
				break;
			case OPEN_PAREN:
			case PLUS:
			case MINUS:
			case PARAM:
			case Operator:
			case AND:
			case ARRAY:
			case CASE:
			case CAST:
			case COLLATE:
			case COLUMN:
			case CONSTRAINT:
			case CURRENT_CATALOG:
			case CURRENT_DATE:
			case CURRENT_ROLE:
			case CURRENT_TIME:
			case CURRENT_TIMESTAMP:
			case CURRENT_USER:
			case DEFAULT:
			case DO:
			case FALSE_P:
			case FETCH:
			case LOCALTIME:
			case LOCALTIMESTAMP:
			case NOT:
			case NULL_P:
			case SESSION_USER:
			case TABLE:
			case TRUE_P:
			case UNIQUE:
			case USER:
			case AUTHORIZATION:
			case BINARY:
			case COLLATION:
			case CONCURRENTLY:
			case CROSS:
			case CURRENT_SCHEMA:
			case FREEZE:
			case FULL:
			case ILIKE:
			case INNER_P:
			case IS:
			case ISNULL:
			case JOIN:
			case LEFT:
			case LIKE:
			case NATURAL:
			case NOTNULL:
			case OUTER_P:
			case OVER:
			case OVERLAPS:
			case RIGHT:
			case SIMILAR:
			case VERBOSE:
			case ABORT_P:
			case ABSOLUTE_P:
			case ACCESS:
			case ACTION:
			case ADD_P:
			case ADMIN:
			case AFTER:
			case AGGREGATE:
			case ALSO:
			case ALTER:
			case ALWAYS:
			case ASSERTION:
			case ASSIGNMENT:
			case AT:
			case ATTRIBUTE:
			case BACKWARD:
			case BEFORE:
			case BEGIN_P:
			case BY:
			case CACHE:
			case CALLED:
			case CASCADE:
			case CASCADED:
			case CATALOG:
			case CHAIN:
			case CHARACTERISTICS:
			case CHECKPOINT:
			case CLASS:
			case CLOSE:
			case CLUSTER:
			case COMMENT:
			case COMMENTS:
			case COMMIT:
			case COMMITTED:
			case CONFIGURATION:
			case CONNECTION:
			case CONSTRAINTS:
			case CONTENT_P:
			case CONTINUE_P:
			case CONVERSION_P:
			case COPY:
			case COST:
			case CSV:
			case CURSOR:
			case CYCLE:
			case DATA_P:
			case DATABASE:
			case DAY_P:
			case DEALLOCATE:
			case DECLARE:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE_P:
			case DELIMITER:
			case DELIMITERS:
			case DICTIONARY:
			case DISABLE_P:
			case DISCARD:
			case DOCUMENT_P:
			case DOMAIN_P:
			case DOUBLE_P:
			case DROP:
			case EACH:
			case ENABLE_P:
			case ENCODING:
			case ENCRYPTED:
			case ENUM_P:
			case ESCAPE:
			case EVENT:
			case EXCLUDE:
			case EXCLUDING:
			case EXCLUSIVE:
			case EXECUTE:
			case EXPLAIN:
			case EXTENSION:
			case EXTERNAL:
			case FAMILY:
			case FIRST_P:
			case FOLLOWING:
			case FORCE:
			case FORWARD:
			case FUNCTION:
			case FUNCTIONS:
			case GLOBAL:
			case GRANTED:
			case HANDLER:
			case HEADER_P:
			case HOLD:
			case HOUR_P:
			case IDENTITY_P:
			case IF_P:
			case IMMEDIATE:
			case IMMUTABLE:
			case IMPLICIT_P:
			case INCLUDING:
			case INCREMENT:
			case INDEX:
			case INDEXES:
			case INHERIT:
			case INHERITS:
			case INLINE_P:
			case INSENSITIVE:
			case INSERT:
			case INSTEAD:
			case INVOKER:
			case ISOLATION:
			case KEY:
			case LABEL:
			case LANGUAGE:
			case LARGE_P:
			case LAST_P:
			case LEAKPROOF:
			case LEVEL:
			case LISTEN:
			case LOAD:
			case LOCAL:
			case LOCATION:
			case LOCK_P:
			case MAPPING:
			case MATCH:
			case MATERIALIZED:
			case MAXVALUE:
			case MINUTE_P:
			case MINVALUE:
			case MODE:
			case MONTH_P:
			case MOVE:
			case NAME_P:
			case NAMES:
			case NEXT:
			case NO:
			case NOTHING:
			case NOTIFY:
			case NOWAIT:
			case NULLS_P:
			case OBJECT_P:
			case OF:
			case OFF:
			case OIDS:
			case OPERATOR:
			case OPTION:
			case OPTIONS:
			case OWNED:
			case OWNER:
			case PARSER:
			case PARTIAL:
			case PARTITION:
			case PASSING:
			case PASSWORD:
			case PLANS:
			case PRECEDING:
			case PREPARE:
			case PREPARED:
			case PRESERVE:
			case PRIOR:
			case PRIVILEGES:
			case PROCEDURAL:
			case PROCEDURE:
			case PROGRAM:
			case QUOTE:
			case RANGE:
			case READ:
			case REASSIGN:
			case RECHECK:
			case RECURSIVE:
			case REF:
			case REFRESH:
			case REINDEX:
			case RELATIVE_P:
			case RELEASE:
			case RENAME:
			case REPEATABLE:
			case REPLACE:
			case REPLICA:
			case RESET:
			case RESTART:
			case RESTRICT:
			case RETURNS:
			case REVOKE:
			case ROLE:
			case ROLLBACK:
			case ROWS:
			case RULE:
			case SAVEPOINT:
			case SCHEMA:
			case SCROLL:
			case SEARCH:
			case SECOND_P:
			case SECURITY:
			case SEQUENCE:
			case SEQUENCES:
			case SERIALIZABLE:
			case SERVER:
			case SESSION:
			case SET:
			case SHARE:
			case SHOW:
			case SIMPLE:
			case SNAPSHOT:
			case STABLE:
			case STANDALONE_P:
			case START:
			case STATEMENT:
			case STATISTICS:
			case STDIN:
			case STDOUT:
			case STORAGE:
			case STRICT_P:
			case STRIP_P:
			case SYSID:
			case SYSTEM_P:
			case TABLES:
			case TABLESPACE:
			case TEMP:
			case TEMPLATE:
			case TEMPORARY:
			case TEXT_P:
			case TRANSACTION:
			case TRIGGER:
			case TRUNCATE:
			case TRUSTED:
			case TYPE_P:
			case TYPES_P:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNENCRYPTED:
			case UNKNOWN:
			case UNLISTEN:
			case UNLOGGED:
			case UNTIL:
			case UPDATE:
			case VACUUM:
			case VALID:
			case VALIDATE:
			case VALIDATOR:
			case VARYING:
			case VERSION_P:
			case VIEW:
			case VOLATILE:
			case WHITESPACE_P:
			case WITHOUT:
			case WORK:
			case WRAPPER:
			case WRITE:
			case XML_P:
			case YEAR_P:
			case YES_P:
			case ZONE:
			case BETWEEN:
			case BIGINT:
			case BIT:
			case BOOLEAN_P:
			case CHAR_P:
			case CHARACTER:
			case COALESCE:
			case DEC:
			case DECIMAL_P:
			case EXISTS:
			case EXTRACT:
			case FLOAT_P:
			case GREATEST:
			case INOUT:
			case INT_P:
			case INTEGER:
			case INTERVAL:
			case LEAST:
			case NATIONAL:
			case NCHAR:
			case NONE:
			case NULLIF:
			case NUMERIC:
			case OVERLAY:
			case POSITION:
			case PRECISION:
			case REAL:
			case ROW:
			case SETOF:
			case SMALLINT:
			case SUBSTRING:
			case TIME:
			case TIMESTAMP:
			case TREAT:
			case TRIM:
			case VALUES:
			case VARCHAR:
			case XMLATTRIBUTES:
			case XMLCOMMENT:
			case XMLAGG:
			case XML_IS_WELL_FORMED:
			case XML_IS_WELL_FORMED_DOCUMENT:
			case XML_IS_WELL_FORMED_CONTENT:
			case XPATH:
			case XPATH_EXISTS:
			case XMLCONCAT:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLPARSE:
			case XMLPI:
			case XMLROOT:
			case XMLSERIALIZE:
			case CALL:
			case CURRENT_P:
			case ATTACH:
			case DETACH:
			case EXPRESSION:
			case GENERATED:
			case LOGGED:
			case STORED:
			case INCLUDE:
			case ROUTINE:
			case TRANSFORM:
			case IMPORT_P:
			case POLICY:
			case METHOD:
			case REFERENCING:
			case NEW:
			case OLD:
			case VALUE_P:
			case SUBSCRIPTION:
			case PUBLICATION:
			case OUT_P:
			case ROUTINES:
			case SCHEMAS:
			case PROCEDURES:
			case INPUT_P:
			case SUPPORT:
			case PARALLEL:
			case SQL_P:
			case DEPENDS:
			case OVERRIDING:
			case CONFLICT:
			case SKIP_P:
			case LOCKED:
			case TIES:
			case ROLLUP:
			case CUBE:
			case GROUPING:
			case SETS:
			case TABLESAMPLE:
			case ORDINALITY:
			case XMLTABLE:
			case COLUMNS:
			case XMLNAMESPACES:
			case ROWTYPE:
			case NORMALIZED:
			case WITHIN:
			case FILTER:
			case GROUPS:
			case OTHERS:
			case NFC:
			case NFD:
			case NFKC:
			case NFKD:
			case UESCAPE:
			case VIEWS:
			case NORMALIZE:
			case DUMP:
			case PRINT_STRICT_PARAMS:
			case VARIABLE_CONFLICT:
			case ERROR:
			case USE_VARIABLE:
			case USE_COLUMN:
			case ALIAS:
			case CONSTANT:
			case PERFORM:
			case GET:
			case DIAGNOSTICS:
			case STACKED:
			case ELSIF:
			case REVERSE:
			case SLICE:
			case EXIT:
			case RETURN:
			case QUERY:
			case RAISE:
			case SQLSTATE:
			case DEBUG:
			case LOG:
			case INFO:
			case NOTICE:
			case WARNING:
			case EXCEPTION:
			case ASSERT:
			case OPEN:
			case ABS:
			case CBRT:
			case CEIL:
			case CEILING:
			case DEGREES:
			case DIV:
			case EXP:
			case FACTORIAL:
			case FLOOR:
			case GCD:
			case LCM:
			case LN:
			case LOG10:
			case MIN_SCALE:
			case MOD:
			case PI:
			case POWER:
			case RADIANS:
			case ROUND:
			case SCALE:
			case SIGN:
			case SQRT:
			case TRIM_SCALE:
			case TRUNC:
			case WIDTH_BUCKET:
			case RANDOM:
			case SETSEED:
			case ACOS:
			case ACOSD:
			case ASIN:
			case ASIND:
			case ATAN:
			case ATAND:
			case ATAN2:
			case ATAN2D:
			case COS:
			case COSD:
			case COT:
			case COTD:
			case SIN:
			case SIND:
			case TAN:
			case TAND:
			case SINH:
			case COSH:
			case TANH:
			case ASINH:
			case ACOSH:
			case ATANH:
			case BIT_LENGTH:
			case CHAR_LENGTH:
			case CHARACTER_LENGTH:
			case LOWER:
			case OCTET_LENGTH:
			case UPPER:
			case ASCII:
			case BTRIM:
			case CHR:
			case CONCAT:
			case CONCAT_WS:
			case FORMAT:
			case INITCAP:
			case LENGTH:
			case LPAD:
			case LTRIM:
			case MD5:
			case PARSE_IDENT:
			case PG_CLIENT_ENCODING:
			case QUOTE_IDENT:
			case QUOTE_LITERAL:
			case QUOTE_NULLABLE:
			case REGEXP_COUNT:
			case REGEXP_INSTR:
			case REGEXP_LIKE:
			case REGEXP_MATCH:
			case REGEXP_MATCHES:
			case REGEXP_REPLACE:
			case REGEXP_SPLIT_TO_ARRAY:
			case REGEXP_SPLIT_TO_TABLE:
			case REGEXP_SUBSTR:
			case REPEAT:
			case RPAD:
			case RTRIM:
			case SPLIT_PART:
			case STARTS_WITH:
			case STRING_TO_ARRAY:
			case STRING_TO_TABLE:
			case STRPOS:
			case SUBSTR:
			case TO_ASCII:
			case TO_HEX:
			case TRANSLATE:
			case UNISTR:
			case AGE:
			case CLOCK_TIMESTAMP:
			case DATE_BIN:
			case DATE_PART:
			case DATE_TRUNC:
			case ISFINITE:
			case JUSTIFY_DAYS:
			case JUSTIFY_HOURS:
			case JUSTIFY_INTERVAL:
			case MAKE_DATE:
			case MAKE_INTERVAL:
			case MAKE_TIME:
			case MAKE_TIMESTAMP:
			case MAKE_TIMESTAMPTZ:
			case NOW:
			case STATEMENT_TIMESTAMP:
			case TIMEOFDAY:
			case TRANSACTION_TIMESTAMP:
			case TO_TIMESTAMP:
			case TO_CHAR:
			case TO_DATE:
			case TO_NUMBER:
			case Identifier:
			case QuotedIdentifier:
			case UnicodeQuotedIdentifier:
			case StringConstant:
			case UnicodeEscapeStringConstant:
			case BeginDollarStringConstant:
			case BinaryStringConstant:
			case HexadecimalStringConstant:
			case Integral:
			case Numeric:
			case PLSQLVARIABLENAME:
			case PLSQLIDENTIFIER:
			case EscapeStringConstant:
				EnterOuterAlt(_localctx, 2);
				{
				State = 10165;
				expr_list();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Stmt_assignContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Assign_varContext assign_var() {
			return GetRuleContext<Assign_varContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Assign_operatorContext assign_operator() {
			return GetRuleContext<Assign_operatorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Sql_expressionContext sql_expression() {
			return GetRuleContext<Sql_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(PostgreSQLParser.SEMI, 0); }
		public Stmt_assignContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stmt_assign; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterStmt_assign(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitStmt_assign(this);
		}
	}

	[RuleVersion(0)]
	public Stmt_assignContext stmt_assign() {
		Stmt_assignContext _localctx = new Stmt_assignContext(Context, State);
		EnterRule(_localctx, 1462, RULE_stmt_assign);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 10168;
			assign_var();
			State = 10169;
			assign_operator();
			State = 10170;
			sql_expression();
			State = 10171;
			Match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Stmt_getdiagContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GET() { return GetToken(PostgreSQLParser.GET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Getdiag_area_optContext getdiag_area_opt() {
			return GetRuleContext<Getdiag_area_optContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DIAGNOSTICS() { return GetToken(PostgreSQLParser.DIAGNOSTICS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Getdiag_listContext getdiag_list() {
			return GetRuleContext<Getdiag_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(PostgreSQLParser.SEMI, 0); }
		public Stmt_getdiagContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stmt_getdiag; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterStmt_getdiag(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitStmt_getdiag(this);
		}
	}

	[RuleVersion(0)]
	public Stmt_getdiagContext stmt_getdiag() {
		Stmt_getdiagContext _localctx = new Stmt_getdiagContext(Context, State);
		EnterRule(_localctx, 1464, RULE_stmt_getdiag);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 10173;
			Match(GET);
			State = 10174;
			getdiag_area_opt();
			State = 10175;
			Match(DIAGNOSTICS);
			State = 10176;
			getdiag_list();
			State = 10177;
			Match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Getdiag_area_optContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CURRENT_P() { return GetToken(PostgreSQLParser.CURRENT_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STACKED() { return GetToken(PostgreSQLParser.STACKED, 0); }
		public Getdiag_area_optContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_getdiag_area_opt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterGetdiag_area_opt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitGetdiag_area_opt(this);
		}
	}

	[RuleVersion(0)]
	public Getdiag_area_optContext getdiag_area_opt() {
		Getdiag_area_optContext _localctx = new Getdiag_area_optContext(Context, State);
		EnterRule(_localctx, 1466, RULE_getdiag_area_opt);
		try {
			State = 10182;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case DIAGNOSTICS:
				EnterOuterAlt(_localctx, 1);
				{
				}
				break;
			case CURRENT_P:
				EnterOuterAlt(_localctx, 2);
				{
				State = 10180;
				Match(CURRENT_P);
				}
				break;
			case STACKED:
				EnterOuterAlt(_localctx, 3);
				{
				State = 10181;
				Match(STACKED);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Getdiag_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Getdiag_list_itemContext[] getdiag_list_item() {
			return GetRuleContexts<Getdiag_list_itemContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Getdiag_list_itemContext getdiag_list_item(int i) {
			return GetRuleContext<Getdiag_list_itemContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(PostgreSQLParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(PostgreSQLParser.COMMA, i);
		}
		public Getdiag_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_getdiag_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterGetdiag_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitGetdiag_list(this);
		}
	}

	[RuleVersion(0)]
	public Getdiag_listContext getdiag_list() {
		Getdiag_listContext _localctx = new Getdiag_listContext(Context, State);
		EnterRule(_localctx, 1468, RULE_getdiag_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 10184;
			getdiag_list_item();
			State = 10189;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 10185;
				Match(COMMA);
				State = 10186;
				getdiag_list_item();
				}
				}
				State = 10191;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Getdiag_list_itemContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Getdiag_targetContext getdiag_target() {
			return GetRuleContext<Getdiag_targetContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Assign_operatorContext assign_operator() {
			return GetRuleContext<Assign_operatorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Getdiag_itemContext getdiag_item() {
			return GetRuleContext<Getdiag_itemContext>(0);
		}
		public Getdiag_list_itemContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_getdiag_list_item; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterGetdiag_list_item(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitGetdiag_list_item(this);
		}
	}

	[RuleVersion(0)]
	public Getdiag_list_itemContext getdiag_list_item() {
		Getdiag_list_itemContext _localctx = new Getdiag_list_itemContext(Context, State);
		EnterRule(_localctx, 1470, RULE_getdiag_list_item);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 10192;
			getdiag_target();
			State = 10193;
			assign_operator();
			State = 10194;
			getdiag_item();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Getdiag_itemContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ColidContext colid() {
			return GetRuleContext<ColidContext>(0);
		}
		public Getdiag_itemContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_getdiag_item; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterGetdiag_item(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitGetdiag_item(this);
		}
	}

	[RuleVersion(0)]
	public Getdiag_itemContext getdiag_item() {
		Getdiag_itemContext _localctx = new Getdiag_itemContext(Context, State);
		EnterRule(_localctx, 1472, RULE_getdiag_item);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 10196;
			colid();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Getdiag_targetContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Assign_varContext assign_var() {
			return GetRuleContext<Assign_varContext>(0);
		}
		public Getdiag_targetContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_getdiag_target; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterGetdiag_target(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitGetdiag_target(this);
		}
	}

	[RuleVersion(0)]
	public Getdiag_targetContext getdiag_target() {
		Getdiag_targetContext _localctx = new Getdiag_targetContext(Context, State);
		EnterRule(_localctx, 1474, RULE_getdiag_target);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 10198;
			assign_var();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Assign_varContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Any_nameContext any_name() {
			return GetRuleContext<Any_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARAM() { return GetToken(PostgreSQLParser.PARAM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] OPEN_BRACKET() { return GetTokens(PostgreSQLParser.OPEN_BRACKET); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_BRACKET(int i) {
			return GetToken(PostgreSQLParser.OPEN_BRACKET, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Expr_until_rightbracketContext[] expr_until_rightbracket() {
			return GetRuleContexts<Expr_until_rightbracketContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Expr_until_rightbracketContext expr_until_rightbracket(int i) {
			return GetRuleContext<Expr_until_rightbracketContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] CLOSE_BRACKET() { return GetTokens(PostgreSQLParser.CLOSE_BRACKET); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_BRACKET(int i) {
			return GetToken(PostgreSQLParser.CLOSE_BRACKET, i);
		}
		public Assign_varContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assign_var; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterAssign_var(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitAssign_var(this);
		}
	}

	[RuleVersion(0)]
	public Assign_varContext assign_var() {
		Assign_varContext _localctx = new Assign_varContext(Context, State);
		EnterRule(_localctx, 1476, RULE_assign_var);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 10202;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case AND:
			case ARRAY:
			case COLLATE:
			case COLUMN:
			case CONSTRAINT:
			case DEFAULT:
			case DO:
			case FETCH:
			case TABLE:
			case IS:
			case LEFT:
			case OUTER_P:
			case OVER:
			case RIGHT:
			case ABORT_P:
			case ABSOLUTE_P:
			case ACCESS:
			case ACTION:
			case ADD_P:
			case ADMIN:
			case AFTER:
			case AGGREGATE:
			case ALSO:
			case ALTER:
			case ALWAYS:
			case ASSERTION:
			case ASSIGNMENT:
			case AT:
			case ATTRIBUTE:
			case BACKWARD:
			case BEFORE:
			case BEGIN_P:
			case BY:
			case CACHE:
			case CALLED:
			case CASCADE:
			case CASCADED:
			case CATALOG:
			case CHAIN:
			case CHARACTERISTICS:
			case CHECKPOINT:
			case CLASS:
			case CLOSE:
			case CLUSTER:
			case COMMENT:
			case COMMENTS:
			case COMMIT:
			case COMMITTED:
			case CONFIGURATION:
			case CONNECTION:
			case CONSTRAINTS:
			case CONTENT_P:
			case CONTINUE_P:
			case CONVERSION_P:
			case COPY:
			case COST:
			case CSV:
			case CURSOR:
			case CYCLE:
			case DATA_P:
			case DATABASE:
			case DAY_P:
			case DEALLOCATE:
			case DECLARE:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE_P:
			case DELIMITER:
			case DELIMITERS:
			case DICTIONARY:
			case DISABLE_P:
			case DISCARD:
			case DOCUMENT_P:
			case DOMAIN_P:
			case DOUBLE_P:
			case DROP:
			case EACH:
			case ENABLE_P:
			case ENCODING:
			case ENCRYPTED:
			case ENUM_P:
			case ESCAPE:
			case EVENT:
			case EXCLUDE:
			case EXCLUDING:
			case EXCLUSIVE:
			case EXECUTE:
			case EXPLAIN:
			case EXTENSION:
			case EXTERNAL:
			case FAMILY:
			case FIRST_P:
			case FOLLOWING:
			case FORCE:
			case FORWARD:
			case FUNCTION:
			case FUNCTIONS:
			case GLOBAL:
			case GRANTED:
			case HANDLER:
			case HEADER_P:
			case HOLD:
			case HOUR_P:
			case IDENTITY_P:
			case IF_P:
			case IMMEDIATE:
			case IMMUTABLE:
			case IMPLICIT_P:
			case INCLUDING:
			case INCREMENT:
			case INDEX:
			case INDEXES:
			case INHERIT:
			case INHERITS:
			case INLINE_P:
			case INSENSITIVE:
			case INSERT:
			case INSTEAD:
			case INVOKER:
			case ISOLATION:
			case KEY:
			case LABEL:
			case LANGUAGE:
			case LARGE_P:
			case LAST_P:
			case LEAKPROOF:
			case LEVEL:
			case LISTEN:
			case LOAD:
			case LOCAL:
			case LOCATION:
			case LOCK_P:
			case MAPPING:
			case MATCH:
			case MATERIALIZED:
			case MAXVALUE:
			case MINUTE_P:
			case MINVALUE:
			case MODE:
			case MONTH_P:
			case MOVE:
			case NAME_P:
			case NAMES:
			case NEXT:
			case NO:
			case NOTHING:
			case NOTIFY:
			case NOWAIT:
			case NULLS_P:
			case OBJECT_P:
			case OF:
			case OFF:
			case OIDS:
			case OPERATOR:
			case OPTION:
			case OPTIONS:
			case OWNED:
			case OWNER:
			case PARSER:
			case PARTIAL:
			case PARTITION:
			case PASSING:
			case PASSWORD:
			case PLANS:
			case PRECEDING:
			case PREPARE:
			case PREPARED:
			case PRESERVE:
			case PRIOR:
			case PRIVILEGES:
			case PROCEDURAL:
			case PROCEDURE:
			case PROGRAM:
			case QUOTE:
			case RANGE:
			case READ:
			case REASSIGN:
			case RECHECK:
			case RECURSIVE:
			case REF:
			case REFRESH:
			case REINDEX:
			case RELATIVE_P:
			case RELEASE:
			case RENAME:
			case REPEATABLE:
			case REPLACE:
			case REPLICA:
			case RESET:
			case RESTART:
			case RESTRICT:
			case RETURNS:
			case REVOKE:
			case ROLE:
			case ROLLBACK:
			case ROWS:
			case RULE:
			case SAVEPOINT:
			case SCHEMA:
			case SCROLL:
			case SEARCH:
			case SECOND_P:
			case SECURITY:
			case SEQUENCE:
			case SEQUENCES:
			case SERIALIZABLE:
			case SERVER:
			case SESSION:
			case SET:
			case SHARE:
			case SHOW:
			case SIMPLE:
			case SNAPSHOT:
			case STABLE:
			case STANDALONE_P:
			case START:
			case STATEMENT:
			case STATISTICS:
			case STDIN:
			case STDOUT:
			case STORAGE:
			case STRICT_P:
			case STRIP_P:
			case SYSID:
			case SYSTEM_P:
			case TABLES:
			case TABLESPACE:
			case TEMP:
			case TEMPLATE:
			case TEMPORARY:
			case TEXT_P:
			case TRANSACTION:
			case TRIGGER:
			case TRUNCATE:
			case TRUSTED:
			case TYPE_P:
			case TYPES_P:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNENCRYPTED:
			case UNKNOWN:
			case UNLISTEN:
			case UNLOGGED:
			case UNTIL:
			case UPDATE:
			case VACUUM:
			case VALID:
			case VALIDATE:
			case VALIDATOR:
			case VARYING:
			case VERSION_P:
			case VIEW:
			case VOLATILE:
			case WHITESPACE_P:
			case WITHOUT:
			case WORK:
			case WRAPPER:
			case WRITE:
			case XML_P:
			case YEAR_P:
			case YES_P:
			case ZONE:
			case BETWEEN:
			case BIGINT:
			case BIT:
			case BOOLEAN_P:
			case CHAR_P:
			case CHARACTER:
			case COALESCE:
			case DEC:
			case DECIMAL_P:
			case EXISTS:
			case EXTRACT:
			case FLOAT_P:
			case GREATEST:
			case INOUT:
			case INT_P:
			case INTEGER:
			case INTERVAL:
			case LEAST:
			case NATIONAL:
			case NCHAR:
			case NONE:
			case NULLIF:
			case NUMERIC:
			case OVERLAY:
			case POSITION:
			case PRECISION:
			case REAL:
			case ROW:
			case SETOF:
			case SMALLINT:
			case SUBSTRING:
			case TIME:
			case TIMESTAMP:
			case TREAT:
			case TRIM:
			case VALUES:
			case VARCHAR:
			case XMLATTRIBUTES:
			case XMLCOMMENT:
			case XMLAGG:
			case XML_IS_WELL_FORMED:
			case XML_IS_WELL_FORMED_DOCUMENT:
			case XML_IS_WELL_FORMED_CONTENT:
			case XPATH:
			case XPATH_EXISTS:
			case XMLCONCAT:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLPARSE:
			case XMLPI:
			case XMLROOT:
			case XMLSERIALIZE:
			case CALL:
			case CURRENT_P:
			case ATTACH:
			case DETACH:
			case EXPRESSION:
			case GENERATED:
			case LOGGED:
			case STORED:
			case INCLUDE:
			case ROUTINE:
			case TRANSFORM:
			case IMPORT_P:
			case POLICY:
			case METHOD:
			case REFERENCING:
			case NEW:
			case OLD:
			case VALUE_P:
			case SUBSCRIPTION:
			case PUBLICATION:
			case OUT_P:
			case ROUTINES:
			case SCHEMAS:
			case PROCEDURES:
			case INPUT_P:
			case SUPPORT:
			case PARALLEL:
			case SQL_P:
			case DEPENDS:
			case OVERRIDING:
			case CONFLICT:
			case SKIP_P:
			case LOCKED:
			case TIES:
			case ROLLUP:
			case CUBE:
			case GROUPING:
			case SETS:
			case ORDINALITY:
			case XMLTABLE:
			case COLUMNS:
			case XMLNAMESPACES:
			case ROWTYPE:
			case NORMALIZED:
			case WITHIN:
			case FILTER:
			case GROUPS:
			case OTHERS:
			case NFC:
			case NFD:
			case NFKC:
			case NFKD:
			case UESCAPE:
			case VIEWS:
			case NORMALIZE:
			case DUMP:
			case PRINT_STRICT_PARAMS:
			case VARIABLE_CONFLICT:
			case ERROR:
			case USE_VARIABLE:
			case USE_COLUMN:
			case ALIAS:
			case CONSTANT:
			case PERFORM:
			case GET:
			case DIAGNOSTICS:
			case STACKED:
			case ELSIF:
			case REVERSE:
			case SLICE:
			case EXIT:
			case RETURN:
			case QUERY:
			case RAISE:
			case SQLSTATE:
			case DEBUG:
			case LOG:
			case INFO:
			case NOTICE:
			case WARNING:
			case EXCEPTION:
			case ASSERT:
			case OPEN:
			case ABS:
			case CBRT:
			case CEIL:
			case CEILING:
			case DEGREES:
			case DIV:
			case EXP:
			case FACTORIAL:
			case FLOOR:
			case GCD:
			case LCM:
			case LN:
			case LOG10:
			case MIN_SCALE:
			case MOD:
			case PI:
			case POWER:
			case RADIANS:
			case ROUND:
			case SCALE:
			case SIGN:
			case SQRT:
			case TRIM_SCALE:
			case TRUNC:
			case WIDTH_BUCKET:
			case RANDOM:
			case SETSEED:
			case ACOS:
			case ACOSD:
			case ASIN:
			case ASIND:
			case ATAN:
			case ATAND:
			case ATAN2:
			case ATAN2D:
			case COS:
			case COSD:
			case COT:
			case COTD:
			case SIN:
			case SIND:
			case TAN:
			case TAND:
			case SINH:
			case COSH:
			case TANH:
			case ASINH:
			case ACOSH:
			case ATANH:
			case BIT_LENGTH:
			case CHAR_LENGTH:
			case CHARACTER_LENGTH:
			case LOWER:
			case OCTET_LENGTH:
			case UPPER:
			case ASCII:
			case BTRIM:
			case CHR:
			case CONCAT:
			case CONCAT_WS:
			case FORMAT:
			case INITCAP:
			case LENGTH:
			case LPAD:
			case LTRIM:
			case MD5:
			case PARSE_IDENT:
			case PG_CLIENT_ENCODING:
			case QUOTE_IDENT:
			case QUOTE_LITERAL:
			case QUOTE_NULLABLE:
			case REGEXP_COUNT:
			case REGEXP_INSTR:
			case REGEXP_LIKE:
			case REGEXP_MATCH:
			case REGEXP_MATCHES:
			case REGEXP_REPLACE:
			case REGEXP_SPLIT_TO_ARRAY:
			case REGEXP_SPLIT_TO_TABLE:
			case REGEXP_SUBSTR:
			case REPEAT:
			case RPAD:
			case RTRIM:
			case SPLIT_PART:
			case STARTS_WITH:
			case STRING_TO_ARRAY:
			case STRING_TO_TABLE:
			case STRPOS:
			case SUBSTR:
			case TO_ASCII:
			case TO_HEX:
			case TRANSLATE:
			case UNISTR:
			case AGE:
			case CLOCK_TIMESTAMP:
			case DATE_BIN:
			case DATE_PART:
			case DATE_TRUNC:
			case ISFINITE:
			case JUSTIFY_DAYS:
			case JUSTIFY_HOURS:
			case JUSTIFY_INTERVAL:
			case MAKE_DATE:
			case MAKE_INTERVAL:
			case MAKE_TIME:
			case MAKE_TIMESTAMP:
			case MAKE_TIMESTAMPTZ:
			case NOW:
			case STATEMENT_TIMESTAMP:
			case TIMEOFDAY:
			case TRANSACTION_TIMESTAMP:
			case TO_TIMESTAMP:
			case TO_CHAR:
			case TO_DATE:
			case TO_NUMBER:
			case Identifier:
			case QuotedIdentifier:
			case UnicodeQuotedIdentifier:
			case PLSQLVARIABLENAME:
			case PLSQLIDENTIFIER:
				{
				State = 10200;
				any_name();
				}
				break;
			case PARAM:
				{
				State = 10201;
				Match(PARAM);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 10210;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==OPEN_BRACKET) {
				{
				{
				State = 10204;
				Match(OPEN_BRACKET);
				State = 10205;
				expr_until_rightbracket();
				State = 10206;
				Match(CLOSE_BRACKET);
				}
				}
				State = 10212;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Stmt_ifContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] IF_P() { return GetTokens(PostgreSQLParser.IF_P); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF_P(int i) {
			return GetToken(PostgreSQLParser.IF_P, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Expr_until_thenContext expr_until_then() {
			return GetRuleContext<Expr_until_thenContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode THEN() { return GetToken(PostgreSQLParser.THEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Proc_sectContext proc_sect() {
			return GetRuleContext<Proc_sectContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Stmt_elsifsContext stmt_elsifs() {
			return GetRuleContext<Stmt_elsifsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Stmt_elseContext stmt_else() {
			return GetRuleContext<Stmt_elseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END_P() { return GetToken(PostgreSQLParser.END_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(PostgreSQLParser.SEMI, 0); }
		public Stmt_ifContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stmt_if; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterStmt_if(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitStmt_if(this);
		}
	}

	[RuleVersion(0)]
	public Stmt_ifContext stmt_if() {
		Stmt_ifContext _localctx = new Stmt_ifContext(Context, State);
		EnterRule(_localctx, 1478, RULE_stmt_if);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 10213;
			Match(IF_P);
			State = 10214;
			expr_until_then();
			State = 10215;
			Match(THEN);
			State = 10216;
			proc_sect();
			State = 10217;
			stmt_elsifs();
			State = 10218;
			stmt_else();
			State = 10219;
			Match(END_P);
			State = 10220;
			Match(IF_P);
			State = 10221;
			Match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Stmt_elsifsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] ELSIF() { return GetTokens(PostgreSQLParser.ELSIF); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ELSIF(int i) {
			return GetToken(PostgreSQLParser.ELSIF, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public A_exprContext[] a_expr() {
			return GetRuleContexts<A_exprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public A_exprContext a_expr(int i) {
			return GetRuleContext<A_exprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] THEN() { return GetTokens(PostgreSQLParser.THEN); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode THEN(int i) {
			return GetToken(PostgreSQLParser.THEN, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Proc_sectContext[] proc_sect() {
			return GetRuleContexts<Proc_sectContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Proc_sectContext proc_sect(int i) {
			return GetRuleContext<Proc_sectContext>(i);
		}
		public Stmt_elsifsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stmt_elsifs; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterStmt_elsifs(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitStmt_elsifs(this);
		}
	}

	[RuleVersion(0)]
	public Stmt_elsifsContext stmt_elsifs() {
		Stmt_elsifsContext _localctx = new Stmt_elsifsContext(Context, State);
		EnterRule(_localctx, 1480, RULE_stmt_elsifs);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 10230;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==ELSIF) {
				{
				{
				State = 10223;
				Match(ELSIF);
				State = 10224;
				a_expr();
				State = 10225;
				Match(THEN);
				State = 10226;
				proc_sect();
				}
				}
				State = 10232;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Stmt_elseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ELSE() { return GetToken(PostgreSQLParser.ELSE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Proc_sectContext proc_sect() {
			return GetRuleContext<Proc_sectContext>(0);
		}
		public Stmt_elseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stmt_else; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterStmt_else(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitStmt_else(this);
		}
	}

	[RuleVersion(0)]
	public Stmt_elseContext stmt_else() {
		Stmt_elseContext _localctx = new Stmt_elseContext(Context, State);
		EnterRule(_localctx, 1482, RULE_stmt_else);
		try {
			State = 10236;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case END_P:
				EnterOuterAlt(_localctx, 1);
				{
				}
				break;
			case ELSE:
				EnterOuterAlt(_localctx, 2);
				{
				State = 10234;
				Match(ELSE);
				State = 10235;
				proc_sect();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Stmt_caseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] CASE() { return GetTokens(PostgreSQLParser.CASE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CASE(int i) {
			return GetToken(PostgreSQLParser.CASE, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Opt_expr_until_whenContext opt_expr_until_when() {
			return GetRuleContext<Opt_expr_until_whenContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Case_when_listContext case_when_list() {
			return GetRuleContext<Case_when_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Opt_case_elseContext opt_case_else() {
			return GetRuleContext<Opt_case_elseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END_P() { return GetToken(PostgreSQLParser.END_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(PostgreSQLParser.SEMI, 0); }
		public Stmt_caseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stmt_case; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterStmt_case(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitStmt_case(this);
		}
	}

	[RuleVersion(0)]
	public Stmt_caseContext stmt_case() {
		Stmt_caseContext _localctx = new Stmt_caseContext(Context, State);
		EnterRule(_localctx, 1484, RULE_stmt_case);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 10238;
			Match(CASE);
			State = 10239;
			opt_expr_until_when();
			State = 10240;
			case_when_list();
			State = 10241;
			opt_case_else();
			State = 10242;
			Match(END_P);
			State = 10243;
			Match(CASE);
			State = 10244;
			Match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Opt_expr_until_whenContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Sql_expressionContext sql_expression() {
			return GetRuleContext<Sql_expressionContext>(0);
		}
		public Opt_expr_until_whenContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_opt_expr_until_when; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterOpt_expr_until_when(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitOpt_expr_until_when(this);
		}
	}

	[RuleVersion(0)]
	public Opt_expr_until_whenContext opt_expr_until_when() {
		Opt_expr_until_whenContext _localctx = new Opt_expr_until_whenContext(Context, State);
		EnterRule(_localctx, 1486, RULE_opt_expr_until_when);
		try {
			State = 10248;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,693,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 10247;
				sql_expression();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Case_when_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Case_whenContext[] case_when() {
			return GetRuleContexts<Case_whenContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Case_whenContext case_when(int i) {
			return GetRuleContext<Case_whenContext>(i);
		}
		public Case_when_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_case_when_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterCase_when_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitCase_when_list(this);
		}
	}

	[RuleVersion(0)]
	public Case_when_listContext case_when_list() {
		Case_when_listContext _localctx = new Case_when_listContext(Context, State);
		EnterRule(_localctx, 1488, RULE_case_when_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 10251;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 10250;
				case_when();
				}
				}
				State = 10253;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==WHEN );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Case_whenContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WHEN() { return GetToken(PostgreSQLParser.WHEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Expr_listContext expr_list() {
			return GetRuleContext<Expr_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode THEN() { return GetToken(PostgreSQLParser.THEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Proc_sectContext proc_sect() {
			return GetRuleContext<Proc_sectContext>(0);
		}
		public Case_whenContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_case_when; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterCase_when(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitCase_when(this);
		}
	}

	[RuleVersion(0)]
	public Case_whenContext case_when() {
		Case_whenContext _localctx = new Case_whenContext(Context, State);
		EnterRule(_localctx, 1490, RULE_case_when);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 10255;
			Match(WHEN);
			State = 10256;
			expr_list();
			State = 10257;
			Match(THEN);
			State = 10258;
			proc_sect();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Opt_case_elseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ELSE() { return GetToken(PostgreSQLParser.ELSE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Proc_sectContext proc_sect() {
			return GetRuleContext<Proc_sectContext>(0);
		}
		public Opt_case_elseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_opt_case_else; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterOpt_case_else(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitOpt_case_else(this);
		}
	}

	[RuleVersion(0)]
	public Opt_case_elseContext opt_case_else() {
		Opt_case_elseContext _localctx = new Opt_case_elseContext(Context, State);
		EnterRule(_localctx, 1492, RULE_opt_case_else);
		try {
			State = 10263;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case END_P:
				EnterOuterAlt(_localctx, 1);
				{
				}
				break;
			case ELSE:
				EnterOuterAlt(_localctx, 2);
				{
				State = 10261;
				Match(ELSE);
				State = 10262;
				proc_sect();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Stmt_loopContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Opt_loop_labelContext opt_loop_label() {
			return GetRuleContext<Opt_loop_labelContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Loop_bodyContext loop_body() {
			return GetRuleContext<Loop_bodyContext>(0);
		}
		public Stmt_loopContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stmt_loop; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterStmt_loop(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitStmt_loop(this);
		}
	}

	[RuleVersion(0)]
	public Stmt_loopContext stmt_loop() {
		Stmt_loopContext _localctx = new Stmt_loopContext(Context, State);
		EnterRule(_localctx, 1494, RULE_stmt_loop);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 10265;
			opt_loop_label();
			State = 10266;
			loop_body();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Stmt_whileContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Opt_loop_labelContext opt_loop_label() {
			return GetRuleContext<Opt_loop_labelContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WHILE() { return GetToken(PostgreSQLParser.WHILE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Expr_until_loopContext expr_until_loop() {
			return GetRuleContext<Expr_until_loopContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Loop_bodyContext loop_body() {
			return GetRuleContext<Loop_bodyContext>(0);
		}
		public Stmt_whileContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stmt_while; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterStmt_while(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitStmt_while(this);
		}
	}

	[RuleVersion(0)]
	public Stmt_whileContext stmt_while() {
		Stmt_whileContext _localctx = new Stmt_whileContext(Context, State);
		EnterRule(_localctx, 1496, RULE_stmt_while);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 10268;
			opt_loop_label();
			State = 10269;
			Match(WHILE);
			State = 10270;
			expr_until_loop();
			State = 10271;
			loop_body();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Stmt_forContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Opt_loop_labelContext opt_loop_label() {
			return GetRuleContext<Opt_loop_labelContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOR() { return GetToken(PostgreSQLParser.FOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public For_controlContext for_control() {
			return GetRuleContext<For_controlContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Loop_bodyContext loop_body() {
			return GetRuleContext<Loop_bodyContext>(0);
		}
		public Stmt_forContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stmt_for; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterStmt_for(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitStmt_for(this);
		}
	}

	[RuleVersion(0)]
	public Stmt_forContext stmt_for() {
		Stmt_forContext _localctx = new Stmt_forContext(Context, State);
		EnterRule(_localctx, 1498, RULE_stmt_for);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 10273;
			opt_loop_label();
			State = 10274;
			Match(FOR);
			State = 10275;
			for_control();
			State = 10276;
			loop_body();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class For_controlContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public For_variableContext for_variable() {
			return GetRuleContext<For_variableContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IN_P() { return GetToken(PostgreSQLParser.IN_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Cursor_nameContext cursor_name() {
			return GetRuleContext<Cursor_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Opt_cursor_parametersContext opt_cursor_parameters() {
			return GetRuleContext<Opt_cursor_parametersContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SelectstmtContext selectstmt() {
			return GetRuleContext<SelectstmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExplainstmtContext explainstmt() {
			return GetRuleContext<ExplainstmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXECUTE() { return GetToken(PostgreSQLParser.EXECUTE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public A_exprContext[] a_expr() {
			return GetRuleContexts<A_exprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public A_exprContext a_expr(int i) {
			return GetRuleContext<A_exprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Opt_for_using_expressionContext opt_for_using_expression() {
			return GetRuleContext<Opt_for_using_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Opt_reverseContext opt_reverse() {
			return GetRuleContext<Opt_reverseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT_DOT() { return GetToken(PostgreSQLParser.DOT_DOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Opt_by_expressionContext opt_by_expression() {
			return GetRuleContext<Opt_by_expressionContext>(0);
		}
		public For_controlContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_for_control; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterFor_control(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitFor_control(this);
		}
	}

	[RuleVersion(0)]
	public For_controlContext for_control() {
		For_controlContext _localctx = new For_controlContext(Context, State);
		EnterRule(_localctx, 1500, RULE_for_control);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 10278;
			for_variable();
			State = 10279;
			Match(IN_P);
			State = 10295;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,696,Context) ) {
			case 1:
				{
				State = 10280;
				cursor_name();
				State = 10281;
				opt_cursor_parameters();
				}
				break;
			case 2:
				{
				State = 10283;
				selectstmt();
				}
				break;
			case 3:
				{
				State = 10284;
				explainstmt();
				}
				break;
			case 4:
				{
				State = 10285;
				Match(EXECUTE);
				State = 10286;
				a_expr();
				State = 10287;
				opt_for_using_expression();
				}
				break;
			case 5:
				{
				State = 10289;
				opt_reverse();
				State = 10290;
				a_expr();
				State = 10291;
				Match(DOT_DOT);
				State = 10292;
				a_expr();
				State = 10293;
				opt_by_expression();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Opt_for_using_expressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode USING() { return GetToken(PostgreSQLParser.USING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Expr_listContext expr_list() {
			return GetRuleContext<Expr_listContext>(0);
		}
		public Opt_for_using_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_opt_for_using_expression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterOpt_for_using_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitOpt_for_using_expression(this);
		}
	}

	[RuleVersion(0)]
	public Opt_for_using_expressionContext opt_for_using_expression() {
		Opt_for_using_expressionContext _localctx = new Opt_for_using_expressionContext(Context, State);
		EnterRule(_localctx, 1502, RULE_opt_for_using_expression);
		try {
			State = 10300;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case SEMI:
			case LOOP:
				EnterOuterAlt(_localctx, 1);
				{
				}
				break;
			case USING:
				EnterOuterAlt(_localctx, 2);
				{
				State = 10298;
				Match(USING);
				State = 10299;
				expr_list();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Opt_cursor_parametersContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAREN() { return GetToken(PostgreSQLParser.OPEN_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public A_exprContext[] a_expr() {
			return GetRuleContexts<A_exprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public A_exprContext a_expr(int i) {
			return GetRuleContext<A_exprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAREN() { return GetToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(PostgreSQLParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(PostgreSQLParser.COMMA, i);
		}
		public Opt_cursor_parametersContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_opt_cursor_parameters; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterOpt_cursor_parameters(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitOpt_cursor_parameters(this);
		}
	}

	[RuleVersion(0)]
	public Opt_cursor_parametersContext opt_cursor_parameters() {
		Opt_cursor_parametersContext _localctx = new Opt_cursor_parametersContext(Context, State);
		EnterRule(_localctx, 1504, RULE_opt_cursor_parameters);
		int _la;
		try {
			State = 10314;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case LOOP:
				EnterOuterAlt(_localctx, 1);
				{
				}
				break;
			case OPEN_PAREN:
				EnterOuterAlt(_localctx, 2);
				{
				State = 10303;
				Match(OPEN_PAREN);
				State = 10304;
				a_expr();
				State = 10309;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 10305;
					Match(COMMA);
					State = 10306;
					a_expr();
					}
					}
					State = 10311;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 10312;
				Match(CLOSE_PAREN);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Opt_reverseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REVERSE() { return GetToken(PostgreSQLParser.REVERSE, 0); }
		public Opt_reverseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_opt_reverse; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterOpt_reverse(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitOpt_reverse(this);
		}
	}

	[RuleVersion(0)]
	public Opt_reverseContext opt_reverse() {
		Opt_reverseContext _localctx = new Opt_reverseContext(Context, State);
		EnterRule(_localctx, 1506, RULE_opt_reverse);
		try {
			State = 10318;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,700,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 10317;
				Match(REVERSE);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Opt_by_expressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BY() { return GetToken(PostgreSQLParser.BY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public A_exprContext a_expr() {
			return GetRuleContext<A_exprContext>(0);
		}
		public Opt_by_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_opt_by_expression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterOpt_by_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitOpt_by_expression(this);
		}
	}

	[RuleVersion(0)]
	public Opt_by_expressionContext opt_by_expression() {
		Opt_by_expressionContext _localctx = new Opt_by_expressionContext(Context, State);
		EnterRule(_localctx, 1508, RULE_opt_by_expression);
		try {
			State = 10323;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case LOOP:
				EnterOuterAlt(_localctx, 1);
				{
				}
				break;
			case BY:
				EnterOuterAlt(_localctx, 2);
				{
				State = 10321;
				Match(BY);
				State = 10322;
				a_expr();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class For_variableContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Any_name_listContext any_name_list() {
			return GetRuleContext<Any_name_listContext>(0);
		}
		public For_variableContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_for_variable; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterFor_variable(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitFor_variable(this);
		}
	}

	[RuleVersion(0)]
	public For_variableContext for_variable() {
		For_variableContext _localctx = new For_variableContext(Context, State);
		EnterRule(_localctx, 1510, RULE_for_variable);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 10325;
			any_name_list();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Stmt_foreach_aContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Opt_loop_labelContext opt_loop_label() {
			return GetRuleContext<Opt_loop_labelContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOREACH() { return GetToken(PostgreSQLParser.FOREACH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public For_variableContext for_variable() {
			return GetRuleContext<For_variableContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Foreach_sliceContext foreach_slice() {
			return GetRuleContext<Foreach_sliceContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IN_P() { return GetToken(PostgreSQLParser.IN_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ARRAY() { return GetToken(PostgreSQLParser.ARRAY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public A_exprContext a_expr() {
			return GetRuleContext<A_exprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Loop_bodyContext loop_body() {
			return GetRuleContext<Loop_bodyContext>(0);
		}
		public Stmt_foreach_aContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stmt_foreach_a; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterStmt_foreach_a(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitStmt_foreach_a(this);
		}
	}

	[RuleVersion(0)]
	public Stmt_foreach_aContext stmt_foreach_a() {
		Stmt_foreach_aContext _localctx = new Stmt_foreach_aContext(Context, State);
		EnterRule(_localctx, 1512, RULE_stmt_foreach_a);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 10327;
			opt_loop_label();
			State = 10328;
			Match(FOREACH);
			State = 10329;
			for_variable();
			State = 10330;
			foreach_slice();
			State = 10331;
			Match(IN_P);
			State = 10332;
			Match(ARRAY);
			State = 10333;
			a_expr();
			State = 10334;
			loop_body();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Foreach_sliceContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SLICE() { return GetToken(PostgreSQLParser.SLICE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IconstContext iconst() {
			return GetRuleContext<IconstContext>(0);
		}
		public Foreach_sliceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_foreach_slice; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterForeach_slice(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitForeach_slice(this);
		}
	}

	[RuleVersion(0)]
	public Foreach_sliceContext foreach_slice() {
		Foreach_sliceContext _localctx = new Foreach_sliceContext(Context, State);
		EnterRule(_localctx, 1514, RULE_foreach_slice);
		try {
			State = 10339;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case IN_P:
				EnterOuterAlt(_localctx, 1);
				{
				}
				break;
			case SLICE:
				EnterOuterAlt(_localctx, 2);
				{
				State = 10337;
				Match(SLICE);
				State = 10338;
				iconst();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Stmt_exitContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Exit_typeContext exit_type() {
			return GetRuleContext<Exit_typeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Opt_labelContext opt_label() {
			return GetRuleContext<Opt_labelContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Opt_exitcondContext opt_exitcond() {
			return GetRuleContext<Opt_exitcondContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(PostgreSQLParser.SEMI, 0); }
		public Stmt_exitContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stmt_exit; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterStmt_exit(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitStmt_exit(this);
		}
	}

	[RuleVersion(0)]
	public Stmt_exitContext stmt_exit() {
		Stmt_exitContext _localctx = new Stmt_exitContext(Context, State);
		EnterRule(_localctx, 1516, RULE_stmt_exit);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 10341;
			exit_type();
			State = 10342;
			opt_label();
			State = 10343;
			opt_exitcond();
			State = 10344;
			Match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Exit_typeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXIT() { return GetToken(PostgreSQLParser.EXIT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONTINUE_P() { return GetToken(PostgreSQLParser.CONTINUE_P, 0); }
		public Exit_typeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_exit_type; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterExit_type(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitExit_type(this);
		}
	}

	[RuleVersion(0)]
	public Exit_typeContext exit_type() {
		Exit_typeContext _localctx = new Exit_typeContext(Context, State);
		EnterRule(_localctx, 1518, RULE_exit_type);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 10346;
			_la = TokenStream.LA(1);
			if ( !(_la==CONTINUE_P || _la==EXIT) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Stmt_returnContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RETURN() { return GetToken(PostgreSQLParser.RETURN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(PostgreSQLParser.SEMI, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NEXT() { return GetToken(PostgreSQLParser.NEXT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Sql_expressionContext sql_expression() {
			return GetRuleContext<Sql_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode QUERY() { return GetToken(PostgreSQLParser.QUERY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Opt_return_resultContext opt_return_result() {
			return GetRuleContext<Opt_return_resultContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXECUTE() { return GetToken(PostgreSQLParser.EXECUTE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public A_exprContext a_expr() {
			return GetRuleContext<A_exprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Opt_for_using_expressionContext opt_for_using_expression() {
			return GetRuleContext<Opt_for_using_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SelectstmtContext selectstmt() {
			return GetRuleContext<SelectstmtContext>(0);
		}
		public Stmt_returnContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stmt_return; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterStmt_return(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitStmt_return(this);
		}
	}

	[RuleVersion(0)]
	public Stmt_returnContext stmt_return() {
		Stmt_returnContext _localctx = new Stmt_returnContext(Context, State);
		EnterRule(_localctx, 1520, RULE_stmt_return);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 10348;
			Match(RETURN);
			State = 10360;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,704,Context) ) {
			case 1:
				{
				State = 10349;
				Match(NEXT);
				State = 10350;
				sql_expression();
				}
				break;
			case 2:
				{
				State = 10351;
				Match(QUERY);
				State = 10357;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case EXECUTE:
					{
					State = 10352;
					Match(EXECUTE);
					State = 10353;
					a_expr();
					State = 10354;
					opt_for_using_expression();
					}
					break;
				case OPEN_PAREN:
				case SELECT:
				case TABLE:
				case WITH:
				case VALUES:
					{
					State = 10356;
					selectstmt();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 3:
				{
				State = 10359;
				opt_return_result();
				}
				break;
			}
			State = 10362;
			Match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Opt_return_resultContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Sql_expressionContext sql_expression() {
			return GetRuleContext<Sql_expressionContext>(0);
		}
		public Opt_return_resultContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_opt_return_result; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterOpt_return_result(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitOpt_return_result(this);
		}
	}

	[RuleVersion(0)]
	public Opt_return_resultContext opt_return_result() {
		Opt_return_resultContext _localctx = new Opt_return_resultContext(Context, State);
		EnterRule(_localctx, 1522, RULE_opt_return_result);
		try {
			State = 10366;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,705,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 10365;
				sql_expression();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Stmt_raiseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RAISE() { return GetToken(PostgreSQLParser.RAISE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Opt_stmt_raise_levelContext opt_stmt_raise_level() {
			return GetRuleContext<Opt_stmt_raise_levelContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SconstContext sconst() {
			return GetRuleContext<SconstContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Opt_raise_listContext opt_raise_list() {
			return GetRuleContext<Opt_raise_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Opt_raise_usingContext opt_raise_using() {
			return GetRuleContext<Opt_raise_usingContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(PostgreSQLParser.SEMI, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SQLSTATE() { return GetToken(PostgreSQLParser.SQLSTATE, 0); }
		public Stmt_raiseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stmt_raise; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterStmt_raise(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitStmt_raise(this);
		}
	}

	[RuleVersion(0)]
	public Stmt_raiseContext stmt_raise() {
		Stmt_raiseContext _localctx = new Stmt_raiseContext(Context, State);
		EnterRule(_localctx, 1524, RULE_stmt_raise);
		try {
			State = 10394;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,706,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 10368;
				Match(RAISE);
				State = 10369;
				opt_stmt_raise_level();
				State = 10370;
				sconst();
				State = 10371;
				opt_raise_list();
				State = 10372;
				opt_raise_using();
				State = 10373;
				Match(SEMI);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 10375;
				Match(RAISE);
				State = 10376;
				opt_stmt_raise_level();
				State = 10377;
				identifier();
				State = 10378;
				opt_raise_using();
				State = 10379;
				Match(SEMI);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 10381;
				Match(RAISE);
				State = 10382;
				opt_stmt_raise_level();
				State = 10383;
				Match(SQLSTATE);
				State = 10384;
				sconst();
				State = 10385;
				opt_raise_using();
				State = 10386;
				Match(SEMI);
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 10388;
				Match(RAISE);
				State = 10389;
				opt_stmt_raise_level();
				State = 10390;
				opt_raise_using();
				State = 10391;
				Match(SEMI);
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 10393;
				Match(RAISE);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Opt_stmt_raise_levelContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEBUG() { return GetToken(PostgreSQLParser.DEBUG, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOG() { return GetToken(PostgreSQLParser.LOG, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INFO() { return GetToken(PostgreSQLParser.INFO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOTICE() { return GetToken(PostgreSQLParser.NOTICE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WARNING() { return GetToken(PostgreSQLParser.WARNING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXCEPTION() { return GetToken(PostgreSQLParser.EXCEPTION, 0); }
		public Opt_stmt_raise_levelContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_opt_stmt_raise_level; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterOpt_stmt_raise_level(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitOpt_stmt_raise_level(this);
		}
	}

	[RuleVersion(0)]
	public Opt_stmt_raise_levelContext opt_stmt_raise_level() {
		Opt_stmt_raise_levelContext _localctx = new Opt_stmt_raise_levelContext(Context, State);
		EnterRule(_localctx, 1526, RULE_opt_stmt_raise_level);
		try {
			State = 10404;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,707,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 10398;
				Match(DEBUG);
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 10399;
				Match(LOG);
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 10400;
				Match(INFO);
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 10401;
				Match(NOTICE);
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 10402;
				Match(WARNING);
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 10403;
				Match(EXCEPTION);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Opt_raise_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(PostgreSQLParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(PostgreSQLParser.COMMA, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public A_exprContext[] a_expr() {
			return GetRuleContexts<A_exprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public A_exprContext a_expr(int i) {
			return GetRuleContext<A_exprContext>(i);
		}
		public Opt_raise_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_opt_raise_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterOpt_raise_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitOpt_raise_list(this);
		}
	}

	[RuleVersion(0)]
	public Opt_raise_listContext opt_raise_list() {
		Opt_raise_listContext _localctx = new Opt_raise_listContext(Context, State);
		EnterRule(_localctx, 1528, RULE_opt_raise_list);
		int _la;
		try {
			State = 10413;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case SEMI:
			case USING:
				EnterOuterAlt(_localctx, 1);
				{
				}
				break;
			case COMMA:
				EnterOuterAlt(_localctx, 2);
				{
				State = 10409;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 10407;
					Match(COMMA);
					State = 10408;
					a_expr();
					}
					}
					State = 10411;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( _la==COMMA );
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Opt_raise_usingContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode USING() { return GetToken(PostgreSQLParser.USING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Opt_raise_using_elem_listContext opt_raise_using_elem_list() {
			return GetRuleContext<Opt_raise_using_elem_listContext>(0);
		}
		public Opt_raise_usingContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_opt_raise_using; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterOpt_raise_using(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitOpt_raise_using(this);
		}
	}

	[RuleVersion(0)]
	public Opt_raise_usingContext opt_raise_using() {
		Opt_raise_usingContext _localctx = new Opt_raise_usingContext(Context, State);
		EnterRule(_localctx, 1530, RULE_opt_raise_using);
		try {
			State = 10418;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case SEMI:
				EnterOuterAlt(_localctx, 1);
				{
				}
				break;
			case USING:
				EnterOuterAlt(_localctx, 2);
				{
				State = 10416;
				Match(USING);
				State = 10417;
				opt_raise_using_elem_list();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Opt_raise_using_elemContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL() { return GetToken(PostgreSQLParser.EQUAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public A_exprContext a_expr() {
			return GetRuleContext<A_exprContext>(0);
		}
		public Opt_raise_using_elemContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_opt_raise_using_elem; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterOpt_raise_using_elem(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitOpt_raise_using_elem(this);
		}
	}

	[RuleVersion(0)]
	public Opt_raise_using_elemContext opt_raise_using_elem() {
		Opt_raise_using_elemContext _localctx = new Opt_raise_using_elemContext(Context, State);
		EnterRule(_localctx, 1532, RULE_opt_raise_using_elem);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 10420;
			identifier();
			State = 10421;
			Match(EQUAL);
			State = 10422;
			a_expr();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Opt_raise_using_elem_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Opt_raise_using_elemContext[] opt_raise_using_elem() {
			return GetRuleContexts<Opt_raise_using_elemContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Opt_raise_using_elemContext opt_raise_using_elem(int i) {
			return GetRuleContext<Opt_raise_using_elemContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(PostgreSQLParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(PostgreSQLParser.COMMA, i);
		}
		public Opt_raise_using_elem_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_opt_raise_using_elem_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterOpt_raise_using_elem_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitOpt_raise_using_elem_list(this);
		}
	}

	[RuleVersion(0)]
	public Opt_raise_using_elem_listContext opt_raise_using_elem_list() {
		Opt_raise_using_elem_listContext _localctx = new Opt_raise_using_elem_listContext(Context, State);
		EnterRule(_localctx, 1534, RULE_opt_raise_using_elem_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 10424;
			opt_raise_using_elem();
			State = 10429;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 10425;
				Match(COMMA);
				State = 10426;
				opt_raise_using_elem();
				}
				}
				State = 10431;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Stmt_assertContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSERT() { return GetToken(PostgreSQLParser.ASSERT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Sql_expressionContext sql_expression() {
			return GetRuleContext<Sql_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Opt_stmt_assert_messageContext opt_stmt_assert_message() {
			return GetRuleContext<Opt_stmt_assert_messageContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(PostgreSQLParser.SEMI, 0); }
		public Stmt_assertContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stmt_assert; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterStmt_assert(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitStmt_assert(this);
		}
	}

	[RuleVersion(0)]
	public Stmt_assertContext stmt_assert() {
		Stmt_assertContext _localctx = new Stmt_assertContext(Context, State);
		EnterRule(_localctx, 1536, RULE_stmt_assert);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 10432;
			Match(ASSERT);
			State = 10433;
			sql_expression();
			State = 10434;
			opt_stmt_assert_message();
			State = 10435;
			Match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Opt_stmt_assert_messageContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(PostgreSQLParser.COMMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Sql_expressionContext sql_expression() {
			return GetRuleContext<Sql_expressionContext>(0);
		}
		public Opt_stmt_assert_messageContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_opt_stmt_assert_message; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterOpt_stmt_assert_message(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitOpt_stmt_assert_message(this);
		}
	}

	[RuleVersion(0)]
	public Opt_stmt_assert_messageContext opt_stmt_assert_message() {
		Opt_stmt_assert_messageContext _localctx = new Opt_stmt_assert_messageContext(Context, State);
		EnterRule(_localctx, 1538, RULE_opt_stmt_assert_message);
		try {
			State = 10440;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case SEMI:
				EnterOuterAlt(_localctx, 1);
				{
				}
				break;
			case COMMA:
				EnterOuterAlt(_localctx, 2);
				{
				State = 10438;
				Match(COMMA);
				State = 10439;
				sql_expression();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Loop_bodyContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] LOOP() { return GetTokens(PostgreSQLParser.LOOP); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOOP(int i) {
			return GetToken(PostgreSQLParser.LOOP, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Proc_sectContext proc_sect() {
			return GetRuleContext<Proc_sectContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END_P() { return GetToken(PostgreSQLParser.END_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Opt_labelContext opt_label() {
			return GetRuleContext<Opt_labelContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(PostgreSQLParser.SEMI, 0); }
		public Loop_bodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_loop_body; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterLoop_body(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitLoop_body(this);
		}
	}

	[RuleVersion(0)]
	public Loop_bodyContext loop_body() {
		Loop_bodyContext _localctx = new Loop_bodyContext(Context, State);
		EnterRule(_localctx, 1540, RULE_loop_body);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 10442;
			Match(LOOP);
			State = 10443;
			proc_sect();
			State = 10444;
			Match(END_P);
			State = 10445;
			Match(LOOP);
			State = 10446;
			opt_label();
			State = 10447;
			Match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Stmt_execsqlContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Make_execsql_stmtContext make_execsql_stmt() {
			return GetRuleContext<Make_execsql_stmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(PostgreSQLParser.SEMI, 0); }
		public Stmt_execsqlContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stmt_execsql; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterStmt_execsql(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitStmt_execsql(this);
		}
	}

	[RuleVersion(0)]
	public Stmt_execsqlContext stmt_execsql() {
		Stmt_execsqlContext _localctx = new Stmt_execsqlContext(Context, State);
		EnterRule(_localctx, 1542, RULE_stmt_execsql);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 10449;
			make_execsql_stmt();
			State = 10450;
			Match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Stmt_dynexecuteContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXECUTE() { return GetToken(PostgreSQLParser.EXECUTE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public A_exprContext a_expr() {
			return GetRuleContext<A_exprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(PostgreSQLParser.SEMI, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Opt_execute_intoContext opt_execute_into() {
			return GetRuleContext<Opt_execute_intoContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Opt_execute_usingContext opt_execute_using() {
			return GetRuleContext<Opt_execute_usingContext>(0);
		}
		public Stmt_dynexecuteContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stmt_dynexecute; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterStmt_dynexecute(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitStmt_dynexecute(this);
		}
	}

	[RuleVersion(0)]
	public Stmt_dynexecuteContext stmt_dynexecute() {
		Stmt_dynexecuteContext _localctx = new Stmt_dynexecuteContext(Context, State);
		EnterRule(_localctx, 1544, RULE_stmt_dynexecute);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 10452;
			Match(EXECUTE);
			State = 10453;
			a_expr();
			State = 10461;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,713,Context) ) {
			case 1:
				{
				State = 10454;
				opt_execute_into();
				State = 10455;
				opt_execute_using();
				}
				break;
			case 2:
				{
				State = 10457;
				opt_execute_using();
				State = 10458;
				opt_execute_into();
				}
				break;
			case 3:
				{
				}
				break;
			}
			State = 10463;
			Match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Opt_execute_usingContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode USING() { return GetToken(PostgreSQLParser.USING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Opt_execute_using_listContext opt_execute_using_list() {
			return GetRuleContext<Opt_execute_using_listContext>(0);
		}
		public Opt_execute_usingContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_opt_execute_using; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterOpt_execute_using(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitOpt_execute_using(this);
		}
	}

	[RuleVersion(0)]
	public Opt_execute_usingContext opt_execute_using() {
		Opt_execute_usingContext _localctx = new Opt_execute_usingContext(Context, State);
		EnterRule(_localctx, 1546, RULE_opt_execute_using);
		try {
			State = 10468;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case SEMI:
			case INTO:
				EnterOuterAlt(_localctx, 1);
				{
				}
				break;
			case USING:
				EnterOuterAlt(_localctx, 2);
				{
				State = 10466;
				Match(USING);
				State = 10467;
				opt_execute_using_list();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Opt_execute_using_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public A_exprContext[] a_expr() {
			return GetRuleContexts<A_exprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public A_exprContext a_expr(int i) {
			return GetRuleContext<A_exprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(PostgreSQLParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(PostgreSQLParser.COMMA, i);
		}
		public Opt_execute_using_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_opt_execute_using_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterOpt_execute_using_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitOpt_execute_using_list(this);
		}
	}

	[RuleVersion(0)]
	public Opt_execute_using_listContext opt_execute_using_list() {
		Opt_execute_using_listContext _localctx = new Opt_execute_using_listContext(Context, State);
		EnterRule(_localctx, 1548, RULE_opt_execute_using_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 10470;
			a_expr();
			State = 10475;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 10471;
				Match(COMMA);
				State = 10472;
				a_expr();
				}
				}
				State = 10477;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Opt_execute_intoContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTO() { return GetToken(PostgreSQLParser.INTO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Into_targetContext into_target() {
			return GetRuleContext<Into_targetContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRICT_P() { return GetToken(PostgreSQLParser.STRICT_P, 0); }
		public Opt_execute_intoContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_opt_execute_into; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterOpt_execute_into(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitOpt_execute_into(this);
		}
	}

	[RuleVersion(0)]
	public Opt_execute_intoContext opt_execute_into() {
		Opt_execute_intoContext _localctx = new Opt_execute_intoContext(Context, State);
		EnterRule(_localctx, 1550, RULE_opt_execute_into);
		try {
			State = 10484;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case SEMI:
			case USING:
				EnterOuterAlt(_localctx, 1);
				{
				}
				break;
			case INTO:
				EnterOuterAlt(_localctx, 2);
				{
				State = 10479;
				Match(INTO);
				State = 10481;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,716,Context) ) {
				case 1:
					{
					State = 10480;
					Match(STRICT_P);
					}
					break;
				}
				State = 10483;
				into_target();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Stmt_openContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN() { return GetToken(PostgreSQLParser.OPEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(PostgreSQLParser.SEMI, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Cursor_variableContext cursor_variable() {
			return GetRuleContext<Cursor_variableContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Opt_scroll_optionContext opt_scroll_option() {
			return GetRuleContext<Opt_scroll_optionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOR() { return GetToken(PostgreSQLParser.FOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ColidContext colid() {
			return GetRuleContext<ColidContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SelectstmtContext selectstmt() {
			return GetRuleContext<SelectstmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXECUTE() { return GetToken(PostgreSQLParser.EXECUTE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Sql_expressionContext sql_expression() {
			return GetRuleContext<Sql_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Opt_open_usingContext opt_open_using() {
			return GetRuleContext<Opt_open_usingContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAREN() { return GetToken(PostgreSQLParser.OPEN_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Opt_open_bound_listContext opt_open_bound_list() {
			return GetRuleContext<Opt_open_bound_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAREN() { return GetToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public Stmt_openContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stmt_open; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterStmt_open(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitStmt_open(this);
		}
	}

	[RuleVersion(0)]
	public Stmt_openContext stmt_open() {
		Stmt_openContext _localctx = new Stmt_openContext(Context, State);
		EnterRule(_localctx, 1552, RULE_stmt_open);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 10486;
			Match(OPEN);
			State = 10504;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,720,Context) ) {
			case 1:
				{
				State = 10487;
				cursor_variable();
				State = 10488;
				opt_scroll_option();
				State = 10489;
				Match(FOR);
				State = 10495;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case OPEN_PAREN:
				case SELECT:
				case TABLE:
				case WITH:
				case VALUES:
					{
					State = 10490;
					selectstmt();
					}
					break;
				case EXECUTE:
					{
					State = 10491;
					Match(EXECUTE);
					State = 10492;
					sql_expression();
					State = 10493;
					opt_open_using();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 2:
				{
				State = 10497;
				colid();
				State = 10502;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==OPEN_PAREN) {
					{
					State = 10498;
					Match(OPEN_PAREN);
					State = 10499;
					opt_open_bound_list();
					State = 10500;
					Match(CLOSE_PAREN);
					}
				}

				}
				break;
			}
			State = 10506;
			Match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Opt_open_bound_list_itemContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ColidContext colid() {
			return GetRuleContext<ColidContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON_EQUALS() { return GetToken(PostgreSQLParser.COLON_EQUALS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public A_exprContext a_expr() {
			return GetRuleContext<A_exprContext>(0);
		}
		public Opt_open_bound_list_itemContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_opt_open_bound_list_item; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterOpt_open_bound_list_item(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitOpt_open_bound_list_item(this);
		}
	}

	[RuleVersion(0)]
	public Opt_open_bound_list_itemContext opt_open_bound_list_item() {
		Opt_open_bound_list_itemContext _localctx = new Opt_open_bound_list_itemContext(Context, State);
		EnterRule(_localctx, 1554, RULE_opt_open_bound_list_item);
		try {
			State = 10513;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,721,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 10508;
				colid();
				State = 10509;
				Match(COLON_EQUALS);
				State = 10510;
				a_expr();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 10512;
				a_expr();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Opt_open_bound_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Opt_open_bound_list_itemContext[] opt_open_bound_list_item() {
			return GetRuleContexts<Opt_open_bound_list_itemContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Opt_open_bound_list_itemContext opt_open_bound_list_item(int i) {
			return GetRuleContext<Opt_open_bound_list_itemContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(PostgreSQLParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(PostgreSQLParser.COMMA, i);
		}
		public Opt_open_bound_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_opt_open_bound_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterOpt_open_bound_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitOpt_open_bound_list(this);
		}
	}

	[RuleVersion(0)]
	public Opt_open_bound_listContext opt_open_bound_list() {
		Opt_open_bound_listContext _localctx = new Opt_open_bound_listContext(Context, State);
		EnterRule(_localctx, 1556, RULE_opt_open_bound_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 10515;
			opt_open_bound_list_item();
			State = 10520;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 10516;
				Match(COMMA);
				State = 10517;
				opt_open_bound_list_item();
				}
				}
				State = 10522;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Opt_open_usingContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode USING() { return GetToken(PostgreSQLParser.USING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Expr_listContext expr_list() {
			return GetRuleContext<Expr_listContext>(0);
		}
		public Opt_open_usingContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_opt_open_using; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterOpt_open_using(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitOpt_open_using(this);
		}
	}

	[RuleVersion(0)]
	public Opt_open_usingContext opt_open_using() {
		Opt_open_usingContext _localctx = new Opt_open_usingContext(Context, State);
		EnterRule(_localctx, 1558, RULE_opt_open_using);
		try {
			State = 10526;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case SEMI:
				EnterOuterAlt(_localctx, 1);
				{
				}
				break;
			case USING:
				EnterOuterAlt(_localctx, 2);
				{
				State = 10524;
				Match(USING);
				State = 10525;
				expr_list();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Opt_scroll_optionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Opt_scroll_option_noContext opt_scroll_option_no() {
			return GetRuleContext<Opt_scroll_option_noContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SCROLL() { return GetToken(PostgreSQLParser.SCROLL, 0); }
		public Opt_scroll_optionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_opt_scroll_option; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterOpt_scroll_option(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitOpt_scroll_option(this);
		}
	}

	[RuleVersion(0)]
	public Opt_scroll_optionContext opt_scroll_option() {
		Opt_scroll_optionContext _localctx = new Opt_scroll_optionContext(Context, State);
		EnterRule(_localctx, 1560, RULE_opt_scroll_option);
		try {
			State = 10532;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case FOR:
				EnterOuterAlt(_localctx, 1);
				{
				}
				break;
			case NO:
			case SCROLL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 10529;
				opt_scroll_option_no();
				State = 10530;
				Match(SCROLL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Opt_scroll_option_noContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NO() { return GetToken(PostgreSQLParser.NO, 0); }
		public Opt_scroll_option_noContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_opt_scroll_option_no; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterOpt_scroll_option_no(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitOpt_scroll_option_no(this);
		}
	}

	[RuleVersion(0)]
	public Opt_scroll_option_noContext opt_scroll_option_no() {
		Opt_scroll_option_noContext _localctx = new Opt_scroll_option_noContext(Context, State);
		EnterRule(_localctx, 1562, RULE_opt_scroll_option_no);
		try {
			State = 10536;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case SCROLL:
				EnterOuterAlt(_localctx, 1);
				{
				}
				break;
			case NO:
				EnterOuterAlt(_localctx, 2);
				{
				State = 10535;
				Match(NO);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Stmt_fetchContext : ParserRuleContext {
		public Opt_fetch_directionContext direction;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FETCH() { return GetToken(PostgreSQLParser.FETCH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Opt_cursor_fromContext opt_cursor_from() {
			return GetRuleContext<Opt_cursor_fromContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Cursor_variableContext cursor_variable() {
			return GetRuleContext<Cursor_variableContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTO() { return GetToken(PostgreSQLParser.INTO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Into_targetContext into_target() {
			return GetRuleContext<Into_targetContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(PostgreSQLParser.SEMI, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Opt_fetch_directionContext opt_fetch_direction() {
			return GetRuleContext<Opt_fetch_directionContext>(0);
		}
		public Stmt_fetchContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stmt_fetch; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterStmt_fetch(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitStmt_fetch(this);
		}
	}

	[RuleVersion(0)]
	public Stmt_fetchContext stmt_fetch() {
		Stmt_fetchContext _localctx = new Stmt_fetchContext(Context, State);
		EnterRule(_localctx, 1564, RULE_stmt_fetch);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 10538;
			Match(FETCH);
			State = 10539;
			_localctx.direction = opt_fetch_direction();
			State = 10540;
			opt_cursor_from();
			State = 10541;
			cursor_variable();
			State = 10542;
			Match(INTO);
			State = 10543;
			into_target();
			State = 10544;
			Match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Into_targetContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Expr_listContext expr_list() {
			return GetRuleContext<Expr_listContext>(0);
		}
		public Into_targetContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_into_target; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterInto_target(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitInto_target(this);
		}
	}

	[RuleVersion(0)]
	public Into_targetContext into_target() {
		Into_targetContext _localctx = new Into_targetContext(Context, State);
		EnterRule(_localctx, 1566, RULE_into_target);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 10546;
			expr_list();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Opt_cursor_fromContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FROM() { return GetToken(PostgreSQLParser.FROM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IN_P() { return GetToken(PostgreSQLParser.IN_P, 0); }
		public Opt_cursor_fromContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_opt_cursor_from; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterOpt_cursor_from(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitOpt_cursor_from(this);
		}
	}

	[RuleVersion(0)]
	public Opt_cursor_fromContext opt_cursor_from() {
		Opt_cursor_fromContext _localctx = new Opt_cursor_fromContext(Context, State);
		EnterRule(_localctx, 1568, RULE_opt_cursor_from);
		try {
			State = 10551;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case PARAM:
			case AND:
			case ARRAY:
			case COLLATE:
			case COLUMN:
			case CONSTRAINT:
			case DEFAULT:
			case DO:
			case FETCH:
			case TABLE:
			case IS:
			case LEFT:
			case OUTER_P:
			case OVER:
			case RIGHT:
			case ABORT_P:
			case ABSOLUTE_P:
			case ACCESS:
			case ACTION:
			case ADD_P:
			case ADMIN:
			case AFTER:
			case AGGREGATE:
			case ALSO:
			case ALTER:
			case ALWAYS:
			case ASSERTION:
			case ASSIGNMENT:
			case AT:
			case ATTRIBUTE:
			case BACKWARD:
			case BEFORE:
			case BEGIN_P:
			case BY:
			case CACHE:
			case CALLED:
			case CASCADE:
			case CASCADED:
			case CATALOG:
			case CHAIN:
			case CHARACTERISTICS:
			case CHECKPOINT:
			case CLASS:
			case CLOSE:
			case CLUSTER:
			case COMMENT:
			case COMMENTS:
			case COMMIT:
			case COMMITTED:
			case CONFIGURATION:
			case CONNECTION:
			case CONSTRAINTS:
			case CONTENT_P:
			case CONTINUE_P:
			case CONVERSION_P:
			case COPY:
			case COST:
			case CSV:
			case CURSOR:
			case CYCLE:
			case DATA_P:
			case DATABASE:
			case DAY_P:
			case DEALLOCATE:
			case DECLARE:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE_P:
			case DELIMITER:
			case DELIMITERS:
			case DICTIONARY:
			case DISABLE_P:
			case DISCARD:
			case DOCUMENT_P:
			case DOMAIN_P:
			case DOUBLE_P:
			case DROP:
			case EACH:
			case ENABLE_P:
			case ENCODING:
			case ENCRYPTED:
			case ENUM_P:
			case ESCAPE:
			case EVENT:
			case EXCLUDE:
			case EXCLUDING:
			case EXCLUSIVE:
			case EXECUTE:
			case EXPLAIN:
			case EXTENSION:
			case EXTERNAL:
			case FAMILY:
			case FIRST_P:
			case FOLLOWING:
			case FORCE:
			case FORWARD:
			case FUNCTION:
			case FUNCTIONS:
			case GLOBAL:
			case GRANTED:
			case HANDLER:
			case HEADER_P:
			case HOLD:
			case HOUR_P:
			case IDENTITY_P:
			case IF_P:
			case IMMEDIATE:
			case IMMUTABLE:
			case IMPLICIT_P:
			case INCLUDING:
			case INCREMENT:
			case INDEX:
			case INDEXES:
			case INHERIT:
			case INHERITS:
			case INLINE_P:
			case INSENSITIVE:
			case INSERT:
			case INSTEAD:
			case INVOKER:
			case ISOLATION:
			case KEY:
			case LABEL:
			case LANGUAGE:
			case LARGE_P:
			case LAST_P:
			case LEAKPROOF:
			case LEVEL:
			case LISTEN:
			case LOAD:
			case LOCAL:
			case LOCATION:
			case LOCK_P:
			case MAPPING:
			case MATCH:
			case MATERIALIZED:
			case MAXVALUE:
			case MINUTE_P:
			case MINVALUE:
			case MODE:
			case MONTH_P:
			case MOVE:
			case NAME_P:
			case NAMES:
			case NEXT:
			case NO:
			case NOTHING:
			case NOTIFY:
			case NOWAIT:
			case NULLS_P:
			case OBJECT_P:
			case OF:
			case OFF:
			case OIDS:
			case OPERATOR:
			case OPTION:
			case OPTIONS:
			case OWNED:
			case OWNER:
			case PARSER:
			case PARTIAL:
			case PARTITION:
			case PASSING:
			case PASSWORD:
			case PLANS:
			case PRECEDING:
			case PREPARE:
			case PREPARED:
			case PRESERVE:
			case PRIOR:
			case PRIVILEGES:
			case PROCEDURAL:
			case PROCEDURE:
			case PROGRAM:
			case QUOTE:
			case RANGE:
			case READ:
			case REASSIGN:
			case RECHECK:
			case RECURSIVE:
			case REF:
			case REFRESH:
			case REINDEX:
			case RELATIVE_P:
			case RELEASE:
			case RENAME:
			case REPEATABLE:
			case REPLACE:
			case REPLICA:
			case RESET:
			case RESTART:
			case RESTRICT:
			case RETURNS:
			case REVOKE:
			case ROLE:
			case ROLLBACK:
			case ROWS:
			case RULE:
			case SAVEPOINT:
			case SCHEMA:
			case SCROLL:
			case SEARCH:
			case SECOND_P:
			case SECURITY:
			case SEQUENCE:
			case SEQUENCES:
			case SERIALIZABLE:
			case SERVER:
			case SESSION:
			case SET:
			case SHARE:
			case SHOW:
			case SIMPLE:
			case SNAPSHOT:
			case STABLE:
			case STANDALONE_P:
			case START:
			case STATEMENT:
			case STATISTICS:
			case STDIN:
			case STDOUT:
			case STORAGE:
			case STRICT_P:
			case STRIP_P:
			case SYSID:
			case SYSTEM_P:
			case TABLES:
			case TABLESPACE:
			case TEMP:
			case TEMPLATE:
			case TEMPORARY:
			case TEXT_P:
			case TRANSACTION:
			case TRIGGER:
			case TRUNCATE:
			case TRUSTED:
			case TYPE_P:
			case TYPES_P:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNENCRYPTED:
			case UNKNOWN:
			case UNLISTEN:
			case UNLOGGED:
			case UNTIL:
			case UPDATE:
			case VACUUM:
			case VALID:
			case VALIDATE:
			case VALIDATOR:
			case VARYING:
			case VERSION_P:
			case VIEW:
			case VOLATILE:
			case WHITESPACE_P:
			case WITHOUT:
			case WORK:
			case WRAPPER:
			case WRITE:
			case XML_P:
			case YEAR_P:
			case YES_P:
			case ZONE:
			case BETWEEN:
			case BIGINT:
			case BIT:
			case BOOLEAN_P:
			case CHAR_P:
			case CHARACTER:
			case COALESCE:
			case DEC:
			case DECIMAL_P:
			case EXISTS:
			case EXTRACT:
			case FLOAT_P:
			case GREATEST:
			case INOUT:
			case INT_P:
			case INTEGER:
			case INTERVAL:
			case LEAST:
			case NATIONAL:
			case NCHAR:
			case NONE:
			case NULLIF:
			case NUMERIC:
			case OVERLAY:
			case POSITION:
			case PRECISION:
			case REAL:
			case ROW:
			case SETOF:
			case SMALLINT:
			case SUBSTRING:
			case TIME:
			case TIMESTAMP:
			case TREAT:
			case TRIM:
			case VALUES:
			case VARCHAR:
			case XMLATTRIBUTES:
			case XMLCOMMENT:
			case XMLAGG:
			case XML_IS_WELL_FORMED:
			case XML_IS_WELL_FORMED_DOCUMENT:
			case XML_IS_WELL_FORMED_CONTENT:
			case XPATH:
			case XPATH_EXISTS:
			case XMLCONCAT:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLPARSE:
			case XMLPI:
			case XMLROOT:
			case XMLSERIALIZE:
			case CALL:
			case CURRENT_P:
			case ATTACH:
			case DETACH:
			case EXPRESSION:
			case GENERATED:
			case LOGGED:
			case STORED:
			case INCLUDE:
			case ROUTINE:
			case TRANSFORM:
			case IMPORT_P:
			case POLICY:
			case METHOD:
			case REFERENCING:
			case NEW:
			case OLD:
			case VALUE_P:
			case SUBSCRIPTION:
			case PUBLICATION:
			case OUT_P:
			case ROUTINES:
			case SCHEMAS:
			case PROCEDURES:
			case INPUT_P:
			case SUPPORT:
			case PARALLEL:
			case SQL_P:
			case DEPENDS:
			case OVERRIDING:
			case CONFLICT:
			case SKIP_P:
			case LOCKED:
			case TIES:
			case ROLLUP:
			case CUBE:
			case GROUPING:
			case SETS:
			case ORDINALITY:
			case XMLTABLE:
			case COLUMNS:
			case XMLNAMESPACES:
			case ROWTYPE:
			case NORMALIZED:
			case WITHIN:
			case FILTER:
			case GROUPS:
			case OTHERS:
			case NFC:
			case NFD:
			case NFKC:
			case NFKD:
			case UESCAPE:
			case VIEWS:
			case NORMALIZE:
			case DUMP:
			case PRINT_STRICT_PARAMS:
			case VARIABLE_CONFLICT:
			case ERROR:
			case USE_VARIABLE:
			case USE_COLUMN:
			case ALIAS:
			case CONSTANT:
			case PERFORM:
			case GET:
			case DIAGNOSTICS:
			case STACKED:
			case ELSIF:
			case REVERSE:
			case SLICE:
			case EXIT:
			case RETURN:
			case QUERY:
			case RAISE:
			case SQLSTATE:
			case DEBUG:
			case LOG:
			case INFO:
			case NOTICE:
			case WARNING:
			case EXCEPTION:
			case ASSERT:
			case OPEN:
			case ABS:
			case CBRT:
			case CEIL:
			case CEILING:
			case DEGREES:
			case DIV:
			case EXP:
			case FACTORIAL:
			case FLOOR:
			case GCD:
			case LCM:
			case LN:
			case LOG10:
			case MIN_SCALE:
			case MOD:
			case PI:
			case POWER:
			case RADIANS:
			case ROUND:
			case SCALE:
			case SIGN:
			case SQRT:
			case TRIM_SCALE:
			case TRUNC:
			case WIDTH_BUCKET:
			case RANDOM:
			case SETSEED:
			case ACOS:
			case ACOSD:
			case ASIN:
			case ASIND:
			case ATAN:
			case ATAND:
			case ATAN2:
			case ATAN2D:
			case COS:
			case COSD:
			case COT:
			case COTD:
			case SIN:
			case SIND:
			case TAN:
			case TAND:
			case SINH:
			case COSH:
			case TANH:
			case ASINH:
			case ACOSH:
			case ATANH:
			case BIT_LENGTH:
			case CHAR_LENGTH:
			case CHARACTER_LENGTH:
			case LOWER:
			case OCTET_LENGTH:
			case UPPER:
			case ASCII:
			case BTRIM:
			case CHR:
			case CONCAT:
			case CONCAT_WS:
			case FORMAT:
			case INITCAP:
			case LENGTH:
			case LPAD:
			case LTRIM:
			case MD5:
			case PARSE_IDENT:
			case PG_CLIENT_ENCODING:
			case QUOTE_IDENT:
			case QUOTE_LITERAL:
			case QUOTE_NULLABLE:
			case REGEXP_COUNT:
			case REGEXP_INSTR:
			case REGEXP_LIKE:
			case REGEXP_MATCH:
			case REGEXP_MATCHES:
			case REGEXP_REPLACE:
			case REGEXP_SPLIT_TO_ARRAY:
			case REGEXP_SPLIT_TO_TABLE:
			case REGEXP_SUBSTR:
			case REPEAT:
			case RPAD:
			case RTRIM:
			case SPLIT_PART:
			case STARTS_WITH:
			case STRING_TO_ARRAY:
			case STRING_TO_TABLE:
			case STRPOS:
			case SUBSTR:
			case TO_ASCII:
			case TO_HEX:
			case TRANSLATE:
			case UNISTR:
			case AGE:
			case CLOCK_TIMESTAMP:
			case DATE_BIN:
			case DATE_PART:
			case DATE_TRUNC:
			case ISFINITE:
			case JUSTIFY_DAYS:
			case JUSTIFY_HOURS:
			case JUSTIFY_INTERVAL:
			case MAKE_DATE:
			case MAKE_INTERVAL:
			case MAKE_TIME:
			case MAKE_TIMESTAMP:
			case MAKE_TIMESTAMPTZ:
			case NOW:
			case STATEMENT_TIMESTAMP:
			case TIMEOFDAY:
			case TRANSACTION_TIMESTAMP:
			case TO_TIMESTAMP:
			case TO_CHAR:
			case TO_DATE:
			case TO_NUMBER:
			case Identifier:
			case QuotedIdentifier:
			case UnicodeQuotedIdentifier:
			case PLSQLVARIABLENAME:
			case PLSQLIDENTIFIER:
				EnterOuterAlt(_localctx, 1);
				{
				}
				break;
			case FROM:
				EnterOuterAlt(_localctx, 2);
				{
				State = 10549;
				Match(FROM);
				}
				break;
			case IN_P:
				EnterOuterAlt(_localctx, 3);
				{
				State = 10550;
				Match(IN_P);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Opt_fetch_directionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NEXT() { return GetToken(PostgreSQLParser.NEXT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PRIOR() { return GetToken(PostgreSQLParser.PRIOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FIRST_P() { return GetToken(PostgreSQLParser.FIRST_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LAST_P() { return GetToken(PostgreSQLParser.LAST_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ABSOLUTE_P() { return GetToken(PostgreSQLParser.ABSOLUTE_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public A_exprContext a_expr() {
			return GetRuleContext<A_exprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RELATIVE_P() { return GetToken(PostgreSQLParser.RELATIVE_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALL() { return GetToken(PostgreSQLParser.ALL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FORWARD() { return GetToken(PostgreSQLParser.FORWARD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BACKWARD() { return GetToken(PostgreSQLParser.BACKWARD, 0); }
		public Opt_fetch_directionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_opt_fetch_direction; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterOpt_fetch_direction(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitOpt_fetch_direction(this);
		}
	}

	[RuleVersion(0)]
	public Opt_fetch_directionContext opt_fetch_direction() {
		Opt_fetch_directionContext _localctx = new Opt_fetch_directionContext(Context, State);
		EnterRule(_localctx, 1570, RULE_opt_fetch_direction);
		int _la;
		try {
			State = 10570;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,728,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 10555;
				Match(NEXT);
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 10556;
				Match(PRIOR);
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 10557;
				Match(FIRST_P);
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 10558;
				Match(LAST_P);
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 10559;
				Match(ABSOLUTE_P);
				State = 10560;
				a_expr();
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 10561;
				Match(RELATIVE_P);
				State = 10562;
				a_expr();
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 10563;
				a_expr();
				}
				break;
			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 10564;
				Match(ALL);
				}
				break;
			case 11:
				EnterOuterAlt(_localctx, 11);
				{
				State = 10565;
				_la = TokenStream.LA(1);
				if ( !(_la==BACKWARD || _la==FORWARD) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 10568;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,727,Context) ) {
				case 1:
					{
					State = 10566;
					a_expr();
					}
					break;
				case 2:
					{
					State = 10567;
					Match(ALL);
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Stmt_moveContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MOVE() { return GetToken(PostgreSQLParser.MOVE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Opt_fetch_directionContext opt_fetch_direction() {
			return GetRuleContext<Opt_fetch_directionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Cursor_variableContext cursor_variable() {
			return GetRuleContext<Cursor_variableContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(PostgreSQLParser.SEMI, 0); }
		public Stmt_moveContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stmt_move; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterStmt_move(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitStmt_move(this);
		}
	}

	[RuleVersion(0)]
	public Stmt_moveContext stmt_move() {
		Stmt_moveContext _localctx = new Stmt_moveContext(Context, State);
		EnterRule(_localctx, 1572, RULE_stmt_move);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 10572;
			Match(MOVE);
			State = 10573;
			opt_fetch_direction();
			State = 10574;
			cursor_variable();
			State = 10575;
			Match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Stmt_closeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE() { return GetToken(PostgreSQLParser.CLOSE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Cursor_variableContext cursor_variable() {
			return GetRuleContext<Cursor_variableContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(PostgreSQLParser.SEMI, 0); }
		public Stmt_closeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stmt_close; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterStmt_close(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitStmt_close(this);
		}
	}

	[RuleVersion(0)]
	public Stmt_closeContext stmt_close() {
		Stmt_closeContext _localctx = new Stmt_closeContext(Context, State);
		EnterRule(_localctx, 1574, RULE_stmt_close);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 10577;
			Match(CLOSE);
			State = 10578;
			cursor_variable();
			State = 10579;
			Match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Stmt_nullContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NULL_P() { return GetToken(PostgreSQLParser.NULL_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(PostgreSQLParser.SEMI, 0); }
		public Stmt_nullContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stmt_null; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterStmt_null(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitStmt_null(this);
		}
	}

	[RuleVersion(0)]
	public Stmt_nullContext stmt_null() {
		Stmt_nullContext _localctx = new Stmt_nullContext(Context, State);
		EnterRule(_localctx, 1576, RULE_stmt_null);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 10581;
			Match(NULL_P);
			State = 10582;
			Match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Stmt_commitContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMIT() { return GetToken(PostgreSQLParser.COMMIT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Plsql_opt_transaction_chainContext plsql_opt_transaction_chain() {
			return GetRuleContext<Plsql_opt_transaction_chainContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(PostgreSQLParser.SEMI, 0); }
		public Stmt_commitContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stmt_commit; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterStmt_commit(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitStmt_commit(this);
		}
	}

	[RuleVersion(0)]
	public Stmt_commitContext stmt_commit() {
		Stmt_commitContext _localctx = new Stmt_commitContext(Context, State);
		EnterRule(_localctx, 1578, RULE_stmt_commit);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 10584;
			Match(COMMIT);
			State = 10585;
			plsql_opt_transaction_chain();
			State = 10586;
			Match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Stmt_rollbackContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROLLBACK() { return GetToken(PostgreSQLParser.ROLLBACK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Plsql_opt_transaction_chainContext plsql_opt_transaction_chain() {
			return GetRuleContext<Plsql_opt_transaction_chainContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(PostgreSQLParser.SEMI, 0); }
		public Stmt_rollbackContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stmt_rollback; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterStmt_rollback(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitStmt_rollback(this);
		}
	}

	[RuleVersion(0)]
	public Stmt_rollbackContext stmt_rollback() {
		Stmt_rollbackContext _localctx = new Stmt_rollbackContext(Context, State);
		EnterRule(_localctx, 1580, RULE_stmt_rollback);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 10588;
			Match(ROLLBACK);
			State = 10589;
			plsql_opt_transaction_chain();
			State = 10590;
			Match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Plsql_opt_transaction_chainContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AND() { return GetToken(PostgreSQLParser.AND, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHAIN() { return GetToken(PostgreSQLParser.CHAIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NO() { return GetToken(PostgreSQLParser.NO, 0); }
		public Plsql_opt_transaction_chainContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_plsql_opt_transaction_chain; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterPlsql_opt_transaction_chain(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitPlsql_opt_transaction_chain(this);
		}
	}

	[RuleVersion(0)]
	public Plsql_opt_transaction_chainContext plsql_opt_transaction_chain() {
		Plsql_opt_transaction_chainContext _localctx = new Plsql_opt_transaction_chainContext(Context, State);
		EnterRule(_localctx, 1582, RULE_plsql_opt_transaction_chain);
		int _la;
		try {
			State = 10598;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case AND:
				EnterOuterAlt(_localctx, 1);
				{
				State = 10592;
				Match(AND);
				State = 10594;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==NO) {
					{
					State = 10593;
					Match(NO);
					}
				}

				State = 10596;
				Match(CHAIN);
				}
				break;
			case SEMI:
				EnterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Stmt_setContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SET() { return GetToken(PostgreSQLParser.SET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Any_nameContext any_name() {
			return GetRuleContext<Any_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TO() { return GetToken(PostgreSQLParser.TO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFAULT() { return GetToken(PostgreSQLParser.DEFAULT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(PostgreSQLParser.SEMI, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RESET() { return GetToken(PostgreSQLParser.RESET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALL() { return GetToken(PostgreSQLParser.ALL, 0); }
		public Stmt_setContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stmt_set; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterStmt_set(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitStmt_set(this);
		}
	}

	[RuleVersion(0)]
	public Stmt_setContext stmt_set() {
		Stmt_setContext _localctx = new Stmt_setContext(Context, State);
		EnterRule(_localctx, 1584, RULE_stmt_set);
		try {
			State = 10612;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case SET:
				EnterOuterAlt(_localctx, 1);
				{
				State = 10600;
				Match(SET);
				State = 10601;
				any_name();
				State = 10602;
				Match(TO);
				State = 10603;
				Match(DEFAULT);
				State = 10604;
				Match(SEMI);
				}
				break;
			case RESET:
				EnterOuterAlt(_localctx, 2);
				{
				State = 10606;
				Match(RESET);
				State = 10609;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case AND:
				case ARRAY:
				case COLLATE:
				case COLUMN:
				case CONSTRAINT:
				case DEFAULT:
				case DO:
				case FETCH:
				case TABLE:
				case IS:
				case LEFT:
				case OUTER_P:
				case OVER:
				case RIGHT:
				case ABORT_P:
				case ABSOLUTE_P:
				case ACCESS:
				case ACTION:
				case ADD_P:
				case ADMIN:
				case AFTER:
				case AGGREGATE:
				case ALSO:
				case ALTER:
				case ALWAYS:
				case ASSERTION:
				case ASSIGNMENT:
				case AT:
				case ATTRIBUTE:
				case BACKWARD:
				case BEFORE:
				case BEGIN_P:
				case BY:
				case CACHE:
				case CALLED:
				case CASCADE:
				case CASCADED:
				case CATALOG:
				case CHAIN:
				case CHARACTERISTICS:
				case CHECKPOINT:
				case CLASS:
				case CLOSE:
				case CLUSTER:
				case COMMENT:
				case COMMENTS:
				case COMMIT:
				case COMMITTED:
				case CONFIGURATION:
				case CONNECTION:
				case CONSTRAINTS:
				case CONTENT_P:
				case CONTINUE_P:
				case CONVERSION_P:
				case COPY:
				case COST:
				case CSV:
				case CURSOR:
				case CYCLE:
				case DATA_P:
				case DATABASE:
				case DAY_P:
				case DEALLOCATE:
				case DECLARE:
				case DEFAULTS:
				case DEFERRED:
				case DEFINER:
				case DELETE_P:
				case DELIMITER:
				case DELIMITERS:
				case DICTIONARY:
				case DISABLE_P:
				case DISCARD:
				case DOCUMENT_P:
				case DOMAIN_P:
				case DOUBLE_P:
				case DROP:
				case EACH:
				case ENABLE_P:
				case ENCODING:
				case ENCRYPTED:
				case ENUM_P:
				case ESCAPE:
				case EVENT:
				case EXCLUDE:
				case EXCLUDING:
				case EXCLUSIVE:
				case EXECUTE:
				case EXPLAIN:
				case EXTENSION:
				case EXTERNAL:
				case FAMILY:
				case FIRST_P:
				case FOLLOWING:
				case FORCE:
				case FORWARD:
				case FUNCTION:
				case FUNCTIONS:
				case GLOBAL:
				case GRANTED:
				case HANDLER:
				case HEADER_P:
				case HOLD:
				case HOUR_P:
				case IDENTITY_P:
				case IF_P:
				case IMMEDIATE:
				case IMMUTABLE:
				case IMPLICIT_P:
				case INCLUDING:
				case INCREMENT:
				case INDEX:
				case INDEXES:
				case INHERIT:
				case INHERITS:
				case INLINE_P:
				case INSENSITIVE:
				case INSERT:
				case INSTEAD:
				case INVOKER:
				case ISOLATION:
				case KEY:
				case LABEL:
				case LANGUAGE:
				case LARGE_P:
				case LAST_P:
				case LEAKPROOF:
				case LEVEL:
				case LISTEN:
				case LOAD:
				case LOCAL:
				case LOCATION:
				case LOCK_P:
				case MAPPING:
				case MATCH:
				case MATERIALIZED:
				case MAXVALUE:
				case MINUTE_P:
				case MINVALUE:
				case MODE:
				case MONTH_P:
				case MOVE:
				case NAME_P:
				case NAMES:
				case NEXT:
				case NO:
				case NOTHING:
				case NOTIFY:
				case NOWAIT:
				case NULLS_P:
				case OBJECT_P:
				case OF:
				case OFF:
				case OIDS:
				case OPERATOR:
				case OPTION:
				case OPTIONS:
				case OWNED:
				case OWNER:
				case PARSER:
				case PARTIAL:
				case PARTITION:
				case PASSING:
				case PASSWORD:
				case PLANS:
				case PRECEDING:
				case PREPARE:
				case PREPARED:
				case PRESERVE:
				case PRIOR:
				case PRIVILEGES:
				case PROCEDURAL:
				case PROCEDURE:
				case PROGRAM:
				case QUOTE:
				case RANGE:
				case READ:
				case REASSIGN:
				case RECHECK:
				case RECURSIVE:
				case REF:
				case REFRESH:
				case REINDEX:
				case RELATIVE_P:
				case RELEASE:
				case RENAME:
				case REPEATABLE:
				case REPLACE:
				case REPLICA:
				case RESET:
				case RESTART:
				case RESTRICT:
				case RETURNS:
				case REVOKE:
				case ROLE:
				case ROLLBACK:
				case ROWS:
				case RULE:
				case SAVEPOINT:
				case SCHEMA:
				case SCROLL:
				case SEARCH:
				case SECOND_P:
				case SECURITY:
				case SEQUENCE:
				case SEQUENCES:
				case SERIALIZABLE:
				case SERVER:
				case SESSION:
				case SET:
				case SHARE:
				case SHOW:
				case SIMPLE:
				case SNAPSHOT:
				case STABLE:
				case STANDALONE_P:
				case START:
				case STATEMENT:
				case STATISTICS:
				case STDIN:
				case STDOUT:
				case STORAGE:
				case STRICT_P:
				case STRIP_P:
				case SYSID:
				case SYSTEM_P:
				case TABLES:
				case TABLESPACE:
				case TEMP:
				case TEMPLATE:
				case TEMPORARY:
				case TEXT_P:
				case TRANSACTION:
				case TRIGGER:
				case TRUNCATE:
				case TRUSTED:
				case TYPE_P:
				case TYPES_P:
				case UNBOUNDED:
				case UNCOMMITTED:
				case UNENCRYPTED:
				case UNKNOWN:
				case UNLISTEN:
				case UNLOGGED:
				case UNTIL:
				case UPDATE:
				case VACUUM:
				case VALID:
				case VALIDATE:
				case VALIDATOR:
				case VARYING:
				case VERSION_P:
				case VIEW:
				case VOLATILE:
				case WHITESPACE_P:
				case WITHOUT:
				case WORK:
				case WRAPPER:
				case WRITE:
				case XML_P:
				case YEAR_P:
				case YES_P:
				case ZONE:
				case BETWEEN:
				case BIGINT:
				case BIT:
				case BOOLEAN_P:
				case CHAR_P:
				case CHARACTER:
				case COALESCE:
				case DEC:
				case DECIMAL_P:
				case EXISTS:
				case EXTRACT:
				case FLOAT_P:
				case GREATEST:
				case INOUT:
				case INT_P:
				case INTEGER:
				case INTERVAL:
				case LEAST:
				case NATIONAL:
				case NCHAR:
				case NONE:
				case NULLIF:
				case NUMERIC:
				case OVERLAY:
				case POSITION:
				case PRECISION:
				case REAL:
				case ROW:
				case SETOF:
				case SMALLINT:
				case SUBSTRING:
				case TIME:
				case TIMESTAMP:
				case TREAT:
				case TRIM:
				case VALUES:
				case VARCHAR:
				case XMLATTRIBUTES:
				case XMLCOMMENT:
				case XMLAGG:
				case XML_IS_WELL_FORMED:
				case XML_IS_WELL_FORMED_DOCUMENT:
				case XML_IS_WELL_FORMED_CONTENT:
				case XPATH:
				case XPATH_EXISTS:
				case XMLCONCAT:
				case XMLELEMENT:
				case XMLEXISTS:
				case XMLFOREST:
				case XMLPARSE:
				case XMLPI:
				case XMLROOT:
				case XMLSERIALIZE:
				case CALL:
				case CURRENT_P:
				case ATTACH:
				case DETACH:
				case EXPRESSION:
				case GENERATED:
				case LOGGED:
				case STORED:
				case INCLUDE:
				case ROUTINE:
				case TRANSFORM:
				case IMPORT_P:
				case POLICY:
				case METHOD:
				case REFERENCING:
				case NEW:
				case OLD:
				case VALUE_P:
				case SUBSCRIPTION:
				case PUBLICATION:
				case OUT_P:
				case ROUTINES:
				case SCHEMAS:
				case PROCEDURES:
				case INPUT_P:
				case SUPPORT:
				case PARALLEL:
				case SQL_P:
				case DEPENDS:
				case OVERRIDING:
				case CONFLICT:
				case SKIP_P:
				case LOCKED:
				case TIES:
				case ROLLUP:
				case CUBE:
				case GROUPING:
				case SETS:
				case ORDINALITY:
				case XMLTABLE:
				case COLUMNS:
				case XMLNAMESPACES:
				case ROWTYPE:
				case NORMALIZED:
				case WITHIN:
				case FILTER:
				case GROUPS:
				case OTHERS:
				case NFC:
				case NFD:
				case NFKC:
				case NFKD:
				case UESCAPE:
				case VIEWS:
				case NORMALIZE:
				case DUMP:
				case PRINT_STRICT_PARAMS:
				case VARIABLE_CONFLICT:
				case ERROR:
				case USE_VARIABLE:
				case USE_COLUMN:
				case ALIAS:
				case CONSTANT:
				case PERFORM:
				case GET:
				case DIAGNOSTICS:
				case STACKED:
				case ELSIF:
				case REVERSE:
				case SLICE:
				case EXIT:
				case RETURN:
				case QUERY:
				case RAISE:
				case SQLSTATE:
				case DEBUG:
				case LOG:
				case INFO:
				case NOTICE:
				case WARNING:
				case EXCEPTION:
				case ASSERT:
				case OPEN:
				case ABS:
				case CBRT:
				case CEIL:
				case CEILING:
				case DEGREES:
				case DIV:
				case EXP:
				case FACTORIAL:
				case FLOOR:
				case GCD:
				case LCM:
				case LN:
				case LOG10:
				case MIN_SCALE:
				case MOD:
				case PI:
				case POWER:
				case RADIANS:
				case ROUND:
				case SCALE:
				case SIGN:
				case SQRT:
				case TRIM_SCALE:
				case TRUNC:
				case WIDTH_BUCKET:
				case RANDOM:
				case SETSEED:
				case ACOS:
				case ACOSD:
				case ASIN:
				case ASIND:
				case ATAN:
				case ATAND:
				case ATAN2:
				case ATAN2D:
				case COS:
				case COSD:
				case COT:
				case COTD:
				case SIN:
				case SIND:
				case TAN:
				case TAND:
				case SINH:
				case COSH:
				case TANH:
				case ASINH:
				case ACOSH:
				case ATANH:
				case BIT_LENGTH:
				case CHAR_LENGTH:
				case CHARACTER_LENGTH:
				case LOWER:
				case OCTET_LENGTH:
				case UPPER:
				case ASCII:
				case BTRIM:
				case CHR:
				case CONCAT:
				case CONCAT_WS:
				case FORMAT:
				case INITCAP:
				case LENGTH:
				case LPAD:
				case LTRIM:
				case MD5:
				case PARSE_IDENT:
				case PG_CLIENT_ENCODING:
				case QUOTE_IDENT:
				case QUOTE_LITERAL:
				case QUOTE_NULLABLE:
				case REGEXP_COUNT:
				case REGEXP_INSTR:
				case REGEXP_LIKE:
				case REGEXP_MATCH:
				case REGEXP_MATCHES:
				case REGEXP_REPLACE:
				case REGEXP_SPLIT_TO_ARRAY:
				case REGEXP_SPLIT_TO_TABLE:
				case REGEXP_SUBSTR:
				case REPEAT:
				case RPAD:
				case RTRIM:
				case SPLIT_PART:
				case STARTS_WITH:
				case STRING_TO_ARRAY:
				case STRING_TO_TABLE:
				case STRPOS:
				case SUBSTR:
				case TO_ASCII:
				case TO_HEX:
				case TRANSLATE:
				case UNISTR:
				case AGE:
				case CLOCK_TIMESTAMP:
				case DATE_BIN:
				case DATE_PART:
				case DATE_TRUNC:
				case ISFINITE:
				case JUSTIFY_DAYS:
				case JUSTIFY_HOURS:
				case JUSTIFY_INTERVAL:
				case MAKE_DATE:
				case MAKE_INTERVAL:
				case MAKE_TIME:
				case MAKE_TIMESTAMP:
				case MAKE_TIMESTAMPTZ:
				case NOW:
				case STATEMENT_TIMESTAMP:
				case TIMEOFDAY:
				case TRANSACTION_TIMESTAMP:
				case TO_TIMESTAMP:
				case TO_CHAR:
				case TO_DATE:
				case TO_NUMBER:
				case Identifier:
				case QuotedIdentifier:
				case UnicodeQuotedIdentifier:
				case PLSQLVARIABLENAME:
				case PLSQLIDENTIFIER:
					{
					State = 10607;
					any_name();
					}
					break;
				case ALL:
					{
					State = 10608;
					Match(ALL);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 10611;
				Match(SEMI);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Cursor_variableContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ColidContext colid() {
			return GetRuleContext<ColidContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARAM() { return GetToken(PostgreSQLParser.PARAM, 0); }
		public Cursor_variableContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_cursor_variable; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterCursor_variable(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitCursor_variable(this);
		}
	}

	[RuleVersion(0)]
	public Cursor_variableContext cursor_variable() {
		Cursor_variableContext _localctx = new Cursor_variableContext(Context, State);
		EnterRule(_localctx, 1586, RULE_cursor_variable);
		try {
			State = 10616;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case AND:
			case ARRAY:
			case COLLATE:
			case COLUMN:
			case CONSTRAINT:
			case DEFAULT:
			case DO:
			case FETCH:
			case TABLE:
			case IS:
			case LEFT:
			case OUTER_P:
			case OVER:
			case RIGHT:
			case ABORT_P:
			case ABSOLUTE_P:
			case ACCESS:
			case ACTION:
			case ADD_P:
			case ADMIN:
			case AFTER:
			case AGGREGATE:
			case ALSO:
			case ALTER:
			case ALWAYS:
			case ASSERTION:
			case ASSIGNMENT:
			case AT:
			case ATTRIBUTE:
			case BACKWARD:
			case BEFORE:
			case BEGIN_P:
			case BY:
			case CACHE:
			case CALLED:
			case CASCADE:
			case CASCADED:
			case CATALOG:
			case CHAIN:
			case CHARACTERISTICS:
			case CHECKPOINT:
			case CLASS:
			case CLOSE:
			case CLUSTER:
			case COMMENT:
			case COMMENTS:
			case COMMIT:
			case COMMITTED:
			case CONFIGURATION:
			case CONNECTION:
			case CONSTRAINTS:
			case CONTENT_P:
			case CONTINUE_P:
			case CONVERSION_P:
			case COPY:
			case COST:
			case CSV:
			case CURSOR:
			case CYCLE:
			case DATA_P:
			case DATABASE:
			case DAY_P:
			case DEALLOCATE:
			case DECLARE:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE_P:
			case DELIMITER:
			case DELIMITERS:
			case DICTIONARY:
			case DISABLE_P:
			case DISCARD:
			case DOCUMENT_P:
			case DOMAIN_P:
			case DOUBLE_P:
			case DROP:
			case EACH:
			case ENABLE_P:
			case ENCODING:
			case ENCRYPTED:
			case ENUM_P:
			case ESCAPE:
			case EVENT:
			case EXCLUDE:
			case EXCLUDING:
			case EXCLUSIVE:
			case EXECUTE:
			case EXPLAIN:
			case EXTENSION:
			case EXTERNAL:
			case FAMILY:
			case FIRST_P:
			case FOLLOWING:
			case FORCE:
			case FORWARD:
			case FUNCTION:
			case FUNCTIONS:
			case GLOBAL:
			case GRANTED:
			case HANDLER:
			case HEADER_P:
			case HOLD:
			case HOUR_P:
			case IDENTITY_P:
			case IF_P:
			case IMMEDIATE:
			case IMMUTABLE:
			case IMPLICIT_P:
			case INCLUDING:
			case INCREMENT:
			case INDEX:
			case INDEXES:
			case INHERIT:
			case INHERITS:
			case INLINE_P:
			case INSENSITIVE:
			case INSERT:
			case INSTEAD:
			case INVOKER:
			case ISOLATION:
			case KEY:
			case LABEL:
			case LANGUAGE:
			case LARGE_P:
			case LAST_P:
			case LEAKPROOF:
			case LEVEL:
			case LISTEN:
			case LOAD:
			case LOCAL:
			case LOCATION:
			case LOCK_P:
			case MAPPING:
			case MATCH:
			case MATERIALIZED:
			case MAXVALUE:
			case MINUTE_P:
			case MINVALUE:
			case MODE:
			case MONTH_P:
			case MOVE:
			case NAME_P:
			case NAMES:
			case NEXT:
			case NO:
			case NOTHING:
			case NOTIFY:
			case NOWAIT:
			case NULLS_P:
			case OBJECT_P:
			case OF:
			case OFF:
			case OIDS:
			case OPERATOR:
			case OPTION:
			case OPTIONS:
			case OWNED:
			case OWNER:
			case PARSER:
			case PARTIAL:
			case PARTITION:
			case PASSING:
			case PASSWORD:
			case PLANS:
			case PRECEDING:
			case PREPARE:
			case PREPARED:
			case PRESERVE:
			case PRIOR:
			case PRIVILEGES:
			case PROCEDURAL:
			case PROCEDURE:
			case PROGRAM:
			case QUOTE:
			case RANGE:
			case READ:
			case REASSIGN:
			case RECHECK:
			case RECURSIVE:
			case REF:
			case REFRESH:
			case REINDEX:
			case RELATIVE_P:
			case RELEASE:
			case RENAME:
			case REPEATABLE:
			case REPLACE:
			case REPLICA:
			case RESET:
			case RESTART:
			case RESTRICT:
			case RETURNS:
			case REVOKE:
			case ROLE:
			case ROLLBACK:
			case ROWS:
			case RULE:
			case SAVEPOINT:
			case SCHEMA:
			case SCROLL:
			case SEARCH:
			case SECOND_P:
			case SECURITY:
			case SEQUENCE:
			case SEQUENCES:
			case SERIALIZABLE:
			case SERVER:
			case SESSION:
			case SET:
			case SHARE:
			case SHOW:
			case SIMPLE:
			case SNAPSHOT:
			case STABLE:
			case STANDALONE_P:
			case START:
			case STATEMENT:
			case STATISTICS:
			case STDIN:
			case STDOUT:
			case STORAGE:
			case STRICT_P:
			case STRIP_P:
			case SYSID:
			case SYSTEM_P:
			case TABLES:
			case TABLESPACE:
			case TEMP:
			case TEMPLATE:
			case TEMPORARY:
			case TEXT_P:
			case TRANSACTION:
			case TRIGGER:
			case TRUNCATE:
			case TRUSTED:
			case TYPE_P:
			case TYPES_P:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNENCRYPTED:
			case UNKNOWN:
			case UNLISTEN:
			case UNLOGGED:
			case UNTIL:
			case UPDATE:
			case VACUUM:
			case VALID:
			case VALIDATE:
			case VALIDATOR:
			case VARYING:
			case VERSION_P:
			case VIEW:
			case VOLATILE:
			case WHITESPACE_P:
			case WITHOUT:
			case WORK:
			case WRAPPER:
			case WRITE:
			case XML_P:
			case YEAR_P:
			case YES_P:
			case ZONE:
			case BETWEEN:
			case BIGINT:
			case BIT:
			case BOOLEAN_P:
			case CHAR_P:
			case CHARACTER:
			case COALESCE:
			case DEC:
			case DECIMAL_P:
			case EXISTS:
			case EXTRACT:
			case FLOAT_P:
			case GREATEST:
			case INOUT:
			case INT_P:
			case INTEGER:
			case INTERVAL:
			case LEAST:
			case NATIONAL:
			case NCHAR:
			case NONE:
			case NULLIF:
			case NUMERIC:
			case OVERLAY:
			case POSITION:
			case PRECISION:
			case REAL:
			case ROW:
			case SETOF:
			case SMALLINT:
			case SUBSTRING:
			case TIME:
			case TIMESTAMP:
			case TREAT:
			case TRIM:
			case VALUES:
			case VARCHAR:
			case XMLATTRIBUTES:
			case XMLCOMMENT:
			case XMLAGG:
			case XML_IS_WELL_FORMED:
			case XML_IS_WELL_FORMED_DOCUMENT:
			case XML_IS_WELL_FORMED_CONTENT:
			case XPATH:
			case XPATH_EXISTS:
			case XMLCONCAT:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLPARSE:
			case XMLPI:
			case XMLROOT:
			case XMLSERIALIZE:
			case CALL:
			case CURRENT_P:
			case ATTACH:
			case DETACH:
			case EXPRESSION:
			case GENERATED:
			case LOGGED:
			case STORED:
			case INCLUDE:
			case ROUTINE:
			case TRANSFORM:
			case IMPORT_P:
			case POLICY:
			case METHOD:
			case REFERENCING:
			case NEW:
			case OLD:
			case VALUE_P:
			case SUBSCRIPTION:
			case PUBLICATION:
			case OUT_P:
			case ROUTINES:
			case SCHEMAS:
			case PROCEDURES:
			case INPUT_P:
			case SUPPORT:
			case PARALLEL:
			case SQL_P:
			case DEPENDS:
			case OVERRIDING:
			case CONFLICT:
			case SKIP_P:
			case LOCKED:
			case TIES:
			case ROLLUP:
			case CUBE:
			case GROUPING:
			case SETS:
			case ORDINALITY:
			case XMLTABLE:
			case COLUMNS:
			case XMLNAMESPACES:
			case ROWTYPE:
			case NORMALIZED:
			case WITHIN:
			case FILTER:
			case GROUPS:
			case OTHERS:
			case NFC:
			case NFD:
			case NFKC:
			case NFKD:
			case UESCAPE:
			case VIEWS:
			case NORMALIZE:
			case DUMP:
			case PRINT_STRICT_PARAMS:
			case VARIABLE_CONFLICT:
			case ERROR:
			case USE_VARIABLE:
			case USE_COLUMN:
			case ALIAS:
			case CONSTANT:
			case PERFORM:
			case GET:
			case DIAGNOSTICS:
			case STACKED:
			case ELSIF:
			case REVERSE:
			case SLICE:
			case EXIT:
			case RETURN:
			case QUERY:
			case RAISE:
			case SQLSTATE:
			case DEBUG:
			case LOG:
			case INFO:
			case NOTICE:
			case WARNING:
			case EXCEPTION:
			case ASSERT:
			case OPEN:
			case ABS:
			case CBRT:
			case CEIL:
			case CEILING:
			case DEGREES:
			case DIV:
			case EXP:
			case FACTORIAL:
			case FLOOR:
			case GCD:
			case LCM:
			case LN:
			case LOG10:
			case MIN_SCALE:
			case MOD:
			case PI:
			case POWER:
			case RADIANS:
			case ROUND:
			case SCALE:
			case SIGN:
			case SQRT:
			case TRIM_SCALE:
			case TRUNC:
			case WIDTH_BUCKET:
			case RANDOM:
			case SETSEED:
			case ACOS:
			case ACOSD:
			case ASIN:
			case ASIND:
			case ATAN:
			case ATAND:
			case ATAN2:
			case ATAN2D:
			case COS:
			case COSD:
			case COT:
			case COTD:
			case SIN:
			case SIND:
			case TAN:
			case TAND:
			case SINH:
			case COSH:
			case TANH:
			case ASINH:
			case ACOSH:
			case ATANH:
			case BIT_LENGTH:
			case CHAR_LENGTH:
			case CHARACTER_LENGTH:
			case LOWER:
			case OCTET_LENGTH:
			case UPPER:
			case ASCII:
			case BTRIM:
			case CHR:
			case CONCAT:
			case CONCAT_WS:
			case FORMAT:
			case INITCAP:
			case LENGTH:
			case LPAD:
			case LTRIM:
			case MD5:
			case PARSE_IDENT:
			case PG_CLIENT_ENCODING:
			case QUOTE_IDENT:
			case QUOTE_LITERAL:
			case QUOTE_NULLABLE:
			case REGEXP_COUNT:
			case REGEXP_INSTR:
			case REGEXP_LIKE:
			case REGEXP_MATCH:
			case REGEXP_MATCHES:
			case REGEXP_REPLACE:
			case REGEXP_SPLIT_TO_ARRAY:
			case REGEXP_SPLIT_TO_TABLE:
			case REGEXP_SUBSTR:
			case REPEAT:
			case RPAD:
			case RTRIM:
			case SPLIT_PART:
			case STARTS_WITH:
			case STRING_TO_ARRAY:
			case STRING_TO_TABLE:
			case STRPOS:
			case SUBSTR:
			case TO_ASCII:
			case TO_HEX:
			case TRANSLATE:
			case UNISTR:
			case AGE:
			case CLOCK_TIMESTAMP:
			case DATE_BIN:
			case DATE_PART:
			case DATE_TRUNC:
			case ISFINITE:
			case JUSTIFY_DAYS:
			case JUSTIFY_HOURS:
			case JUSTIFY_INTERVAL:
			case MAKE_DATE:
			case MAKE_INTERVAL:
			case MAKE_TIME:
			case MAKE_TIMESTAMP:
			case MAKE_TIMESTAMPTZ:
			case NOW:
			case STATEMENT_TIMESTAMP:
			case TIMEOFDAY:
			case TRANSACTION_TIMESTAMP:
			case TO_TIMESTAMP:
			case TO_CHAR:
			case TO_DATE:
			case TO_NUMBER:
			case Identifier:
			case QuotedIdentifier:
			case UnicodeQuotedIdentifier:
			case PLSQLVARIABLENAME:
			case PLSQLIDENTIFIER:
				EnterOuterAlt(_localctx, 1);
				{
				State = 10614;
				colid();
				}
				break;
			case PARAM:
				EnterOuterAlt(_localctx, 2);
				{
				State = 10615;
				Match(PARAM);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Exception_sectContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXCEPTION() { return GetToken(PostgreSQLParser.EXCEPTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Proc_exceptionsContext proc_exceptions() {
			return GetRuleContext<Proc_exceptionsContext>(0);
		}
		public Exception_sectContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_exception_sect; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterException_sect(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitException_sect(this);
		}
	}

	[RuleVersion(0)]
	public Exception_sectContext exception_sect() {
		Exception_sectContext _localctx = new Exception_sectContext(Context, State);
		EnterRule(_localctx, 1588, RULE_exception_sect);
		try {
			State = 10621;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case END_P:
				EnterOuterAlt(_localctx, 1);
				{
				}
				break;
			case EXCEPTION:
				EnterOuterAlt(_localctx, 2);
				{
				State = 10619;
				Match(EXCEPTION);
				State = 10620;
				proc_exceptions();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Proc_exceptionsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Proc_exceptionContext[] proc_exception() {
			return GetRuleContexts<Proc_exceptionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Proc_exceptionContext proc_exception(int i) {
			return GetRuleContext<Proc_exceptionContext>(i);
		}
		public Proc_exceptionsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_proc_exceptions; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterProc_exceptions(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitProc_exceptions(this);
		}
	}

	[RuleVersion(0)]
	public Proc_exceptionsContext proc_exceptions() {
		Proc_exceptionsContext _localctx = new Proc_exceptionsContext(Context, State);
		EnterRule(_localctx, 1590, RULE_proc_exceptions);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 10624;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 10623;
				proc_exception();
				}
				}
				State = 10626;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==WHEN );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Proc_exceptionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WHEN() { return GetToken(PostgreSQLParser.WHEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Proc_conditionsContext proc_conditions() {
			return GetRuleContext<Proc_conditionsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode THEN() { return GetToken(PostgreSQLParser.THEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Proc_sectContext proc_sect() {
			return GetRuleContext<Proc_sectContext>(0);
		}
		public Proc_exceptionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_proc_exception; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterProc_exception(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitProc_exception(this);
		}
	}

	[RuleVersion(0)]
	public Proc_exceptionContext proc_exception() {
		Proc_exceptionContext _localctx = new Proc_exceptionContext(Context, State);
		EnterRule(_localctx, 1592, RULE_proc_exception);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 10628;
			Match(WHEN);
			State = 10629;
			proc_conditions();
			State = 10630;
			Match(THEN);
			State = 10631;
			proc_sect();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Proc_conditionsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Proc_conditionContext[] proc_condition() {
			return GetRuleContexts<Proc_conditionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Proc_conditionContext proc_condition(int i) {
			return GetRuleContext<Proc_conditionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] OR() { return GetTokens(PostgreSQLParser.OR); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OR(int i) {
			return GetToken(PostgreSQLParser.OR, i);
		}
		public Proc_conditionsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_proc_conditions; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterProc_conditions(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitProc_conditions(this);
		}
	}

	[RuleVersion(0)]
	public Proc_conditionsContext proc_conditions() {
		Proc_conditionsContext _localctx = new Proc_conditionsContext(Context, State);
		EnterRule(_localctx, 1594, RULE_proc_conditions);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 10633;
			proc_condition();
			State = 10638;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==OR) {
				{
				{
				State = 10634;
				Match(OR);
				State = 10635;
				proc_condition();
				}
				}
				State = 10640;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Proc_conditionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Any_identifierContext any_identifier() {
			return GetRuleContext<Any_identifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SQLSTATE() { return GetToken(PostgreSQLParser.SQLSTATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SconstContext sconst() {
			return GetRuleContext<SconstContext>(0);
		}
		public Proc_conditionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_proc_condition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterProc_condition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitProc_condition(this);
		}
	}

	[RuleVersion(0)]
	public Proc_conditionContext proc_condition() {
		Proc_conditionContext _localctx = new Proc_conditionContext(Context, State);
		EnterRule(_localctx, 1596, RULE_proc_condition);
		try {
			State = 10644;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,737,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 10641;
				any_identifier();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 10642;
				Match(SQLSTATE);
				State = 10643;
				sconst();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Opt_block_labelContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Label_declContext label_decl() {
			return GetRuleContext<Label_declContext>(0);
		}
		public Opt_block_labelContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_opt_block_label; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterOpt_block_label(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitOpt_block_label(this);
		}
	}

	[RuleVersion(0)]
	public Opt_block_labelContext opt_block_label() {
		Opt_block_labelContext _localctx = new Opt_block_labelContext(Context, State);
		EnterRule(_localctx, 1598, RULE_opt_block_label);
		try {
			State = 10648;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case BEGIN_P:
			case DECLARE:
				EnterOuterAlt(_localctx, 1);
				{
				}
				break;
			case LESS_LESS:
				EnterOuterAlt(_localctx, 2);
				{
				State = 10647;
				label_decl();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Opt_loop_labelContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Label_declContext label_decl() {
			return GetRuleContext<Label_declContext>(0);
		}
		public Opt_loop_labelContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_opt_loop_label; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterOpt_loop_label(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitOpt_loop_label(this);
		}
	}

	[RuleVersion(0)]
	public Opt_loop_labelContext opt_loop_label() {
		Opt_loop_labelContext _localctx = new Opt_loop_labelContext(Context, State);
		EnterRule(_localctx, 1600, RULE_opt_loop_label);
		try {
			State = 10652;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case FOR:
			case WHILE:
			case FOREACH:
			case LOOP:
				EnterOuterAlt(_localctx, 1);
				{
				}
				break;
			case LESS_LESS:
				EnterOuterAlt(_localctx, 2);
				{
				State = 10651;
				label_decl();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Opt_labelContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Any_identifierContext any_identifier() {
			return GetRuleContext<Any_identifierContext>(0);
		}
		public Opt_labelContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_opt_label; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterOpt_label(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitOpt_label(this);
		}
	}

	[RuleVersion(0)]
	public Opt_labelContext opt_label() {
		Opt_labelContext _localctx = new Opt_labelContext(Context, State);
		EnterRule(_localctx, 1602, RULE_opt_label);
		try {
			State = 10656;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Eof:
			case SEMI:
			case WHEN:
				EnterOuterAlt(_localctx, 1);
				{
				}
				break;
			case AND:
			case ARRAY:
			case COLLATE:
			case COLUMN:
			case CONSTRAINT:
			case DEFAULT:
			case DO:
			case FETCH:
			case TABLE:
			case IS:
			case LEFT:
			case OUTER_P:
			case OVER:
			case RIGHT:
			case ABORT_P:
			case ABSOLUTE_P:
			case ACCESS:
			case ACTION:
			case ADD_P:
			case ADMIN:
			case AFTER:
			case AGGREGATE:
			case ALSO:
			case ALTER:
			case ALWAYS:
			case ASSERTION:
			case ASSIGNMENT:
			case AT:
			case ATTRIBUTE:
			case BACKWARD:
			case BEFORE:
			case BEGIN_P:
			case BY:
			case CACHE:
			case CALLED:
			case CASCADE:
			case CASCADED:
			case CATALOG:
			case CHAIN:
			case CHARACTERISTICS:
			case CHECKPOINT:
			case CLASS:
			case CLOSE:
			case CLUSTER:
			case COMMENT:
			case COMMENTS:
			case COMMIT:
			case COMMITTED:
			case CONFIGURATION:
			case CONNECTION:
			case CONSTRAINTS:
			case CONTENT_P:
			case CONTINUE_P:
			case CONVERSION_P:
			case COPY:
			case COST:
			case CSV:
			case CURSOR:
			case CYCLE:
			case DATA_P:
			case DATABASE:
			case DAY_P:
			case DEALLOCATE:
			case DECLARE:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE_P:
			case DELIMITER:
			case DELIMITERS:
			case DICTIONARY:
			case DISABLE_P:
			case DISCARD:
			case DOCUMENT_P:
			case DOMAIN_P:
			case DOUBLE_P:
			case DROP:
			case EACH:
			case ENABLE_P:
			case ENCODING:
			case ENCRYPTED:
			case ENUM_P:
			case ESCAPE:
			case EVENT:
			case EXCLUDE:
			case EXCLUDING:
			case EXCLUSIVE:
			case EXECUTE:
			case EXPLAIN:
			case EXTENSION:
			case EXTERNAL:
			case FAMILY:
			case FIRST_P:
			case FOLLOWING:
			case FORCE:
			case FORWARD:
			case FUNCTION:
			case FUNCTIONS:
			case GLOBAL:
			case GRANTED:
			case HANDLER:
			case HEADER_P:
			case HOLD:
			case HOUR_P:
			case IDENTITY_P:
			case IF_P:
			case IMMEDIATE:
			case IMMUTABLE:
			case IMPLICIT_P:
			case INCLUDING:
			case INCREMENT:
			case INDEX:
			case INDEXES:
			case INHERIT:
			case INHERITS:
			case INLINE_P:
			case INSENSITIVE:
			case INSERT:
			case INSTEAD:
			case INVOKER:
			case ISOLATION:
			case KEY:
			case LABEL:
			case LANGUAGE:
			case LARGE_P:
			case LAST_P:
			case LEAKPROOF:
			case LEVEL:
			case LISTEN:
			case LOAD:
			case LOCAL:
			case LOCATION:
			case LOCK_P:
			case MAPPING:
			case MATCH:
			case MATERIALIZED:
			case MAXVALUE:
			case MINUTE_P:
			case MINVALUE:
			case MODE:
			case MONTH_P:
			case MOVE:
			case NAME_P:
			case NAMES:
			case NEXT:
			case NO:
			case NOTHING:
			case NOTIFY:
			case NOWAIT:
			case NULLS_P:
			case OBJECT_P:
			case OF:
			case OFF:
			case OIDS:
			case OPERATOR:
			case OPTION:
			case OPTIONS:
			case OWNED:
			case OWNER:
			case PARSER:
			case PARTIAL:
			case PARTITION:
			case PASSING:
			case PASSWORD:
			case PLANS:
			case PRECEDING:
			case PREPARE:
			case PREPARED:
			case PRESERVE:
			case PRIOR:
			case PRIVILEGES:
			case PROCEDURAL:
			case PROCEDURE:
			case PROGRAM:
			case QUOTE:
			case RANGE:
			case READ:
			case REASSIGN:
			case RECHECK:
			case RECURSIVE:
			case REF:
			case REFRESH:
			case REINDEX:
			case RELATIVE_P:
			case RELEASE:
			case RENAME:
			case REPEATABLE:
			case REPLACE:
			case REPLICA:
			case RESET:
			case RESTART:
			case RESTRICT:
			case RETURNS:
			case REVOKE:
			case ROLE:
			case ROLLBACK:
			case ROWS:
			case RULE:
			case SAVEPOINT:
			case SCHEMA:
			case SCROLL:
			case SEARCH:
			case SECOND_P:
			case SECURITY:
			case SEQUENCE:
			case SEQUENCES:
			case SERIALIZABLE:
			case SERVER:
			case SESSION:
			case SET:
			case SHARE:
			case SHOW:
			case SIMPLE:
			case SNAPSHOT:
			case STABLE:
			case STANDALONE_P:
			case START:
			case STATEMENT:
			case STATISTICS:
			case STDIN:
			case STDOUT:
			case STORAGE:
			case STRICT_P:
			case STRIP_P:
			case SYSID:
			case SYSTEM_P:
			case TABLES:
			case TABLESPACE:
			case TEMP:
			case TEMPLATE:
			case TEMPORARY:
			case TEXT_P:
			case TRANSACTION:
			case TRIGGER:
			case TRUNCATE:
			case TRUSTED:
			case TYPE_P:
			case TYPES_P:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNENCRYPTED:
			case UNKNOWN:
			case UNLISTEN:
			case UNLOGGED:
			case UNTIL:
			case UPDATE:
			case VACUUM:
			case VALID:
			case VALIDATE:
			case VALIDATOR:
			case VARYING:
			case VERSION_P:
			case VIEW:
			case VOLATILE:
			case WHITESPACE_P:
			case WITHOUT:
			case WORK:
			case WRAPPER:
			case WRITE:
			case XML_P:
			case YEAR_P:
			case YES_P:
			case ZONE:
			case BETWEEN:
			case BIGINT:
			case BIT:
			case BOOLEAN_P:
			case CHAR_P:
			case CHARACTER:
			case COALESCE:
			case DEC:
			case DECIMAL_P:
			case EXISTS:
			case EXTRACT:
			case FLOAT_P:
			case GREATEST:
			case INOUT:
			case INT_P:
			case INTEGER:
			case INTERVAL:
			case LEAST:
			case NATIONAL:
			case NCHAR:
			case NONE:
			case NULLIF:
			case NUMERIC:
			case OVERLAY:
			case POSITION:
			case PRECISION:
			case REAL:
			case ROW:
			case SETOF:
			case SMALLINT:
			case SUBSTRING:
			case TIME:
			case TIMESTAMP:
			case TREAT:
			case TRIM:
			case VALUES:
			case VARCHAR:
			case XMLATTRIBUTES:
			case XMLCOMMENT:
			case XMLAGG:
			case XML_IS_WELL_FORMED:
			case XML_IS_WELL_FORMED_DOCUMENT:
			case XML_IS_WELL_FORMED_CONTENT:
			case XPATH:
			case XPATH_EXISTS:
			case XMLCONCAT:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLPARSE:
			case XMLPI:
			case XMLROOT:
			case XMLSERIALIZE:
			case CALL:
			case CURRENT_P:
			case ATTACH:
			case DETACH:
			case EXPRESSION:
			case GENERATED:
			case LOGGED:
			case STORED:
			case INCLUDE:
			case ROUTINE:
			case TRANSFORM:
			case IMPORT_P:
			case POLICY:
			case METHOD:
			case REFERENCING:
			case NEW:
			case OLD:
			case VALUE_P:
			case SUBSCRIPTION:
			case PUBLICATION:
			case OUT_P:
			case ROUTINES:
			case SCHEMAS:
			case PROCEDURES:
			case INPUT_P:
			case SUPPORT:
			case PARALLEL:
			case SQL_P:
			case DEPENDS:
			case OVERRIDING:
			case CONFLICT:
			case SKIP_P:
			case LOCKED:
			case TIES:
			case ROLLUP:
			case CUBE:
			case GROUPING:
			case SETS:
			case ORDINALITY:
			case XMLTABLE:
			case COLUMNS:
			case XMLNAMESPACES:
			case ROWTYPE:
			case NORMALIZED:
			case WITHIN:
			case FILTER:
			case GROUPS:
			case OTHERS:
			case NFC:
			case NFD:
			case NFKC:
			case NFKD:
			case UESCAPE:
			case VIEWS:
			case NORMALIZE:
			case DUMP:
			case PRINT_STRICT_PARAMS:
			case VARIABLE_CONFLICT:
			case ERROR:
			case USE_VARIABLE:
			case USE_COLUMN:
			case ALIAS:
			case CONSTANT:
			case PERFORM:
			case GET:
			case DIAGNOSTICS:
			case STACKED:
			case ELSIF:
			case REVERSE:
			case SLICE:
			case EXIT:
			case RETURN:
			case QUERY:
			case RAISE:
			case SQLSTATE:
			case DEBUG:
			case LOG:
			case INFO:
			case NOTICE:
			case WARNING:
			case EXCEPTION:
			case ASSERT:
			case OPEN:
			case ABS:
			case CBRT:
			case CEIL:
			case CEILING:
			case DEGREES:
			case DIV:
			case EXP:
			case FACTORIAL:
			case FLOOR:
			case GCD:
			case LCM:
			case LN:
			case LOG10:
			case MIN_SCALE:
			case MOD:
			case PI:
			case POWER:
			case RADIANS:
			case ROUND:
			case SCALE:
			case SIGN:
			case SQRT:
			case TRIM_SCALE:
			case TRUNC:
			case WIDTH_BUCKET:
			case RANDOM:
			case SETSEED:
			case ACOS:
			case ACOSD:
			case ASIN:
			case ASIND:
			case ATAN:
			case ATAND:
			case ATAN2:
			case ATAN2D:
			case COS:
			case COSD:
			case COT:
			case COTD:
			case SIN:
			case SIND:
			case TAN:
			case TAND:
			case SINH:
			case COSH:
			case TANH:
			case ASINH:
			case ACOSH:
			case ATANH:
			case BIT_LENGTH:
			case CHAR_LENGTH:
			case CHARACTER_LENGTH:
			case LOWER:
			case OCTET_LENGTH:
			case UPPER:
			case ASCII:
			case BTRIM:
			case CHR:
			case CONCAT:
			case CONCAT_WS:
			case FORMAT:
			case INITCAP:
			case LENGTH:
			case LPAD:
			case LTRIM:
			case MD5:
			case PARSE_IDENT:
			case PG_CLIENT_ENCODING:
			case QUOTE_IDENT:
			case QUOTE_LITERAL:
			case QUOTE_NULLABLE:
			case REGEXP_COUNT:
			case REGEXP_INSTR:
			case REGEXP_LIKE:
			case REGEXP_MATCH:
			case REGEXP_MATCHES:
			case REGEXP_REPLACE:
			case REGEXP_SPLIT_TO_ARRAY:
			case REGEXP_SPLIT_TO_TABLE:
			case REGEXP_SUBSTR:
			case REPEAT:
			case RPAD:
			case RTRIM:
			case SPLIT_PART:
			case STARTS_WITH:
			case STRING_TO_ARRAY:
			case STRING_TO_TABLE:
			case STRPOS:
			case SUBSTR:
			case TO_ASCII:
			case TO_HEX:
			case TRANSLATE:
			case UNISTR:
			case AGE:
			case CLOCK_TIMESTAMP:
			case DATE_BIN:
			case DATE_PART:
			case DATE_TRUNC:
			case ISFINITE:
			case JUSTIFY_DAYS:
			case JUSTIFY_HOURS:
			case JUSTIFY_INTERVAL:
			case MAKE_DATE:
			case MAKE_INTERVAL:
			case MAKE_TIME:
			case MAKE_TIMESTAMP:
			case MAKE_TIMESTAMPTZ:
			case NOW:
			case STATEMENT_TIMESTAMP:
			case TIMEOFDAY:
			case TRANSACTION_TIMESTAMP:
			case TO_TIMESTAMP:
			case TO_CHAR:
			case TO_DATE:
			case TO_NUMBER:
			case Identifier:
			case QuotedIdentifier:
			case UnicodeQuotedIdentifier:
			case PLSQLVARIABLENAME:
			case PLSQLIDENTIFIER:
				EnterOuterAlt(_localctx, 2);
				{
				State = 10655;
				any_identifier();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Opt_exitcondContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WHEN() { return GetToken(PostgreSQLParser.WHEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Expr_until_semiContext expr_until_semi() {
			return GetRuleContext<Expr_until_semiContext>(0);
		}
		public Opt_exitcondContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_opt_exitcond; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterOpt_exitcond(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitOpt_exitcond(this);
		}
	}

	[RuleVersion(0)]
	public Opt_exitcondContext opt_exitcond() {
		Opt_exitcondContext _localctx = new Opt_exitcondContext(Context, State);
		EnterRule(_localctx, 1604, RULE_opt_exitcond);
		try {
			State = 10661;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case WHEN:
				EnterOuterAlt(_localctx, 1);
				{
				State = 10658;
				Match(WHEN);
				State = 10659;
				expr_until_semi();
				}
				break;
			case SEMI:
				EnterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Any_identifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ColidContext colid() {
			return GetRuleContext<ColidContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Plsql_unreserved_keywordContext plsql_unreserved_keyword() {
			return GetRuleContext<Plsql_unreserved_keywordContext>(0);
		}
		public Any_identifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_any_identifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterAny_identifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitAny_identifier(this);
		}
	}

	[RuleVersion(0)]
	public Any_identifierContext any_identifier() {
		Any_identifierContext _localctx = new Any_identifierContext(Context, State);
		EnterRule(_localctx, 1606, RULE_any_identifier);
		try {
			State = 10665;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,742,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 10663;
				colid();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 10664;
				plsql_unreserved_keyword();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Plsql_unreserved_keywordContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ABSOLUTE_P() { return GetToken(PostgreSQLParser.ABSOLUTE_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALIAS() { return GetToken(PostgreSQLParser.ALIAS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AND() { return GetToken(PostgreSQLParser.AND, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ARRAY() { return GetToken(PostgreSQLParser.ARRAY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSERT() { return GetToken(PostgreSQLParser.ASSERT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BACKWARD() { return GetToken(PostgreSQLParser.BACKWARD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CALL() { return GetToken(PostgreSQLParser.CALL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHAIN() { return GetToken(PostgreSQLParser.CHAIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE() { return GetToken(PostgreSQLParser.CLOSE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLLATE() { return GetToken(PostgreSQLParser.COLLATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLUMN() { return GetToken(PostgreSQLParser.COLUMN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMIT() { return GetToken(PostgreSQLParser.COMMIT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONSTANT() { return GetToken(PostgreSQLParser.CONSTANT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONSTRAINT() { return GetToken(PostgreSQLParser.CONSTRAINT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONTINUE_P() { return GetToken(PostgreSQLParser.CONTINUE_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CURRENT_P() { return GetToken(PostgreSQLParser.CURRENT_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CURSOR() { return GetToken(PostgreSQLParser.CURSOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEBUG() { return GetToken(PostgreSQLParser.DEBUG, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFAULT() { return GetToken(PostgreSQLParser.DEFAULT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DIAGNOSTICS() { return GetToken(PostgreSQLParser.DIAGNOSTICS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DO() { return GetToken(PostgreSQLParser.DO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DUMP() { return GetToken(PostgreSQLParser.DUMP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ELSIF() { return GetToken(PostgreSQLParser.ELSIF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ERROR() { return GetToken(PostgreSQLParser.ERROR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXCEPTION() { return GetToken(PostgreSQLParser.EXCEPTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXIT() { return GetToken(PostgreSQLParser.EXIT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FETCH() { return GetToken(PostgreSQLParser.FETCH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FIRST_P() { return GetToken(PostgreSQLParser.FIRST_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FORWARD() { return GetToken(PostgreSQLParser.FORWARD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GET() { return GetToken(PostgreSQLParser.GET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INFO() { return GetToken(PostgreSQLParser.INFO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INSERT() { return GetToken(PostgreSQLParser.INSERT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IS() { return GetToken(PostgreSQLParser.IS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LAST_P() { return GetToken(PostgreSQLParser.LAST_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MOVE() { return GetToken(PostgreSQLParser.MOVE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NEXT() { return GetToken(PostgreSQLParser.NEXT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NO() { return GetToken(PostgreSQLParser.NO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOTICE() { return GetToken(PostgreSQLParser.NOTICE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN() { return GetToken(PostgreSQLParser.OPEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPTION() { return GetToken(PostgreSQLParser.OPTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PERFORM() { return GetToken(PostgreSQLParser.PERFORM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PRINT_STRICT_PARAMS() { return GetToken(PostgreSQLParser.PRINT_STRICT_PARAMS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PRIOR() { return GetToken(PostgreSQLParser.PRIOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode QUERY() { return GetToken(PostgreSQLParser.QUERY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RAISE() { return GetToken(PostgreSQLParser.RAISE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RELATIVE_P() { return GetToken(PostgreSQLParser.RELATIVE_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RESET() { return GetToken(PostgreSQLParser.RESET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RETURN() { return GetToken(PostgreSQLParser.RETURN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROLLBACK() { return GetToken(PostgreSQLParser.ROLLBACK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROWTYPE() { return GetToken(PostgreSQLParser.ROWTYPE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SCHEMA() { return GetToken(PostgreSQLParser.SCHEMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SCROLL() { return GetToken(PostgreSQLParser.SCROLL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SET() { return GetToken(PostgreSQLParser.SET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SLICE() { return GetToken(PostgreSQLParser.SLICE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SQLSTATE() { return GetToken(PostgreSQLParser.SQLSTATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STACKED() { return GetToken(PostgreSQLParser.STACKED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLE() { return GetToken(PostgreSQLParser.TABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TYPE_P() { return GetToken(PostgreSQLParser.TYPE_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode USE_COLUMN() { return GetToken(PostgreSQLParser.USE_COLUMN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode USE_VARIABLE() { return GetToken(PostgreSQLParser.USE_VARIABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARIABLE_CONFLICT() { return GetToken(PostgreSQLParser.VARIABLE_CONFLICT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WARNING() { return GetToken(PostgreSQLParser.WARNING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OUTER_P() { return GetToken(PostgreSQLParser.OUTER_P, 0); }
		public Plsql_unreserved_keywordContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_plsql_unreserved_keyword; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterPlsql_unreserved_keyword(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitPlsql_unreserved_keyword(this);
		}
	}

	[RuleVersion(0)]
	public Plsql_unreserved_keywordContext plsql_unreserved_keyword() {
		Plsql_unreserved_keywordContext _localctx = new Plsql_unreserved_keywordContext(Context, State);
		EnterRule(_localctx, 1608, RULE_plsql_unreserved_keyword);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 10667;
			_la = TokenStream.LA(1);
			if ( !(((_la) & ~0x3f) == 0 && ((1L << _la) & 2459027012145119232L) != 0 || (((_la - 92)) & ~0x3f) == 0 && ((1L << (_la - 92)) & 4620693494724296705L) != 0 || (((_la - 158)) & ~0x3f) == 0 && ((1L << (_la - 158)) & 10133099161617425L) != 0 || (((_la - 233)) & ~0x3f) == 0 && ((1L << (_la - 233)) & 18015499698831617L) != 0 || (((_la - 301)) & ~0x3f) == 0 && ((1L << (_la - 301)) & 9007199322050625L) != 0 || (((_la - 434)) & ~0x3f) == 0 && ((1L << (_la - 434)) & -144097595889811453L) != 0 || (((_la - 498)) & ~0x3f) == 0 && ((1L << (_la - 498)) & 12516927L) != 0) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Sql_expressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Opt_target_listContext opt_target_list() {
			return GetRuleContext<Opt_target_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Into_clauseContext into_clause() {
			return GetRuleContext<Into_clauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public From_clauseContext from_clause() {
			return GetRuleContext<From_clauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Where_clauseContext where_clause() {
			return GetRuleContext<Where_clauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Group_clauseContext group_clause() {
			return GetRuleContext<Group_clauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Having_clauseContext having_clause() {
			return GetRuleContext<Having_clauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Window_clauseContext window_clause() {
			return GetRuleContext<Window_clauseContext>(0);
		}
		public Sql_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sql_expression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterSql_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitSql_expression(this);
		}
	}

	[RuleVersion(0)]
	public Sql_expressionContext sql_expression() {
		Sql_expressionContext _localctx = new Sql_expressionContext(Context, State);
		EnterRule(_localctx, 1610, RULE_sql_expression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 10669;
			opt_target_list();
			State = 10670;
			into_clause();
			State = 10671;
			from_clause();
			State = 10672;
			where_clause();
			State = 10673;
			group_clause();
			State = 10674;
			having_clause();
			State = 10675;
			window_clause();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Expr_until_thenContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Sql_expressionContext sql_expression() {
			return GetRuleContext<Sql_expressionContext>(0);
		}
		public Expr_until_thenContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expr_until_then; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterExpr_until_then(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitExpr_until_then(this);
		}
	}

	[RuleVersion(0)]
	public Expr_until_thenContext expr_until_then() {
		Expr_until_thenContext _localctx = new Expr_until_thenContext(Context, State);
		EnterRule(_localctx, 1612, RULE_expr_until_then);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 10677;
			sql_expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Expr_until_semiContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Sql_expressionContext sql_expression() {
			return GetRuleContext<Sql_expressionContext>(0);
		}
		public Expr_until_semiContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expr_until_semi; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterExpr_until_semi(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitExpr_until_semi(this);
		}
	}

	[RuleVersion(0)]
	public Expr_until_semiContext expr_until_semi() {
		Expr_until_semiContext _localctx = new Expr_until_semiContext(Context, State);
		EnterRule(_localctx, 1614, RULE_expr_until_semi);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 10679;
			sql_expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Expr_until_rightbracketContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public A_exprContext a_expr() {
			return GetRuleContext<A_exprContext>(0);
		}
		public Expr_until_rightbracketContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expr_until_rightbracket; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterExpr_until_rightbracket(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitExpr_until_rightbracket(this);
		}
	}

	[RuleVersion(0)]
	public Expr_until_rightbracketContext expr_until_rightbracket() {
		Expr_until_rightbracketContext _localctx = new Expr_until_rightbracketContext(Context, State);
		EnterRule(_localctx, 1616, RULE_expr_until_rightbracket);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 10681;
			a_expr();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Expr_until_loopContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public A_exprContext a_expr() {
			return GetRuleContext<A_exprContext>(0);
		}
		public Expr_until_loopContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expr_until_loop; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterExpr_until_loop(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitExpr_until_loop(this);
		}
	}

	[RuleVersion(0)]
	public Expr_until_loopContext expr_until_loop() {
		Expr_until_loopContext _localctx = new Expr_until_loopContext(Context, State);
		EnterRule(_localctx, 1618, RULE_expr_until_loop);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 10683;
			a_expr();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Make_execsql_stmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StmtContext stmt() {
			return GetRuleContext<StmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Opt_returning_clause_intoContext opt_returning_clause_into() {
			return GetRuleContext<Opt_returning_clause_intoContext>(0);
		}
		public Make_execsql_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_make_execsql_stmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterMake_execsql_stmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitMake_execsql_stmt(this);
		}
	}

	[RuleVersion(0)]
	public Make_execsql_stmtContext make_execsql_stmt() {
		Make_execsql_stmtContext _localctx = new Make_execsql_stmtContext(Context, State);
		EnterRule(_localctx, 1620, RULE_make_execsql_stmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 10685;
			stmt();
			State = 10686;
			opt_returning_clause_into();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Opt_returning_clause_intoContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTO() { return GetToken(PostgreSQLParser.INTO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Opt_strictContext opt_strict() {
			return GetRuleContext<Opt_strictContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Into_targetContext into_target() {
			return GetRuleContext<Into_targetContext>(0);
		}
		public Opt_returning_clause_intoContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_opt_returning_clause_into; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterOpt_returning_clause_into(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitOpt_returning_clause_into(this);
		}
	}

	[RuleVersion(0)]
	public Opt_returning_clause_intoContext opt_returning_clause_into() {
		Opt_returning_clause_intoContext _localctx = new Opt_returning_clause_intoContext(Context, State);
		EnterRule(_localctx, 1622, RULE_opt_returning_clause_into);
		try {
			State = 10693;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case INTO:
				EnterOuterAlt(_localctx, 1);
				{
				State = 10688;
				Match(INTO);
				State = 10689;
				opt_strict();
				State = 10690;
				into_target();
				}
				break;
			case SEMI:
				EnterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 602: return b_expr_sempred((B_exprContext)_localctx, predIndex);
		}
		return true;
	}
	private bool b_expr_sempred(B_exprContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 8);
		case 1: return Precpred(Context, 7);
		case 2: return Precpred(Context, 6);
		case 3: return Precpred(Context, 5);
		case 4: return Precpred(Context, 4);
		case 5: return Precpred(Context, 10);
		case 6: return Precpred(Context, 2);
		case 7: return Precpred(Context, 1);
		}
		return true;
	}

	private static int[] _serializedATN = {
		4,1,680,10696,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,
		2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,7,
		14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,7,
		21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,7,
		28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,7,
		35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,2,42,7,
		42,2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,7,
		49,2,50,7,50,2,51,7,51,2,52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,
		56,2,57,7,57,2,58,7,58,2,59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,7,
		63,2,64,7,64,2,65,7,65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,7,
		70,2,71,7,71,2,72,7,72,2,73,7,73,2,74,7,74,2,75,7,75,2,76,7,76,2,77,7,
		77,2,78,7,78,2,79,7,79,2,80,7,80,2,81,7,81,2,82,7,82,2,83,7,83,2,84,7,
		84,2,85,7,85,2,86,7,86,2,87,7,87,2,88,7,88,2,89,7,89,2,90,7,90,2,91,7,
		91,2,92,7,92,2,93,7,93,2,94,7,94,2,95,7,95,2,96,7,96,2,97,7,97,2,98,7,
		98,2,99,7,99,2,100,7,100,2,101,7,101,2,102,7,102,2,103,7,103,2,104,7,104,
		2,105,7,105,2,106,7,106,2,107,7,107,2,108,7,108,2,109,7,109,2,110,7,110,
		2,111,7,111,2,112,7,112,2,113,7,113,2,114,7,114,2,115,7,115,2,116,7,116,
		2,117,7,117,2,118,7,118,2,119,7,119,2,120,7,120,2,121,7,121,2,122,7,122,
		2,123,7,123,2,124,7,124,2,125,7,125,2,126,7,126,2,127,7,127,2,128,7,128,
		2,129,7,129,2,130,7,130,2,131,7,131,2,132,7,132,2,133,7,133,2,134,7,134,
		2,135,7,135,2,136,7,136,2,137,7,137,2,138,7,138,2,139,7,139,2,140,7,140,
		2,141,7,141,2,142,7,142,2,143,7,143,2,144,7,144,2,145,7,145,2,146,7,146,
		2,147,7,147,2,148,7,148,2,149,7,149,2,150,7,150,2,151,7,151,2,152,7,152,
		2,153,7,153,2,154,7,154,2,155,7,155,2,156,7,156,2,157,7,157,2,158,7,158,
		2,159,7,159,2,160,7,160,2,161,7,161,2,162,7,162,2,163,7,163,2,164,7,164,
		2,165,7,165,2,166,7,166,2,167,7,167,2,168,7,168,2,169,7,169,2,170,7,170,
		2,171,7,171,2,172,7,172,2,173,7,173,2,174,7,174,2,175,7,175,2,176,7,176,
		2,177,7,177,2,178,7,178,2,179,7,179,2,180,7,180,2,181,7,181,2,182,7,182,
		2,183,7,183,2,184,7,184,2,185,7,185,2,186,7,186,2,187,7,187,2,188,7,188,
		2,189,7,189,2,190,7,190,2,191,7,191,2,192,7,192,2,193,7,193,2,194,7,194,
		2,195,7,195,2,196,7,196,2,197,7,197,2,198,7,198,2,199,7,199,2,200,7,200,
		2,201,7,201,2,202,7,202,2,203,7,203,2,204,7,204,2,205,7,205,2,206,7,206,
		2,207,7,207,2,208,7,208,2,209,7,209,2,210,7,210,2,211,7,211,2,212,7,212,
		2,213,7,213,2,214,7,214,2,215,7,215,2,216,7,216,2,217,7,217,2,218,7,218,
		2,219,7,219,2,220,7,220,2,221,7,221,2,222,7,222,2,223,7,223,2,224,7,224,
		2,225,7,225,2,226,7,226,2,227,7,227,2,228,7,228,2,229,7,229,2,230,7,230,
		2,231,7,231,2,232,7,232,2,233,7,233,2,234,7,234,2,235,7,235,2,236,7,236,
		2,237,7,237,2,238,7,238,2,239,7,239,2,240,7,240,2,241,7,241,2,242,7,242,
		2,243,7,243,2,244,7,244,2,245,7,245,2,246,7,246,2,247,7,247,2,248,7,248,
		2,249,7,249,2,250,7,250,2,251,7,251,2,252,7,252,2,253,7,253,2,254,7,254,
		2,255,7,255,2,256,7,256,2,257,7,257,2,258,7,258,2,259,7,259,2,260,7,260,
		2,261,7,261,2,262,7,262,2,263,7,263,2,264,7,264,2,265,7,265,2,266,7,266,
		2,267,7,267,2,268,7,268,2,269,7,269,2,270,7,270,2,271,7,271,2,272,7,272,
		2,273,7,273,2,274,7,274,2,275,7,275,2,276,7,276,2,277,7,277,2,278,7,278,
		2,279,7,279,2,280,7,280,2,281,7,281,2,282,7,282,2,283,7,283,2,284,7,284,
		2,285,7,285,2,286,7,286,2,287,7,287,2,288,7,288,2,289,7,289,2,290,7,290,
		2,291,7,291,2,292,7,292,2,293,7,293,2,294,7,294,2,295,7,295,2,296,7,296,
		2,297,7,297,2,298,7,298,2,299,7,299,2,300,7,300,2,301,7,301,2,302,7,302,
		2,303,7,303,2,304,7,304,2,305,7,305,2,306,7,306,2,307,7,307,2,308,7,308,
		2,309,7,309,2,310,7,310,2,311,7,311,2,312,7,312,2,313,7,313,2,314,7,314,
		2,315,7,315,2,316,7,316,2,317,7,317,2,318,7,318,2,319,7,319,2,320,7,320,
		2,321,7,321,2,322,7,322,2,323,7,323,2,324,7,324,2,325,7,325,2,326,7,326,
		2,327,7,327,2,328,7,328,2,329,7,329,2,330,7,330,2,331,7,331,2,332,7,332,
		2,333,7,333,2,334,7,334,2,335,7,335,2,336,7,336,2,337,7,337,2,338,7,338,
		2,339,7,339,2,340,7,340,2,341,7,341,2,342,7,342,2,343,7,343,2,344,7,344,
		2,345,7,345,2,346,7,346,2,347,7,347,2,348,7,348,2,349,7,349,2,350,7,350,
		2,351,7,351,2,352,7,352,2,353,7,353,2,354,7,354,2,355,7,355,2,356,7,356,
		2,357,7,357,2,358,7,358,2,359,7,359,2,360,7,360,2,361,7,361,2,362,7,362,
		2,363,7,363,2,364,7,364,2,365,7,365,2,366,7,366,2,367,7,367,2,368,7,368,
		2,369,7,369,2,370,7,370,2,371,7,371,2,372,7,372,2,373,7,373,2,374,7,374,
		2,375,7,375,2,376,7,376,2,377,7,377,2,378,7,378,2,379,7,379,2,380,7,380,
		2,381,7,381,2,382,7,382,2,383,7,383,2,384,7,384,2,385,7,385,2,386,7,386,
		2,387,7,387,2,388,7,388,2,389,7,389,2,390,7,390,2,391,7,391,2,392,7,392,
		2,393,7,393,2,394,7,394,2,395,7,395,2,396,7,396,2,397,7,397,2,398,7,398,
		2,399,7,399,2,400,7,400,2,401,7,401,2,402,7,402,2,403,7,403,2,404,7,404,
		2,405,7,405,2,406,7,406,2,407,7,407,2,408,7,408,2,409,7,409,2,410,7,410,
		2,411,7,411,2,412,7,412,2,413,7,413,2,414,7,414,2,415,7,415,2,416,7,416,
		2,417,7,417,2,418,7,418,2,419,7,419,2,420,7,420,2,421,7,421,2,422,7,422,
		2,423,7,423,2,424,7,424,2,425,7,425,2,426,7,426,2,427,7,427,2,428,7,428,
		2,429,7,429,2,430,7,430,2,431,7,431,2,432,7,432,2,433,7,433,2,434,7,434,
		2,435,7,435,2,436,7,436,2,437,7,437,2,438,7,438,2,439,7,439,2,440,7,440,
		2,441,7,441,2,442,7,442,2,443,7,443,2,444,7,444,2,445,7,445,2,446,7,446,
		2,447,7,447,2,448,7,448,2,449,7,449,2,450,7,450,2,451,7,451,2,452,7,452,
		2,453,7,453,2,454,7,454,2,455,7,455,2,456,7,456,2,457,7,457,2,458,7,458,
		2,459,7,459,2,460,7,460,2,461,7,461,2,462,7,462,2,463,7,463,2,464,7,464,
		2,465,7,465,2,466,7,466,2,467,7,467,2,468,7,468,2,469,7,469,2,470,7,470,
		2,471,7,471,2,472,7,472,2,473,7,473,2,474,7,474,2,475,7,475,2,476,7,476,
		2,477,7,477,2,478,7,478,2,479,7,479,2,480,7,480,2,481,7,481,2,482,7,482,
		2,483,7,483,2,484,7,484,2,485,7,485,2,486,7,486,2,487,7,487,2,488,7,488,
		2,489,7,489,2,490,7,490,2,491,7,491,2,492,7,492,2,493,7,493,2,494,7,494,
		2,495,7,495,2,496,7,496,2,497,7,497,2,498,7,498,2,499,7,499,2,500,7,500,
		2,501,7,501,2,502,7,502,2,503,7,503,2,504,7,504,2,505,7,505,2,506,7,506,
		2,507,7,507,2,508,7,508,2,509,7,509,2,510,7,510,2,511,7,511,2,512,7,512,
		2,513,7,513,2,514,7,514,2,515,7,515,2,516,7,516,2,517,7,517,2,518,7,518,
		2,519,7,519,2,520,7,520,2,521,7,521,2,522,7,522,2,523,7,523,2,524,7,524,
		2,525,7,525,2,526,7,526,2,527,7,527,2,528,7,528,2,529,7,529,2,530,7,530,
		2,531,7,531,2,532,7,532,2,533,7,533,2,534,7,534,2,535,7,535,2,536,7,536,
		2,537,7,537,2,538,7,538,2,539,7,539,2,540,7,540,2,541,7,541,2,542,7,542,
		2,543,7,543,2,544,7,544,2,545,7,545,2,546,7,546,2,547,7,547,2,548,7,548,
		2,549,7,549,2,550,7,550,2,551,7,551,2,552,7,552,2,553,7,553,2,554,7,554,
		2,555,7,555,2,556,7,556,2,557,7,557,2,558,7,558,2,559,7,559,2,560,7,560,
		2,561,7,561,2,562,7,562,2,563,7,563,2,564,7,564,2,565,7,565,2,566,7,566,
		2,567,7,567,2,568,7,568,2,569,7,569,2,570,7,570,2,571,7,571,2,572,7,572,
		2,573,7,573,2,574,7,574,2,575,7,575,2,576,7,576,2,577,7,577,2,578,7,578,
		2,579,7,579,2,580,7,580,2,581,7,581,2,582,7,582,2,583,7,583,2,584,7,584,
		2,585,7,585,2,586,7,586,2,587,7,587,2,588,7,588,2,589,7,589,2,590,7,590,
		2,591,7,591,2,592,7,592,2,593,7,593,2,594,7,594,2,595,7,595,2,596,7,596,
		2,597,7,597,2,598,7,598,2,599,7,599,2,600,7,600,2,601,7,601,2,602,7,602,
		2,603,7,603,2,604,7,604,2,605,7,605,2,606,7,606,2,607,7,607,2,608,7,608,
		2,609,7,609,2,610,7,610,2,611,7,611,2,612,7,612,2,613,7,613,2,614,7,614,
		2,615,7,615,2,616,7,616,2,617,7,617,2,618,7,618,2,619,7,619,2,620,7,620,
		2,621,7,621,2,622,7,622,2,623,7,623,2,624,7,624,2,625,7,625,2,626,7,626,
		2,627,7,627,2,628,7,628,2,629,7,629,2,630,7,630,2,631,7,631,2,632,7,632,
		2,633,7,633,2,634,7,634,2,635,7,635,2,636,7,636,2,637,7,637,2,638,7,638,
		2,639,7,639,2,640,7,640,2,641,7,641,2,642,7,642,2,643,7,643,2,644,7,644,
		2,645,7,645,2,646,7,646,2,647,7,647,2,648,7,648,2,649,7,649,2,650,7,650,
		2,651,7,651,2,652,7,652,2,653,7,653,2,654,7,654,2,655,7,655,2,656,7,656,
		2,657,7,657,2,658,7,658,2,659,7,659,2,660,7,660,2,661,7,661,2,662,7,662,
		2,663,7,663,2,664,7,664,2,665,7,665,2,666,7,666,2,667,7,667,2,668,7,668,
		2,669,7,669,2,670,7,670,2,671,7,671,2,672,7,672,2,673,7,673,2,674,7,674,
		2,675,7,675,2,676,7,676,2,677,7,677,2,678,7,678,2,679,7,679,2,680,7,680,
		2,681,7,681,2,682,7,682,2,683,7,683,2,684,7,684,2,685,7,685,2,686,7,686,
		2,687,7,687,2,688,7,688,2,689,7,689,2,690,7,690,2,691,7,691,2,692,7,692,
		2,693,7,693,2,694,7,694,2,695,7,695,2,696,7,696,2,697,7,697,2,698,7,698,
		2,699,7,699,2,700,7,700,2,701,7,701,2,702,7,702,2,703,7,703,2,704,7,704,
		2,705,7,705,2,706,7,706,2,707,7,707,2,708,7,708,2,709,7,709,2,710,7,710,
		2,711,7,711,2,712,7,712,2,713,7,713,2,714,7,714,2,715,7,715,2,716,7,716,
		2,717,7,717,2,718,7,718,2,719,7,719,2,720,7,720,2,721,7,721,2,722,7,722,
		2,723,7,723,2,724,7,724,2,725,7,725,2,726,7,726,2,727,7,727,2,728,7,728,
		2,729,7,729,2,730,7,730,2,731,7,731,2,732,7,732,2,733,7,733,2,734,7,734,
		2,735,7,735,2,736,7,736,2,737,7,737,2,738,7,738,2,739,7,739,2,740,7,740,
		2,741,7,741,2,742,7,742,2,743,7,743,2,744,7,744,2,745,7,745,2,746,7,746,
		2,747,7,747,2,748,7,748,2,749,7,749,2,750,7,750,2,751,7,751,2,752,7,752,
		2,753,7,753,2,754,7,754,2,755,7,755,2,756,7,756,2,757,7,757,2,758,7,758,
		2,759,7,759,2,760,7,760,2,761,7,761,2,762,7,762,2,763,7,763,2,764,7,764,
		2,765,7,765,2,766,7,766,2,767,7,767,2,768,7,768,2,769,7,769,2,770,7,770,
		2,771,7,771,2,772,7,772,2,773,7,773,2,774,7,774,2,775,7,775,2,776,7,776,
		2,777,7,777,2,778,7,778,2,779,7,779,2,780,7,780,2,781,7,781,2,782,7,782,
		2,783,7,783,2,784,7,784,2,785,7,785,2,786,7,786,2,787,7,787,2,788,7,788,
		2,789,7,789,2,790,7,790,2,791,7,791,2,792,7,792,2,793,7,793,2,794,7,794,
		2,795,7,795,2,796,7,796,2,797,7,797,2,798,7,798,2,799,7,799,2,800,7,800,
		2,801,7,801,2,802,7,802,2,803,7,803,2,804,7,804,2,805,7,805,2,806,7,806,
		2,807,7,807,2,808,7,808,2,809,7,809,2,810,7,810,2,811,7,811,1,0,1,0,1,
		0,1,1,1,1,1,2,1,2,1,3,1,3,3,3,1634,8,3,5,3,1636,8,3,10,3,12,3,1639,9,3,
		1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,
		4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,
		1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,
		4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,
		1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,
		4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,
		1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,
		4,1,4,1,4,3,4,1766,8,4,1,5,1,5,3,5,1770,8,5,1,6,1,6,1,6,1,7,1,7,1,7,1,
		7,1,7,1,7,1,8,1,8,3,8,1783,8,8,1,9,5,9,1786,8,9,10,9,12,9,1789,9,9,1,10,
		5,10,1792,8,10,10,10,12,10,1795,9,10,1,11,1,11,1,11,3,11,1800,8,11,1,11,
		1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,3,11,1815,
		8,11,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,3,12,1827,8,12,
		1,13,1,13,1,13,1,13,1,13,1,13,1,14,1,14,1,14,1,14,1,14,1,14,1,15,1,15,
		1,15,1,15,3,15,1845,8,15,1,16,1,16,1,16,3,16,1850,8,16,1,16,1,16,1,16,
		1,16,1,17,1,17,1,17,1,17,3,17,1860,8,17,1,17,1,17,1,18,1,18,1,18,1,18,
		1,18,1,18,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,20,1,20,1,21,1,21,1,21,
		1,21,1,21,3,21,1884,8,21,1,21,1,21,1,21,1,21,1,21,3,21,1891,8,21,1,21,
		1,21,1,22,1,22,3,22,1897,8,22,1,23,5,23,1900,8,23,10,23,12,23,1903,9,23,
		1,24,1,24,1,24,1,24,1,24,1,24,3,24,1911,8,24,1,25,1,25,3,25,1915,8,25,
		1,25,1,25,1,26,1,26,1,26,1,26,1,26,1,26,1,26,1,26,3,26,1927,8,26,1,27,
		1,27,1,27,1,27,1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,28,
		1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,28,
		3,28,1958,8,28,1,29,1,29,1,29,5,29,1963,8,29,10,29,12,29,1966,9,29,1,30,
		1,30,1,30,5,30,1971,8,30,10,30,12,30,1974,9,30,1,31,1,31,3,31,1978,8,31,
		1,32,1,32,1,32,1,32,1,32,3,32,1985,8,32,1,33,1,33,1,33,1,33,3,33,1991,
		8,33,1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,
		1,34,1,34,3,34,2008,8,34,1,35,1,35,1,35,3,35,2013,8,35,1,36,1,36,3,36,
		2017,8,36,1,37,1,37,1,37,1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,3,38,
		2030,8,38,1,39,1,39,3,39,2034,8,39,1,40,1,40,1,40,3,40,2039,8,40,1,41,
		1,41,1,41,3,41,2044,8,41,1,42,1,42,1,42,1,42,1,42,1,42,1,42,1,42,1,42,
		1,42,3,42,2056,8,42,1,43,1,43,1,43,1,43,1,43,1,44,1,44,3,44,2065,8,44,
		1,45,1,45,1,46,1,46,1,47,1,47,1,47,1,48,1,48,1,48,1,48,3,48,2078,8,48,
		1,48,1,48,1,48,3,48,2083,8,48,1,48,1,48,1,48,1,48,1,48,1,48,1,48,1,48,
		1,48,3,48,2094,8,48,1,48,1,48,1,48,1,48,1,48,1,48,1,48,1,48,1,48,3,48,
		2105,8,48,1,48,1,48,1,48,3,48,2110,8,48,1,48,1,48,1,48,1,48,1,48,1,48,
		1,48,1,48,1,48,3,48,2121,8,48,1,48,1,48,1,48,1,48,1,48,1,48,1,48,1,48,
		1,48,3,48,2132,8,48,1,48,1,48,1,48,1,48,1,48,1,48,1,48,3,48,2141,8,48,
		1,48,1,48,1,48,1,48,1,48,1,48,1,48,1,48,3,48,2151,8,48,1,48,1,48,1,48,
		1,48,1,48,1,48,1,48,1,48,1,48,1,48,1,48,1,48,1,48,3,48,2166,8,48,1,48,
		1,48,1,48,1,48,1,48,1,48,1,48,1,48,1,48,1,48,3,48,2178,8,48,1,48,1,48,
		1,48,3,48,2183,8,48,1,49,1,49,1,49,5,49,2188,8,49,10,49,12,49,2191,9,49,
		1,50,1,50,1,50,1,50,1,50,1,50,1,50,1,50,3,50,2201,8,50,1,51,1,51,1,51,
		1,51,1,52,1,52,1,52,1,52,1,52,1,52,1,52,1,52,1,52,1,52,1,52,1,52,1,52,
		1,52,1,52,1,52,1,52,1,52,1,52,1,52,1,52,1,52,1,52,1,52,1,52,1,52,1,52,
		1,52,1,52,1,52,1,52,1,52,1,52,1,52,1,52,1,52,1,52,1,52,1,52,1,52,1,52,
		1,52,1,52,1,52,1,52,1,52,1,52,1,52,1,52,1,52,1,52,1,52,1,52,1,52,1,52,
		1,52,1,52,1,52,1,52,1,52,1,52,1,52,1,52,1,52,1,52,1,52,1,52,1,52,1,52,
		1,52,1,52,1,52,1,52,1,52,1,52,1,52,1,52,1,52,1,52,1,52,1,52,1,52,1,52,
		1,52,1,52,1,52,1,52,1,52,1,52,1,52,1,52,1,52,1,52,1,52,1,52,1,52,1,52,
		1,52,1,52,1,52,1,52,1,52,1,52,1,52,1,52,1,52,1,52,1,52,1,52,1,52,1,52,
		1,52,1,52,1,52,1,52,1,52,1,52,1,52,1,52,1,52,1,52,1,52,1,52,1,52,1,52,
		1,52,1,52,1,52,1,52,1,52,1,52,1,52,1,52,1,52,1,52,1,52,1,52,1,52,1,52,
		1,52,1,52,1,52,1,52,1,52,1,52,1,52,1,52,1,52,1,52,1,52,1,52,1,52,1,52,
		1,52,1,52,1,52,1,52,1,52,1,52,1,52,1,52,1,52,1,52,1,52,1,52,1,52,1,52,
		1,52,1,52,1,52,1,52,1,52,1,52,1,52,1,52,1,52,1,52,1,52,1,52,1,52,1,52,
		1,52,1,52,1,52,1,52,1,52,1,52,1,52,1,52,1,52,1,52,1,52,1,52,1,52,1,52,
		1,52,1,52,1,52,1,52,1,52,1,52,1,52,1,52,1,52,1,52,1,52,1,52,1,52,1,52,
		1,52,1,52,1,52,1,52,1,52,1,52,1,52,1,52,1,52,1,52,1,52,1,52,1,52,1,52,
		1,52,1,52,1,52,1,52,1,52,1,52,1,52,1,52,1,52,1,52,1,52,1,52,1,52,1,52,
		1,52,1,52,1,52,1,52,1,52,1,52,1,52,1,52,1,52,1,52,1,52,1,52,1,52,1,52,
		1,52,3,52,2459,8,52,1,53,1,53,1,53,1,53,1,53,3,53,2466,8,53,1,54,1,54,
		1,54,3,54,2471,8,54,1,55,1,55,1,55,3,55,2476,8,55,1,56,1,56,1,56,3,56,
		2481,8,56,1,57,1,57,1,57,1,57,1,57,1,57,3,57,2489,8,57,1,58,1,58,1,58,
		1,58,1,59,1,59,1,59,3,59,2498,8,59,1,60,1,60,1,60,5,60,2503,8,60,10,60,
		12,60,2506,9,60,1,61,1,61,1,61,1,61,1,61,1,61,1,61,3,61,2515,8,61,3,61,
		2517,8,61,1,62,4,62,2520,8,62,11,62,12,62,2521,1,63,1,63,1,63,1,63,3,63,
		2528,8,63,1,63,1,63,1,63,1,63,3,63,2534,8,63,3,63,2536,8,63,1,64,1,64,
		1,64,1,64,1,64,1,64,1,64,1,64,1,64,1,64,1,64,1,64,1,64,1,64,1,64,1,64,
		1,64,1,64,1,64,1,64,1,64,1,64,1,64,1,64,1,64,1,64,3,64,2564,8,64,1,65,
		1,65,1,65,1,66,1,66,1,66,5,66,2572,8,66,10,66,12,66,2575,9,66,1,67,1,67,
		1,67,1,67,1,67,1,68,1,68,1,68,5,68,2585,8,68,10,68,12,68,2588,9,68,1,69,
		1,69,1,69,1,69,1,69,1,69,1,69,1,69,1,69,3,69,2599,8,69,1,69,1,69,1,69,
		1,69,1,69,1,69,1,69,1,69,1,69,1,69,1,69,1,69,3,69,2613,8,69,1,70,1,70,
		1,70,3,70,2618,8,70,1,71,1,71,1,71,1,71,1,71,1,71,1,71,1,71,1,71,1,71,
		1,71,1,71,1,71,1,71,1,71,1,71,1,71,1,71,1,71,1,71,1,71,1,71,3,71,2642,
		8,71,1,72,1,72,1,73,1,73,3,73,2648,8,73,1,74,1,74,1,74,3,74,2653,8,74,
		1,75,1,75,1,75,1,75,1,75,3,75,2660,8,75,1,76,5,76,2663,8,76,10,76,12,76,
		2666,9,76,1,77,1,77,1,77,1,77,1,77,1,77,1,77,1,77,1,77,1,77,1,77,1,77,
		1,77,1,77,1,77,1,77,1,77,1,77,1,77,1,77,1,77,1,77,1,77,1,77,1,77,1,77,
		1,77,1,77,1,77,1,77,1,77,1,77,1,77,1,77,1,77,3,77,2703,8,77,1,78,1,78,
		3,78,2707,8,78,1,79,1,79,1,79,1,79,1,79,3,79,2714,8,79,1,80,1,80,3,80,
		2718,8,80,1,81,1,81,1,81,5,81,2723,8,81,10,81,12,81,2726,9,81,1,82,1,82,
		1,82,1,83,1,83,1,83,1,83,1,83,1,83,1,83,1,83,3,83,2739,8,83,1,84,1,84,
		1,84,5,84,2744,8,84,10,84,12,84,2747,9,84,1,85,1,85,1,86,1,86,1,86,1,86,
		1,86,1,86,3,86,2757,8,86,1,86,1,86,1,86,1,86,1,86,1,86,1,86,1,86,1,86,
		1,86,1,86,1,86,1,86,1,86,1,86,1,86,1,86,1,86,1,86,1,86,1,86,1,86,1,86,
		1,86,1,86,1,86,1,86,1,86,1,86,1,86,1,86,3,86,2790,8,86,1,87,1,87,1,87,
		1,87,1,87,1,87,1,87,1,87,3,87,2800,8,87,1,88,1,88,3,88,2804,8,88,1,89,
		1,89,1,89,1,89,1,89,3,89,2811,8,89,1,90,1,90,1,90,5,90,2816,8,90,10,90,
		12,90,2819,9,90,1,91,1,91,1,91,5,91,2824,8,91,10,91,12,91,2827,9,91,1,
		92,1,92,1,92,3,92,2832,8,92,1,93,1,93,3,93,2836,8,93,1,94,1,94,1,94,1,
		94,1,94,1,95,1,95,1,95,3,95,2846,8,95,1,95,1,95,1,96,5,96,2851,8,96,10,
		96,12,96,2854,9,96,1,97,1,97,1,97,1,97,1,97,1,97,1,97,1,97,3,97,2864,8,
		97,1,98,1,98,1,98,1,98,1,98,1,98,1,98,1,98,1,98,1,98,1,98,1,98,1,98,1,
		98,1,98,1,98,1,98,1,98,1,98,1,98,1,98,1,98,1,98,1,98,1,98,1,98,1,98,1,
		98,1,98,1,98,3,98,2896,8,98,1,98,1,98,1,98,1,98,1,98,1,98,3,98,2904,8,
		98,1,99,1,99,1,99,3,99,2909,8,99,1,100,1,100,1,100,1,100,1,100,3,100,2916,
		8,100,1,101,1,101,1,101,1,101,1,102,1,102,5,102,2924,8,102,10,102,12,102,
		2927,9,102,1,103,1,103,1,104,1,104,1,104,1,104,1,104,3,104,2936,8,104,
		1,105,1,105,1,105,1,105,1,105,1,105,1,105,1,105,1,105,1,105,1,105,1,105,
		1,105,1,105,1,105,1,105,1,105,1,105,3,105,2956,8,105,1,105,1,105,1,105,
		1,105,1,105,1,105,1,105,1,105,1,105,1,105,1,105,1,105,1,105,3,105,2971,
		8,105,1,105,1,105,1,105,1,105,1,105,1,105,1,105,1,105,1,105,1,105,1,105,
		1,105,1,105,1,105,1,105,1,105,1,105,1,105,1,105,1,105,1,105,1,105,1,105,
		3,105,2996,8,105,1,106,1,106,1,106,3,106,3001,8,106,1,107,1,107,1,107,
		1,107,1,107,3,107,3008,8,107,1,108,1,108,1,108,5,108,3013,8,108,10,108,
		12,108,3016,9,108,1,109,1,109,1,110,1,110,1,110,1,110,1,110,1,110,3,110,
		3026,8,110,1,111,1,111,1,111,3,111,3031,8,111,1,112,1,112,1,112,5,112,
		3036,8,112,10,112,12,112,3039,9,112,1,113,1,113,1,113,1,113,1,113,1,113,
		1,113,1,113,3,113,3049,8,113,1,114,1,114,1,114,1,114,1,114,1,114,3,114,
		3057,8,114,1,115,1,115,1,115,1,115,1,115,1,115,1,115,1,115,1,115,3,115,
		3068,8,115,1,116,1,116,1,116,1,116,1,117,1,117,1,117,1,117,1,118,1,118,
		1,118,1,118,1,118,1,118,3,118,3084,8,118,1,119,1,119,1,119,1,119,1,119,
		1,119,3,119,3092,8,119,1,120,1,120,3,120,3096,8,120,1,121,1,121,1,121,
		1,121,1,121,1,121,1,121,1,122,1,122,1,122,5,122,3108,8,122,10,122,12,122,
		3111,9,122,1,123,1,123,1,123,1,123,1,123,1,123,1,123,1,123,1,123,1,123,
		1,123,1,123,1,123,1,123,3,123,3127,8,123,1,124,1,124,1,124,3,124,3132,
		8,124,1,125,1,125,1,125,1,125,1,125,3,125,3139,8,125,1,126,1,126,1,126,
		1,126,1,126,1,126,1,126,3,126,3148,8,126,1,126,3,126,3151,8,126,1,127,
		1,127,1,127,3,127,3156,8,127,1,128,1,128,1,128,1,128,1,128,3,128,3163,
		8,128,1,129,1,129,1,129,1,129,1,130,1,130,1,130,1,130,1,130,3,130,3174,
		8,130,1,130,1,130,1,130,1,130,1,130,1,130,1,130,1,131,1,131,1,131,1,131,
		3,131,3187,8,131,1,131,1,131,1,131,1,131,1,131,1,132,1,132,1,132,1,132,
		1,132,1,132,3,132,3200,8,132,1,132,1,132,1,132,1,132,1,132,1,133,1,133,
		1,133,1,133,1,133,1,133,1,133,1,134,1,134,1,134,1,134,3,134,3218,8,134,
		1,134,3,134,3221,8,134,1,135,1,135,1,135,1,135,1,135,1,135,1,135,3,135,
		3230,8,135,1,135,1,135,1,135,1,135,1,135,1,136,1,136,1,136,1,136,1,136,
		1,136,1,137,1,137,3,137,3245,8,137,1,138,1,138,1,138,1,138,1,138,1,138,
		1,138,1,139,1,139,1,139,1,139,1,139,1,139,3,139,3260,8,139,1,139,1,139,
		1,139,1,140,1,140,1,140,1,140,3,140,3269,8,140,1,140,1,140,1,140,1,141,
		1,141,3,141,3276,8,141,1,142,1,142,1,142,1,142,1,142,3,142,3283,8,142,
		1,143,4,143,3286,8,143,11,143,12,143,3287,1,144,1,144,1,144,1,144,1,144,
		1,144,1,144,1,144,1,144,1,144,1,144,1,144,1,144,1,144,1,144,1,144,1,144,
		1,144,1,144,1,144,1,144,1,144,1,144,1,144,1,144,1,144,1,144,1,144,3,144,
		3318,8,144,3,144,3320,8,144,1,145,1,145,3,145,3324,8,145,1,146,1,146,1,
		146,1,146,1,146,1,146,3,146,3332,8,146,1,147,1,147,1,147,5,147,3337,8,
		147,10,147,12,147,3340,9,147,1,148,1,148,1,148,1,148,1,148,1,148,1,148,
		1,148,1,148,1,148,1,148,3,148,3353,8,148,1,149,1,149,3,149,3357,8,149,
		1,150,1,150,3,150,3361,8,150,1,151,1,151,1,151,3,151,3366,8,151,1,152,
		1,152,1,152,1,152,3,152,3372,8,152,1,153,1,153,3,153,3376,8,153,1,154,
		1,154,3,154,3380,8,154,1,155,1,155,1,155,1,155,1,155,1,155,1,155,1,155,
		1,156,1,156,1,156,3,156,3393,8,156,1,157,1,157,1,157,1,157,3,157,3399,
		8,157,1,157,1,157,1,158,1,158,1,158,1,158,1,158,3,158,3408,8,158,1,158,
		1,158,1,158,1,158,1,159,5,159,3415,8,159,10,159,12,159,3418,9,159,1,160,
		1,160,1,160,1,160,1,160,1,160,1,160,3,160,3427,8,160,1,161,1,161,1,161,
		1,161,1,161,1,161,1,162,5,162,3436,8,162,10,162,12,162,3439,9,162,1,163,
		1,163,1,163,1,164,1,164,1,164,1,164,1,164,1,164,1,164,1,164,1,164,1,164,
		1,164,1,164,1,164,1,164,1,164,1,164,1,164,1,164,1,164,1,164,1,164,1,164,
		1,164,1,164,1,164,1,164,1,164,1,164,1,164,1,164,1,164,1,164,1,164,1,164,
		1,164,1,164,1,164,1,164,1,164,1,164,1,164,1,164,1,164,1,164,1,164,1,164,
		1,164,1,164,1,164,1,164,1,164,1,164,1,164,1,164,1,164,1,164,1,164,1,164,
		1,164,1,164,1,164,1,164,1,164,1,164,1,164,1,164,1,164,1,164,1,164,1,164,
		1,164,1,164,1,164,1,164,1,164,1,164,1,164,1,164,1,164,1,164,1,164,1,164,
		1,164,1,164,1,164,1,164,1,164,1,164,1,164,1,164,1,164,1,164,1,164,1,164,
		1,164,1,164,1,164,1,164,1,164,1,164,1,164,1,164,1,164,1,164,3,164,3548,
		8,164,1,165,1,165,1,165,1,165,1,165,1,165,1,165,1,165,1,166,1,166,1,166,
		1,166,1,166,1,166,1,166,1,166,3,166,3566,8,166,1,167,4,167,3569,8,167,
		11,167,12,167,3570,1,168,1,168,3,168,3575,8,168,1,169,1,169,1,169,1,169,
		1,169,1,169,1,169,1,169,1,169,1,169,1,169,1,169,1,169,1,169,1,169,3,169,
		3592,8,169,1,170,1,170,1,170,1,170,1,170,1,170,3,170,3600,8,170,1,171,
		1,171,1,171,5,171,3605,8,171,10,171,12,171,3608,9,171,1,172,1,172,1,172,
		1,172,1,172,1,173,1,173,1,173,5,173,3618,8,173,10,173,12,173,3621,9,173,
		1,174,1,174,1,174,1,174,1,174,1,174,1,174,3,174,3630,8,174,1,175,1,175,
		1,175,1,176,1,176,1,177,1,177,1,178,1,178,1,178,1,178,1,178,1,178,1,178,
		1,178,1,178,1,178,1,178,1,178,1,178,1,178,1,178,1,178,1,178,1,178,1,178,
		1,178,1,178,1,178,1,178,1,178,1,178,3,178,3664,8,178,1,179,1,179,1,179,
		3,179,3669,8,179,1,180,1,180,1,180,3,180,3674,8,180,1,181,1,181,3,181,
		3678,8,181,1,182,1,182,1,182,1,182,1,182,1,182,3,182,3686,8,182,3,182,
		3688,8,182,1,183,1,183,1,183,1,183,1,183,1,183,1,183,1,183,1,183,1,183,
		1,183,1,183,1,183,1,183,1,183,1,183,1,183,1,183,1,183,1,183,1,183,1,183,
		1,183,1,183,1,183,1,183,1,183,1,183,1,183,1,183,1,183,1,183,1,183,1,183,
		1,183,1,183,1,183,1,183,1,183,1,183,1,183,1,183,1,183,1,183,1,183,1,183,
		1,183,1,183,1,183,1,183,1,183,1,183,1,183,1,183,1,183,1,183,3,183,3746,
		8,183,1,184,1,184,1,184,1,184,1,184,1,184,1,184,1,184,1,184,1,184,1,184,
		1,184,1,185,1,185,1,185,3,185,3763,8,185,1,186,1,186,1,186,1,186,1,186,
		1,186,3,186,3771,8,186,1,187,1,187,1,187,1,187,1,187,1,187,1,187,1,187,
		1,187,1,187,1,187,1,187,1,187,1,187,1,187,1,187,1,187,1,187,1,187,1,187,
		1,187,3,187,3794,8,187,1,188,1,188,3,188,3798,8,188,1,189,1,189,1,189,
		1,189,1,189,1,189,1,189,1,189,1,189,1,189,1,189,1,189,1,189,1,189,1,189,
		1,189,1,189,1,189,3,189,3818,8,189,1,190,1,190,1,190,1,190,1,190,1,190,
		1,190,1,190,1,190,1,191,1,191,1,191,1,191,1,191,1,191,1,191,1,191,1,191,
		1,191,1,191,1,192,1,192,1,192,1,192,1,192,1,192,1,192,1,192,1,192,1,193,
		1,193,1,193,1,193,1,193,1,193,3,193,3855,8,193,1,194,1,194,1,194,1,194,
		1,194,1,194,1,194,3,194,3864,8,194,1,195,1,195,1,195,3,195,3869,8,195,
		1,196,1,196,1,196,3,196,3874,8,196,1,197,1,197,1,197,3,197,3879,8,197,
		1,198,1,198,1,198,3,198,3884,8,198,1,199,1,199,1,200,1,200,1,200,1,200,
		1,200,1,200,1,200,1,200,1,200,1,201,1,201,1,202,1,202,1,202,1,202,1,202,
		1,202,1,202,1,202,1,202,1,202,1,202,1,202,1,202,1,202,1,202,1,202,1,202,
		1,202,1,202,1,202,1,202,1,202,1,202,1,202,1,202,1,202,1,202,1,202,1,202,
		1,202,1,202,1,202,1,202,1,202,1,202,1,202,1,202,1,202,3,202,3937,8,202,
		1,203,1,203,1,203,1,203,3,203,3943,8,203,1,204,1,204,1,204,5,204,3948,
		8,204,10,204,12,204,3951,9,204,1,205,1,205,1,205,1,205,1,205,1,205,1,205,
		3,205,3960,8,205,1,206,1,206,1,206,3,206,3965,8,206,1,207,4,207,3968,8,
		207,11,207,12,207,3969,1,208,1,208,1,208,1,208,1,208,1,209,1,209,1,210,
		1,210,1,211,1,211,1,212,1,212,1,212,1,212,1,212,3,212,3988,8,212,1,213,
		1,213,3,213,3992,8,213,1,214,1,214,1,215,1,215,1,215,1,215,1,215,1,215,
		3,215,4002,8,215,1,216,1,216,1,217,1,217,3,217,4008,8,217,1,217,1,217,
		5,217,4012,8,217,10,217,12,217,4015,9,217,1,218,1,218,1,218,1,218,3,218,
		4021,8,218,1,219,1,219,1,219,3,219,4026,8,219,1,220,5,220,4029,8,220,10,
		220,12,220,4032,9,220,1,221,1,221,1,221,1,221,1,221,1,221,1,221,1,221,
		1,221,1,221,1,221,3,221,4045,8,221,1,222,1,222,1,222,1,222,1,222,1,222,
		1,222,1,222,1,222,1,222,1,222,1,222,1,222,1,222,1,222,1,222,1,222,1,222,
		1,222,1,222,1,222,1,222,1,222,1,222,1,222,1,222,3,222,4073,8,222,1,223,
		1,223,1,223,5,223,4078,8,223,10,223,12,223,4081,9,223,1,224,1,224,1,224,
		1,224,1,224,1,224,1,225,1,225,1,225,5,225,4092,8,225,10,225,12,225,4095,
		9,225,1,226,1,226,1,226,1,226,1,226,1,226,1,227,1,227,1,227,1,227,1,227,
		1,227,3,227,4109,8,227,1,228,1,228,1,228,1,228,1,228,1,228,1,228,1,228,
		1,228,1,229,1,229,1,229,1,229,1,229,1,229,1,229,1,229,1,229,1,229,1,229,
		1,229,1,229,1,229,1,229,1,229,1,229,1,229,1,229,1,229,1,229,1,229,1,229,
		1,229,1,229,1,229,1,229,1,229,1,229,1,229,1,229,1,229,1,229,1,229,1,229,
		1,229,1,229,1,229,1,229,1,229,1,229,1,229,1,229,1,229,1,229,1,229,1,229,
		1,229,1,229,1,229,1,229,1,229,1,229,1,229,1,229,1,229,1,229,1,229,1,229,
		1,229,1,229,1,229,1,229,1,229,1,229,1,229,1,229,1,229,1,229,1,229,1,229,
		1,229,1,229,1,229,1,229,1,229,1,229,1,229,1,229,1,229,1,229,1,229,1,229,
		1,229,1,229,1,229,1,229,1,229,1,229,1,229,1,229,1,229,1,229,1,229,1,229,
		1,229,1,229,1,229,1,229,1,229,1,229,1,229,1,229,1,229,1,229,1,229,3,229,
		4226,8,229,1,230,1,230,1,230,1,230,1,231,1,231,1,231,5,231,4235,8,231,
		10,231,12,231,4238,9,231,1,232,1,232,1,232,3,232,4243,8,232,1,233,1,233,
		1,233,1,233,1,233,1,233,3,233,4251,8,233,1,234,1,234,1,234,1,234,1,235,
		1,235,1,235,5,235,4260,8,235,10,235,12,235,4263,9,235,1,236,1,236,1,236,
		1,236,1,237,1,237,3,237,4271,8,237,1,238,1,238,1,238,5,238,4276,8,238,
		10,238,12,238,4279,9,238,1,239,1,239,1,239,1,239,1,239,1,239,1,239,1,239,
		1,239,1,239,1,239,1,239,1,239,1,239,1,239,1,239,1,239,1,239,1,239,1,239,
		1,239,1,239,1,239,1,239,1,239,1,239,1,239,1,239,1,239,1,239,1,239,1,239,
		1,239,1,239,1,239,1,239,1,239,3,239,4318,8,239,1,240,1,240,1,240,1,240,
		3,240,4324,8,240,1,241,1,241,1,241,1,241,1,241,1,241,1,241,1,241,1,241,
		1,241,1,241,1,241,1,241,1,241,1,242,1,242,1,242,5,242,4343,8,242,10,242,
		12,242,4346,9,242,1,243,1,243,1,243,1,243,1,243,1,243,1,243,1,243,1,243,
		1,243,1,243,1,243,1,243,1,243,1,243,1,243,1,243,1,243,1,243,1,243,1,243,
		1,243,1,243,1,243,1,243,3,243,4373,8,243,1,244,1,244,3,244,4377,8,244,
		1,245,1,245,1,245,3,245,4382,8,245,1,246,1,246,1,246,1,246,1,246,1,246,
		1,246,3,246,4391,8,246,1,247,1,247,3,247,4395,8,247,1,248,1,248,1,248,
		1,248,1,248,1,248,1,248,1,249,1,249,1,249,1,249,1,249,1,249,1,249,1,249,
		1,249,1,249,1,249,1,249,1,249,1,249,1,249,1,249,1,249,1,249,3,249,4422,
		8,249,1,250,1,250,1,250,5,250,4427,8,250,10,250,12,250,4430,9,250,1,251,
		1,251,1,251,1,251,1,251,1,251,1,251,1,251,1,251,1,251,1,251,1,251,3,251,
		4444,8,251,1,252,1,252,1,252,1,252,1,252,1,252,1,252,1,252,1,252,1,252,
		1,252,1,252,1,252,1,252,1,252,1,252,1,252,1,252,3,252,4464,8,252,1,253,
		1,253,1,253,1,253,1,253,1,253,1,253,1,253,1,253,1,253,1,253,1,253,1,253,
		1,253,1,253,1,253,1,253,1,253,3,253,4484,8,253,1,254,1,254,1,254,1,254,
		1,254,1,254,1,255,1,255,1,255,1,255,1,255,1,255,1,255,1,256,1,256,1,256,
		1,256,1,256,1,256,1,256,1,256,1,256,1,256,1,256,1,256,1,256,1,256,1,256,
		1,256,1,256,1,256,1,256,1,256,1,256,1,256,1,256,1,256,1,256,1,256,1,256,
		1,256,1,256,1,256,1,256,1,256,1,256,1,256,1,256,1,256,1,256,1,256,1,256,
		1,256,1,256,1,256,1,256,1,256,1,256,1,256,1,256,1,256,1,256,1,256,1,256,
		1,256,1,256,1,256,1,256,1,256,1,256,1,256,1,256,1,256,1,256,1,256,1,256,
		1,256,1,256,1,256,1,256,1,256,1,256,1,256,1,256,1,256,1,256,1,256,1,256,
		1,256,1,256,1,256,3,256,4577,8,256,1,257,1,257,1,257,1,257,1,257,1,257,
		1,257,1,257,1,257,1,257,1,257,1,257,1,257,1,257,1,257,1,257,1,257,1,257,
		1,257,1,257,1,257,1,257,1,257,3,257,4602,8,257,1,258,1,258,1,258,1,258,
		1,258,3,258,4609,8,258,1,259,1,259,1,259,1,259,1,259,1,259,1,259,1,259,
		1,259,1,259,1,259,1,259,1,259,1,259,3,259,4625,8,259,1,260,1,260,1,261,
		1,261,1,261,5,261,4632,8,261,10,261,12,261,4635,9,261,1,262,1,262,3,262,
		4639,8,262,1,263,1,263,4,263,4643,8,263,11,263,12,263,4644,1,264,1,264,
		1,264,5,264,4650,8,264,10,264,12,264,4653,9,264,1,265,1,265,1,265,1,265,
		1,265,1,265,1,266,1,266,1,266,1,266,1,266,3,266,4666,8,266,1,267,1,267,
		1,267,1,267,1,267,1,267,1,267,1,267,1,267,1,267,1,267,1,267,1,267,1,267,
		1,267,1,267,1,267,1,267,1,267,1,267,1,267,1,267,1,267,1,267,1,267,1,267,
		1,267,1,267,1,267,1,267,1,267,1,267,1,267,1,267,1,267,1,267,1,267,1,267,
		1,267,1,267,1,267,1,267,1,267,1,267,1,267,1,267,1,267,1,267,1,267,1,267,
		1,267,1,267,1,267,1,267,1,267,1,267,1,267,1,267,1,267,1,267,1,267,1,267,
		1,267,1,267,1,267,1,267,1,267,1,267,1,267,1,267,1,267,1,267,1,267,1,267,
		1,267,1,267,1,267,1,267,1,267,1,267,1,267,1,267,1,267,1,267,1,267,1,267,
		1,267,1,267,1,267,1,267,1,267,1,267,1,267,1,267,1,267,1,267,1,267,1,267,
		1,267,1,267,1,267,1,267,1,267,1,267,1,267,1,267,1,267,1,267,1,267,1,267,
		1,267,1,267,1,267,1,267,1,267,1,267,1,267,1,267,1,267,1,267,1,267,1,267,
		1,267,1,267,1,267,1,267,1,267,1,267,1,267,1,267,1,267,1,267,1,267,1,267,
		1,267,1,267,1,267,1,267,1,267,1,267,1,267,1,267,1,267,1,267,1,267,1,267,
		1,267,3,267,4815,8,267,1,268,1,268,3,268,4819,8,268,1,269,1,269,1,269,
		1,269,1,269,1,269,1,269,1,269,1,269,1,269,1,269,1,269,1,269,1,269,1,269,
		1,269,1,269,1,269,1,269,1,269,1,269,1,269,1,269,1,269,1,269,1,269,1,269,
		1,269,1,269,1,269,1,269,1,269,1,269,1,269,1,269,1,269,1,269,1,269,1,269,
		1,269,1,269,1,269,1,269,1,269,1,269,1,269,1,269,1,269,1,269,1,269,1,269,
		1,269,1,269,1,269,1,269,1,269,1,269,1,269,1,269,1,269,1,269,1,269,1,269,
		1,269,1,269,1,269,1,269,1,269,1,269,1,269,1,269,1,269,1,269,1,269,1,269,
		1,269,1,269,1,269,1,269,1,269,1,269,1,269,1,269,1,269,1,269,1,269,1,269,
		1,269,1,269,1,269,1,269,3,269,4912,8,269,1,270,1,270,1,270,3,270,4917,
		8,270,1,271,1,271,3,271,4921,8,271,1,272,1,272,1,272,1,272,3,272,4927,
		8,272,1,273,1,273,1,273,1,273,1,273,1,273,1,273,1,273,1,273,1,273,1,273,
		1,273,1,273,1,273,1,273,1,273,1,273,1,273,1,273,1,273,1,273,1,273,1,273,
		1,273,1,273,1,273,1,273,1,273,1,273,1,273,1,273,1,273,1,273,1,273,1,273,
		1,273,1,273,1,273,1,273,1,273,1,273,1,273,1,273,1,273,1,273,1,273,1,273,
		1,273,1,273,1,273,1,273,1,273,1,273,1,273,1,273,1,273,1,273,1,273,1,273,
		1,273,1,273,1,273,1,273,1,273,1,273,1,273,3,273,4995,8,273,1,274,1,274,
		1,275,1,275,3,275,5001,8,275,1,276,1,276,1,276,1,276,1,276,1,276,1,276,
		1,276,1,277,1,277,1,277,1,277,1,277,1,277,1,277,1,277,1,277,1,277,1,277,
		1,277,1,277,1,277,1,277,1,277,1,277,1,277,1,277,3,277,5030,8,277,1,278,
		1,278,1,278,1,278,1,278,1,278,1,278,1,278,1,278,1,278,1,278,1,278,1,278,
		1,278,1,278,3,278,5047,8,278,1,279,1,279,1,279,5,279,5052,8,279,10,279,
		12,279,5055,9,279,1,280,1,280,1,280,1,280,1,280,1,280,1,280,1,280,1,280,
		3,280,5066,8,280,1,281,1,281,1,281,1,281,1,281,1,281,1,281,1,281,1,281,
		1,281,1,281,1,281,1,281,1,281,1,281,1,281,1,281,1,281,1,281,1,281,1,281,
		1,281,1,281,1,281,1,281,1,281,1,281,1,281,1,281,1,281,1,281,1,281,1,281,
		1,281,1,281,1,281,1,281,1,281,1,281,1,281,1,281,1,281,1,281,1,281,1,281,
		1,281,1,281,1,281,1,281,1,281,1,281,1,281,1,281,1,281,1,281,1,281,1,281,
		1,281,3,281,5126,8,281,1,282,1,282,1,282,5,282,5131,8,282,10,282,12,282,
		5134,9,282,1,283,1,283,1,283,3,283,5139,8,283,1,284,1,284,1,284,1,284,
		3,284,5145,8,284,1,285,1,285,1,285,1,285,1,285,1,285,1,285,1,286,1,286,
		1,286,1,286,1,286,1,286,1,286,1,286,1,286,1,286,1,286,1,286,1,286,1,286,
		1,286,1,286,1,286,3,286,5171,8,286,1,287,1,287,1,287,1,287,3,287,5177,
		8,287,1,288,1,288,1,288,1,288,3,288,5183,8,288,1,289,1,289,1,289,1,289,
		1,289,1,289,1,290,5,290,5192,8,290,10,290,12,290,5195,9,290,1,291,1,291,
		1,291,1,291,1,291,1,291,1,291,1,291,1,291,3,291,5206,8,291,1,292,1,292,
		1,292,1,292,1,292,1,292,1,292,1,292,1,292,1,292,1,292,1,292,1,292,1,292,
		1,292,1,292,1,292,1,292,1,292,1,292,1,292,1,292,1,292,1,292,1,292,1,292,
		1,292,3,292,5235,8,292,1,293,1,293,1,294,1,294,1,294,1,294,1,294,1,294,
		1,294,1,294,1,294,1,294,1,294,1,294,1,294,1,294,1,294,1,294,1,294,1,294,
		1,294,1,294,1,294,1,294,1,294,1,294,1,294,1,294,1,294,1,294,1,294,1,294,
		1,294,1,294,1,294,1,294,1,294,3,294,5274,8,294,1,295,1,295,3,295,5278,
		8,295,1,296,1,296,3,296,5282,8,296,1,297,1,297,3,297,5286,8,297,1,298,
		1,298,1,298,3,298,5291,8,298,1,299,1,299,1,299,5,299,5296,8,299,10,299,
		12,299,5299,9,299,1,300,1,300,1,300,1,300,1,300,1,300,1,300,1,300,1,300,
		1,300,1,300,3,300,5312,8,300,1,301,1,301,1,301,1,301,1,301,1,301,1,301,
		1,301,1,301,1,301,1,301,3,301,5325,8,301,1,302,1,302,1,302,1,302,1,302,
		1,302,3,302,5333,8,302,1,303,1,303,1,303,5,303,5338,8,303,10,303,12,303,
		5341,9,303,1,304,1,304,1,304,3,304,5346,8,304,1,305,1,305,3,305,5350,8,
		305,1,306,1,306,1,306,3,306,5355,8,306,1,307,1,307,1,307,1,307,1,307,3,
		307,5362,8,307,1,308,1,308,1,308,1,308,1,308,1,308,1,308,1,308,1,308,1,
		308,1,308,1,308,3,308,5376,8,308,3,308,5378,8,308,1,308,1,308,1,309,1,
		309,1,309,3,309,5385,8,309,1,310,1,310,3,310,5389,8,310,1,310,1,310,1,
		311,1,311,1,311,5,311,5396,8,311,10,311,12,311,5399,9,311,1,312,1,312,
		1,312,5,312,5404,8,312,10,312,12,312,5407,9,312,1,313,1,313,1,313,1,313,
		1,313,1,313,3,313,5415,8,313,3,313,5417,8,313,1,314,1,314,3,314,5421,8,
		314,1,314,1,314,1,315,1,315,1,315,5,315,5428,8,315,10,315,12,315,5431,
		9,315,1,316,1,316,3,316,5435,8,316,1,316,1,316,1,316,1,316,3,316,5441,
		8,316,1,316,1,316,1,316,3,316,5446,8,316,1,317,1,317,3,317,5450,8,317,
		1,317,1,317,1,317,3,317,5455,8,317,1,318,1,318,1,318,1,318,3,318,5461,
		8,318,1,319,1,319,1,320,1,320,3,320,5467,8,320,1,320,1,320,1,320,1,320,
		3,320,5473,8,320,1,320,1,320,1,320,1,320,3,320,5479,8,320,1,321,1,321,
		1,321,3,321,5484,8,321,1,322,1,322,1,323,1,323,1,323,1,323,1,323,1,323,
		1,323,1,323,1,323,1,323,1,323,3,323,5499,8,323,1,323,1,323,1,324,1,324,
		1,324,5,324,5506,8,324,10,324,12,324,5509,9,324,1,325,1,325,1,325,1,326,
		1,326,1,326,5,326,5517,8,326,10,326,12,326,5520,9,326,1,327,4,327,5523,
		8,327,11,327,12,327,5524,1,327,1,327,1,328,1,328,1,328,1,328,1,328,1,328,
		1,328,1,328,1,328,1,328,1,328,1,328,1,328,1,328,1,328,1,328,1,328,1,328,
		1,328,1,328,1,328,1,328,1,328,1,328,1,328,1,328,1,328,1,328,1,328,1,328,
		1,328,1,328,1,328,1,328,1,328,3,328,5564,8,328,1,329,1,329,1,329,1,329,
		1,329,1,329,1,329,1,329,3,329,5574,8,329,1,330,1,330,1,330,1,330,1,330,
		3,330,5581,8,330,1,331,1,331,1,331,1,331,1,331,1,331,1,331,5,331,5590,
		8,331,10,331,12,331,5593,9,331,1,332,1,332,1,332,3,332,5598,8,332,1,333,
		1,333,1,333,1,334,1,334,1,334,5,334,5606,8,334,10,334,12,334,5609,9,334,
		1,335,1,335,1,335,1,335,1,335,1,335,1,336,4,336,5618,8,336,11,336,12,336,
		5619,1,337,1,337,3,337,5624,8,337,1,338,1,338,1,338,1,338,1,338,1,338,
		1,338,1,338,1,338,1,338,1,338,1,338,1,338,1,338,1,338,1,338,1,338,1,338,
		1,338,1,338,1,338,1,338,1,338,1,338,1,338,1,338,1,338,1,338,1,338,1,338,
		1,338,1,338,1,338,1,338,1,338,1,338,3,338,5662,8,338,1,339,1,339,1,339,
		1,339,1,339,1,339,1,339,1,339,1,339,1,339,1,339,1,339,3,339,5676,8,339,
		1,340,1,340,1,340,1,340,1,340,1,340,1,340,1,340,1,340,1,340,1,340,1,340,
		3,340,5690,8,340,1,341,1,341,1,341,1,341,1,341,1,341,1,341,1,341,1,341,
		1,341,1,341,1,341,1,341,1,341,1,341,1,341,1,341,1,341,1,341,1,341,1,341,
		1,341,3,341,5714,8,341,1,342,1,342,1,342,5,342,5719,8,342,10,342,12,342,
		5722,9,342,1,342,1,342,1,343,1,343,1,343,5,343,5729,8,343,10,343,12,343,
		5732,9,343,1,344,1,344,1,344,1,345,1,345,1,345,1,346,4,346,5741,8,346,
		11,346,12,346,5742,1,347,1,347,1,347,3,347,5748,8,347,1,348,1,348,1,348,
		1,348,1,348,1,348,1,348,1,348,1,348,1,348,1,348,1,348,1,348,1,348,1,348,
		1,348,1,348,1,348,1,348,1,348,1,348,1,348,1,348,1,348,1,348,1,348,1,348,
		1,348,1,348,1,348,1,348,1,348,1,348,1,348,3,348,5784,8,348,1,349,1,349,
		1,349,1,349,1,349,3,349,5791,8,349,1,350,1,350,1,350,1,350,1,350,1,350,
		1,350,1,350,1,350,1,350,1,351,1,351,1,351,3,351,5806,8,351,1,352,1,352,
		1,352,1,352,1,352,1,352,1,352,1,352,1,352,1,352,1,352,1,353,1,353,1,353,
		1,353,1,353,1,353,1,353,1,353,1,353,1,353,1,353,1,353,1,353,1,353,1,353,
		1,353,1,353,1,353,1,353,1,353,1,353,1,353,1,353,1,353,1,353,1,353,1,353,
		1,353,1,353,1,353,1,353,1,353,1,353,1,353,3,353,5853,8,353,1,354,1,354,
		1,354,1,354,1,354,1,354,1,354,1,354,1,354,1,355,1,355,1,355,1,355,1,355,
		1,355,1,355,1,355,1,355,1,355,1,355,1,355,1,355,1,355,1,355,1,355,1,355,
		1,355,1,355,1,355,1,355,1,355,1,355,1,355,1,355,1,355,3,355,5890,8,355,
		1,356,1,356,1,357,1,357,1,358,1,358,1,358,5,358,5899,8,358,10,358,12,358,
		5902,9,358,1,359,1,359,1,360,1,360,1,360,1,360,1,360,1,360,1,360,1,360,
		1,360,1,360,1,360,1,360,3,360,5918,8,360,1,361,1,361,1,361,1,361,1,361,
		1,361,1,361,1,361,1,361,1,361,1,361,1,361,1,361,1,361,1,361,1,361,1,361,
		1,361,1,361,1,361,1,361,1,361,1,361,1,361,1,361,1,361,1,361,1,361,1,361,
		1,361,1,361,1,361,1,361,1,361,1,361,1,361,1,361,1,361,1,361,1,361,1,361,
		1,361,1,361,1,361,1,361,1,361,1,361,1,361,1,361,1,361,1,361,1,361,1,361,
		1,361,1,361,1,361,1,361,1,361,1,361,1,361,1,361,1,361,1,361,1,361,1,361,
		1,361,1,361,1,361,1,361,1,361,1,361,1,361,1,361,1,361,1,361,1,361,1,361,
		1,361,1,361,1,361,1,361,1,361,1,361,1,361,1,361,1,361,1,361,1,361,1,361,
		1,361,1,361,1,361,1,361,1,361,1,361,1,361,1,361,1,361,1,361,1,361,1,361,
		1,361,1,361,1,361,1,361,1,361,1,361,1,361,1,361,1,361,1,361,1,361,1,361,
		1,361,1,361,1,361,1,361,1,361,1,361,1,361,1,361,1,361,1,361,1,361,1,361,
		1,361,1,361,1,361,1,361,1,361,1,361,1,361,1,361,1,361,1,361,1,361,1,361,
		1,361,1,361,1,361,1,361,1,361,1,361,1,361,1,361,1,361,1,361,1,361,1,361,
		1,361,1,361,1,361,1,361,1,361,1,361,1,361,1,361,1,361,1,361,1,361,1,361,
		1,361,1,361,1,361,1,361,1,361,1,361,1,361,1,361,1,361,1,361,1,361,1,361,
		1,361,1,361,1,361,1,361,1,361,1,361,1,361,1,361,1,361,1,361,1,361,1,361,
		1,361,1,361,1,361,1,361,1,361,1,361,1,361,1,361,1,361,1,361,1,361,1,361,
		1,361,1,361,1,361,1,361,1,361,1,361,1,361,1,361,1,361,1,361,1,361,1,361,
		1,361,1,361,1,361,1,361,1,361,1,361,1,361,1,361,1,361,1,361,1,361,1,361,
		1,361,1,361,1,361,1,361,1,361,1,361,1,361,1,361,1,361,1,361,1,361,1,361,
		1,361,1,361,1,361,1,361,1,361,1,361,1,361,1,361,1,361,1,361,1,361,1,361,
		1,361,1,361,1,361,1,361,1,361,1,361,1,361,1,361,1,361,1,361,1,361,1,361,
		1,361,1,361,1,361,1,361,1,361,1,361,1,361,1,361,1,361,1,361,1,361,1,361,
		1,361,1,361,1,361,1,361,1,361,1,361,1,361,1,361,1,361,1,361,1,361,1,361,
		1,361,1,361,1,361,1,361,1,361,1,361,1,361,1,361,1,361,1,361,1,361,1,361,
		1,361,1,361,1,361,1,361,1,361,1,361,1,361,1,361,1,361,1,361,1,361,1,361,
		1,361,1,361,1,361,1,361,1,361,1,361,1,361,1,361,1,361,1,361,1,361,1,361,
		1,361,1,361,1,361,1,361,1,361,1,361,1,361,1,361,1,361,1,361,1,361,1,361,
		1,361,1,361,1,361,1,361,1,361,1,361,1,361,1,361,1,361,1,361,1,361,1,361,
		1,361,1,361,1,361,1,361,1,361,1,361,1,361,1,361,1,361,1,361,1,361,1,361,
		1,361,1,361,1,361,1,361,1,361,1,361,1,361,1,361,1,361,1,361,1,361,1,361,
		1,361,1,361,1,361,1,361,1,361,1,361,1,361,1,361,1,361,1,361,1,361,1,361,
		1,361,1,361,1,361,1,361,1,361,1,361,1,361,1,361,1,361,1,361,1,361,1,361,
		1,361,1,361,1,361,1,361,1,361,1,361,1,361,1,361,1,361,1,361,1,361,1,361,
		1,361,1,361,1,361,1,361,1,361,1,361,1,361,1,361,1,361,1,361,1,361,1,361,
		1,361,1,361,1,361,1,361,1,361,1,361,1,361,1,361,1,361,1,361,1,361,1,361,
		1,361,1,361,1,361,1,361,1,361,1,361,1,361,1,361,1,361,1,361,1,361,1,361,
		1,361,1,361,1,361,1,361,1,361,1,361,1,361,1,361,1,361,1,361,1,361,1,361,
		1,361,1,361,1,361,1,361,1,361,1,361,1,361,1,361,1,361,1,361,1,361,1,361,
		1,361,1,361,1,361,1,361,1,361,1,361,1,361,3,361,6388,8,361,1,362,1,362,
		3,362,6392,8,362,1,363,1,363,1,363,3,363,6397,8,363,1,364,1,364,1,364,
		1,364,1,364,1,364,1,364,1,364,1,364,1,364,1,364,1,364,1,364,1,364,1,364,
		1,364,1,364,1,364,1,364,1,364,1,364,1,364,1,364,1,364,1,364,1,364,1,364,
		1,364,1,364,1,364,1,364,1,364,1,364,1,364,1,364,1,364,1,364,1,364,1,364,
		1,364,1,364,1,364,1,364,1,364,1,364,1,364,1,364,1,364,1,364,1,364,1,364,
		1,364,1,364,1,364,1,364,1,364,1,364,3,364,6456,8,364,1,365,1,365,3,365,
		6460,8,365,1,366,1,366,1,366,1,366,1,366,1,366,1,366,1,366,1,366,1,366,
		1,366,1,366,1,366,1,366,1,366,1,366,1,366,1,366,1,366,1,366,1,366,1,366,
		1,366,1,366,1,366,1,366,1,366,1,366,1,366,1,366,1,366,1,366,1,366,1,366,
		1,366,1,366,1,366,1,366,1,366,1,366,1,366,1,366,1,366,1,366,1,366,1,366,
		1,366,1,366,1,366,1,366,1,366,1,366,1,366,1,366,1,366,1,366,1,366,1,366,
		1,366,1,366,1,366,1,366,1,366,1,366,1,366,1,366,1,366,1,366,1,366,1,366,
		1,366,1,366,1,366,1,366,1,366,1,366,1,366,1,366,1,366,1,366,1,366,1,366,
		1,366,1,366,1,366,1,366,1,366,1,366,1,366,1,366,1,366,1,366,1,366,1,366,
		1,366,1,366,1,366,1,366,1,366,1,366,1,366,1,366,1,366,1,366,1,366,1,366,
		1,366,1,366,1,366,1,366,1,366,1,366,1,366,1,366,1,366,1,366,1,366,1,366,
		1,366,1,366,1,366,1,366,1,366,1,366,1,366,1,366,1,366,1,366,1,366,1,366,
		1,366,1,366,1,366,1,366,1,366,1,366,1,366,1,366,1,366,1,366,1,366,1,366,
		1,366,1,366,1,366,1,366,1,366,1,366,1,366,1,366,1,366,1,366,1,366,1,366,
		1,366,1,366,1,366,1,366,1,366,1,366,1,366,1,366,1,366,1,366,1,366,1,366,
		1,366,1,366,1,366,1,366,1,366,1,366,1,366,1,366,1,366,1,366,1,366,1,366,
		1,366,1,366,1,366,1,366,1,366,1,366,1,366,1,366,1,366,1,366,1,366,1,366,
		1,366,1,366,1,366,1,366,1,366,1,366,1,366,1,366,1,366,1,366,1,366,1,366,
		1,366,1,366,1,366,1,366,1,366,1,366,1,366,1,366,1,366,1,366,1,366,1,366,
		1,366,1,366,1,366,3,366,6679,8,366,1,367,1,367,1,367,1,367,1,367,1,367,
		1,367,1,367,1,368,1,368,1,368,5,368,6692,8,368,10,368,12,368,6695,9,368,
		1,369,1,369,1,369,1,369,1,369,1,369,1,369,1,369,3,369,6705,8,369,1,370,
		1,370,1,370,1,370,1,370,3,370,6712,8,370,1,371,1,371,1,371,1,371,1,371,
		1,371,1,371,1,371,1,372,1,372,1,372,1,372,1,372,1,372,1,372,1,372,1,372,
		1,372,1,372,1,372,1,372,1,372,1,372,1,372,1,372,1,372,1,372,1,372,1,372,
		1,372,1,372,1,372,1,372,1,372,1,372,1,372,1,372,1,372,1,372,1,372,1,372,
		1,372,1,372,1,372,1,372,1,372,1,372,1,372,1,372,1,372,1,372,1,372,1,372,
		1,372,1,372,1,372,1,372,1,372,1,372,1,372,1,372,1,372,1,372,1,372,1,372,
		1,372,1,372,1,372,1,372,1,372,1,372,1,372,1,372,1,372,1,372,1,372,1,372,
		1,372,1,372,1,372,1,372,1,372,1,372,1,372,1,372,1,372,1,372,1,372,1,372,
		1,372,1,372,1,372,1,372,1,372,1,372,1,372,1,372,1,372,1,372,1,372,1,372,
		1,372,1,372,1,372,1,372,1,372,1,372,1,372,1,372,1,372,1,372,1,372,1,372,
		1,372,1,372,1,372,1,372,1,372,1,372,1,372,1,372,1,372,1,372,1,372,1,372,
		1,372,1,372,1,372,1,372,1,372,1,372,1,372,1,372,1,372,1,372,1,372,1,372,
		1,372,1,372,1,372,1,372,1,372,1,372,1,372,1,372,1,372,1,372,1,372,1,372,
		1,372,1,372,1,372,1,372,1,372,1,372,1,372,1,372,1,372,1,372,1,372,1,372,
		1,372,1,372,1,372,1,372,1,372,1,372,1,372,1,372,1,372,1,372,1,372,1,372,
		1,372,1,372,1,372,1,372,1,372,1,372,1,372,1,372,1,372,1,372,1,372,1,372,
		1,372,1,372,1,372,1,372,1,372,1,372,3,372,6905,8,372,1,373,1,373,1,373,
		1,373,1,373,1,373,1,374,1,374,3,374,6915,8,374,1,375,1,375,1,375,1,375,
		1,375,1,375,3,375,6923,8,375,1,376,1,376,1,376,1,376,1,376,1,376,1,376,
		1,376,1,376,1,376,1,376,1,376,1,376,1,376,1,376,1,376,1,376,1,376,1,376,
		1,376,1,376,1,376,1,376,1,376,1,376,1,376,1,376,3,376,6952,8,376,1,377,
		1,377,1,377,1,377,1,377,1,377,1,377,1,377,1,377,1,378,1,378,1,378,5,378,
		6966,8,378,10,378,12,378,6969,9,378,1,379,1,379,1,380,1,380,1,380,1,380,
		1,380,1,380,1,380,1,380,1,380,1,380,1,380,1,380,1,380,1,380,1,380,1,380,
		1,380,1,380,1,380,1,380,1,380,1,380,1,380,1,380,1,380,1,380,1,380,1,380,
		1,380,1,380,1,380,1,380,1,380,1,380,1,380,1,380,1,380,3,380,7010,8,380,
		1,381,1,381,1,381,1,381,1,381,1,381,1,381,1,381,1,381,1,381,1,381,1,381,
		3,381,7024,8,381,1,382,1,382,1,382,1,382,1,382,1,382,1,382,1,382,1,382,
		1,382,1,382,1,382,1,382,1,382,1,383,1,383,1,383,1,383,1,383,1,383,3,383,
		7046,8,383,1,384,1,384,1,384,5,384,7051,8,384,10,384,12,384,7054,9,384,
		1,385,1,385,1,385,1,385,1,385,3,385,7061,8,385,1,386,1,386,3,386,7065,
		8,386,1,387,1,387,1,388,1,388,1,388,3,388,7072,8,388,1,389,1,389,1,389,
		1,389,1,390,1,390,1,390,3,390,7081,8,390,1,391,1,391,1,391,1,392,1,392,
		1,392,1,392,3,392,7090,8,392,1,393,1,393,1,393,1,393,1,393,1,393,1,393,
		1,393,1,393,1,393,1,393,1,393,1,393,1,393,1,393,1,393,1,393,1,393,1,393,
		1,393,1,393,1,393,1,393,1,393,1,393,1,393,1,393,1,393,1,393,1,393,1,393,
		1,393,1,393,1,393,1,393,1,393,1,393,1,393,1,393,1,393,1,393,1,393,1,393,
		1,393,1,393,1,393,1,393,1,393,1,393,1,393,3,393,7142,8,393,1,394,1,394,
		1,394,1,394,3,394,7148,8,394,1,395,1,395,1,395,1,395,1,395,1,395,1,395,
		1,395,1,395,1,395,3,395,7160,8,395,1,396,1,396,3,396,7164,8,396,1,396,
		5,396,7167,8,396,10,396,12,396,7170,9,396,1,397,1,397,3,397,7174,8,397,
		1,398,1,398,3,398,7178,8,398,1,398,1,398,3,398,7182,8,398,1,399,1,399,
		1,399,3,399,7187,8,399,1,399,1,399,1,399,1,399,1,399,1,399,1,399,1,399,
		1,399,1,399,1,399,1,399,1,399,1,399,3,399,7203,8,399,1,399,1,399,1,399,
		1,399,1,400,1,400,3,400,7211,8,400,1,400,1,400,1,400,3,400,7216,8,400,
		1,401,1,401,1,401,1,402,1,402,1,402,1,402,1,402,1,402,1,403,1,403,3,403,
		7229,8,403,1,404,4,404,7232,8,404,11,404,12,404,7233,1,405,1,405,1,405,
		1,405,1,405,3,405,7241,8,405,1,406,1,406,1,406,1,406,1,406,1,406,1,406,
		1,406,3,406,7251,8,406,1,407,1,407,3,407,7255,8,407,1,408,1,408,1,408,
		1,408,1,408,1,408,1,408,1,408,1,408,3,408,7266,8,408,1,409,1,409,1,409,
		1,409,1,409,1,410,1,410,1,410,1,410,3,410,7277,8,410,1,410,1,410,1,410,
		1,410,1,410,1,410,3,410,7285,8,410,1,411,1,411,1,411,5,411,7290,8,411,
		10,411,12,411,7293,9,411,1,412,1,412,1,413,1,413,1,413,1,413,1,413,1,413,
		1,414,1,414,1,414,1,414,1,414,1,415,1,415,1,415,1,415,1,415,1,415,1,415,
		1,416,1,416,1,416,1,416,1,416,1,416,1,416,1,416,1,416,1,416,1,416,1,416,
		1,416,1,416,1,416,1,416,3,416,7331,8,416,1,416,1,416,1,416,1,416,1,416,
		1,416,3,416,7339,8,416,1,417,1,417,3,417,7343,8,417,1,418,1,418,1,418,
		1,418,1,418,1,418,1,418,1,419,1,419,1,419,1,419,1,419,1,419,1,419,1,419,
		1,419,1,419,1,419,1,419,1,419,1,419,1,419,1,419,1,419,1,419,1,419,1,419,
		1,419,1,419,1,419,1,419,1,419,1,419,1,419,1,419,1,419,1,419,1,419,1,419,
		1,419,1,419,1,419,1,419,1,419,1,419,1,419,1,419,1,419,1,419,1,419,1,419,
		1,419,1,419,1,419,1,419,1,419,1,419,1,419,1,419,1,419,1,419,1,419,1,419,
		1,419,1,419,1,419,1,419,1,419,1,419,1,419,1,419,1,419,1,419,1,419,1,419,
		1,419,1,419,1,419,1,419,3,419,7424,8,419,1,420,1,420,1,421,1,421,1,421,
		1,421,1,421,1,421,1,421,1,421,1,421,1,421,1,421,1,422,1,422,1,422,1,422,
		1,422,1,422,1,422,1,422,1,422,1,422,1,422,1,422,1,422,3,422,7452,8,422,
		1,423,1,423,1,423,3,423,7457,8,423,1,424,1,424,1,424,1,424,1,424,1,424,
		1,424,1,424,1,424,1,424,1,424,1,424,1,424,3,424,7472,8,424,1,425,1,425,
		1,425,1,425,1,425,1,425,1,425,1,425,1,425,1,425,3,425,7484,8,425,1,426,
		1,426,1,426,5,426,7489,8,426,10,426,12,426,7492,9,426,1,427,1,427,1,428,
		1,428,1,428,1,429,1,429,3,429,7501,8,429,1,430,1,430,1,430,3,430,7506,
		8,430,1,431,1,431,3,431,7510,8,431,1,432,1,432,3,432,7514,8,432,1,433,
		1,433,3,433,7518,8,433,1,434,1,434,3,434,7522,8,434,1,435,1,435,1,435,
		1,435,1,435,3,435,7529,8,435,1,436,1,436,1,436,1,437,1,437,1,437,5,437,
		7537,8,437,10,437,12,437,7540,9,437,1,438,1,438,3,438,7544,8,438,1,439,
		1,439,1,439,1,439,1,439,1,439,1,439,1,439,1,439,1,439,1,439,1,439,1,439,
		1,439,1,439,1,439,3,439,7562,8,439,1,440,1,440,1,440,1,440,1,440,1,440,
		1,440,1,440,1,440,3,440,7573,8,440,1,441,1,441,1,441,5,441,7578,8,441,
		10,441,12,441,7581,9,441,1,442,1,442,1,442,1,443,1,443,3,443,7588,8,443,
		1,444,1,444,1,444,3,444,7593,8,444,1,445,1,445,1,445,1,445,1,445,1,445,
		1,446,1,446,1,446,1,446,1,446,3,446,7606,8,446,1,447,1,447,1,447,1,447,
		3,447,7612,8,447,1,448,1,448,1,448,1,448,1,448,1,448,1,448,1,448,1,448,
		1,448,1,448,1,448,1,448,1,448,1,448,1,448,1,448,1,448,1,448,1,448,1,448,
		1,448,1,448,1,448,1,448,1,448,1,448,3,448,7641,8,448,1,449,1,449,1,449,
		1,449,1,449,3,449,7648,8,449,1,450,1,450,1,450,1,450,1,450,1,450,1,450,
		1,450,1,450,1,450,3,450,7660,8,450,1,451,1,451,1,451,1,451,1,451,1,451,
		1,451,1,451,1,452,1,452,1,452,3,452,7673,8,452,1,453,1,453,1,453,1,453,
		1,453,1,453,1,453,1,453,1,453,1,453,1,453,1,453,1,453,3,453,7688,8,453,
		1,453,1,453,1,453,1,453,3,453,7694,8,453,1,454,1,454,1,455,1,455,1,455,
		5,455,7701,8,455,10,455,12,455,7704,9,455,1,456,1,456,1,456,1,457,1,457,
		1,457,1,457,1,457,1,457,1,457,1,457,1,457,1,457,3,457,7719,8,457,1,457,
		3,457,7722,8,457,1,458,1,458,1,458,1,458,1,458,1,458,1,458,1,458,1,458,
		3,458,7733,8,458,1,459,1,459,1,459,3,459,7738,8,459,1,460,1,460,3,460,
		7742,8,460,1,460,1,460,3,460,7746,8,460,1,460,1,460,1,460,3,460,7751,8,
		460,1,460,3,460,7754,8,460,1,460,1,460,1,460,1,460,3,460,7760,8,460,1,
		460,1,460,3,460,7764,8,460,3,460,7766,8,460,1,460,3,460,7769,8,460,1,461,
		1,461,1,461,1,461,1,461,3,461,7776,8,461,1,461,3,461,7779,8,461,1,461,
		1,461,1,461,1,461,1,461,3,461,7786,8,461,1,461,1,461,1,462,1,462,1,462,
		1,462,3,462,7794,8,462,1,462,3,462,7797,8,462,1,462,1,462,1,462,1,462,
		1,463,1,463,1,463,3,463,7806,8,463,1,463,1,463,1,464,1,464,1,464,1,464,
		1,464,1,464,1,464,1,464,1,465,1,465,1,465,3,465,7821,8,465,1,466,1,466,
		1,466,1,466,1,466,1,466,1,467,1,467,1,467,1,467,1,467,3,467,7834,8,467,
		1,468,1,468,1,468,1,468,1,468,1,468,1,468,1,468,1,468,3,468,7845,8,468,
		1,468,3,468,7848,8,468,1,469,1,469,3,469,7852,8,469,1,470,1,470,1,470,
		1,470,3,470,7858,8,470,1,471,1,471,1,471,1,471,1,471,1,471,1,471,1,471,
		1,471,1,472,1,472,1,472,5,472,7872,8,472,10,472,12,472,7875,9,472,1,473,
		1,473,1,473,1,473,1,473,1,473,1,473,1,473,1,473,1,473,3,473,7887,8,473,
		1,474,1,474,1,474,1,475,1,475,1,475,5,475,7895,8,475,10,475,12,475,7898,
		9,475,1,476,1,476,1,476,1,476,1,476,1,476,1,476,1,476,1,477,1,477,1,478,
		1,478,1,478,1,478,1,478,5,478,7915,8,478,10,478,12,478,7918,9,478,1,479,
		1,479,1,479,1,479,1,479,3,479,7925,8,479,1,480,1,480,3,480,7929,8,480,
		1,481,1,481,1,481,1,481,1,481,1,481,1,481,1,481,3,481,7939,8,481,1,482,
		1,482,1,482,1,482,1,482,1,482,1,482,1,482,3,482,7949,8,482,1,482,1,482,
		1,482,1,482,1,482,1,482,1,482,1,482,1,482,3,482,7960,8,482,3,482,7962,
		8,482,1,483,1,483,1,483,1,483,1,483,5,483,7969,8,483,10,483,12,483,7972,
		9,483,1,484,1,484,1,484,1,484,1,484,5,484,7979,8,484,10,484,12,484,7982,
		9,484,1,485,1,485,1,485,1,485,1,485,1,485,1,485,1,485,3,485,7992,8,485,
		1,485,1,485,1,485,1,485,1,485,1,485,1,485,1,485,1,485,1,485,1,485,3,485,
		8005,8,485,1,486,1,486,3,486,8009,8,486,1,486,1,486,1,487,1,487,1,487,
		5,487,8016,8,487,10,487,12,487,8019,9,487,1,488,1,488,1,488,1,488,1,488,
		1,488,1,488,1,488,1,489,1,489,1,489,1,489,3,489,8033,8,489,1,490,1,490,
		3,490,8037,8,490,1,491,1,491,1,491,1,491,1,491,3,491,8044,8,491,1,491,
		3,491,8047,8,491,1,492,1,492,3,492,8051,8,492,1,493,3,493,8054,8,493,1,
		493,1,493,1,493,1,493,1,493,1,493,1,493,1,493,1,493,1,493,1,493,3,493,
		8067,8,493,1,494,1,494,3,494,8071,8,494,1,495,1,495,1,495,3,495,8076,8,
		495,1,496,1,496,1,496,1,496,1,496,1,496,3,496,8084,8,496,1,497,1,497,3,
		497,8088,8,497,1,498,1,498,3,498,8092,8,498,1,499,1,499,1,499,1,499,1,
		500,1,500,1,500,5,500,8101,8,500,10,500,12,500,8104,9,500,1,501,1,501,
		1,501,1,501,3,501,8110,8,501,1,501,1,501,1,502,1,502,3,502,8116,8,502,
		1,502,1,502,3,502,8120,8,502,3,502,8122,8,502,1,503,1,503,3,503,8126,8,
		503,1,504,1,504,1,504,1,504,3,504,8132,8,504,1,504,1,504,1,504,1,504,1,
		504,1,504,1,504,3,504,8141,8,504,1,504,1,504,1,504,1,504,3,504,8147,8,
		504,3,504,8149,8,504,3,504,8151,8,504,1,505,1,505,1,505,1,505,1,505,3,
		505,8158,8,505,1,506,1,506,3,506,8162,8,506,1,507,1,507,1,508,1,508,1,
		508,1,508,1,508,3,508,8171,8,508,1,509,1,509,3,509,8175,8,509,1,510,1,
		510,1,511,1,511,1,512,1,512,1,512,1,512,3,512,8185,8,512,1,513,1,513,1,
		513,5,513,8190,8,513,10,513,12,513,8193,9,513,1,514,1,514,1,514,1,514,
		1,514,3,514,8200,8,514,1,515,1,515,1,515,1,516,1,516,1,516,1,516,1,516,
		1,517,1,517,1,517,1,517,1,517,1,518,1,518,1,518,1,518,1,518,1,518,1,519,
		1,519,1,519,3,519,8224,8,519,1,520,1,520,1,520,1,520,3,520,8230,8,520,
		1,521,1,521,3,521,8234,8,521,1,522,4,522,8237,8,522,11,522,12,522,8238,
		1,523,1,523,1,523,1,523,1,524,1,524,1,524,3,524,8248,8,524,1,524,1,524,
		3,524,8252,8,524,1,524,3,524,8255,8,524,1,525,1,525,1,525,3,525,8260,8,
		525,1,526,1,526,1,526,1,526,1,526,1,526,1,526,1,526,1,526,5,526,8271,8,
		526,10,526,12,526,8274,9,526,1,527,1,527,1,527,3,527,8279,8,527,1,528,
		1,528,1,528,1,528,5,528,8285,8,528,10,528,12,528,8288,9,528,3,528,8290,
		8,528,1,529,1,529,1,529,4,529,8295,8,529,11,529,12,529,8296,1,530,1,530,
		1,530,3,530,8302,8,530,1,530,1,530,1,530,1,530,1,530,1,530,1,530,1,530,
		1,530,1,530,1,530,1,530,1,530,1,530,1,530,1,530,1,530,1,530,1,530,3,530,
		8323,8,530,1,530,1,530,1,530,1,530,1,530,1,530,1,530,3,530,8332,8,530,
		1,530,1,530,1,530,3,530,8337,8,530,1,530,1,530,1,530,1,530,3,530,8343,
		8,530,1,530,1,530,1,530,3,530,8348,8,530,1,530,1,530,1,530,1,530,1,530,
		3,530,8355,8,530,1,530,1,530,1,530,3,530,8360,8,530,1,530,1,530,1,530,
		1,530,5,530,8366,8,530,10,530,12,530,8369,9,530,1,531,3,531,8372,8,531,
		1,531,1,531,1,531,1,531,1,531,3,531,8379,8,531,1,532,1,532,3,532,8383,
		8,532,1,533,3,533,8386,8,533,1,533,1,533,1,533,1,533,1,533,3,533,8393,
		8,533,1,534,1,534,1,534,3,534,8398,8,534,1,534,3,534,8401,8,534,1,534,
		1,534,1,534,1,534,1,534,3,534,8408,8,534,1,535,1,535,3,535,8412,8,535,
		1,536,1,536,1,536,1,536,1,536,1,536,1,536,3,536,8421,8,536,1,537,1,537,
		3,537,8425,8,537,1,537,1,537,1,537,1,537,1,537,1,537,3,537,8433,8,537,
		3,537,8435,8,537,1,538,1,538,1,538,5,538,8440,8,538,10,538,12,538,8443,
		9,538,1,539,1,539,3,539,8447,8,539,1,539,3,539,8450,8,539,1,540,1,540,
		1,540,1,540,1,540,1,540,1,540,1,541,1,541,1,541,1,541,1,541,1,541,3,541,
		8465,8,541,1,542,1,542,1,542,1,542,1,542,1,542,1,542,1,542,1,542,1,542,
		3,542,8477,8,542,1,543,1,543,1,543,1,544,1,544,1,544,5,544,8485,8,544,
		10,544,12,544,8488,9,544,1,545,1,545,1,545,1,545,1,545,1,545,3,545,8496,
		8,545,1,546,1,546,1,546,3,546,8501,8,546,1,547,1,547,1,547,3,547,8506,
		8,547,1,548,1,548,1,548,1,548,1,548,3,548,8513,8,548,1,548,3,548,8516,
		8,548,1,549,1,549,3,549,8520,8,549,1,550,1,550,1,550,5,550,8525,8,550,
		10,550,12,550,8528,9,550,1,551,1,551,1,551,1,551,1,552,1,552,1,552,1,552,
		1,552,1,552,1,552,1,552,1,552,1,552,1,552,1,552,1,552,1,552,1,552,1,552,
		1,552,3,552,8551,8,552,1,552,1,552,1,553,1,553,1,553,5,553,8558,8,553,
		10,553,12,553,8561,9,553,1,554,1,554,1,554,3,554,8566,8,554,1,554,1,554,
		3,554,8570,8,554,1,555,4,555,8573,8,555,11,555,12,555,8574,1,556,1,556,
		1,556,1,556,1,556,1,556,1,556,1,556,3,556,8585,8,556,1,557,1,557,1,557,
		5,557,8590,8,557,10,557,12,557,8593,9,557,1,558,1,558,1,558,1,558,1,558,
		1,558,3,558,8601,8,558,1,559,3,559,8604,8,559,1,559,1,559,1,559,1,559,
		1,559,1,559,1,559,3,559,8613,8,559,3,559,8615,8,559,1,559,1,559,1,559,
		1,559,3,559,8621,8,559,1,560,1,560,3,560,8625,8,560,1,560,5,560,8628,8,
		560,10,560,12,560,8631,9,560,1,561,1,561,1,561,1,561,1,561,1,561,1,561,
		1,561,1,561,1,561,1,561,3,561,8644,8,561,3,561,8646,8,561,1,562,1,562,
		1,562,1,562,3,562,8652,8,562,1,563,1,563,1,563,1,563,3,563,8658,8,563,
		1,563,3,563,8661,8,563,1,563,1,563,1,564,1,564,1,564,1,564,1,564,3,564,
		8670,8,564,1,565,1,565,1,565,1,565,1,565,1,565,1,565,1,565,1,565,1,565,
		1,565,1,565,1,565,1,565,1,565,1,565,3,565,8688,8,565,1,566,1,566,1,566,
		1,566,1,566,3,566,8695,8,566,1,567,1,567,3,567,8699,8,567,1,568,1,568,
		3,568,8703,8,568,1,569,1,569,1,569,1,569,1,569,1,569,1,570,1,570,1,570,
		1,571,1,571,1,571,1,571,1,571,3,571,8719,8,571,1,572,1,572,1,572,1,572,
		1,572,3,572,8726,8,572,1,573,1,573,1,573,1,573,1,573,1,573,3,573,8734,
		8,573,1,574,1,574,3,574,8738,8,574,1,575,1,575,1,575,1,575,1,575,3,575,
		8745,8,575,1,575,1,575,1,576,1,576,1,577,1,577,1,577,1,577,1,577,1,577,
		1,577,3,577,8758,8,577,1,578,1,578,1,578,1,578,1,578,1,578,1,578,1,578,
		1,578,1,578,1,578,1,578,1,578,1,578,3,578,8774,8,578,1,578,1,578,1,578,
		1,578,3,578,8780,8,578,1,578,1,578,1,578,1,578,3,578,8786,8,578,1,579,
		1,579,1,579,1,579,1,579,3,579,8793,8,579,1,580,1,580,1,580,3,580,8798,
		8,580,1,581,1,581,1,582,1,582,3,582,8804,8,582,1,583,1,583,1,583,5,583,
		8809,8,583,10,583,12,583,8812,9,583,1,584,1,584,1,584,5,584,8817,8,584,
		10,584,12,584,8820,9,584,1,585,1,585,1,585,5,585,8825,8,585,10,585,12,
		585,8828,9,585,1,586,1,586,3,586,8832,8,586,1,586,1,586,3,586,8836,8,586,
		1,586,1,586,1,586,1,586,3,586,8842,8,586,1,587,1,587,3,587,8846,8,587,
		1,587,1,587,3,587,8850,8,587,1,588,3,588,8853,8,588,1,588,1,588,1,589,
		1,589,3,589,8859,8,589,1,590,1,590,1,590,3,590,8864,8,590,1,590,1,590,
		1,590,1,590,1,590,1,590,1,590,1,590,1,590,1,590,1,590,1,590,1,590,1,590,
		3,590,8880,8,590,1,590,3,590,8883,8,590,3,590,8885,8,590,1,591,1,591,1,
		591,1,591,1,591,1,591,1,591,1,591,1,591,1,591,3,591,8897,8,591,3,591,8899,
		8,591,1,592,1,592,3,592,8903,8,592,1,592,1,592,1,592,1,592,3,592,8909,
		8,592,1,592,1,592,1,592,3,592,8914,8,592,1,593,1,593,1,593,1,593,5,593,
		8920,8,593,10,593,12,593,8923,9,593,1,594,3,594,8926,8,594,1,594,1,594,
		1,595,1,595,1,595,5,595,8933,8,595,10,595,12,595,8936,9,595,1,596,1,596,
		1,596,5,596,8941,8,596,10,596,12,596,8944,9,596,1,597,1,597,1,597,3,597,
		8949,8,597,1,598,3,598,8952,8,598,1,598,1,598,1,599,1,599,1,599,1,599,
		1,599,3,599,8961,8,599,1,600,1,600,1,600,3,600,8966,8,600,1,601,1,601,
		1,601,5,601,8971,8,601,10,601,12,601,8974,9,601,1,602,1,602,1,602,1,602,
		1,602,1,602,1,602,3,602,8983,8,602,1,602,1,602,1,602,1,602,1,602,1,602,
		1,602,1,602,1,602,1,602,1,602,1,602,1,602,1,602,1,602,1,602,1,602,1,602,
		1,602,1,602,1,602,1,602,1,602,1,602,3,602,9009,8,602,1,602,1,602,1,602,
		1,602,1,602,1,602,1,602,1,602,1,602,3,602,9020,8,602,5,602,9022,8,602,
		10,602,12,602,9025,9,602,1,603,1,603,1,603,1,603,1,603,3,603,9032,8,603,
		1,603,1,603,1,603,1,603,1,603,1,603,1,603,1,603,1,603,1,603,1,603,1,603,
		1,603,1,603,1,603,1,603,1,603,1,603,1,603,1,603,1,603,3,603,9055,8,603,
		1,603,1,603,1,603,1,603,1,603,1,603,3,603,9063,8,603,1,604,1,604,1,605,
		1,605,1,605,1,605,1,605,1,605,3,605,9073,8,605,1,605,1,605,1,605,1,605,
		1,605,1,605,1,605,1,605,1,605,1,605,1,605,1,605,3,605,9087,8,605,1,605,
		1,605,1,606,1,606,1,606,1,606,1,606,1,606,3,606,9097,8,606,1,607,1,607,
		3,607,9101,8,607,1,608,1,608,1,608,1,608,1,608,1,608,1,608,1,608,1,608,
		1,608,1,608,1,608,3,608,9115,8,608,1,608,1,608,1,608,1,608,1,608,3,608,
		9122,8,608,1,608,1,608,1,608,1,608,1,608,3,608,9129,8,608,1,608,1,608,
		1,608,1,608,1,608,3,608,9136,8,608,1,608,1,608,1,608,1,608,1,608,1,608,
		1,608,1,608,1,608,1,608,1,608,1,608,1,608,1,608,1,608,1,608,1,608,1,608,
		1,608,1,608,1,608,1,608,1,608,3,608,9161,8,608,1,608,1,608,1,608,1,608,
		1,608,1,608,1,608,1,608,1,608,1,608,1,608,1,608,1,608,1,608,1,608,1,608,
		1,608,1,608,1,608,1,608,1,608,1,608,1,608,1,608,1,608,1,608,1,608,3,608,
		9190,8,608,1,608,1,608,1,608,1,608,1,608,1,608,1,608,1,608,1,608,1,608,
		1,608,1,608,1,608,1,608,1,608,1,608,1,608,1,608,1,608,1,608,1,608,1,608,
		1,608,1,608,1,608,1,608,1,608,1,608,1,608,1,608,1,608,1,608,1,608,1,608,
		1,608,1,608,1,608,3,608,9229,8,608,3,608,9231,8,608,1,608,1,608,1,608,
		1,608,1,608,1,608,1,608,1,608,1,608,1,608,1,608,1,608,1,608,1,608,1,608,
		1,608,1,608,1,608,1,608,1,608,1,608,1,608,1,608,1,608,1,608,1,608,3,608,
		9259,8,608,1,608,1,608,1,608,1,608,1,608,1,608,1,608,1,608,1,608,1,608,
		1,608,1,608,1,608,1,608,1,608,1,608,1,608,1,608,1,608,3,608,9280,8,608,
		1,609,1,609,1,609,1,609,1,609,3,609,9287,8,609,1,610,1,610,1,610,1,610,
		1,610,1,610,1,610,1,610,1,610,1,610,1,610,3,610,9300,8,610,1,611,1,611,
		1,611,1,611,1,611,1,612,1,612,1,612,5,612,9310,8,612,10,612,12,612,9313,
		9,612,1,613,1,613,1,613,3,613,9318,8,613,1,614,1,614,1,615,1,615,1,615,
		1,615,1,615,3,615,9327,8,615,1,616,1,616,1,616,1,616,1,616,1,616,1,616,
		1,616,1,616,1,616,1,616,1,616,1,616,1,616,1,616,3,616,9344,8,616,1,617,
		1,617,1,617,1,618,1,618,1,618,1,618,1,618,1,618,1,618,3,618,9356,8,618,
		1,619,1,619,1,619,1,619,1,619,1,619,1,619,3,619,9365,8,619,1,620,1,620,
		1,620,3,620,9370,8,620,1,621,1,621,1,621,5,621,9375,8,621,10,621,12,621,
		9378,9,621,1,622,1,622,1,622,1,622,1,623,1,623,1,623,3,623,9387,8,623,
		1,623,3,623,9390,8,623,1,624,1,624,1,624,1,624,1,624,1,624,1,624,1,625,
		1,625,3,625,9401,8,625,1,626,1,626,1,626,1,626,3,626,9407,8,626,1,627,
		1,627,1,627,1,627,1,627,1,627,1,627,1,627,1,627,1,627,1,627,1,627,1,627,
		3,627,9422,8,627,1,628,1,628,1,628,1,628,1,628,1,628,3,628,9430,8,628,
		1,629,1,629,1,629,1,629,1,629,1,629,1,629,3,629,9439,8,629,1,630,1,630,
		1,630,1,630,1,630,1,630,1,630,3,630,9448,8,630,1,630,3,630,9451,8,630,
		1,631,1,631,1,631,3,631,9456,8,631,1,631,1,631,1,631,1,631,1,631,1,631,
		1,631,3,631,9465,8,631,1,632,1,632,1,632,3,632,9470,8,632,1,632,1,632,
		1,633,1,633,1,633,1,633,1,633,1,633,1,634,1,634,1,635,1,635,3,635,9484,
		8,635,1,636,1,636,1,637,1,637,1,637,1,637,1,637,1,637,3,637,9494,8,637,
		1,638,1,638,1,638,1,638,1,638,1,638,3,638,9502,8,638,1,639,1,639,1,639,
		1,639,1,639,1,639,1,639,1,639,1,639,1,639,1,639,1,639,3,639,9516,8,639,
		1,640,1,640,1,640,5,640,9521,8,640,10,640,12,640,9524,9,640,1,641,1,641,
		1,641,5,641,9529,8,641,10,641,12,641,9532,9,641,1,642,1,642,1,642,1,642,
		1,642,3,642,9539,8,642,1,643,1,643,1,643,5,643,9544,8,643,10,643,12,643,
		9547,9,643,1,644,1,644,1,644,3,644,9552,8,644,1,644,1,644,1,645,1,645,
		1,645,5,645,9559,8,645,10,645,12,645,9562,9,645,1,646,1,646,1,646,1,646,
		1,646,3,646,9569,8,646,1,647,1,647,1,647,1,647,1,647,1,647,1,647,1,647,
		3,647,9579,8,647,1,648,1,648,1,649,1,649,1,649,1,649,1,649,1,649,1,649,
		3,649,9590,8,649,1,650,1,650,1,650,1,650,1,650,3,650,9597,8,650,1,651,
		1,651,1,651,1,651,1,651,1,651,1,651,1,651,1,651,1,651,1,651,1,651,1,651,
		1,651,1,651,1,651,1,651,1,651,1,651,1,651,1,651,1,651,1,651,1,651,1,651,
		1,651,1,651,3,651,9626,8,651,1,652,1,652,1,652,1,652,1,652,1,652,1,652,
		3,652,9635,8,652,1,653,1,653,1,653,1,653,1,653,3,653,9642,8,653,1,654,
		1,654,1,654,1,654,1,654,1,654,1,655,4,655,9651,8,655,11,655,12,655,9652,
		1,656,1,656,1,656,1,656,1,656,1,657,1,657,1,657,3,657,9663,8,657,1,658,
		1,658,3,658,9667,8,658,1,659,1,659,3,659,9671,8,659,1,660,1,660,1,660,
		3,660,9676,8,660,1,660,1,660,1,660,1,660,1,660,1,660,3,660,9684,8,660,
		1,660,1,660,3,660,9688,8,660,1,661,1,661,3,661,9692,8,661,1,662,4,662,
		9695,8,662,11,662,12,662,9696,1,663,5,663,9700,8,663,10,663,12,663,9703,
		9,663,1,664,1,664,3,664,9707,8,664,1,665,1,665,1,665,5,665,9712,8,665,
		10,665,12,665,9715,9,665,1,666,1,666,1,666,1,666,1,666,3,666,9722,8,666,
		1,666,3,666,9725,8,666,1,667,1,667,1,667,5,667,9730,8,667,10,667,12,667,
		9733,9,667,1,668,1,668,3,668,9737,8,668,1,669,1,669,1,669,5,669,9742,8,
		669,10,669,12,669,9745,9,669,1,670,1,670,1,671,1,671,1,672,1,672,1,673,
		1,673,1,673,1,673,1,673,1,673,1,673,3,673,9760,8,673,1,674,1,674,1,674,
		1,674,1,674,1,674,1,674,1,674,1,674,1,674,1,674,1,674,1,674,3,674,9775,
		8,674,1,674,1,674,1,674,1,674,1,674,1,674,1,674,1,674,1,674,1,674,1,674,
		1,674,3,674,9789,8,674,1,674,1,674,1,674,3,674,9794,8,674,1,675,1,675,
		1,676,1,676,1,677,1,677,1,678,1,678,1,679,1,679,1,679,1,680,1,680,1,680,
		1,680,5,680,9811,8,680,10,680,12,680,9814,9,680,1,680,1,680,3,680,9818,
		8,680,1,681,1,681,1,681,3,681,9823,8,681,1,682,1,682,1,682,1,682,1,682,
		3,682,9830,8,682,1,683,1,683,1,684,1,684,1,684,3,684,9837,8,684,1,685,
		1,685,1,685,5,685,9842,8,685,10,685,12,685,9845,9,685,1,686,1,686,1,686,
		1,686,1,686,1,686,3,686,9853,8,686,1,687,1,687,1,687,1,687,3,687,9859,
		8,687,1,688,1,688,1,688,1,688,3,688,9865,8,688,1,689,1,689,1,689,1,689,
		3,689,9871,8,689,1,690,1,690,1,690,1,690,1,690,1,690,3,690,9879,8,690,
		1,691,1,691,1,691,1,691,1,691,1,691,1,691,3,691,9888,8,691,1,692,1,692,
		1,693,1,693,1,694,1,694,1,694,1,694,1,694,1,694,1,694,1,694,1,694,1,694,
		1,694,1,694,1,694,1,694,1,694,1,694,1,694,1,694,1,694,1,694,1,694,1,694,
		1,694,1,694,1,694,1,694,1,694,1,694,1,694,1,694,1,694,1,694,1,694,1,694,
		1,694,1,694,1,694,1,694,1,694,1,694,1,694,1,694,1,694,1,694,1,694,1,694,
		1,694,1,694,1,694,1,694,1,694,1,694,3,694,9946,8,694,1,695,1,695,1,696,
		1,696,1,697,1,697,1,698,1,698,1,698,1,698,1,699,5,699,9959,8,699,10,699,
		12,699,9962,9,699,1,700,1,700,1,700,1,700,1,700,1,700,1,700,1,700,1,700,
		1,700,1,700,1,700,1,700,1,700,1,700,1,700,1,700,1,700,1,700,1,700,3,700,
		9984,8,700,1,701,1,701,1,702,1,702,1,702,1,702,3,702,9992,8,702,1,703,
		1,703,3,703,9996,8,703,1,704,1,704,1,704,1,704,1,704,1,704,1,704,1,705,
		1,705,1,705,3,705,10008,8,705,3,705,10010,8,705,1,706,1,706,1,707,4,707,
		10015,8,707,11,707,12,707,10016,1,708,1,708,1,708,1,708,1,709,1,709,1,
		709,3,709,10026,8,709,1,710,1,710,1,710,1,710,1,710,1,710,1,710,1,710,
		1,710,1,710,1,710,1,710,1,710,1,710,1,710,1,710,3,710,10044,8,710,1,710,
		1,710,1,711,1,711,1,711,1,711,3,711,10052,8,711,1,712,1,712,1,713,1,713,
		1,713,1,713,1,713,3,713,10061,8,713,1,714,1,714,1,714,5,714,10066,8,714,
		10,714,12,714,10069,9,714,1,715,1,715,1,715,1,716,1,716,1,717,1,717,3,
		717,10078,8,717,1,718,1,718,1,719,1,719,3,719,10084,8,719,1,720,1,720,
		1,721,1,721,1,721,3,721,10091,8,721,1,722,1,722,1,722,3,722,10096,8,722,
		1,723,1,723,1,723,1,723,3,723,10102,8,723,1,724,1,724,3,724,10106,8,724,
		1,725,1,725,1,726,5,726,10111,8,726,10,726,12,726,10114,9,726,1,727,1,
		727,1,727,1,727,1,727,1,727,1,727,1,727,1,727,1,727,1,727,1,727,1,727,
		1,727,1,727,1,727,1,727,1,727,1,727,1,727,1,727,1,727,1,727,1,727,1,727,
		1,727,1,727,3,727,10143,8,727,1,728,1,728,1,728,1,728,1,729,1,729,1,729,
		1,729,1,729,1,729,1,729,1,729,1,729,1,729,1,729,1,729,1,729,1,729,3,729,
		10163,8,729,1,730,1,730,3,730,10167,8,730,1,731,1,731,1,731,1,731,1,731,
		1,732,1,732,1,732,1,732,1,732,1,732,1,733,1,733,1,733,3,733,10183,8,733,
		1,734,1,734,1,734,5,734,10188,8,734,10,734,12,734,10191,9,734,1,735,1,
		735,1,735,1,735,1,736,1,736,1,737,1,737,1,738,1,738,3,738,10203,8,738,
		1,738,1,738,1,738,1,738,5,738,10209,8,738,10,738,12,738,10212,9,738,1,
		739,1,739,1,739,1,739,1,739,1,739,1,739,1,739,1,739,1,739,1,740,1,740,
		1,740,1,740,1,740,5,740,10229,8,740,10,740,12,740,10232,9,740,1,741,1,
		741,1,741,3,741,10237,8,741,1,742,1,742,1,742,1,742,1,742,1,742,1,742,
		1,742,1,743,1,743,3,743,10249,8,743,1,744,4,744,10252,8,744,11,744,12,
		744,10253,1,745,1,745,1,745,1,745,1,745,1,746,1,746,1,746,3,746,10264,
		8,746,1,747,1,747,1,747,1,748,1,748,1,748,1,748,1,748,1,749,1,749,1,749,
		1,749,1,749,1,750,1,750,1,750,1,750,1,750,1,750,1,750,1,750,1,750,1,750,
		1,750,1,750,1,750,1,750,1,750,1,750,1,750,3,750,10296,8,750,1,751,1,751,
		1,751,3,751,10301,8,751,1,752,1,752,1,752,1,752,1,752,5,752,10308,8,752,
		10,752,12,752,10311,9,752,1,752,1,752,3,752,10315,8,752,1,753,1,753,3,
		753,10319,8,753,1,754,1,754,1,754,3,754,10324,8,754,1,755,1,755,1,756,
		1,756,1,756,1,756,1,756,1,756,1,756,1,756,1,756,1,757,1,757,1,757,3,757,
		10340,8,757,1,758,1,758,1,758,1,758,1,758,1,759,1,759,1,760,1,760,1,760,
		1,760,1,760,1,760,1,760,1,760,1,760,3,760,10358,8,760,1,760,3,760,10361,
		8,760,1,760,1,760,1,761,1,761,3,761,10367,8,761,1,762,1,762,1,762,1,762,
		1,762,1,762,1,762,1,762,1,762,1,762,1,762,1,762,1,762,1,762,1,762,1,762,
		1,762,1,762,1,762,1,762,1,762,1,762,1,762,1,762,1,762,1,762,3,762,10395,
		8,762,1,763,1,763,1,763,1,763,1,763,1,763,1,763,1,763,3,763,10405,8,763,
		1,764,1,764,1,764,4,764,10410,8,764,11,764,12,764,10411,3,764,10414,8,
		764,1,765,1,765,1,765,3,765,10419,8,765,1,766,1,766,1,766,1,766,1,767,
		1,767,1,767,5,767,10428,8,767,10,767,12,767,10431,9,767,1,768,1,768,1,
		768,1,768,1,768,1,769,1,769,1,769,3,769,10441,8,769,1,770,1,770,1,770,
		1,770,1,770,1,770,1,770,1,771,1,771,1,771,1,772,1,772,1,772,1,772,1,772,
		1,772,1,772,1,772,1,772,3,772,10462,8,772,1,772,1,772,1,773,1,773,1,773,
		3,773,10469,8,773,1,774,1,774,1,774,5,774,10474,8,774,10,774,12,774,10477,
		9,774,1,775,1,775,1,775,3,775,10482,8,775,1,775,3,775,10485,8,775,1,776,
		1,776,1,776,1,776,1,776,1,776,1,776,1,776,1,776,3,776,10496,8,776,1,776,
		1,776,1,776,1,776,1,776,3,776,10503,8,776,3,776,10505,8,776,1,776,1,776,
		1,777,1,777,1,777,1,777,1,777,3,777,10514,8,777,1,778,1,778,1,778,5,778,
		10519,8,778,10,778,12,778,10522,9,778,1,779,1,779,1,779,3,779,10527,8,
		779,1,780,1,780,1,780,1,780,3,780,10533,8,780,1,781,1,781,3,781,10537,
		8,781,1,782,1,782,1,782,1,782,1,782,1,782,1,782,1,782,1,783,1,783,1,784,
		1,784,1,784,3,784,10552,8,784,1,785,1,785,1,785,1,785,1,785,1,785,1,785,
		1,785,1,785,1,785,1,785,1,785,1,785,1,785,1,785,3,785,10569,8,785,3,785,
		10571,8,785,1,786,1,786,1,786,1,786,1,786,1,787,1,787,1,787,1,787,1,788,
		1,788,1,788,1,789,1,789,1,789,1,789,1,790,1,790,1,790,1,790,1,791,1,791,
		3,791,10595,8,791,1,791,1,791,3,791,10599,8,791,1,792,1,792,1,792,1,792,
		1,792,1,792,1,792,1,792,1,792,3,792,10610,8,792,1,792,3,792,10613,8,792,
		1,793,1,793,3,793,10617,8,793,1,794,1,794,1,794,3,794,10622,8,794,1,795,
		4,795,10625,8,795,11,795,12,795,10626,1,796,1,796,1,796,1,796,1,796,1,
		797,1,797,1,797,5,797,10637,8,797,10,797,12,797,10640,9,797,1,798,1,798,
		1,798,3,798,10645,8,798,1,799,1,799,3,799,10649,8,799,1,800,1,800,3,800,
		10653,8,800,1,801,1,801,3,801,10657,8,801,1,802,1,802,1,802,3,802,10662,
		8,802,1,803,1,803,3,803,10666,8,803,1,804,1,804,1,805,1,805,1,805,1,805,
		1,805,1,805,1,805,1,805,1,806,1,806,1,807,1,807,1,808,1,808,1,809,1,809,
		1,810,1,810,1,810,1,811,1,811,1,811,1,811,1,811,3,811,10694,8,811,1,811,
		0,1,1204,812,0,2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,34,36,38,40,
		42,44,46,48,50,52,54,56,58,60,62,64,66,68,70,72,74,76,78,80,82,84,86,88,
		90,92,94,96,98,100,102,104,106,108,110,112,114,116,118,120,122,124,126,
		128,130,132,134,136,138,140,142,144,146,148,150,152,154,156,158,160,162,
		164,166,168,170,172,174,176,178,180,182,184,186,188,190,192,194,196,198,
		200,202,204,206,208,210,212,214,216,218,220,222,224,226,228,230,232,234,
		236,238,240,242,244,246,248,250,252,254,256,258,260,262,264,266,268,270,
		272,274,276,278,280,282,284,286,288,290,292,294,296,298,300,302,304,306,
		308,310,312,314,316,318,320,322,324,326,328,330,332,334,336,338,340,342,
		344,346,348,350,352,354,356,358,360,362,364,366,368,370,372,374,376,378,
		380,382,384,386,388,390,392,394,396,398,400,402,404,406,408,410,412,414,
		416,418,420,422,424,426,428,430,432,434,436,438,440,442,444,446,448,450,
		452,454,456,458,460,462,464,466,468,470,472,474,476,478,480,482,484,486,
		488,490,492,494,496,498,500,502,504,506,508,510,512,514,516,518,520,522,
		524,526,528,530,532,534,536,538,540,542,544,546,548,550,552,554,556,558,
		560,562,564,566,568,570,572,574,576,578,580,582,584,586,588,590,592,594,
		596,598,600,602,604,606,608,610,612,614,616,618,620,622,624,626,628,630,
		632,634,636,638,640,642,644,646,648,650,652,654,656,658,660,662,664,666,
		668,670,672,674,676,678,680,682,684,686,688,690,692,694,696,698,700,702,
		704,706,708,710,712,714,716,718,720,722,724,726,728,730,732,734,736,738,
		740,742,744,746,748,750,752,754,756,758,760,762,764,766,768,770,772,774,
		776,778,780,782,784,786,788,790,792,794,796,798,800,802,804,806,808,810,
		812,814,816,818,820,822,824,826,828,830,832,834,836,838,840,842,844,846,
		848,850,852,854,856,858,860,862,864,866,868,870,872,874,876,878,880,882,
		884,886,888,890,892,894,896,898,900,902,904,906,908,910,912,914,916,918,
		920,922,924,926,928,930,932,934,936,938,940,942,944,946,948,950,952,954,
		956,958,960,962,964,966,968,970,972,974,976,978,980,982,984,986,988,990,
		992,994,996,998,1000,1002,1004,1006,1008,1010,1012,1014,1016,1018,1020,
		1022,1024,1026,1028,1030,1032,1034,1036,1038,1040,1042,1044,1046,1048,
		1050,1052,1054,1056,1058,1060,1062,1064,1066,1068,1070,1072,1074,1076,
		1078,1080,1082,1084,1086,1088,1090,1092,1094,1096,1098,1100,1102,1104,
		1106,1108,1110,1112,1114,1116,1118,1120,1122,1124,1126,1128,1130,1132,
		1134,1136,1138,1140,1142,1144,1146,1148,1150,1152,1154,1156,1158,1160,
		1162,1164,1166,1168,1170,1172,1174,1176,1178,1180,1182,1184,1186,1188,
		1190,1192,1194,1196,1198,1200,1202,1204,1206,1208,1210,1212,1214,1216,
		1218,1220,1222,1224,1226,1228,1230,1232,1234,1236,1238,1240,1242,1244,
		1246,1248,1250,1252,1254,1256,1258,1260,1262,1264,1266,1268,1270,1272,
		1274,1276,1278,1280,1282,1284,1286,1288,1290,1292,1294,1296,1298,1300,
		1302,1304,1306,1308,1310,1312,1314,1316,1318,1320,1322,1324,1326,1328,
		1330,1332,1334,1336,1338,1340,1342,1344,1346,1348,1350,1352,1354,1356,
		1358,1360,1362,1364,1366,1368,1370,1372,1374,1376,1378,1380,1382,1384,
		1386,1388,1390,1392,1394,1396,1398,1400,1402,1404,1406,1408,1410,1412,
		1414,1416,1418,1420,1422,1424,1426,1428,1430,1432,1434,1436,1438,1440,
		1442,1444,1446,1448,1450,1452,1454,1456,1458,1460,1462,1464,1466,1468,
		1470,1472,1474,1476,1478,1480,1482,1484,1486,1488,1490,1492,1494,1496,
		1498,1500,1502,1504,1506,1508,1510,1512,1514,1516,1518,1520,1522,1524,
		1526,1528,1530,1532,1534,1536,1538,1540,1542,1544,1546,1548,1550,1552,
		1554,1556,1558,1560,1562,1564,1566,1568,1570,1572,1574,1576,1578,1580,
		1582,1584,1586,1588,1590,1592,1594,1596,1598,1600,1602,1604,1606,1608,
		1610,1612,1614,1616,1618,1620,1622,0,69,2,0,196,196,358,358,2,0,66,66,
		312,312,2,0,99,99,312,312,3,0,66,66,99,99,312,312,2,0,133,133,192,192,
		2,0,246,246,326,326,2,0,10,10,94,94,2,0,163,163,357,357,2,0,181,181,222,
		222,5,0,30,30,282,282,323,323,346,346,348,348,2,0,64,64,94,94,2,0,346,
		346,348,348,2,0,201,201,225,225,9,0,30,30,161,161,166,166,180,180,220,
		220,228,228,336,336,339,339,439,439,3,0,113,113,278,278,330,330,2,0,53,
		53,78,78,3,0,174,174,253,253,256,256,5,0,30,30,88,88,183,183,233,233,363,
		363,2,0,92,92,227,227,1,0,449,450,2,0,92,92,408,408,2,0,335,335,408,408,
		2,0,212,212,290,290,3,0,315,315,351,351,446,446,2,0,64,64,68,68,5,0,213,
		213,323,323,344,344,355,355,456,457,2,0,10,10,53,53,3,0,212,212,290,290,
		443,443,5,0,92,92,176,176,227,227,317,317,343,343,3,0,176,176,317,317,
		343,343,3,0,109,109,128,128,345,345,4,0,88,88,183,183,233,233,363,363,
		2,0,152,152,246,246,2,0,307,307,327,327,1,0,31,32,2,0,99,99,343,343,2,
		0,202,202,328,328,2,0,59,59,97,97,2,0,214,214,246,246,2,0,314,314,408,
		408,2,0,208,208,262,262,4,0,113,113,115,115,119,119,126,126,2,0,354,354,
		478,478,2,0,385,386,400,400,1,0,385,386,1,0,412,413,1,0,18,19,2,0,117,
		117,122,122,5,0,10,10,16,17,21,21,23,23,25,25,1,0,12,13,3,0,9,9,14,14,
		27,27,2,0,30,30,56,56,3,0,39,39,73,73,95,95,2,0,167,167,189,189,2,0,298,
		298,451,451,2,0,209,209,283,283,3,0,30,30,34,34,90,90,6,0,9,10,12,17,21,
		21,23,23,25,25,27,27,2,0,20,20,22,22,1,0,484,487,12,0,124,124,129,142,
		144,250,252,253,255,304,306,380,434,453,456,470,472,472,474,474,476,476,
		479,489,5,0,106,118,120,123,125,125,127,128,473,473,4,0,30,52,54,70,72,
		105,455,455,5,0,305,305,419,425,505,505,514,514,522,636,2,0,62,62,116,
		116,2,0,10,10,20,20,2,0,168,168,508,508,2,0,145,145,211,211,36,0,33,33,
		35,35,43,45,53,53,57,57,61,61,92,92,116,116,123,123,130,130,145,145,154,
		154,158,158,162,162,168,168,173,173,208,208,211,211,233,233,241,241,259,
		259,262,263,273,273,287,287,301,301,307,307,313,313,317,318,327,327,354,
		354,434,435,478,478,491,503,507,513,515,519,521,521,11558,0,1624,1,0,0,
		0,2,1627,1,0,0,0,4,1629,1,0,0,0,6,1637,1,0,0,0,8,1765,1,0,0,0,10,1767,
		1,0,0,0,12,1771,1,0,0,0,14,1774,1,0,0,0,16,1782,1,0,0,0,18,1787,1,0,0,
		0,20,1793,1,0,0,0,22,1814,1,0,0,0,24,1826,1,0,0,0,26,1828,1,0,0,0,28,1834,
		1,0,0,0,30,1844,1,0,0,0,32,1846,1,0,0,0,34,1855,1,0,0,0,36,1863,1,0,0,
		0,38,1869,1,0,0,0,40,1876,1,0,0,0,42,1878,1,0,0,0,44,1896,1,0,0,0,46,1901,
		1,0,0,0,48,1910,1,0,0,0,50,1912,1,0,0,0,52,1926,1,0,0,0,54,1928,1,0,0,
		0,56,1957,1,0,0,0,58,1959,1,0,0,0,60,1967,1,0,0,0,62,1977,1,0,0,0,64,1984,
		1,0,0,0,66,1990,1,0,0,0,68,2007,1,0,0,0,70,2012,1,0,0,0,72,2016,1,0,0,
		0,74,2018,1,0,0,0,76,2029,1,0,0,0,78,2033,1,0,0,0,80,2038,1,0,0,0,82,2043,
		1,0,0,0,84,2045,1,0,0,0,86,2057,1,0,0,0,88,2064,1,0,0,0,90,2066,1,0,0,
		0,92,2068,1,0,0,0,94,2070,1,0,0,0,96,2182,1,0,0,0,98,2184,1,0,0,0,100,
		2200,1,0,0,0,102,2202,1,0,0,0,104,2458,1,0,0,0,106,2465,1,0,0,0,108,2470,
		1,0,0,0,110,2475,1,0,0,0,112,2480,1,0,0,0,114,2488,1,0,0,0,116,2490,1,
		0,0,0,118,2497,1,0,0,0,120,2499,1,0,0,0,122,2507,1,0,0,0,124,2519,1,0,
		0,0,126,2535,1,0,0,0,128,2563,1,0,0,0,130,2565,1,0,0,0,132,2568,1,0,0,
		0,134,2576,1,0,0,0,136,2581,1,0,0,0,138,2612,1,0,0,0,140,2614,1,0,0,0,
		142,2641,1,0,0,0,144,2643,1,0,0,0,146,2647,1,0,0,0,148,2652,1,0,0,0,150,
		2659,1,0,0,0,152,2664,1,0,0,0,154,2702,1,0,0,0,156,2706,1,0,0,0,158,2713,
		1,0,0,0,160,2717,1,0,0,0,162,2719,1,0,0,0,164,2727,1,0,0,0,166,2738,1,
		0,0,0,168,2740,1,0,0,0,170,2748,1,0,0,0,172,2750,1,0,0,0,174,2799,1,0,
		0,0,176,2803,1,0,0,0,178,2810,1,0,0,0,180,2812,1,0,0,0,182,2820,1,0,0,
		0,184,2831,1,0,0,0,186,2835,1,0,0,0,188,2837,1,0,0,0,190,2842,1,0,0,0,
		192,2852,1,0,0,0,194,2863,1,0,0,0,196,2903,1,0,0,0,198,2908,1,0,0,0,200,
		2915,1,0,0,0,202,2917,1,0,0,0,204,2925,1,0,0,0,206,2928,1,0,0,0,208,2935,
		1,0,0,0,210,2995,1,0,0,0,212,3000,1,0,0,0,214,3007,1,0,0,0,216,3009,1,
		0,0,0,218,3017,1,0,0,0,220,3025,1,0,0,0,222,3030,1,0,0,0,224,3032,1,0,
		0,0,226,3040,1,0,0,0,228,3056,1,0,0,0,230,3067,1,0,0,0,232,3069,1,0,0,
		0,234,3073,1,0,0,0,236,3083,1,0,0,0,238,3091,1,0,0,0,240,3095,1,0,0,0,
		242,3097,1,0,0,0,244,3104,1,0,0,0,246,3126,1,0,0,0,248,3131,1,0,0,0,250,
		3138,1,0,0,0,252,3150,1,0,0,0,254,3155,1,0,0,0,256,3162,1,0,0,0,258,3164,
		1,0,0,0,260,3168,1,0,0,0,262,3182,1,0,0,0,264,3193,1,0,0,0,266,3206,1,
		0,0,0,268,3220,1,0,0,0,270,3222,1,0,0,0,272,3236,1,0,0,0,274,3244,1,0,
		0,0,276,3246,1,0,0,0,278,3253,1,0,0,0,280,3264,1,0,0,0,282,3275,1,0,0,
		0,284,3282,1,0,0,0,286,3285,1,0,0,0,288,3319,1,0,0,0,290,3323,1,0,0,0,
		292,3331,1,0,0,0,294,3333,1,0,0,0,296,3341,1,0,0,0,298,3356,1,0,0,0,300,
		3358,1,0,0,0,302,3365,1,0,0,0,304,3371,1,0,0,0,306,3375,1,0,0,0,308,3379,
		1,0,0,0,310,3381,1,0,0,0,312,3392,1,0,0,0,314,3394,1,0,0,0,316,3402,1,
		0,0,0,318,3416,1,0,0,0,320,3426,1,0,0,0,322,3428,1,0,0,0,324,3437,1,0,
		0,0,326,3440,1,0,0,0,328,3547,1,0,0,0,330,3549,1,0,0,0,332,3565,1,0,0,
		0,334,3568,1,0,0,0,336,3574,1,0,0,0,338,3591,1,0,0,0,340,3599,1,0,0,0,
		342,3601,1,0,0,0,344,3609,1,0,0,0,346,3614,1,0,0,0,348,3629,1,0,0,0,350,
		3631,1,0,0,0,352,3634,1,0,0,0,354,3636,1,0,0,0,356,3663,1,0,0,0,358,3668,
		1,0,0,0,360,3670,1,0,0,0,362,3677,1,0,0,0,364,3679,1,0,0,0,366,3745,1,
		0,0,0,368,3747,1,0,0,0,370,3762,1,0,0,0,372,3770,1,0,0,0,374,3793,1,0,
		0,0,376,3797,1,0,0,0,378,3817,1,0,0,0,380,3819,1,0,0,0,382,3828,1,0,0,
		0,384,3839,1,0,0,0,386,3854,1,0,0,0,388,3863,1,0,0,0,390,3868,1,0,0,0,
		392,3873,1,0,0,0,394,3878,1,0,0,0,396,3883,1,0,0,0,398,3885,1,0,0,0,400,
		3887,1,0,0,0,402,3896,1,0,0,0,404,3936,1,0,0,0,406,3942,1,0,0,0,408,3944,
		1,0,0,0,410,3959,1,0,0,0,412,3964,1,0,0,0,414,3967,1,0,0,0,416,3971,1,
		0,0,0,418,3976,1,0,0,0,420,3978,1,0,0,0,422,3980,1,0,0,0,424,3987,1,0,
		0,0,426,3991,1,0,0,0,428,3993,1,0,0,0,430,4001,1,0,0,0,432,4003,1,0,0,
		0,434,4007,1,0,0,0,436,4020,1,0,0,0,438,4025,1,0,0,0,440,4030,1,0,0,0,
		442,4044,1,0,0,0,444,4072,1,0,0,0,446,4074,1,0,0,0,448,4082,1,0,0,0,450,
		4088,1,0,0,0,452,4096,1,0,0,0,454,4108,1,0,0,0,456,4110,1,0,0,0,458,4225,
		1,0,0,0,460,4227,1,0,0,0,462,4231,1,0,0,0,464,4239,1,0,0,0,466,4250,1,
		0,0,0,468,4252,1,0,0,0,470,4256,1,0,0,0,472,4264,1,0,0,0,474,4270,1,0,
		0,0,476,4272,1,0,0,0,478,4317,1,0,0,0,480,4323,1,0,0,0,482,4325,1,0,0,
		0,484,4339,1,0,0,0,486,4372,1,0,0,0,488,4376,1,0,0,0,490,4381,1,0,0,0,
		492,4390,1,0,0,0,494,4394,1,0,0,0,496,4396,1,0,0,0,498,4421,1,0,0,0,500,
		4423,1,0,0,0,502,4443,1,0,0,0,504,4463,1,0,0,0,506,4483,1,0,0,0,508,4485,
		1,0,0,0,510,4491,1,0,0,0,512,4576,1,0,0,0,514,4601,1,0,0,0,516,4608,1,
		0,0,0,518,4624,1,0,0,0,520,4626,1,0,0,0,522,4628,1,0,0,0,524,4636,1,0,
		0,0,526,4642,1,0,0,0,528,4646,1,0,0,0,530,4654,1,0,0,0,532,4665,1,0,0,
		0,534,4814,1,0,0,0,536,4818,1,0,0,0,538,4911,1,0,0,0,540,4916,1,0,0,0,
		542,4920,1,0,0,0,544,4926,1,0,0,0,546,4994,1,0,0,0,548,4996,1,0,0,0,550,
		5000,1,0,0,0,552,5002,1,0,0,0,554,5029,1,0,0,0,556,5046,1,0,0,0,558,5048,
		1,0,0,0,560,5065,1,0,0,0,562,5125,1,0,0,0,564,5127,1,0,0,0,566,5138,1,
		0,0,0,568,5144,1,0,0,0,570,5146,1,0,0,0,572,5170,1,0,0,0,574,5176,1,0,
		0,0,576,5182,1,0,0,0,578,5184,1,0,0,0,580,5193,1,0,0,0,582,5205,1,0,0,
		0,584,5234,1,0,0,0,586,5236,1,0,0,0,588,5273,1,0,0,0,590,5277,1,0,0,0,
		592,5281,1,0,0,0,594,5285,1,0,0,0,596,5290,1,0,0,0,598,5292,1,0,0,0,600,
		5311,1,0,0,0,602,5324,1,0,0,0,604,5332,1,0,0,0,606,5334,1,0,0,0,608,5345,
		1,0,0,0,610,5349,1,0,0,0,612,5354,1,0,0,0,614,5361,1,0,0,0,616,5363,1,
		0,0,0,618,5384,1,0,0,0,620,5386,1,0,0,0,622,5392,1,0,0,0,624,5400,1,0,
		0,0,626,5416,1,0,0,0,628,5418,1,0,0,0,630,5424,1,0,0,0,632,5445,1,0,0,
		0,634,5454,1,0,0,0,636,5460,1,0,0,0,638,5462,1,0,0,0,640,5478,1,0,0,0,
		642,5480,1,0,0,0,644,5485,1,0,0,0,646,5487,1,0,0,0,648,5502,1,0,0,0,650,
		5510,1,0,0,0,652,5513,1,0,0,0,654,5522,1,0,0,0,656,5563,1,0,0,0,658,5573,
		1,0,0,0,660,5580,1,0,0,0,662,5582,1,0,0,0,664,5597,1,0,0,0,666,5599,1,
		0,0,0,668,5602,1,0,0,0,670,5610,1,0,0,0,672,5617,1,0,0,0,674,5623,1,0,
		0,0,676,5661,1,0,0,0,678,5675,1,0,0,0,680,5689,1,0,0,0,682,5713,1,0,0,
		0,684,5720,1,0,0,0,686,5725,1,0,0,0,688,5733,1,0,0,0,690,5736,1,0,0,0,
		692,5740,1,0,0,0,694,5747,1,0,0,0,696,5783,1,0,0,0,698,5790,1,0,0,0,700,
		5792,1,0,0,0,702,5805,1,0,0,0,704,5807,1,0,0,0,706,5852,1,0,0,0,708,5854,
		1,0,0,0,710,5889,1,0,0,0,712,5891,1,0,0,0,714,5893,1,0,0,0,716,5895,1,
		0,0,0,718,5903,1,0,0,0,720,5917,1,0,0,0,722,6387,1,0,0,0,724,6391,1,0,
		0,0,726,6396,1,0,0,0,728,6455,1,0,0,0,730,6459,1,0,0,0,732,6678,1,0,0,
		0,734,6680,1,0,0,0,736,6688,1,0,0,0,738,6704,1,0,0,0,740,6711,1,0,0,0,
		742,6713,1,0,0,0,744,6904,1,0,0,0,746,6906,1,0,0,0,748,6914,1,0,0,0,750,
		6922,1,0,0,0,752,6951,1,0,0,0,754,6953,1,0,0,0,756,6962,1,0,0,0,758,6970,
		1,0,0,0,760,7009,1,0,0,0,762,7023,1,0,0,0,764,7025,1,0,0,0,766,7045,1,
		0,0,0,768,7047,1,0,0,0,770,7060,1,0,0,0,772,7064,1,0,0,0,774,7066,1,0,
		0,0,776,7071,1,0,0,0,778,7073,1,0,0,0,780,7080,1,0,0,0,782,7082,1,0,0,
		0,784,7089,1,0,0,0,786,7141,1,0,0,0,788,7147,1,0,0,0,790,7159,1,0,0,0,
		792,7161,1,0,0,0,794,7173,1,0,0,0,796,7181,1,0,0,0,798,7183,1,0,0,0,800,
		7215,1,0,0,0,802,7217,1,0,0,0,804,7220,1,0,0,0,806,7228,1,0,0,0,808,7231,
		1,0,0,0,810,7235,1,0,0,0,812,7250,1,0,0,0,814,7254,1,0,0,0,816,7256,1,
		0,0,0,818,7267,1,0,0,0,820,7272,1,0,0,0,822,7286,1,0,0,0,824,7294,1,0,
		0,0,826,7296,1,0,0,0,828,7302,1,0,0,0,830,7307,1,0,0,0,832,7314,1,0,0,
		0,834,7342,1,0,0,0,836,7344,1,0,0,0,838,7423,1,0,0,0,840,7425,1,0,0,0,
		842,7427,1,0,0,0,844,7451,1,0,0,0,846,7456,1,0,0,0,848,7471,1,0,0,0,850,
		7483,1,0,0,0,852,7485,1,0,0,0,854,7493,1,0,0,0,856,7495,1,0,0,0,858,7500,
		1,0,0,0,860,7505,1,0,0,0,862,7509,1,0,0,0,864,7513,1,0,0,0,866,7517,1,
		0,0,0,868,7521,1,0,0,0,870,7528,1,0,0,0,872,7530,1,0,0,0,874,7533,1,0,
		0,0,876,7543,1,0,0,0,878,7561,1,0,0,0,880,7572,1,0,0,0,882,7574,1,0,0,
		0,884,7582,1,0,0,0,886,7587,1,0,0,0,888,7592,1,0,0,0,890,7594,1,0,0,0,
		892,7605,1,0,0,0,894,7611,1,0,0,0,896,7640,1,0,0,0,898,7647,1,0,0,0,900,
		7659,1,0,0,0,902,7661,1,0,0,0,904,7669,1,0,0,0,906,7693,1,0,0,0,908,7695,
		1,0,0,0,910,7697,1,0,0,0,912,7705,1,0,0,0,914,7721,1,0,0,0,916,7732,1,
		0,0,0,918,7737,1,0,0,0,920,7739,1,0,0,0,922,7770,1,0,0,0,924,7789,1,0,
		0,0,926,7802,1,0,0,0,928,7809,1,0,0,0,930,7820,1,0,0,0,932,7822,1,0,0,
		0,934,7833,1,0,0,0,936,7847,1,0,0,0,938,7851,1,0,0,0,940,7857,1,0,0,0,
		942,7859,1,0,0,0,944,7868,1,0,0,0,946,7886,1,0,0,0,948,7888,1,0,0,0,950,
		7891,1,0,0,0,952,7899,1,0,0,0,954,7907,1,0,0,0,956,7916,1,0,0,0,958,7924,
		1,0,0,0,960,7928,1,0,0,0,962,7938,1,0,0,0,964,7961,1,0,0,0,966,7963,1,
		0,0,0,968,7973,1,0,0,0,970,8004,1,0,0,0,972,8006,1,0,0,0,974,8012,1,0,
		0,0,976,8020,1,0,0,0,978,8032,1,0,0,0,980,8036,1,0,0,0,982,8046,1,0,0,
		0,984,8050,1,0,0,0,986,8066,1,0,0,0,988,8070,1,0,0,0,990,8075,1,0,0,0,
		992,8077,1,0,0,0,994,8087,1,0,0,0,996,8091,1,0,0,0,998,8093,1,0,0,0,1000,
		8097,1,0,0,0,1002,8105,1,0,0,0,1004,8121,1,0,0,0,1006,8125,1,0,0,0,1008,
		8150,1,0,0,0,1010,8152,1,0,0,0,1012,8161,1,0,0,0,1014,8163,1,0,0,0,1016,
		8170,1,0,0,0,1018,8174,1,0,0,0,1020,8176,1,0,0,0,1022,8178,1,0,0,0,1024,
		8184,1,0,0,0,1026,8186,1,0,0,0,1028,8199,1,0,0,0,1030,8201,1,0,0,0,1032,
		8204,1,0,0,0,1034,8209,1,0,0,0,1036,8214,1,0,0,0,1038,8223,1,0,0,0,1040,
		8229,1,0,0,0,1042,8233,1,0,0,0,1044,8236,1,0,0,0,1046,8240,1,0,0,0,1048,
		8244,1,0,0,0,1050,8259,1,0,0,0,1052,8261,1,0,0,0,1054,8278,1,0,0,0,1056,
		8289,1,0,0,0,1058,8291,1,0,0,0,1060,8347,1,0,0,0,1062,8371,1,0,0,0,1064,
		8382,1,0,0,0,1066,8385,1,0,0,0,1068,8407,1,0,0,0,1070,8409,1,0,0,0,1072,
		8420,1,0,0,0,1074,8434,1,0,0,0,1076,8436,1,0,0,0,1078,8444,1,0,0,0,1080,
		8451,1,0,0,0,1082,8464,1,0,0,0,1084,8476,1,0,0,0,1086,8478,1,0,0,0,1088,
		8481,1,0,0,0,1090,8495,1,0,0,0,1092,8500,1,0,0,0,1094,8505,1,0,0,0,1096,
		8515,1,0,0,0,1098,8519,1,0,0,0,1100,8521,1,0,0,0,1102,8529,1,0,0,0,1104,
		8533,1,0,0,0,1106,8554,1,0,0,0,1108,8562,1,0,0,0,1110,8572,1,0,0,0,1112,
		8584,1,0,0,0,1114,8586,1,0,0,0,1116,8600,1,0,0,0,1118,8620,1,0,0,0,1120,
		8629,1,0,0,0,1122,8645,1,0,0,0,1124,8651,1,0,0,0,1126,8657,1,0,0,0,1128,
		8669,1,0,0,0,1130,8687,1,0,0,0,1132,8694,1,0,0,0,1134,8698,1,0,0,0,1136,
		8702,1,0,0,0,1138,8704,1,0,0,0,1140,8710,1,0,0,0,1142,8713,1,0,0,0,1144,
		8720,1,0,0,0,1146,8733,1,0,0,0,1148,8737,1,0,0,0,1150,8739,1,0,0,0,1152,
		8748,1,0,0,0,1154,8757,1,0,0,0,1156,8785,1,0,0,0,1158,8787,1,0,0,0,1160,
		8797,1,0,0,0,1162,8799,1,0,0,0,1164,8801,1,0,0,0,1166,8805,1,0,0,0,1168,
		8813,1,0,0,0,1170,8821,1,0,0,0,1172,8829,1,0,0,0,1174,8843,1,0,0,0,1176,
		8852,1,0,0,0,1178,8856,1,0,0,0,1180,8860,1,0,0,0,1182,8886,1,0,0,0,1184,
		8900,1,0,0,0,1186,8915,1,0,0,0,1188,8925,1,0,0,0,1190,8929,1,0,0,0,1192,
		8937,1,0,0,0,1194,8945,1,0,0,0,1196,8951,1,0,0,0,1198,8955,1,0,0,0,1200,
		8962,1,0,0,0,1202,8967,1,0,0,0,1204,8982,1,0,0,0,1206,9062,1,0,0,0,1208,
		9064,1,0,0,0,1210,9066,1,0,0,0,1212,9096,1,0,0,0,1214,9100,1,0,0,0,1216,
		9279,1,0,0,0,1218,9286,1,0,0,0,1220,9299,1,0,0,0,1222,9301,1,0,0,0,1224,
		9306,1,0,0,0,1226,9314,1,0,0,0,1228,9319,1,0,0,0,1230,9326,1,0,0,0,1232,
		9343,1,0,0,0,1234,9345,1,0,0,0,1236,9355,1,0,0,0,1238,9364,1,0,0,0,1240,
		9369,1,0,0,0,1242,9371,1,0,0,0,1244,9379,1,0,0,0,1246,9389,1,0,0,0,1248,
		9391,1,0,0,0,1250,9400,1,0,0,0,1252,9406,1,0,0,0,1254,9421,1,0,0,0,1256,
		9429,1,0,0,0,1258,9438,1,0,0,0,1260,9450,1,0,0,0,1262,9464,1,0,0,0,1264,
		9466,1,0,0,0,1266,9473,1,0,0,0,1268,9479,1,0,0,0,1270,9483,1,0,0,0,1272,
		9485,1,0,0,0,1274,9493,1,0,0,0,1276,9501,1,0,0,0,1278,9515,1,0,0,0,1280,
		9517,1,0,0,0,1282,9525,1,0,0,0,1284,9538,1,0,0,0,1286,9540,1,0,0,0,1288,
		9548,1,0,0,0,1290,9555,1,0,0,0,1292,9568,1,0,0,0,1294,9578,1,0,0,0,1296,
		9580,1,0,0,0,1298,9582,1,0,0,0,1300,9596,1,0,0,0,1302,9625,1,0,0,0,1304,
		9634,1,0,0,0,1306,9641,1,0,0,0,1308,9643,1,0,0,0,1310,9650,1,0,0,0,1312,
		9654,1,0,0,0,1314,9662,1,0,0,0,1316,9666,1,0,0,0,1318,9668,1,0,0,0,1320,
		9687,1,0,0,0,1322,9691,1,0,0,0,1324,9694,1,0,0,0,1326,9701,1,0,0,0,1328,
		9706,1,0,0,0,1330,9708,1,0,0,0,1332,9724,1,0,0,0,1334,9726,1,0,0,0,1336,
		9734,1,0,0,0,1338,9738,1,0,0,0,1340,9746,1,0,0,0,1342,9748,1,0,0,0,1344,
		9750,1,0,0,0,1346,9759,1,0,0,0,1348,9793,1,0,0,0,1350,9795,1,0,0,0,1352,
		9797,1,0,0,0,1354,9799,1,0,0,0,1356,9801,1,0,0,0,1358,9803,1,0,0,0,1360,
		9817,1,0,0,0,1362,9822,1,0,0,0,1364,9829,1,0,0,0,1366,9831,1,0,0,0,1368,
		9836,1,0,0,0,1370,9838,1,0,0,0,1372,9852,1,0,0,0,1374,9858,1,0,0,0,1376,
		9864,1,0,0,0,1378,9870,1,0,0,0,1380,9878,1,0,0,0,1382,9887,1,0,0,0,1384,
		9889,1,0,0,0,1386,9891,1,0,0,0,1388,9945,1,0,0,0,1390,9947,1,0,0,0,1392,
		9949,1,0,0,0,1394,9951,1,0,0,0,1396,9953,1,0,0,0,1398,9960,1,0,0,0,1400,
		9983,1,0,0,0,1402,9985,1,0,0,0,1404,9991,1,0,0,0,1406,9995,1,0,0,0,1408,
		9997,1,0,0,0,1410,10004,1,0,0,0,1412,10011,1,0,0,0,1414,10014,1,0,0,0,
		1416,10018,1,0,0,0,1418,10025,1,0,0,0,1420,10027,1,0,0,0,1422,10051,1,
		0,0,0,1424,10053,1,0,0,0,1426,10060,1,0,0,0,1428,10062,1,0,0,0,1430,10070,
		1,0,0,0,1432,10073,1,0,0,0,1434,10077,1,0,0,0,1436,10079,1,0,0,0,1438,
		10083,1,0,0,0,1440,10085,1,0,0,0,1442,10090,1,0,0,0,1444,10095,1,0,0,0,
		1446,10101,1,0,0,0,1448,10105,1,0,0,0,1450,10107,1,0,0,0,1452,10112,1,
		0,0,0,1454,10142,1,0,0,0,1456,10144,1,0,0,0,1458,10162,1,0,0,0,1460,10166,
		1,0,0,0,1462,10168,1,0,0,0,1464,10173,1,0,0,0,1466,10182,1,0,0,0,1468,
		10184,1,0,0,0,1470,10192,1,0,0,0,1472,10196,1,0,0,0,1474,10198,1,0,0,0,
		1476,10202,1,0,0,0,1478,10213,1,0,0,0,1480,10230,1,0,0,0,1482,10236,1,
		0,0,0,1484,10238,1,0,0,0,1486,10248,1,0,0,0,1488,10251,1,0,0,0,1490,10255,
		1,0,0,0,1492,10263,1,0,0,0,1494,10265,1,0,0,0,1496,10268,1,0,0,0,1498,
		10273,1,0,0,0,1500,10278,1,0,0,0,1502,10300,1,0,0,0,1504,10314,1,0,0,0,
		1506,10318,1,0,0,0,1508,10323,1,0,0,0,1510,10325,1,0,0,0,1512,10327,1,
		0,0,0,1514,10339,1,0,0,0,1516,10341,1,0,0,0,1518,10346,1,0,0,0,1520,10348,
		1,0,0,0,1522,10366,1,0,0,0,1524,10394,1,0,0,0,1526,10404,1,0,0,0,1528,
		10413,1,0,0,0,1530,10418,1,0,0,0,1532,10420,1,0,0,0,1534,10424,1,0,0,0,
		1536,10432,1,0,0,0,1538,10440,1,0,0,0,1540,10442,1,0,0,0,1542,10449,1,
		0,0,0,1544,10452,1,0,0,0,1546,10468,1,0,0,0,1548,10470,1,0,0,0,1550,10484,
		1,0,0,0,1552,10486,1,0,0,0,1554,10513,1,0,0,0,1556,10515,1,0,0,0,1558,
		10526,1,0,0,0,1560,10532,1,0,0,0,1562,10536,1,0,0,0,1564,10538,1,0,0,0,
		1566,10546,1,0,0,0,1568,10551,1,0,0,0,1570,10570,1,0,0,0,1572,10572,1,
		0,0,0,1574,10577,1,0,0,0,1576,10581,1,0,0,0,1578,10584,1,0,0,0,1580,10588,
		1,0,0,0,1582,10598,1,0,0,0,1584,10612,1,0,0,0,1586,10616,1,0,0,0,1588,
		10621,1,0,0,0,1590,10624,1,0,0,0,1592,10628,1,0,0,0,1594,10633,1,0,0,0,
		1596,10644,1,0,0,0,1598,10648,1,0,0,0,1600,10652,1,0,0,0,1602,10656,1,
		0,0,0,1604,10661,1,0,0,0,1606,10665,1,0,0,0,1608,10667,1,0,0,0,1610,10669,
		1,0,0,0,1612,10677,1,0,0,0,1614,10679,1,0,0,0,1616,10681,1,0,0,0,1618,
		10683,1,0,0,0,1620,10685,1,0,0,0,1622,10693,1,0,0,0,1624,1625,3,4,2,0,
		1625,1626,5,0,0,1,1626,1,1,0,0,0,1627,1628,3,1396,698,0,1628,3,1,0,0,0,
		1629,1630,3,6,3,0,1630,5,1,0,0,0,1631,1633,3,8,4,0,1632,1634,5,7,0,0,1633,
		1632,1,0,0,0,1633,1634,1,0,0,0,1634,1636,1,0,0,0,1635,1631,1,0,0,0,1636,
		1639,1,0,0,0,1637,1635,1,0,0,0,1637,1638,1,0,0,0,1638,7,1,0,0,0,1639,1637,
		1,0,0,0,1640,1766,3,452,226,0,1641,1766,3,826,413,0,1642,1766,3,816,408,
		0,1643,1766,3,818,409,0,1644,1766,3,578,289,0,1645,1766,3,832,416,0,1646,
		1766,3,478,239,0,1647,1766,3,322,161,0,1648,1766,3,328,164,0,1649,1766,
		3,338,169,0,1650,1766,3,364,182,0,1651,1766,3,670,335,0,1652,1766,3,38,
		19,0,1653,1766,3,728,364,0,1654,1766,3,732,366,0,1655,1766,3,744,372,0,
		1656,1766,3,734,367,0,1657,1766,3,742,371,0,1658,1766,3,384,192,0,1659,
		1766,3,280,140,0,1660,1766,3,828,414,0,1661,1766,3,96,48,0,1662,1766,3,
		720,360,0,1663,1766,3,134,67,0,1664,1766,3,752,376,0,1665,1766,3,32,16,
		0,1666,1766,3,28,14,0,1667,1766,3,760,380,0,1668,1766,3,262,131,0,1669,
		1766,3,838,419,0,1670,1766,3,836,418,0,1671,1766,3,380,190,0,1672,1766,
		3,850,425,0,1673,1766,3,12,6,0,1674,1766,3,92,46,0,1675,1766,3,140,70,
		0,1676,1766,3,844,422,0,1677,1766,3,534,267,0,1678,1766,3,86,43,0,1679,
		1766,3,142,71,0,1680,1766,3,400,200,0,1681,1766,3,264,132,0,1682,1766,
		3,456,228,0,1683,1766,3,696,348,0,1684,1766,3,842,421,0,1685,1766,3,830,
		415,0,1686,1766,3,316,158,0,1687,1766,3,330,165,0,1688,1766,3,356,178,
		0,1689,1766,3,366,183,0,1690,1766,3,616,308,0,1691,1766,3,36,18,0,1692,
		1766,3,270,135,0,1693,1766,3,482,241,0,1694,1766,3,496,248,0,1695,1766,
		3,746,373,0,1696,1766,3,498,249,0,1697,1766,3,382,191,0,1698,1766,3,296,
		148,0,1699,1766,3,42,21,0,1700,1766,3,278,139,0,1701,1766,3,172,86,0,1702,
		1766,3,754,377,0,1703,1766,3,260,130,0,1704,1766,3,310,155,0,1705,1766,
		3,704,352,0,1706,1766,3,404,202,0,1707,1766,3,444,222,0,1708,1766,3,14,
		7,0,1709,1766,3,26,13,0,1710,1766,3,374,187,0,1711,1766,3,804,402,0,1712,
		1766,3,900,450,0,1713,1766,3,952,476,0,1714,1766,3,458,229,0,1715,1766,
		3,928,464,0,1716,1766,3,94,47,0,1717,1766,3,690,345,0,1718,1766,3,700,
		350,0,1719,1766,3,504,252,0,1720,1766,3,506,253,0,1721,1766,3,508,254,
		0,1722,1766,3,512,256,0,1723,1766,3,762,381,0,1724,1766,3,314,157,0,1725,
		1766,3,708,354,0,1726,1766,3,34,17,0,1727,1766,3,378,189,0,1728,1766,3,
		820,410,0,1729,1766,3,896,448,0,1730,1766,3,878,439,0,1731,1766,3,544,
		272,0,1732,1766,3,552,276,0,1733,1766,3,570,285,0,1734,1766,3,368,184,
		0,1735,1766,3,588,294,0,1736,1766,3,902,451,0,1737,1766,3,920,460,0,1738,
		1766,3,782,391,0,1739,1766,3,276,138,0,1740,1766,3,802,401,0,1741,1766,
		3,932,466,0,1742,1766,3,778,389,0,1743,1766,3,890,445,0,1744,1766,3,510,
		255,0,1745,1766,3,710,355,0,1746,1766,3,678,339,0,1747,1766,3,676,338,
		0,1748,1766,3,680,340,0,1749,1766,3,722,361,0,1750,1766,3,554,277,0,1751,
		1766,3,572,286,0,1752,1766,3,764,382,0,1753,1766,3,538,269,0,1754,1766,
		3,960,480,0,1755,1766,3,786,393,0,1756,1766,3,530,265,0,1757,1766,3,784,
		392,0,1758,1766,3,942,471,0,1759,1766,3,848,424,0,1760,1766,3,74,37,0,
		1761,1766,3,50,25,0,1762,1766,3,84,42,0,1763,1766,3,798,399,0,1764,1766,
		3,10,5,0,1765,1640,1,0,0,0,1765,1641,1,0,0,0,1765,1642,1,0,0,0,1765,1643,
		1,0,0,0,1765,1644,1,0,0,0,1765,1645,1,0,0,0,1765,1646,1,0,0,0,1765,1647,
		1,0,0,0,1765,1648,1,0,0,0,1765,1649,1,0,0,0,1765,1650,1,0,0,0,1765,1651,
		1,0,0,0,1765,1652,1,0,0,0,1765,1653,1,0,0,0,1765,1654,1,0,0,0,1765,1655,
		1,0,0,0,1765,1656,1,0,0,0,1765,1657,1,0,0,0,1765,1658,1,0,0,0,1765,1659,
		1,0,0,0,1765,1660,1,0,0,0,1765,1661,1,0,0,0,1765,1662,1,0,0,0,1765,1663,
		1,0,0,0,1765,1664,1,0,0,0,1765,1665,1,0,0,0,1765,1666,1,0,0,0,1765,1667,
		1,0,0,0,1765,1668,1,0,0,0,1765,1669,1,0,0,0,1765,1670,1,0,0,0,1765,1671,
		1,0,0,0,1765,1672,1,0,0,0,1765,1673,1,0,0,0,1765,1674,1,0,0,0,1765,1675,
		1,0,0,0,1765,1676,1,0,0,0,1765,1677,1,0,0,0,1765,1678,1,0,0,0,1765,1679,
		1,0,0,0,1765,1680,1,0,0,0,1765,1681,1,0,0,0,1765,1682,1,0,0,0,1765,1683,
		1,0,0,0,1765,1684,1,0,0,0,1765,1685,1,0,0,0,1765,1686,1,0,0,0,1765,1687,
		1,0,0,0,1765,1688,1,0,0,0,1765,1689,1,0,0,0,1765,1690,1,0,0,0,1765,1691,
		1,0,0,0,1765,1692,1,0,0,0,1765,1693,1,0,0,0,1765,1694,1,0,0,0,1765,1695,
		1,0,0,0,1765,1696,1,0,0,0,1765,1697,1,0,0,0,1765,1698,1,0,0,0,1765,1699,
		1,0,0,0,1765,1700,1,0,0,0,1765,1701,1,0,0,0,1765,1702,1,0,0,0,1765,1703,
		1,0,0,0,1765,1704,1,0,0,0,1765,1705,1,0,0,0,1765,1706,1,0,0,0,1765,1707,
		1,0,0,0,1765,1708,1,0,0,0,1765,1709,1,0,0,0,1765,1710,1,0,0,0,1765,1711,
		1,0,0,0,1765,1712,1,0,0,0,1765,1713,1,0,0,0,1765,1714,1,0,0,0,1765,1715,
		1,0,0,0,1765,1716,1,0,0,0,1765,1717,1,0,0,0,1765,1718,1,0,0,0,1765,1719,
		1,0,0,0,1765,1720,1,0,0,0,1765,1721,1,0,0,0,1765,1722,1,0,0,0,1765,1723,
		1,0,0,0,1765,1724,1,0,0,0,1765,1725,1,0,0,0,1765,1726,1,0,0,0,1765,1727,
		1,0,0,0,1765,1728,1,0,0,0,1765,1729,1,0,0,0,1765,1730,1,0,0,0,1765,1731,
		1,0,0,0,1765,1732,1,0,0,0,1765,1733,1,0,0,0,1765,1734,1,0,0,0,1765,1735,
		1,0,0,0,1765,1736,1,0,0,0,1765,1737,1,0,0,0,1765,1738,1,0,0,0,1765,1739,
		1,0,0,0,1765,1740,1,0,0,0,1765,1741,1,0,0,0,1765,1742,1,0,0,0,1765,1743,
		1,0,0,0,1765,1744,1,0,0,0,1765,1745,1,0,0,0,1765,1746,1,0,0,0,1765,1747,
		1,0,0,0,1765,1748,1,0,0,0,1765,1749,1,0,0,0,1765,1750,1,0,0,0,1765,1751,
		1,0,0,0,1765,1752,1,0,0,0,1765,1753,1,0,0,0,1765,1754,1,0,0,0,1765,1755,
		1,0,0,0,1765,1756,1,0,0,0,1765,1757,1,0,0,0,1765,1758,1,0,0,0,1765,1759,
		1,0,0,0,1765,1760,1,0,0,0,1765,1761,1,0,0,0,1765,1762,1,0,0,0,1765,1763,
		1,0,0,0,1765,1764,1,0,0,0,1766,9,1,0,0,0,1767,1769,5,669,0,0,1768,1770,
		5,670,0,0,1769,1768,1,0,0,0,1769,1770,1,0,0,0,1770,11,1,0,0,0,1771,1772,
		5,434,0,0,1772,1773,3,1210,605,0,1773,13,1,0,0,0,1774,1775,5,46,0,0,1775,
		1776,5,312,0,0,1776,1777,3,1366,683,0,1777,1778,3,16,8,0,1778,1779,3,18,
		9,0,1779,15,1,0,0,0,1780,1783,5,105,0,0,1781,1783,1,0,0,0,1782,1780,1,
		0,0,0,1782,1781,1,0,0,0,1783,17,1,0,0,0,1784,1786,3,24,12,0,1785,1784,
		1,0,0,0,1786,1789,1,0,0,0,1787,1785,1,0,0,0,1787,1788,1,0,0,0,1788,19,
		1,0,0,0,1789,1787,1,0,0,0,1790,1792,3,22,11,0,1791,1790,1,0,0,0,1792,1795,
		1,0,0,0,1793,1791,1,0,0,0,1793,1794,1,0,0,0,1794,21,1,0,0,0,1795,1793,
		1,0,0,0,1796,1799,5,281,0,0,1797,1800,3,1358,679,0,1798,1800,5,78,0,0,
		1799,1797,1,0,0,0,1799,1798,1,0,0,0,1800,1815,1,0,0,0,1801,1802,7,0,0,
		0,1802,1803,5,281,0,0,1803,1815,3,1358,679,0,1804,1815,5,229,0,0,1805,
		1806,5,165,0,0,1806,1807,5,74,0,0,1807,1815,3,1364,682,0,1808,1809,5,365,
		0,0,1809,1810,5,362,0,0,1810,1815,3,1358,679,0,1811,1812,5,99,0,0,1812,
		1815,3,1370,685,0,1813,1815,3,1382,691,0,1814,1796,1,0,0,0,1814,1801,1,
		0,0,0,1814,1804,1,0,0,0,1814,1805,1,0,0,0,1814,1808,1,0,0,0,1814,1811,
		1,0,0,0,1814,1813,1,0,0,0,1815,23,1,0,0,0,1816,1827,3,22,11,0,1817,1818,
		5,342,0,0,1818,1827,3,1356,678,0,1819,1820,5,134,0,0,1820,1827,3,1370,
		685,0,1821,1822,5,312,0,0,1822,1827,3,1370,685,0,1823,1824,5,68,0,0,1824,
		1825,7,1,0,0,1825,1827,3,1370,685,0,1826,1816,1,0,0,0,1826,1817,1,0,0,
		0,1826,1819,1,0,0,0,1826,1821,1,0,0,0,1826,1823,1,0,0,0,1827,25,1,0,0,
		0,1828,1829,5,46,0,0,1829,1830,5,99,0,0,1830,1831,3,1366,683,0,1831,1832,
		3,16,8,0,1832,1833,3,18,9,0,1833,27,1,0,0,0,1834,1835,5,138,0,0,1835,1836,
		7,2,0,0,1836,1837,3,1368,684,0,1837,1838,3,16,8,0,1838,1839,3,20,10,0,
		1839,29,1,0,0,0,1840,1845,1,0,0,0,1841,1842,5,68,0,0,1842,1843,5,176,0,
		0,1843,1845,3,1340,670,0,1844,1840,1,0,0,0,1844,1841,1,0,0,0,1845,31,1,
		0,0,0,1846,1847,5,138,0,0,1847,1849,7,2,0,0,1848,1850,5,30,0,0,1849,1848,
		1,0,0,0,1849,1850,1,0,0,0,1850,1851,1,0,0,0,1851,1852,3,1368,684,0,1852,
		1853,3,30,15,0,1853,1854,3,80,40,0,1854,33,1,0,0,0,1855,1856,5,192,0,0,
		1856,1859,7,3,0,0,1857,1858,5,221,0,0,1858,1860,5,390,0,0,1859,1857,1,
		0,0,0,1859,1860,1,0,0,0,1860,1861,1,0,0,0,1861,1862,3,1370,685,0,1862,
		35,1,0,0,0,1863,1864,5,46,0,0,1864,1865,5,66,0,0,1865,1866,3,1366,683,
		0,1866,1867,3,16,8,0,1867,1868,3,18,9,0,1868,37,1,0,0,0,1869,1870,5,138,
		0,0,1870,1871,5,66,0,0,1871,1872,3,1368,684,0,1872,1873,3,40,20,0,1873,
		1874,5,99,0,0,1874,1875,3,1370,685,0,1875,39,1,0,0,0,1876,1877,7,4,0,0,
		1877,41,1,0,0,0,1878,1879,5,46,0,0,1879,1883,5,317,0,0,1880,1881,5,221,
		0,0,1881,1882,5,77,0,0,1882,1884,5,390,0,0,1883,1880,1,0,0,0,1883,1884,
		1,0,0,0,1884,1890,1,0,0,0,1885,1886,3,44,22,0,1886,1887,5,106,0,0,1887,
		1888,3,1368,684,0,1888,1891,1,0,0,0,1889,1891,3,1372,686,0,1890,1885,1,
		0,0,0,1890,1889,1,0,0,0,1891,1892,1,0,0,0,1892,1893,3,46,23,0,1893,43,
		1,0,0,0,1894,1897,3,1372,686,0,1895,1897,1,0,0,0,1896,1894,1,0,0,0,1896,
		1895,1,0,0,0,1897,45,1,0,0,0,1898,1900,3,48,24,0,1899,1898,1,0,0,0,1900,
		1903,1,0,0,0,1901,1899,1,0,0,0,1901,1902,1,0,0,0,1902,47,1,0,0,0,1903,
		1901,1,0,0,0,1904,1911,3,172,86,0,1905,1911,3,588,294,0,1906,1911,3,278,
		139,0,1907,1911,3,404,202,0,1908,1911,3,552,276,0,1909,1911,3,798,399,
		0,1910,1904,1,0,0,0,1910,1905,1,0,0,0,1910,1906,1,0,0,0,1910,1907,1,0,
		0,0,1910,1908,1,0,0,0,1910,1909,1,0,0,0,1911,49,1,0,0,0,1912,1914,5,327,
		0,0,1913,1915,7,5,0,0,1914,1913,1,0,0,0,1914,1915,1,0,0,0,1915,1916,1,
		0,0,0,1916,1917,3,52,26,0,1917,51,1,0,0,0,1918,1919,5,350,0,0,1919,1927,
		3,792,396,0,1920,1921,5,326,0,0,1921,1922,5,155,0,0,1922,1923,5,36,0,0,
		1923,1924,5,350,0,0,1924,1927,3,792,396,0,1925,1927,3,56,28,0,1926,1918,
		1,0,0,0,1926,1920,1,0,0,0,1926,1925,1,0,0,0,1927,53,1,0,0,0,1928,1929,
		3,58,29,0,1929,1930,7,6,0,0,1930,1931,3,60,30,0,1931,55,1,0,0,0,1932,1958,
		3,54,27,0,1933,1934,3,58,29,0,1934,1935,5,64,0,0,1935,1936,5,435,0,0,1936,
		1958,1,0,0,0,1937,1938,5,412,0,0,1938,1939,5,380,0,0,1939,1958,3,68,34,
		0,1940,1941,5,153,0,0,1941,1958,3,1358,679,0,1942,1943,5,317,0,0,1943,
		1958,3,1358,679,0,1944,1945,5,261,0,0,1945,1958,3,70,35,0,1946,1947,5,
		312,0,0,1947,1958,3,72,36,0,1948,1949,5,326,0,0,1949,1950,5,106,0,0,1950,
		1958,3,72,36,0,1951,1952,5,377,0,0,1952,1953,5,273,0,0,1953,1958,3,1228,
		614,0,1954,1955,5,350,0,0,1955,1956,5,331,0,0,1956,1958,3,1358,679,0,1957,
		1932,1,0,0,0,1957,1933,1,0,0,0,1957,1937,1,0,0,0,1957,1940,1,0,0,0,1957,
		1942,1,0,0,0,1957,1944,1,0,0,0,1957,1946,1,0,0,0,1957,1948,1,0,0,0,1957,
		1951,1,0,0,0,1957,1954,1,0,0,0,1958,57,1,0,0,0,1959,1964,3,1372,686,0,
		1960,1961,5,11,0,0,1961,1963,3,1372,686,0,1962,1960,1,0,0,0,1963,1966,
		1,0,0,0,1964,1962,1,0,0,0,1964,1965,1,0,0,0,1965,59,1,0,0,0,1966,1964,
		1,0,0,0,1967,1972,3,62,31,0,1968,1969,5,6,0,0,1969,1971,3,62,31,0,1970,
		1968,1,0,0,0,1971,1974,1,0,0,0,1972,1970,1,0,0,0,1972,1973,1,0,0,0,1973,
		61,1,0,0,0,1974,1972,1,0,0,0,1975,1978,3,66,33,0,1976,1978,3,292,146,0,
		1977,1975,1,0,0,0,1977,1976,1,0,0,0,1978,63,1,0,0,0,1979,1980,5,294,0,
		0,1980,1985,7,7,0,0,1981,1982,5,304,0,0,1982,1985,5,294,0,0,1983,1985,
		5,324,0,0,1984,1979,1,0,0,0,1984,1981,1,0,0,0,1984,1983,1,0,0,0,1985,65,
		1,0,0,0,1986,1991,5,96,0,0,1987,1991,5,60,0,0,1988,1991,5,80,0,0,1989,
		1991,3,72,36,0,1990,1986,1,0,0,0,1990,1987,1,0,0,0,1990,1988,1,0,0,0,1990,
		1989,1,0,0,0,1991,67,1,0,0,0,1992,2008,3,1358,679,0,1993,2008,3,1382,691,
		0,1994,1995,3,1152,576,0,1995,1996,3,1358,679,0,1996,1997,3,1156,578,0,
		1997,2008,1,0,0,0,1998,1999,3,1152,576,0,1999,2000,5,2,0,0,2000,2001,3,
		1356,678,0,2001,2002,5,3,0,0,2002,2003,3,1358,679,0,2003,2008,1,0,0,0,
		2004,2008,3,292,146,0,2005,2008,5,53,0,0,2006,2008,5,246,0,0,2007,1992,
		1,0,0,0,2007,1993,1,0,0,0,2007,1994,1,0,0,0,2007,1998,1,0,0,0,2007,2004,
		1,0,0,0,2007,2005,1,0,0,0,2007,2006,1,0,0,0,2008,69,1,0,0,0,2009,2013,
		3,1358,679,0,2010,2013,5,53,0,0,2011,2013,1,0,0,0,2012,2009,1,0,0,0,2012,
		2010,1,0,0,0,2012,2011,1,0,0,0,2013,71,1,0,0,0,2014,2017,3,1378,689,0,
		2015,2017,3,1358,679,0,2016,2014,1,0,0,0,2016,2015,1,0,0,0,2017,73,1,0,
		0,0,2018,2019,5,307,0,0,2019,2020,3,76,38,0,2020,75,1,0,0,0,2021,2030,
		3,78,39,0,2022,2023,5,412,0,0,2023,2030,5,380,0,0,2024,2025,5,350,0,0,
		2025,2026,5,236,0,0,2026,2030,5,243,0,0,2027,2028,5,326,0,0,2028,2030,
		5,106,0,0,2029,2021,1,0,0,0,2029,2022,1,0,0,0,2029,2024,1,0,0,0,2029,2027,
		1,0,0,0,2030,77,1,0,0,0,2031,2034,3,58,29,0,2032,2034,5,30,0,0,2033,2031,
		1,0,0,0,2033,2032,1,0,0,0,2034,79,1,0,0,0,2035,2036,5,327,0,0,2036,2039,
		3,52,26,0,2037,2039,3,74,37,0,2038,2035,1,0,0,0,2038,2037,1,0,0,0,2039,
		81,1,0,0,0,2040,2041,5,327,0,0,2041,2044,3,56,28,0,2042,2044,3,74,37,0,
		2043,2040,1,0,0,0,2043,2042,1,0,0,0,2044,83,1,0,0,0,2045,2055,5,329,0,
		0,2046,2056,3,58,29,0,2047,2048,5,412,0,0,2048,2056,5,380,0,0,2049,2050,
		5,350,0,0,2050,2051,5,236,0,0,2051,2056,5,243,0,0,2052,2053,5,326,0,0,
		2053,2056,5,106,0,0,2054,2056,5,30,0,0,2055,2046,1,0,0,0,2055,2047,1,0,
		0,0,2055,2049,1,0,0,0,2055,2052,1,0,0,0,2055,2054,1,0,0,0,2056,85,1,0,
		0,0,2057,2058,5,327,0,0,2058,2059,5,166,0,0,2059,2060,3,88,44,0,2060,2061,
		3,90,45,0,2061,87,1,0,0,0,2062,2065,5,30,0,0,2063,2065,3,1334,667,0,2064,
		2062,1,0,0,0,2064,2063,1,0,0,0,2065,89,1,0,0,0,2066,2067,7,8,0,0,2067,
		91,1,0,0,0,2068,2069,5,156,0,0,2069,93,1,0,0,0,2070,2071,5,188,0,0,2071,
		2072,7,9,0,0,2072,95,1,0,0,0,2073,2074,5,138,0,0,2074,2077,5,92,0,0,2075,
		2076,5,221,0,0,2076,2078,5,390,0,0,2077,2075,1,0,0,0,2077,2078,1,0,0,0,
		2078,2079,1,0,0,0,2079,2082,3,1074,537,0,2080,2083,3,98,49,0,2081,2083,
		3,100,50,0,2082,2080,1,0,0,0,2082,2081,1,0,0,0,2083,2183,1,0,0,0,2084,
		2085,5,138,0,0,2085,2086,5,92,0,0,2086,2087,5,30,0,0,2087,2088,5,68,0,
		0,2088,2089,5,345,0,0,2089,2093,3,1340,670,0,2090,2091,5,275,0,0,2091,
		2092,5,148,0,0,2092,2094,3,1370,685,0,2093,2090,1,0,0,0,2093,2094,1,0,
		0,0,2094,2095,1,0,0,0,2095,2096,5,327,0,0,2096,2097,5,345,0,0,2097,2098,
		3,1340,670,0,2098,2099,3,938,469,0,2099,2183,1,0,0,0,2100,2101,5,138,0,
		0,2101,2104,5,227,0,0,2102,2103,5,221,0,0,2103,2105,5,390,0,0,2104,2102,
		1,0,0,0,2104,2105,1,0,0,0,2105,2106,1,0,0,0,2106,2109,3,1336,668,0,2107,
		2110,3,98,49,0,2108,2110,3,102,51,0,2109,2107,1,0,0,0,2109,2108,1,0,0,
		0,2110,2183,1,0,0,0,2111,2112,5,138,0,0,2112,2113,5,227,0,0,2113,2114,
		5,30,0,0,2114,2115,5,68,0,0,2115,2116,5,345,0,0,2116,2120,3,1340,670,0,
		2117,2118,5,275,0,0,2118,2119,5,148,0,0,2119,2121,3,1370,685,0,2120,2117,
		1,0,0,0,2120,2121,1,0,0,0,2121,2122,1,0,0,0,2122,2123,5,327,0,0,2123,2124,
		5,345,0,0,2124,2125,3,1340,670,0,2125,2126,3,938,469,0,2126,2183,1,0,0,
		0,2127,2128,5,138,0,0,2128,2131,5,322,0,0,2129,2130,5,221,0,0,2130,2132,
		5,390,0,0,2131,2129,1,0,0,0,2131,2132,1,0,0,0,2132,2133,1,0,0,0,2133,2134,
		3,1336,668,0,2134,2135,3,98,49,0,2135,2183,1,0,0,0,2136,2137,5,138,0,0,
		2137,2140,5,370,0,0,2138,2139,5,221,0,0,2139,2141,5,390,0,0,2140,2138,
		1,0,0,0,2140,2141,1,0,0,0,2141,2142,1,0,0,0,2142,2143,3,1336,668,0,2143,
		2144,3,98,49,0,2144,2183,1,0,0,0,2145,2146,5,138,0,0,2146,2147,5,252,0,
		0,2147,2150,5,370,0,0,2148,2149,5,221,0,0,2149,2151,5,390,0,0,2150,2148,
		1,0,0,0,2150,2151,1,0,0,0,2151,2152,1,0,0,0,2152,2153,3,1336,668,0,2153,
		2154,3,98,49,0,2154,2183,1,0,0,0,2155,2156,5,138,0,0,2156,2157,5,252,0,
		0,2157,2158,5,370,0,0,2158,2159,5,30,0,0,2159,2160,5,68,0,0,2160,2161,
		5,345,0,0,2161,2165,3,1340,670,0,2162,2163,5,275,0,0,2163,2164,5,148,0,
		0,2164,2166,3,1370,685,0,2165,2162,1,0,0,0,2165,2166,1,0,0,0,2166,2167,
		1,0,0,0,2167,2168,5,327,0,0,2168,2169,5,345,0,0,2169,2170,3,1340,670,0,
		2170,2171,3,938,469,0,2171,2183,1,0,0,0,2172,2173,5,138,0,0,2173,2174,
		5,63,0,0,2174,2177,5,92,0,0,2175,2176,5,221,0,0,2176,2178,5,390,0,0,2177,
		2175,1,0,0,0,2177,2178,1,0,0,0,2178,2179,1,0,0,0,2179,2180,3,1074,537,
		0,2180,2181,3,98,49,0,2181,2183,1,0,0,0,2182,2073,1,0,0,0,2182,2084,1,
		0,0,0,2182,2100,1,0,0,0,2182,2111,1,0,0,0,2182,2127,1,0,0,0,2182,2136,
		1,0,0,0,2182,2145,1,0,0,0,2182,2155,1,0,0,0,2182,2172,1,0,0,0,2183,97,
		1,0,0,0,2184,2189,3,104,52,0,2185,2186,5,6,0,0,2186,2188,3,104,52,0,2187,
		2185,1,0,0,0,2188,2191,1,0,0,0,2189,2187,1,0,0,0,2189,2190,1,0,0,0,2190,
		99,1,0,0,0,2191,2189,1,0,0,0,2192,2193,5,436,0,0,2193,2194,5,279,0,0,2194,
		2195,3,1336,668,0,2195,2196,3,128,64,0,2196,2201,1,0,0,0,2197,2198,5,437,
		0,0,2198,2199,5,279,0,0,2199,2201,3,1336,668,0,2200,2192,1,0,0,0,2200,
		2197,1,0,0,0,2201,101,1,0,0,0,2202,2203,5,436,0,0,2203,2204,5,279,0,0,
		2204,2205,3,1336,668,0,2205,103,1,0,0,0,2206,2207,5,133,0,0,2207,2459,
		3,188,94,0,2208,2209,5,133,0,0,2209,2210,5,221,0,0,2210,2211,5,77,0,0,
		2211,2212,5,390,0,0,2212,2459,3,188,94,0,2213,2214,5,133,0,0,2214,2215,
		5,44,0,0,2215,2459,3,188,94,0,2216,2217,5,133,0,0,2217,2218,5,44,0,0,2218,
		2219,5,221,0,0,2219,2220,5,77,0,0,2220,2221,5,390,0,0,2221,2459,3,188,
		94,0,2222,2223,5,138,0,0,2223,2224,3,724,362,0,2224,2225,3,1372,686,0,
		2225,2226,3,106,53,0,2226,2459,1,0,0,0,2227,2228,5,138,0,0,2228,2229,3,
		724,362,0,2229,2230,3,1372,686,0,2230,2231,5,192,0,0,2231,2232,5,77,0,
		0,2232,2233,5,78,0,0,2233,2459,1,0,0,0,2234,2235,5,138,0,0,2235,2236,3,
		724,362,0,2236,2237,3,1372,686,0,2237,2238,5,327,0,0,2238,2239,5,77,0,
		0,2239,2240,5,78,0,0,2240,2459,1,0,0,0,2241,2242,5,138,0,0,2242,2243,3,
		724,362,0,2243,2244,3,1372,686,0,2244,2245,5,192,0,0,2245,2246,5,438,0,
		0,2246,2459,1,0,0,0,2247,2248,5,138,0,0,2248,2249,3,724,362,0,2249,2250,
		3,1372,686,0,2250,2251,5,192,0,0,2251,2252,5,438,0,0,2252,2253,5,221,0,
		0,2253,2254,5,390,0,0,2254,2459,1,0,0,0,2255,2256,5,138,0,0,2256,2257,
		3,724,362,0,2257,2258,3,1372,686,0,2258,2259,5,327,0,0,2259,2260,5,336,
		0,0,2260,2261,3,1364,682,0,2261,2459,1,0,0,0,2262,2263,5,138,0,0,2263,
		2264,3,724,362,0,2264,2265,3,1356,678,0,2265,2266,5,327,0,0,2266,2267,
		5,336,0,0,2267,2268,3,1364,682,0,2268,2459,1,0,0,0,2269,2270,5,138,0,0,
		2270,2271,3,724,362,0,2271,2272,3,1372,686,0,2272,2273,5,327,0,0,2273,
		2274,3,116,58,0,2274,2459,1,0,0,0,2275,2276,5,138,0,0,2276,2277,3,724,
		362,0,2277,2278,3,1372,686,0,2278,2279,5,307,0,0,2279,2280,3,116,58,0,
		2280,2459,1,0,0,0,2281,2282,5,138,0,0,2282,2283,3,724,362,0,2283,2284,
		3,1372,686,0,2284,2285,5,327,0,0,2285,2286,5,339,0,0,2286,2287,3,1372,
		686,0,2287,2459,1,0,0,0,2288,2289,5,138,0,0,2289,2290,3,724,362,0,2290,
		2291,3,1372,686,0,2291,2292,5,133,0,0,2292,2293,5,439,0,0,2293,2294,3,
		198,99,0,2294,2295,5,36,0,0,2295,2296,5,220,0,0,2296,2297,3,284,142,0,
		2297,2459,1,0,0,0,2298,2299,5,138,0,0,2299,2300,3,724,362,0,2300,2301,
		3,1372,686,0,2301,2302,3,124,62,0,2302,2459,1,0,0,0,2303,2304,5,138,0,
		0,2304,2305,3,724,362,0,2305,2306,3,1372,686,0,2306,2307,5,192,0,0,2307,
		2308,5,220,0,0,2308,2459,1,0,0,0,2309,2310,5,138,0,0,2310,2311,3,724,362,
		0,2311,2312,3,1372,686,0,2312,2313,5,192,0,0,2313,2314,5,220,0,0,2314,
		2315,5,221,0,0,2315,2316,5,390,0,0,2316,2459,1,0,0,0,2317,2318,5,192,0,
		0,2318,2319,3,724,362,0,2319,2320,5,221,0,0,2320,2321,5,390,0,0,2321,2322,
		3,1372,686,0,2322,2323,3,108,54,0,2323,2459,1,0,0,0,2324,2325,5,192,0,
		0,2325,2326,3,724,362,0,2326,2327,3,1372,686,0,2327,2328,3,108,54,0,2328,
		2459,1,0,0,0,2329,2330,5,138,0,0,2330,2331,3,724,362,0,2331,2332,3,1372,
		686,0,2332,2333,3,726,363,0,2333,2334,5,354,0,0,2334,2335,3,1118,559,0,
		2335,2336,3,110,55,0,2336,2337,3,112,56,0,2337,2459,1,0,0,0,2338,2339,
		5,138,0,0,2339,2340,3,724,362,0,2340,2341,3,1372,686,0,2341,2342,3,344,
		172,0,2342,2459,1,0,0,0,2343,2344,5,133,0,0,2344,2459,3,208,104,0,2345,
		2346,5,138,0,0,2346,2347,5,45,0,0,2347,2348,3,1340,670,0,2348,2349,3,440,
		220,0,2349,2459,1,0,0,0,2350,2351,5,366,0,0,2351,2352,5,45,0,0,2352,2459,
		3,1340,670,0,2353,2354,5,192,0,0,2354,2355,5,45,0,0,2355,2356,5,221,0,
		0,2356,2357,5,390,0,0,2357,2358,3,1340,670,0,2358,2359,3,108,54,0,2359,
		2459,1,0,0,0,2360,2361,5,192,0,0,2361,2362,5,45,0,0,2362,2363,3,1340,670,
		0,2363,2364,3,108,54,0,2364,2459,1,0,0,0,2365,2366,5,327,0,0,2366,2367,
		5,373,0,0,2367,2459,5,271,0,0,2368,2369,5,159,0,0,2369,2370,5,80,0,0,2370,
		2459,3,1340,670,0,2371,2372,5,327,0,0,2372,2373,5,373,0,0,2373,2459,5,
		159,0,0,2374,2375,5,327,0,0,2375,2459,5,440,0,0,2376,2377,5,327,0,0,2377,
		2459,5,361,0,0,2378,2379,5,194,0,0,2379,2380,5,351,0,0,2380,2459,3,1340,
		670,0,2381,2382,5,194,0,0,2382,2383,5,139,0,0,2383,2384,5,351,0,0,2384,
		2459,3,1340,670,0,2385,2386,5,194,0,0,2386,2387,5,306,0,0,2387,2388,5,
		351,0,0,2388,2459,3,1340,670,0,2389,2390,5,194,0,0,2390,2391,5,351,0,0,
		2391,2459,5,30,0,0,2392,2393,5,194,0,0,2393,2394,5,351,0,0,2394,2459,5,
		99,0,0,2395,2396,5,187,0,0,2396,2397,5,351,0,0,2397,2459,3,1340,670,0,
		2398,2399,5,187,0,0,2399,2400,5,351,0,0,2400,2459,5,30,0,0,2401,2402,5,
		187,0,0,2402,2403,5,351,0,0,2403,2459,5,99,0,0,2404,2405,5,194,0,0,2405,
		2406,5,315,0,0,2406,2459,3,1340,670,0,2407,2408,5,194,0,0,2408,2409,5,
		139,0,0,2409,2410,5,315,0,0,2410,2459,3,1340,670,0,2411,2412,5,194,0,0,
		2412,2413,5,306,0,0,2413,2414,5,315,0,0,2414,2459,3,1340,670,0,2415,2416,
		5,187,0,0,2416,2417,5,315,0,0,2417,2459,3,1340,670,0,2418,2419,5,229,0,
		0,2419,2459,3,1336,668,0,2420,2421,5,263,0,0,2421,2422,5,229,0,0,2422,
		2459,3,1336,668,0,2423,2424,5,269,0,0,2424,2459,3,524,262,0,2425,2426,
		5,77,0,0,2426,2459,5,269,0,0,2427,2428,5,276,0,0,2428,2429,5,94,0,0,2429,
		2459,3,1368,684,0,2430,2431,5,327,0,0,2431,2432,5,345,0,0,2432,2459,3,
		1340,670,0,2433,2434,5,327,0,0,2434,2459,3,116,58,0,2435,2436,5,307,0,
		0,2436,2459,3,116,58,0,2437,2438,5,306,0,0,2438,2439,5,220,0,0,2439,2459,
		3,114,57,0,2440,2441,5,194,0,0,2441,2442,5,408,0,0,2442,2443,5,243,0,0,
		2443,2459,5,321,0,0,2444,2445,5,187,0,0,2445,2446,5,408,0,0,2446,2447,
		5,243,0,0,2447,2459,5,321,0,0,2448,2449,5,210,0,0,2449,2450,5,408,0,0,
		2450,2451,5,243,0,0,2451,2459,5,321,0,0,2452,2453,5,263,0,0,2453,2454,
		5,210,0,0,2454,2455,5,408,0,0,2455,2456,5,243,0,0,2456,2459,5,321,0,0,
		2457,2459,3,344,172,0,2458,2206,1,0,0,0,2458,2208,1,0,0,0,2458,2213,1,
		0,0,0,2458,2216,1,0,0,0,2458,2222,1,0,0,0,2458,2227,1,0,0,0,2458,2234,
		1,0,0,0,2458,2241,1,0,0,0,2458,2247,1,0,0,0,2458,2255,1,0,0,0,2458,2262,
		1,0,0,0,2458,2269,1,0,0,0,2458,2275,1,0,0,0,2458,2281,1,0,0,0,2458,2288,
		1,0,0,0,2458,2298,1,0,0,0,2458,2303,1,0,0,0,2458,2309,1,0,0,0,2458,2317,
		1,0,0,0,2458,2324,1,0,0,0,2458,2329,1,0,0,0,2458,2338,1,0,0,0,2458,2343,
		1,0,0,0,2458,2345,1,0,0,0,2458,2350,1,0,0,0,2458,2353,1,0,0,0,2458,2360,
		1,0,0,0,2458,2365,1,0,0,0,2458,2368,1,0,0,0,2458,2371,1,0,0,0,2458,2374,
		1,0,0,0,2458,2376,1,0,0,0,2458,2378,1,0,0,0,2458,2381,1,0,0,0,2458,2385,
		1,0,0,0,2458,2389,1,0,0,0,2458,2392,1,0,0,0,2458,2395,1,0,0,0,2458,2398,
		1,0,0,0,2458,2401,1,0,0,0,2458,2404,1,0,0,0,2458,2407,1,0,0,0,2458,2411,
		1,0,0,0,2458,2415,1,0,0,0,2458,2418,1,0,0,0,2458,2420,1,0,0,0,2458,2423,
		1,0,0,0,2458,2425,1,0,0,0,2458,2427,1,0,0,0,2458,2430,1,0,0,0,2458,2433,
		1,0,0,0,2458,2435,1,0,0,0,2458,2437,1,0,0,0,2458,2440,1,0,0,0,2458,2444,
		1,0,0,0,2458,2448,1,0,0,0,2458,2452,1,0,0,0,2458,2457,1,0,0,0,2459,105,
		1,0,0,0,2460,2461,5,327,0,0,2461,2462,5,53,0,0,2462,2466,3,1162,581,0,
		2463,2464,5,192,0,0,2464,2466,5,53,0,0,2465,2460,1,0,0,0,2465,2463,1,0,
		0,0,2466,107,1,0,0,0,2467,2471,5,151,0,0,2468,2471,5,309,0,0,2469,2471,
		1,0,0,0,2470,2467,1,0,0,0,2470,2468,1,0,0,0,2470,2469,1,0,0,0,2471,109,
		1,0,0,0,2472,2473,5,43,0,0,2473,2476,3,524,262,0,2474,2476,1,0,0,0,2475,
		2472,1,0,0,0,2475,2474,1,0,0,0,2476,111,1,0,0,0,2477,2478,5,100,0,0,2478,
		2481,3,1162,581,0,2479,2481,1,0,0,0,2480,2477,1,0,0,0,2480,2479,1,0,0,
		0,2481,113,1,0,0,0,2482,2489,5,264,0,0,2483,2489,5,113,0,0,2484,2489,5,
		53,0,0,2485,2486,5,100,0,0,2486,2487,5,227,0,0,2487,2489,3,1340,670,0,
		2488,2482,1,0,0,0,2488,2483,1,0,0,0,2488,2484,1,0,0,0,2488,2485,1,0,0,
		0,2489,115,1,0,0,0,2490,2491,5,2,0,0,2491,2492,3,120,60,0,2492,2493,5,
		3,0,0,2493,117,1,0,0,0,2494,2495,5,105,0,0,2495,2498,3,116,58,0,2496,2498,
		1,0,0,0,2497,2494,1,0,0,0,2497,2496,1,0,0,0,2498,119,1,0,0,0,2499,2504,
		3,122,61,0,2500,2501,5,6,0,0,2501,2503,3,122,61,0,2502,2500,1,0,0,0,2503,
		2506,1,0,0,0,2504,2502,1,0,0,0,2504,2505,1,0,0,0,2505,121,1,0,0,0,2506,
		2504,1,0,0,0,2507,2516,3,1380,690,0,2508,2509,5,10,0,0,2509,2517,3,466,
		233,0,2510,2511,5,11,0,0,2511,2514,3,1380,690,0,2512,2513,5,10,0,0,2513,
		2515,3,466,233,0,2514,2512,1,0,0,0,2514,2515,1,0,0,0,2515,2517,1,0,0,0,
		2516,2508,1,0,0,0,2516,2510,1,0,0,0,2516,2517,1,0,0,0,2517,123,1,0,0,0,
		2518,2520,3,126,63,0,2519,2518,1,0,0,0,2520,2521,1,0,0,0,2521,2519,1,0,
		0,0,2521,2522,1,0,0,0,2522,125,1,0,0,0,2523,2527,5,308,0,0,2524,2525,3,
		16,8,0,2525,2526,3,292,146,0,2526,2528,1,0,0,0,2527,2524,1,0,0,0,2527,
		2528,1,0,0,0,2528,2536,1,0,0,0,2529,2533,5,327,0,0,2530,2534,3,288,144,
		0,2531,2532,5,439,0,0,2532,2534,3,198,99,0,2533,2530,1,0,0,0,2533,2531,
		1,0,0,0,2534,2536,1,0,0,0,2535,2523,1,0,0,0,2535,2529,1,0,0,0,2536,127,
		1,0,0,0,2537,2538,5,62,0,0,2538,2539,5,416,0,0,2539,2540,5,105,0,0,2540,
		2541,5,2,0,0,2541,2542,3,132,66,0,2542,2543,5,3,0,0,2543,2564,1,0,0,0,
		2544,2545,5,62,0,0,2545,2546,5,416,0,0,2546,2547,5,68,0,0,2547,2548,5,
		2,0,0,2548,2549,3,1280,640,0,2549,2550,5,3,0,0,2550,2564,1,0,0,0,2551,
		2552,5,62,0,0,2552,2553,5,416,0,0,2553,2554,5,64,0,0,2554,2555,5,2,0,0,
		2555,2556,3,1280,640,0,2556,2557,5,3,0,0,2557,2558,5,94,0,0,2558,2559,
		5,2,0,0,2559,2560,3,1280,640,0,2560,2561,5,3,0,0,2561,2564,1,0,0,0,2562,
		2564,5,53,0,0,2563,2537,1,0,0,0,2563,2544,1,0,0,0,2563,2551,1,0,0,0,2563,
		2562,1,0,0,0,2564,129,1,0,0,0,2565,2566,3,1378,689,0,2566,2567,3,1356,
		678,0,2567,131,1,0,0,0,2568,2573,3,130,65,0,2569,2570,5,6,0,0,2570,2572,
		3,130,65,0,2571,2569,1,0,0,0,2572,2575,1,0,0,0,2573,2571,1,0,0,0,2573,
		2574,1,0,0,0,2574,133,1,0,0,0,2575,2573,1,0,0,0,2576,2577,5,138,0,0,2577,
		2578,5,354,0,0,2578,2579,3,524,262,0,2579,2580,3,136,68,0,2580,135,1,0,
		0,0,2581,2586,3,138,69,0,2582,2583,5,6,0,0,2583,2585,3,138,69,0,2584,2582,
		1,0,0,0,2585,2588,1,0,0,0,2586,2584,1,0,0,0,2586,2587,1,0,0,0,2587,137,
		1,0,0,0,2588,2586,1,0,0,0,2589,2590,5,133,0,0,2590,2591,5,144,0,0,2591,
		2592,3,1102,551,0,2592,2593,3,108,54,0,2593,2613,1,0,0,0,2594,2595,5,192,
		0,0,2595,2598,5,144,0,0,2596,2597,5,221,0,0,2597,2599,5,390,0,0,2598,2596,
		1,0,0,0,2598,2599,1,0,0,0,2599,2600,1,0,0,0,2600,2601,3,1372,686,0,2601,
		2602,3,108,54,0,2602,2613,1,0,0,0,2603,2604,5,138,0,0,2604,2605,5,144,
		0,0,2605,2606,3,1372,686,0,2606,2607,3,726,363,0,2607,2608,5,354,0,0,2608,
		2609,3,1118,559,0,2609,2610,3,110,55,0,2610,2611,3,108,54,0,2611,2613,
		1,0,0,0,2612,2589,1,0,0,0,2612,2594,1,0,0,0,2612,2603,1,0,0,0,2613,139,
		1,0,0,0,2614,2617,5,158,0,0,2615,2618,3,954,477,0,2616,2618,5,30,0,0,2617,
		2615,1,0,0,0,2617,2616,1,0,0,0,2618,141,1,0,0,0,2619,2620,5,170,0,0,2620,
		2621,3,156,78,0,2621,2622,3,1336,668,0,2622,2623,3,214,107,0,2623,2624,
		3,144,72,0,2624,2625,3,146,73,0,2625,2626,3,148,74,0,2626,2627,3,158,79,
		0,2627,2628,3,16,8,0,2628,2629,3,150,75,0,2629,2630,3,1094,547,0,2630,
		2642,1,0,0,0,2631,2632,5,170,0,0,2632,2633,5,2,0,0,2633,2634,3,894,447,
		0,2634,2635,5,3,0,0,2635,2636,5,94,0,0,2636,2637,3,146,73,0,2637,2638,
		3,148,74,0,2638,2639,3,16,8,0,2639,2640,3,150,75,0,2640,2642,1,0,0,0,2641,
		2619,1,0,0,0,2641,2631,1,0,0,0,2642,143,1,0,0,0,2643,2644,7,10,0,0,2644,
		145,1,0,0,0,2645,2648,5,291,0,0,2646,2648,1,0,0,0,2647,2645,1,0,0,0,2647,
		2646,1,0,0,0,2648,147,1,0,0,0,2649,2653,3,1358,679,0,2650,2653,5,337,0,
		0,2651,2653,5,338,0,0,2652,2649,1,0,0,0,2652,2650,1,0,0,0,2652,2651,1,
		0,0,0,2653,149,1,0,0,0,2654,2660,3,152,76,0,2655,2656,5,2,0,0,2656,2657,
		3,162,81,0,2657,2658,5,3,0,0,2658,2660,1,0,0,0,2659,2654,1,0,0,0,2659,
		2655,1,0,0,0,2660,151,1,0,0,0,2661,2663,3,154,77,0,2662,2661,1,0,0,0,2663,
		2666,1,0,0,0,2664,2662,1,0,0,0,2664,2665,1,0,0,0,2665,153,1,0,0,0,2666,
		2664,1,0,0,0,2667,2703,5,107,0,0,2668,2703,5,112,0,0,2669,2670,5,184,0,
		0,2670,2671,3,834,417,0,2671,2672,3,1358,679,0,2672,2703,1,0,0,0,2673,
		2674,5,78,0,0,2674,2675,3,834,417,0,2675,2676,3,1358,679,0,2676,2703,1,
		0,0,0,2677,2703,5,172,0,0,2678,2703,5,217,0,0,2679,2680,5,292,0,0,2680,
		2681,3,834,417,0,2681,2682,3,1358,679,0,2682,2703,1,0,0,0,2683,2684,5,
		198,0,0,2684,2685,3,834,417,0,2685,2686,3,1358,679,0,2686,2703,1,0,0,0,
		2687,2688,5,210,0,0,2688,2689,5,292,0,0,2689,2703,3,216,108,0,2690,2691,
		5,210,0,0,2691,2692,5,292,0,0,2692,2703,5,9,0,0,2693,2694,5,210,0,0,2694,
		2695,5,77,0,0,2695,2696,5,78,0,0,2696,2703,3,216,108,0,2697,2698,5,210,
		0,0,2698,2699,5,78,0,0,2699,2703,3,216,108,0,2700,2701,5,195,0,0,2701,
		2703,3,1358,679,0,2702,2667,1,0,0,0,2702,2668,1,0,0,0,2702,2669,1,0,0,
		0,2702,2673,1,0,0,0,2702,2677,1,0,0,0,2702,2678,1,0,0,0,2702,2679,1,0,
		0,0,2702,2683,1,0,0,0,2702,2687,1,0,0,0,2702,2690,1,0,0,0,2702,2693,1,
		0,0,0,2702,2697,1,0,0,0,2702,2700,1,0,0,0,2703,155,1,0,0,0,2704,2707,5,
		107,0,0,2705,2707,1,0,0,0,2706,2704,1,0,0,0,2706,2705,1,0,0,0,2707,157,
		1,0,0,0,2708,2709,3,160,80,0,2709,2710,5,185,0,0,2710,2711,3,1358,679,
		0,2711,2714,1,0,0,0,2712,2714,1,0,0,0,2713,2708,1,0,0,0,2713,2712,1,0,
		0,0,2714,159,1,0,0,0,2715,2718,5,100,0,0,2716,2718,1,0,0,0,2717,2715,1,
		0,0,0,2717,2716,1,0,0,0,2718,161,1,0,0,0,2719,2724,3,164,82,0,2720,2721,
		5,6,0,0,2721,2723,3,164,82,0,2722,2720,1,0,0,0,2723,2726,1,0,0,0,2724,
		2722,1,0,0,0,2724,2725,1,0,0,0,2725,163,1,0,0,0,2726,2724,1,0,0,0,2727,
		2728,3,1380,690,0,2728,2729,3,166,83,0,2729,165,1,0,0,0,2730,2739,3,66,
		33,0,2731,2739,3,292,146,0,2732,2739,5,9,0,0,2733,2734,5,2,0,0,2734,2735,
		3,168,84,0,2735,2736,5,3,0,0,2736,2739,1,0,0,0,2737,2739,1,0,0,0,2738,
		2730,1,0,0,0,2738,2731,1,0,0,0,2738,2732,1,0,0,0,2738,2733,1,0,0,0,2738,
		2737,1,0,0,0,2739,167,1,0,0,0,2740,2745,3,170,85,0,2741,2742,5,6,0,0,2742,
		2744,3,170,85,0,2743,2741,1,0,0,0,2744,2747,1,0,0,0,2745,2743,1,0,0,0,
		2745,2746,1,0,0,0,2746,169,1,0,0,0,2747,2745,1,0,0,0,2748,2749,3,66,33,
		0,2749,171,1,0,0,0,2750,2751,5,46,0,0,2751,2752,3,174,87,0,2752,2756,5,
		92,0,0,2753,2754,5,221,0,0,2754,2755,5,77,0,0,2755,2757,5,390,0,0,2756,
		2753,1,0,0,0,2756,2757,1,0,0,0,2757,2758,1,0,0,0,2758,2789,3,1336,668,
		0,2759,2760,5,2,0,0,2760,2761,3,176,88,0,2761,2762,5,3,0,0,2762,2763,3,
		238,119,0,2763,2764,3,240,120,0,2764,2765,3,248,124,0,2765,2766,3,250,
		125,0,2766,2767,3,252,126,0,2767,2768,3,254,127,0,2768,2790,1,0,0,0,2769,
		2770,5,269,0,0,2770,2771,3,524,262,0,2771,2772,3,178,89,0,2772,2773,3,
		240,120,0,2773,2774,3,248,124,0,2774,2775,3,250,125,0,2775,2776,3,252,
		126,0,2776,2777,3,254,127,0,2777,2790,1,0,0,0,2778,2779,5,279,0,0,2779,
		2780,5,269,0,0,2780,2781,3,1336,668,0,2781,2782,3,178,89,0,2782,2783,3,
		128,64,0,2783,2784,3,240,120,0,2784,2785,3,248,124,0,2785,2786,3,250,125,
		0,2786,2787,3,252,126,0,2787,2788,3,254,127,0,2788,2790,1,0,0,0,2789,2759,
		1,0,0,0,2789,2769,1,0,0,0,2789,2778,1,0,0,0,2790,173,1,0,0,0,2791,2800,
		5,348,0,0,2792,2800,5,346,0,0,2793,2794,5,246,0,0,2794,2800,7,11,0,0,2795,
		2796,5,214,0,0,2796,2800,7,11,0,0,2797,2800,5,361,0,0,2798,2800,1,0,0,
		0,2799,2791,1,0,0,0,2799,2792,1,0,0,0,2799,2793,1,0,0,0,2799,2795,1,0,
		0,0,2799,2797,1,0,0,0,2799,2798,1,0,0,0,2800,175,1,0,0,0,2801,2804,3,180,
		90,0,2802,2804,1,0,0,0,2803,2801,1,0,0,0,2803,2802,1,0,0,0,2804,177,1,
		0,0,0,2805,2806,5,2,0,0,2806,2807,3,182,91,0,2807,2808,5,3,0,0,2808,2811,
		1,0,0,0,2809,2811,1,0,0,0,2810,2805,1,0,0,0,2810,2809,1,0,0,0,2811,179,
		1,0,0,0,2812,2817,3,184,92,0,2813,2814,5,6,0,0,2814,2816,3,184,92,0,2815,
		2813,1,0,0,0,2816,2819,1,0,0,0,2817,2815,1,0,0,0,2817,2818,1,0,0,0,2818,
		181,1,0,0,0,2819,2817,1,0,0,0,2820,2825,3,186,93,0,2821,2822,5,6,0,0,2822,
		2824,3,186,93,0,2823,2821,1,0,0,0,2824,2827,1,0,0,0,2825,2823,1,0,0,0,
		2825,2826,1,0,0,0,2826,183,1,0,0,0,2827,2825,1,0,0,0,2828,2832,3,208,104,
		0,2829,2832,3,202,101,0,2830,2832,3,188,94,0,2831,2828,1,0,0,0,2831,2829,
		1,0,0,0,2831,2830,1,0,0,0,2832,185,1,0,0,0,2833,2836,3,190,95,0,2834,2836,
		3,208,104,0,2835,2833,1,0,0,0,2835,2834,1,0,0,0,2836,187,1,0,0,0,2837,
		2838,3,1372,686,0,2838,2839,3,1118,559,0,2839,2840,3,340,170,0,2840,2841,
		3,192,96,0,2841,189,1,0,0,0,2842,2845,3,1372,686,0,2843,2844,5,105,0,0,
		2844,2846,5,274,0,0,2845,2843,1,0,0,0,2845,2846,1,0,0,0,2846,2847,1,0,
		0,0,2847,2848,3,192,96,0,2848,191,1,0,0,0,2849,2851,3,194,97,0,2850,2849,
		1,0,0,0,2851,2854,1,0,0,0,2852,2850,1,0,0,0,2852,2853,1,0,0,0,2853,193,
		1,0,0,0,2854,2852,1,0,0,0,2855,2856,5,45,0,0,2856,2857,3,1340,670,0,2857,
		2858,3,196,98,0,2858,2864,1,0,0,0,2859,2864,3,196,98,0,2860,2864,3,200,
		100,0,2861,2862,5,43,0,0,2862,2864,3,524,262,0,2863,2855,1,0,0,0,2863,
		2859,1,0,0,0,2863,2860,1,0,0,0,2863,2861,1,0,0,0,2864,195,1,0,0,0,2865,
		2866,5,77,0,0,2866,2904,5,78,0,0,2867,2904,5,78,0,0,2868,2869,5,98,0,0,
		2869,2870,3,664,332,0,2870,2871,3,256,128,0,2871,2904,1,0,0,0,2872,2873,
		5,85,0,0,2873,2874,5,237,0,0,2874,2875,3,664,332,0,2875,2876,3,256,128,
		0,2876,2904,1,0,0,0,2877,2878,5,42,0,0,2878,2879,5,2,0,0,2879,2880,3,1162,
		581,0,2880,2881,5,3,0,0,2881,2882,3,212,106,0,2882,2904,1,0,0,0,2883,2884,
		5,53,0,0,2884,2904,3,1204,602,0,2885,2886,5,439,0,0,2886,2887,3,198,99,
		0,2887,2895,5,36,0,0,2888,2889,5,220,0,0,2889,2896,3,284,142,0,2890,2891,
		5,2,0,0,2891,2892,3,1162,581,0,2892,2893,5,3,0,0,2893,2894,5,441,0,0,2894,
		2896,1,0,0,0,2895,2888,1,0,0,0,2895,2890,1,0,0,0,2896,2904,1,0,0,0,2897,
		2898,5,86,0,0,2898,2899,3,1336,668,0,2899,2900,3,214,107,0,2900,2901,3,
		222,111,0,2901,2902,3,230,115,0,2902,2904,1,0,0,0,2903,2865,1,0,0,0,2903,
		2867,1,0,0,0,2903,2868,1,0,0,0,2903,2872,1,0,0,0,2903,2877,1,0,0,0,2903,
		2883,1,0,0,0,2903,2885,1,0,0,0,2903,2897,1,0,0,0,2904,197,1,0,0,0,2905,
		2909,5,139,0,0,2906,2907,5,148,0,0,2907,2909,5,53,0,0,2908,2905,1,0,0,
		0,2908,2906,1,0,0,0,2909,199,1,0,0,0,2910,2916,5,54,0,0,2911,2912,5,77,
		0,0,2912,2916,5,54,0,0,2913,2914,5,69,0,0,2914,2916,7,8,0,0,2915,2910,
		1,0,0,0,2915,2911,1,0,0,0,2915,2913,1,0,0,0,2916,201,1,0,0,0,2917,2918,
		5,120,0,0,2918,2919,3,1336,668,0,2919,2920,3,204,102,0,2920,203,1,0,0,
		0,2921,2922,7,12,0,0,2922,2924,3,206,103,0,2923,2921,1,0,0,0,2924,2927,
		1,0,0,0,2925,2923,1,0,0,0,2925,2926,1,0,0,0,2926,205,1,0,0,0,2927,2925,
		1,0,0,0,2928,2929,7,13,0,0,2929,207,1,0,0,0,2930,2931,5,45,0,0,2931,2932,
		3,1340,670,0,2932,2933,3,210,105,0,2933,2936,1,0,0,0,2934,2936,3,210,105,
		0,2935,2930,1,0,0,0,2935,2934,1,0,0,0,2936,209,1,0,0,0,2937,2938,5,42,
		0,0,2938,2939,5,2,0,0,2939,2940,3,1162,581,0,2940,2941,5,3,0,0,2941,2942,
		3,440,220,0,2942,2996,1,0,0,0,2943,2955,5,98,0,0,2944,2945,5,2,0,0,2945,
		2946,3,216,108,0,2946,2947,5,3,0,0,2947,2948,3,220,110,0,2948,2949,3,664,
		332,0,2949,2950,3,256,128,0,2950,2951,3,440,220,0,2951,2956,1,0,0,0,2952,
		2953,3,258,129,0,2953,2954,3,440,220,0,2954,2956,1,0,0,0,2955,2944,1,0,
		0,0,2955,2952,1,0,0,0,2956,2996,1,0,0,0,2957,2958,5,85,0,0,2958,2970,5,
		237,0,0,2959,2960,5,2,0,0,2960,2961,3,216,108,0,2961,2962,5,3,0,0,2962,
		2963,3,220,110,0,2963,2964,3,664,332,0,2964,2965,3,256,128,0,2965,2966,
		3,440,220,0,2966,2971,1,0,0,0,2967,2968,3,258,129,0,2968,2969,3,440,220,
		0,2969,2971,1,0,0,0,2970,2959,1,0,0,0,2970,2967,1,0,0,0,2971,2996,1,0,
		0,0,2972,2973,5,200,0,0,2973,2974,3,596,298,0,2974,2975,5,2,0,0,2975,2976,
		3,224,112,0,2976,2977,5,3,0,0,2977,2978,3,220,110,0,2978,2979,3,664,332,
		0,2979,2980,3,256,128,0,2980,2981,3,228,114,0,2981,2982,3,440,220,0,2982,
		2996,1,0,0,0,2983,2984,5,63,0,0,2984,2985,5,237,0,0,2985,2986,5,2,0,0,
		2986,2987,3,216,108,0,2987,2988,5,3,0,0,2988,2989,5,86,0,0,2989,2990,3,
		1336,668,0,2990,2991,3,214,107,0,2991,2992,3,222,111,0,2992,2993,3,230,
		115,0,2993,2994,3,440,220,0,2994,2996,1,0,0,0,2995,2937,1,0,0,0,2995,2943,
		1,0,0,0,2995,2957,1,0,0,0,2995,2972,1,0,0,0,2995,2983,1,0,0,0,2996,211,
		1,0,0,0,2997,2998,5,263,0,0,2998,3001,5,229,0,0,2999,3001,1,0,0,0,3000,
		2997,1,0,0,0,3000,2999,1,0,0,0,3001,213,1,0,0,0,3002,3003,5,2,0,0,3003,
		3004,3,216,108,0,3004,3005,5,3,0,0,3005,3008,1,0,0,0,3006,3008,1,0,0,0,
		3007,3002,1,0,0,0,3007,3006,1,0,0,0,3008,215,1,0,0,0,3009,3014,3,218,109,
		0,3010,3011,5,6,0,0,3011,3013,3,218,109,0,3012,3010,1,0,0,0,3013,3016,
		1,0,0,0,3014,3012,1,0,0,0,3014,3015,1,0,0,0,3015,217,1,0,0,0,3016,3014,
		1,0,0,0,3017,3018,3,1372,686,0,3018,219,1,0,0,0,3019,3020,5,442,0,0,3020,
		3021,5,2,0,0,3021,3022,3,216,108,0,3022,3023,5,3,0,0,3023,3026,1,0,0,0,
		3024,3026,1,0,0,0,3025,3019,1,0,0,0,3025,3024,1,0,0,0,3026,221,1,0,0,0,
		3027,3028,5,250,0,0,3028,3031,7,14,0,0,3029,3031,1,0,0,0,3030,3027,1,0,
		0,0,3030,3029,1,0,0,0,3031,223,1,0,0,0,3032,3037,3,226,113,0,3033,3034,
		5,6,0,0,3034,3036,3,226,113,0,3035,3033,1,0,0,0,3036,3039,1,0,0,0,3037,
		3035,1,0,0,0,3037,3038,1,0,0,0,3038,225,1,0,0,0,3039,3037,1,0,0,0,3040,
		3041,3,602,301,0,3041,3048,5,105,0,0,3042,3049,3,684,342,0,3043,3044,5,
		272,0,0,3044,3045,5,2,0,0,3045,3046,3,684,342,0,3046,3047,5,3,0,0,3047,
		3049,1,0,0,0,3048,3042,1,0,0,0,3048,3043,1,0,0,0,3049,227,1,0,0,0,3050,
		3051,5,103,0,0,3051,3052,5,2,0,0,3052,3053,3,1162,581,0,3053,3054,5,3,
		0,0,3054,3057,1,0,0,0,3055,3057,1,0,0,0,3056,3050,1,0,0,0,3056,3055,1,
		0,0,0,3057,229,1,0,0,0,3058,3068,3,232,116,0,3059,3068,3,234,117,0,3060,
		3061,3,232,116,0,3061,3062,3,234,117,0,3062,3068,1,0,0,0,3063,3064,3,234,
		117,0,3064,3065,3,232,116,0,3065,3068,1,0,0,0,3066,3068,1,0,0,0,3067,3058,
		1,0,0,0,3067,3059,1,0,0,0,3067,3060,1,0,0,0,3067,3063,1,0,0,0,3067,3066,
		1,0,0,0,3068,231,1,0,0,0,3069,3070,5,80,0,0,3070,3071,5,363,0,0,3071,3072,
		3,236,118,0,3072,233,1,0,0,0,3073,3074,5,80,0,0,3074,3075,5,183,0,0,3075,
		3076,3,236,118,0,3076,235,1,0,0,0,3077,3078,5,263,0,0,3078,3084,5,132,
		0,0,3079,3084,5,309,0,0,3080,3084,5,151,0,0,3081,3082,5,327,0,0,3082,3084,
		7,15,0,0,3083,3077,1,0,0,0,3083,3079,1,0,0,0,3083,3080,1,0,0,0,3083,3081,
		1,0,0,0,3084,237,1,0,0,0,3085,3086,5,230,0,0,3086,3087,5,2,0,0,3087,3088,
		3,1334,667,0,3088,3089,5,3,0,0,3089,3092,1,0,0,0,3090,3092,1,0,0,0,3091,
		3085,1,0,0,0,3091,3090,1,0,0,0,3092,239,1,0,0,0,3093,3096,3,242,121,0,
		3094,3096,1,0,0,0,3095,3093,1,0,0,0,3095,3094,1,0,0,0,3096,241,1,0,0,0,
		3097,3098,5,279,0,0,3098,3099,5,148,0,0,3099,3100,3,1372,686,0,3100,3101,
		5,2,0,0,3101,3102,3,244,122,0,3102,3103,5,3,0,0,3103,243,1,0,0,0,3104,
		3109,3,246,123,0,3105,3106,5,6,0,0,3106,3108,3,246,123,0,3107,3105,1,0,
		0,0,3108,3111,1,0,0,0,3109,3107,1,0,0,0,3109,3110,1,0,0,0,3110,245,1,0,
		0,0,3111,3109,1,0,0,0,3112,3113,3,1372,686,0,3113,3114,3,608,304,0,3114,
		3115,3,610,305,0,3115,3127,1,0,0,0,3116,3117,3,1214,607,0,3117,3118,3,
		608,304,0,3118,3119,3,610,305,0,3119,3127,1,0,0,0,3120,3121,5,2,0,0,3121,
		3122,3,1162,581,0,3122,3123,5,3,0,0,3123,3124,3,608,304,0,3124,3125,3,
		610,305,0,3125,3127,1,0,0,0,3126,3112,1,0,0,0,3126,3116,1,0,0,0,3126,3120,
		1,0,0,0,3127,247,1,0,0,0,3128,3129,5,100,0,0,3129,3132,3,1340,670,0,3130,
		3132,1,0,0,0,3131,3128,1,0,0,0,3131,3130,1,0,0,0,3132,249,1,0,0,0,3133,
		3134,5,105,0,0,3134,3139,3,116,58,0,3135,3136,5,373,0,0,3136,3139,5,271,
		0,0,3137,3139,1,0,0,0,3138,3133,1,0,0,0,3138,3135,1,0,0,0,3138,3137,1,
		0,0,0,3139,251,1,0,0,0,3140,3141,5,80,0,0,3141,3147,5,162,0,0,3142,3148,
		5,192,0,0,3143,3144,5,183,0,0,3144,3148,5,314,0,0,3145,3146,5,286,0,0,
		3146,3148,5,314,0,0,3147,3142,1,0,0,0,3147,3143,1,0,0,0,3147,3145,1,0,
		0,0,3148,3151,1,0,0,0,3149,3151,1,0,0,0,3150,3140,1,0,0,0,3150,3149,1,
		0,0,0,3151,253,1,0,0,0,3152,3153,5,345,0,0,3153,3156,3,1340,670,0,3154,
		3156,1,0,0,0,3155,3152,1,0,0,0,3155,3154,1,0,0,0,3156,255,1,0,0,0,3157,
		3158,5,100,0,0,3158,3159,5,227,0,0,3159,3160,5,345,0,0,3160,3163,3,1340,
		670,0,3161,3163,1,0,0,0,3162,3157,1,0,0,0,3162,3161,1,0,0,0,3163,257,1,
		0,0,0,3164,3165,5,100,0,0,3165,3166,5,227,0,0,3166,3167,3,1340,670,0,3167,
		259,1,0,0,0,3168,3169,5,46,0,0,3169,3173,5,336,0,0,3170,3171,5,221,0,0,
		3171,3172,5,77,0,0,3172,3174,5,390,0,0,3173,3170,1,0,0,0,3173,3174,1,0,
		0,0,3174,3175,1,0,0,0,3175,3176,3,524,262,0,3176,3177,3,870,435,0,3177,
		3178,5,80,0,0,3178,3179,3,1280,640,0,3179,3180,5,64,0,0,3180,3181,3,1056,
		528,0,3181,261,1,0,0,0,3182,3183,5,138,0,0,3183,3186,5,336,0,0,3184,3185,
		5,221,0,0,3185,3187,5,390,0,0,3186,3184,1,0,0,0,3186,3187,1,0,0,0,3187,
		3188,1,0,0,0,3188,3189,3,524,262,0,3189,3190,5,327,0,0,3190,3191,5,336,
		0,0,3191,3192,3,1364,682,0,3192,263,1,0,0,0,3193,3194,5,46,0,0,3194,3195,
		3,174,87,0,3195,3199,5,92,0,0,3196,3197,5,221,0,0,3197,3198,5,77,0,0,3198,
		3200,5,390,0,0,3199,3196,1,0,0,0,3199,3200,1,0,0,0,3200,3201,1,0,0,0,3201,
		3202,3,266,133,0,3202,3203,5,36,0,0,3203,3204,3,960,480,0,3204,3205,3,
		268,134,0,3205,265,1,0,0,0,3206,3207,3,1336,668,0,3207,3208,3,214,107,
		0,3208,3209,3,248,124,0,3209,3210,3,250,125,0,3210,3211,3,252,126,0,3211,
		3212,3,254,127,0,3212,267,1,0,0,0,3213,3217,5,105,0,0,3214,3218,5,175,
		0,0,3215,3216,5,263,0,0,3216,3218,5,175,0,0,3217,3214,1,0,0,0,3217,3215,
		1,0,0,0,3218,3221,1,0,0,0,3219,3221,1,0,0,0,3220,3213,1,0,0,0,3220,3219,
		1,0,0,0,3221,269,1,0,0,0,3222,3223,5,46,0,0,3223,3224,3,274,137,0,3224,
		3225,5,252,0,0,3225,3229,5,370,0,0,3226,3227,5,221,0,0,3227,3228,5,77,
		0,0,3228,3230,5,390,0,0,3229,3226,1,0,0,0,3229,3230,1,0,0,0,3230,3231,
		1,0,0,0,3231,3232,3,272,136,0,3232,3233,5,36,0,0,3233,3234,3,960,480,0,
		3234,3235,3,268,134,0,3235,271,1,0,0,0,3236,3237,3,1336,668,0,3237,3238,
		3,214,107,0,3238,3239,3,248,124,0,3239,3240,3,118,59,0,3240,3241,3,254,
		127,0,3241,273,1,0,0,0,3242,3245,5,361,0,0,3243,3245,1,0,0,0,3244,3242,
		1,0,0,0,3244,3243,1,0,0,0,3245,275,1,0,0,0,3246,3247,5,299,0,0,3247,3248,
		5,252,0,0,3248,3249,5,370,0,0,3249,3250,3,592,296,0,3250,3251,3,1336,668,
		0,3251,3252,3,268,134,0,3252,277,1,0,0,0,3253,3254,5,46,0,0,3254,3255,
		3,174,87,0,3255,3259,5,322,0,0,3256,3257,5,221,0,0,3257,3258,5,77,0,0,
		3258,3260,5,390,0,0,3259,3256,1,0,0,0,3259,3260,1,0,0,0,3260,3261,1,0,
		0,0,3261,3262,3,1336,668,0,3262,3263,3,282,141,0,3263,279,1,0,0,0,3264,
		3265,5,138,0,0,3265,3268,5,322,0,0,3266,3267,5,221,0,0,3267,3269,5,390,
		0,0,3268,3266,1,0,0,0,3268,3269,1,0,0,0,3269,3270,1,0,0,0,3270,3271,3,
		1336,668,0,3271,3272,3,286,143,0,3272,281,1,0,0,0,3273,3276,3,286,143,
		0,3274,3276,1,0,0,0,3275,3273,1,0,0,0,3275,3274,1,0,0,0,3276,283,1,0,0,
		0,3277,3278,5,2,0,0,3278,3279,3,286,143,0,3279,3280,5,3,0,0,3280,3283,
		1,0,0,0,3281,3283,1,0,0,0,3282,3277,1,0,0,0,3282,3281,1,0,0,0,3283,285,
		1,0,0,0,3284,3286,3,288,144,0,3285,3284,1,0,0,0,3286,3287,1,0,0,0,3287,
		3285,1,0,0,0,3287,3288,1,0,0,0,3288,287,1,0,0,0,3289,3290,5,36,0,0,3290,
		3320,3,1122,561,0,3291,3292,5,149,0,0,3292,3320,3,292,146,0,3293,3320,
		5,174,0,0,3294,3295,5,226,0,0,3295,3296,3,290,145,0,3296,3297,3,292,146,
		0,3297,3320,1,0,0,0,3298,3299,5,253,0,0,3299,3320,3,292,146,0,3300,3301,
		5,256,0,0,3301,3320,3,292,146,0,3302,3303,5,263,0,0,3303,3320,7,16,0,0,
		3304,3305,5,275,0,0,3305,3306,5,148,0,0,3306,3320,3,524,262,0,3307,3308,
		5,322,0,0,3308,3309,5,260,0,0,3309,3320,3,524,262,0,3310,3311,5,334,0,
		0,3311,3312,3,16,8,0,3312,3313,3,292,146,0,3313,3320,1,0,0,0,3314,3315,
		5,308,0,0,3315,3317,3,16,8,0,3316,3318,3,292,146,0,3317,3316,1,0,0,0,3317,
		3318,1,0,0,0,3318,3320,1,0,0,0,3319,3289,1,0,0,0,3319,3291,1,0,0,0,3319,
		3293,1,0,0,0,3319,3294,1,0,0,0,3319,3298,1,0,0,0,3319,3300,1,0,0,0,3319,
		3302,1,0,0,0,3319,3304,1,0,0,0,3319,3307,1,0,0,0,3319,3310,1,0,0,0,3319,
		3314,1,0,0,0,3320,289,1,0,0,0,3321,3324,5,148,0,0,3322,3324,1,0,0,0,3323,
		3321,1,0,0,0,3323,3322,1,0,0,0,3324,291,1,0,0,0,3325,3332,3,1354,677,0,
		3326,3327,5,12,0,0,3327,3332,3,1354,677,0,3328,3329,5,13,0,0,3329,3332,
		3,1354,677,0,3330,3332,3,1364,682,0,3331,3325,1,0,0,0,3331,3326,1,0,0,
		0,3331,3328,1,0,0,0,3331,3330,1,0,0,0,3332,293,1,0,0,0,3333,3338,3,292,
		146,0,3334,3335,5,6,0,0,3335,3337,3,292,146,0,3336,3334,1,0,0,0,3337,3340,
		1,0,0,0,3338,3336,1,0,0,0,3338,3339,1,0,0,0,3339,295,1,0,0,0,3340,3338,
		1,0,0,0,3341,3342,5,46,0,0,3342,3343,3,618,309,0,3343,3344,3,298,149,0,
		3344,3345,3,308,154,0,3345,3346,5,239,0,0,3346,3352,3,1340,670,0,3347,
		3348,5,216,0,0,3348,3349,3,300,150,0,3349,3350,3,302,151,0,3350,3351,3,
		306,153,0,3351,3353,1,0,0,0,3352,3347,1,0,0,0,3352,3353,1,0,0,0,3353,297,
		1,0,0,0,3354,3357,5,353,0,0,3355,3357,1,0,0,0,3356,3354,1,0,0,0,3356,3355,
		1,0,0,0,3357,299,1,0,0,0,3358,3360,3,1340,670,0,3359,3361,3,526,263,0,
		3360,3359,1,0,0,0,3360,3361,1,0,0,0,3361,301,1,0,0,0,3362,3363,5,231,0,
		0,3363,3366,3,300,150,0,3364,3366,1,0,0,0,3365,3362,1,0,0,0,3365,3364,
		1,0,0,0,3366,303,1,0,0,0,3367,3368,5,367,0,0,3368,3372,3,300,150,0,3369,
		3370,5,263,0,0,3370,3372,5,367,0,0,3371,3367,1,0,0,0,3371,3369,1,0,0,0,
		3372,305,1,0,0,0,3373,3376,3,304,152,0,3374,3376,1,0,0,0,3375,3373,1,0,
		0,0,3375,3374,1,0,0,0,3376,307,1,0,0,0,3377,3380,5,289,0,0,3378,3380,1,
		0,0,0,3379,3377,1,0,0,0,3379,3378,1,0,0,0,3380,309,1,0,0,0,3381,3382,5,
		46,0,0,3382,3383,5,345,0,0,3383,3384,3,1340,670,0,3384,3385,3,312,156,
		0,3385,3386,5,247,0,0,3386,3387,3,1358,679,0,3387,3388,3,118,59,0,3388,
		311,1,0,0,0,3389,3390,5,276,0,0,3390,3393,3,1368,684,0,3391,3393,1,0,0,
		0,3392,3389,1,0,0,0,3392,3391,1,0,0,0,3393,313,1,0,0,0,3394,3395,5,192,
		0,0,3395,3398,5,345,0,0,3396,3397,5,221,0,0,3397,3399,5,390,0,0,3398,3396,
		1,0,0,0,3398,3399,1,0,0,0,3399,3400,1,0,0,0,3400,3401,3,1340,670,0,3401,
		315,1,0,0,0,3402,3403,5,46,0,0,3403,3407,5,205,0,0,3404,3405,5,221,0,0,
		3405,3406,5,77,0,0,3406,3408,5,390,0,0,3407,3404,1,0,0,0,3407,3408,1,0,
		0,0,3408,3409,1,0,0,0,3409,3410,3,1340,670,0,3410,3411,3,16,8,0,3411,3412,
		3,318,159,0,3412,317,1,0,0,0,3413,3415,3,320,160,0,3414,3413,1,0,0,0,3415,
		3418,1,0,0,0,3416,3414,1,0,0,0,3416,3417,1,0,0,0,3417,319,1,0,0,0,3418,
		3416,1,0,0,0,3419,3420,5,317,0,0,3420,3427,3,1340,670,0,3421,3422,5,369,
		0,0,3422,3427,3,72,36,0,3423,3424,5,64,0,0,3424,3427,3,72,36,0,3425,3427,
		5,151,0,0,3426,3419,1,0,0,0,3426,3421,1,0,0,0,3426,3423,1,0,0,0,3426,3425,
		1,0,0,0,3427,321,1,0,0,0,3428,3429,5,138,0,0,3429,3430,5,205,0,0,3430,
		3431,3,1340,670,0,3431,3432,5,363,0,0,3432,3433,3,324,162,0,3433,323,1,
		0,0,0,3434,3436,3,326,163,0,3435,3434,1,0,0,0,3436,3439,1,0,0,0,3437,3435,
		1,0,0,0,3437,3438,1,0,0,0,3438,325,1,0,0,0,3439,3437,1,0,0,0,3440,3441,
		5,94,0,0,3441,3442,3,72,36,0,3442,327,1,0,0,0,3443,3444,5,138,0,0,3444,
		3445,5,205,0,0,3445,3446,3,1340,670,0,3446,3447,3,40,20,0,3447,3448,3,
		516,258,0,3448,3449,3,1340,670,0,3449,3548,1,0,0,0,3450,3451,5,138,0,0,
		3451,3452,5,205,0,0,3452,3453,3,1340,670,0,3453,3454,3,40,20,0,3454,3455,
		3,514,257,0,3455,3456,3,524,262,0,3456,3548,1,0,0,0,3457,3458,5,138,0,
		0,3458,3459,5,205,0,0,3459,3460,3,1340,670,0,3460,3461,3,40,20,0,3461,
		3462,5,136,0,0,3462,3463,3,650,325,0,3463,3548,1,0,0,0,3464,3465,5,138,
		0,0,3465,3466,5,205,0,0,3466,3467,3,1340,670,0,3467,3468,3,40,20,0,3468,
		3469,5,41,0,0,3469,3470,5,2,0,0,3470,3471,3,1118,559,0,3471,3472,5,36,
		0,0,3472,3473,3,1118,559,0,3473,3474,5,3,0,0,3474,3548,1,0,0,0,3475,3476,
		5,138,0,0,3476,3477,5,205,0,0,3477,3478,3,1340,670,0,3478,3479,3,40,20,
		0,3479,3480,5,190,0,0,3480,3481,3,1118,559,0,3481,3548,1,0,0,0,3482,3483,
		5,138,0,0,3483,3484,5,205,0,0,3484,3485,3,1340,670,0,3485,3486,3,40,20,
		0,3486,3487,5,212,0,0,3487,3488,3,626,313,0,3488,3548,1,0,0,0,3489,3490,
		5,138,0,0,3490,3491,5,205,0,0,3491,3492,3,1340,670,0,3492,3493,3,40,20,
		0,3493,3494,5,272,0,0,3494,3495,3,688,344,0,3495,3548,1,0,0,0,3496,3497,
		5,138,0,0,3497,3498,5,205,0,0,3498,3499,3,1340,670,0,3499,3500,3,40,20,
		0,3500,3501,5,272,0,0,3501,3502,5,157,0,0,3502,3503,3,524,262,0,3503,3504,
		5,100,0,0,3504,3505,3,1340,670,0,3505,3548,1,0,0,0,3506,3507,5,138,0,0,
		3507,3508,5,205,0,0,3508,3509,3,1340,670,0,3509,3510,3,40,20,0,3510,3511,
		5,272,0,0,3511,3512,5,207,0,0,3512,3513,3,524,262,0,3513,3514,5,100,0,
		0,3514,3515,3,1340,670,0,3515,3548,1,0,0,0,3516,3517,5,138,0,0,3517,3518,
		5,205,0,0,3518,3519,3,1340,670,0,3519,3520,3,40,20,0,3520,3521,5,290,0,
		0,3521,3522,3,626,313,0,3522,3548,1,0,0,0,3523,3524,5,138,0,0,3524,3525,
		5,205,0,0,3525,3526,3,1340,670,0,3526,3527,3,40,20,0,3527,3528,5,443,0,
		0,3528,3529,3,626,313,0,3529,3548,1,0,0,0,3530,3531,5,138,0,0,3531,3532,
		5,205,0,0,3532,3533,3,1340,670,0,3533,3534,3,40,20,0,3534,3535,5,444,0,
		0,3535,3536,5,62,0,0,3536,3537,3,1118,559,0,3537,3538,5,239,0,0,3538,3539,
		3,1340,670,0,3539,3548,1,0,0,0,3540,3541,5,138,0,0,3541,3542,5,205,0,0,
		3542,3543,3,1340,670,0,3543,3544,3,40,20,0,3544,3545,5,354,0,0,3545,3546,
		3,1118,559,0,3546,3548,1,0,0,0,3547,3443,1,0,0,0,3547,3450,1,0,0,0,3547,
		3457,1,0,0,0,3547,3464,1,0,0,0,3547,3475,1,0,0,0,3547,3482,1,0,0,0,3547,
		3489,1,0,0,0,3547,3496,1,0,0,0,3547,3506,1,0,0,0,3547,3516,1,0,0,0,3547,
		3523,1,0,0,0,3547,3530,1,0,0,0,3547,3540,1,0,0,0,3548,329,1,0,0,0,3549,
		3550,5,46,0,0,3550,3551,5,63,0,0,3551,3552,5,175,0,0,3552,3553,5,375,0,
		0,3553,3554,3,1340,670,0,3554,3555,3,336,168,0,3555,3556,3,340,170,0,3556,
		331,1,0,0,0,3557,3558,5,216,0,0,3558,3566,3,300,150,0,3559,3560,5,263,
		0,0,3560,3566,5,216,0,0,3561,3562,5,367,0,0,3562,3566,3,300,150,0,3563,
		3564,5,263,0,0,3564,3566,5,367,0,0,3565,3557,1,0,0,0,3565,3559,1,0,0,0,
		3565,3561,1,0,0,0,3565,3563,1,0,0,0,3566,333,1,0,0,0,3567,3569,3,332,166,
		0,3568,3567,1,0,0,0,3569,3570,1,0,0,0,3570,3568,1,0,0,0,3570,3571,1,0,
		0,0,3571,335,1,0,0,0,3572,3575,3,334,167,0,3573,3575,1,0,0,0,3574,3572,
		1,0,0,0,3574,3573,1,0,0,0,3575,337,1,0,0,0,3576,3577,5,138,0,0,3577,3578,
		5,63,0,0,3578,3579,5,175,0,0,3579,3580,5,375,0,0,3580,3581,3,1340,670,
		0,3581,3582,3,336,168,0,3582,3583,3,344,172,0,3583,3592,1,0,0,0,3584,3585,
		5,138,0,0,3585,3586,5,63,0,0,3586,3587,5,175,0,0,3587,3588,5,375,0,0,3588,
		3589,3,1340,670,0,3589,3590,3,334,167,0,3590,3592,1,0,0,0,3591,3576,1,
		0,0,0,3591,3584,1,0,0,0,3592,339,1,0,0,0,3593,3594,5,274,0,0,3594,3595,
		5,2,0,0,3595,3596,3,342,171,0,3596,3597,5,3,0,0,3597,3600,1,0,0,0,3598,
		3600,1,0,0,0,3599,3593,1,0,0,0,3599,3598,1,0,0,0,3600,341,1,0,0,0,3601,
		3606,3,350,175,0,3602,3603,5,6,0,0,3603,3605,3,350,175,0,3604,3602,1,0,
		0,0,3605,3608,1,0,0,0,3606,3604,1,0,0,0,3606,3607,1,0,0,0,3607,343,1,0,
		0,0,3608,3606,1,0,0,0,3609,3610,5,274,0,0,3610,3611,5,2,0,0,3611,3612,
		3,346,173,0,3612,3613,5,3,0,0,3613,345,1,0,0,0,3614,3619,3,348,174,0,3615,
		3616,5,6,0,0,3616,3618,3,348,174,0,3617,3615,1,0,0,0,3618,3621,1,0,0,0,
		3619,3617,1,0,0,0,3619,3620,1,0,0,0,3620,347,1,0,0,0,3621,3619,1,0,0,0,
		3622,3630,3,350,175,0,3623,3624,5,327,0,0,3624,3630,3,350,175,0,3625,3626,
		5,133,0,0,3626,3630,3,350,175,0,3627,3628,5,192,0,0,3628,3630,3,352,176,
		0,3629,3622,1,0,0,0,3629,3623,1,0,0,0,3629,3625,1,0,0,0,3629,3627,1,0,
		0,0,3630,349,1,0,0,0,3631,3632,3,352,176,0,3632,3633,3,354,177,0,3633,
		351,1,0,0,0,3634,3635,3,1380,690,0,3635,353,1,0,0,0,3636,3637,3,1358,679,
		0,3637,355,1,0,0,0,3638,3639,5,46,0,0,3639,3640,5,325,0,0,3640,3641,3,
		1340,670,0,3641,3642,3,358,179,0,3642,3643,3,362,181,0,3643,3644,5,63,
		0,0,3644,3645,5,175,0,0,3645,3646,5,375,0,0,3646,3647,3,1340,670,0,3647,
		3648,3,340,170,0,3648,3664,1,0,0,0,3649,3650,5,46,0,0,3650,3651,5,325,
		0,0,3651,3652,5,221,0,0,3652,3653,5,77,0,0,3653,3654,5,390,0,0,3654,3655,
		3,1340,670,0,3655,3656,3,358,179,0,3656,3657,3,362,181,0,3657,3658,5,63,
		0,0,3658,3659,5,175,0,0,3659,3660,5,375,0,0,3660,3661,3,1340,670,0,3661,
		3662,3,340,170,0,3662,3664,1,0,0,0,3663,3638,1,0,0,0,3663,3649,1,0,0,0,
		3664,357,1,0,0,0,3665,3666,5,354,0,0,3666,3669,3,1358,679,0,3667,3669,
		1,0,0,0,3668,3665,1,0,0,0,3668,3667,1,0,0,0,3669,359,1,0,0,0,3670,3673,
		5,369,0,0,3671,3674,3,1358,679,0,3672,3674,5,78,0,0,3673,3671,1,0,0,0,
		3673,3672,1,0,0,0,3674,361,1,0,0,0,3675,3678,3,360,180,0,3676,3678,1,0,
		0,0,3677,3675,1,0,0,0,3677,3676,1,0,0,0,3678,363,1,0,0,0,3679,3680,5,138,
		0,0,3680,3681,5,325,0,0,3681,3687,3,1340,670,0,3682,3688,3,344,172,0,3683,
		3685,3,360,180,0,3684,3686,3,344,172,0,3685,3684,1,0,0,0,3685,3686,1,0,
		0,0,3686,3688,1,0,0,0,3687,3682,1,0,0,0,3687,3683,1,0,0,0,3688,365,1,0,
		0,0,3689,3690,5,46,0,0,3690,3691,5,63,0,0,3691,3692,5,92,0,0,3692,3693,
		3,1336,668,0,3693,3694,5,2,0,0,3694,3695,3,176,88,0,3695,3696,5,3,0,0,
		3696,3697,3,238,119,0,3697,3698,5,325,0,0,3698,3699,3,1340,670,0,3699,
		3700,3,340,170,0,3700,3746,1,0,0,0,3701,3702,5,46,0,0,3702,3703,5,63,0,
		0,3703,3704,5,92,0,0,3704,3705,5,221,0,0,3705,3706,5,77,0,0,3706,3707,
		5,390,0,0,3707,3708,3,1336,668,0,3708,3709,5,2,0,0,3709,3710,3,176,88,
		0,3710,3711,5,3,0,0,3711,3712,3,238,119,0,3712,3713,5,325,0,0,3713,3714,
		3,1340,670,0,3714,3715,3,340,170,0,3715,3746,1,0,0,0,3716,3717,5,46,0,
		0,3717,3718,5,63,0,0,3718,3719,5,92,0,0,3719,3720,3,1336,668,0,3720,3721,
		5,279,0,0,3721,3722,5,269,0,0,3722,3723,3,1336,668,0,3723,3724,3,178,89,
		0,3724,3725,3,128,64,0,3725,3726,5,325,0,0,3726,3727,3,1340,670,0,3727,
		3728,3,340,170,0,3728,3746,1,0,0,0,3729,3730,5,46,0,0,3730,3731,5,63,0,
		0,3731,3732,5,92,0,0,3732,3733,5,221,0,0,3733,3734,5,77,0,0,3734,3735,
		5,390,0,0,3735,3736,3,1336,668,0,3736,3737,5,279,0,0,3737,3738,5,269,0,
		0,3738,3739,3,1336,668,0,3739,3740,3,178,89,0,3740,3741,3,128,64,0,3741,
		3742,5,325,0,0,3742,3743,3,1340,670,0,3743,3744,3,340,170,0,3744,3746,
		1,0,0,0,3745,3689,1,0,0,0,3745,3701,1,0,0,0,3745,3716,1,0,0,0,3745,3729,
		1,0,0,0,3746,367,1,0,0,0,3747,3748,5,445,0,0,3748,3749,5,63,0,0,3749,3750,
		5,317,0,0,3750,3751,3,1340,670,0,3751,3752,3,372,186,0,3752,3753,5,64,
		0,0,3753,3754,5,325,0,0,3754,3755,3,1340,670,0,3755,3756,5,71,0,0,3756,
		3757,3,1340,670,0,3757,3758,3,340,170,0,3758,369,1,0,0,0,3759,3760,5,74,
		0,0,3760,3763,5,94,0,0,3761,3763,5,59,0,0,3762,3759,1,0,0,0,3762,3761,
		1,0,0,0,3763,371,1,0,0,0,3764,3765,3,370,185,0,3765,3766,5,2,0,0,3766,
		3767,3,1076,538,0,3767,3768,5,3,0,0,3768,3771,1,0,0,0,3769,3771,1,0,0,
		0,3770,3764,1,0,0,0,3770,3769,1,0,0,0,3771,373,1,0,0,0,3772,3773,5,46,
		0,0,3773,3774,5,99,0,0,3774,3775,5,249,0,0,3775,3776,5,62,0,0,3776,3777,
		3,376,188,0,3777,3778,5,325,0,0,3778,3779,3,1340,670,0,3779,3780,3,340,
		170,0,3780,3794,1,0,0,0,3781,3782,5,46,0,0,3782,3783,5,99,0,0,3783,3784,
		5,249,0,0,3784,3785,5,221,0,0,3785,3786,5,77,0,0,3786,3787,5,390,0,0,3787,
		3788,5,62,0,0,3788,3789,3,376,188,0,3789,3790,5,325,0,0,3790,3791,3,1340,
		670,0,3791,3792,3,340,170,0,3792,3794,1,0,0,0,3793,3772,1,0,0,0,3793,3781,
		1,0,0,0,3794,375,1,0,0,0,3795,3798,3,1368,684,0,3796,3798,5,99,0,0,3797,
		3795,1,0,0,0,3797,3796,1,0,0,0,3798,377,1,0,0,0,3799,3800,5,192,0,0,3800,
		3801,5,99,0,0,3801,3802,5,249,0,0,3802,3803,5,62,0,0,3803,3804,3,376,188,
		0,3804,3805,5,325,0,0,3805,3806,3,1340,670,0,3806,3818,1,0,0,0,3807,3808,
		5,192,0,0,3808,3809,5,99,0,0,3809,3810,5,249,0,0,3810,3811,5,221,0,0,3811,
		3812,5,390,0,0,3812,3813,5,62,0,0,3813,3814,3,376,188,0,3814,3815,5,325,
		0,0,3815,3816,3,1340,670,0,3816,3818,1,0,0,0,3817,3799,1,0,0,0,3817,3807,
		1,0,0,0,3818,379,1,0,0,0,3819,3820,5,138,0,0,3820,3821,5,99,0,0,3821,3822,
		5,249,0,0,3822,3823,5,62,0,0,3823,3824,3,376,188,0,3824,3825,5,325,0,0,
		3825,3826,3,1340,670,0,3826,3827,3,344,172,0,3827,381,1,0,0,0,3828,3829,
		5,46,0,0,3829,3830,5,446,0,0,3830,3831,3,1340,670,0,3831,3832,5,80,0,0,
		3832,3833,3,1336,668,0,3833,3834,3,394,197,0,3834,3835,3,396,198,0,3835,
		3836,3,390,195,0,3836,3837,3,386,193,0,3837,3838,3,388,194,0,3838,383,
		1,0,0,0,3839,3840,5,138,0,0,3840,3841,5,446,0,0,3841,3842,3,1340,670,0,
		3842,3843,5,80,0,0,3843,3844,3,1336,668,0,3844,3845,3,392,196,0,3845,3846,
		3,386,193,0,3846,3847,3,388,194,0,3847,385,1,0,0,0,3848,3849,5,100,0,0,
		3849,3850,5,2,0,0,3850,3851,3,1162,581,0,3851,3852,5,3,0,0,3852,3855,1,
		0,0,0,3853,3855,1,0,0,0,3854,3848,1,0,0,0,3854,3853,1,0,0,0,3855,387,1,
		0,0,0,3856,3857,5,105,0,0,3857,3858,5,42,0,0,3858,3859,5,2,0,0,3859,3860,
		3,1162,581,0,3860,3861,5,3,0,0,3861,3864,1,0,0,0,3862,3864,1,0,0,0,3863,
		3856,1,0,0,0,3863,3862,1,0,0,0,3864,389,1,0,0,0,3865,3866,5,94,0,0,3866,
		3869,3,1370,685,0,3867,3869,1,0,0,0,3868,3865,1,0,0,0,3868,3867,1,0,0,
		0,3869,391,1,0,0,0,3870,3871,5,94,0,0,3871,3874,3,1370,685,0,3872,3874,
		1,0,0,0,3873,3870,1,0,0,0,3873,3872,1,0,0,0,3874,393,1,0,0,0,3875,3876,
		5,36,0,0,3876,3879,3,1382,691,0,3877,3879,1,0,0,0,3878,3875,1,0,0,0,3878,
		3877,1,0,0,0,3879,395,1,0,0,0,3880,3881,5,62,0,0,3881,3884,3,398,199,0,
		3882,3884,1,0,0,0,3883,3880,1,0,0,0,3883,3882,1,0,0,0,3884,397,1,0,0,0,
		3885,3886,7,17,0,0,3886,399,1,0,0,0,3887,3888,5,46,0,0,3888,3889,5,131,
		0,0,3889,3890,5,447,0,0,3890,3891,3,1340,670,0,3891,3892,5,354,0,0,3892,
		3893,3,402,201,0,3893,3894,5,216,0,0,3894,3895,3,300,150,0,3895,401,1,
		0,0,0,3896,3897,7,18,0,0,3897,403,1,0,0,0,3898,3899,5,46,0,0,3899,3900,
		5,351,0,0,3900,3901,3,1340,670,0,3901,3902,3,406,203,0,3902,3903,3,408,
		204,0,3903,3904,5,80,0,0,3904,3905,3,1336,668,0,3905,3906,3,412,206,0,
		3906,3907,3,424,212,0,3907,3908,3,430,215,0,3908,3909,5,203,0,0,3909,3910,
		3,432,216,0,3910,3911,3,1346,673,0,3911,3912,5,2,0,0,3912,3913,3,434,217,
		0,3913,3914,5,3,0,0,3914,3937,1,0,0,0,3915,3916,5,46,0,0,3916,3917,5,45,
		0,0,3917,3918,5,351,0,0,3918,3919,3,1340,670,0,3919,3920,5,135,0,0,3920,
		3921,3,408,204,0,3921,3922,5,80,0,0,3922,3923,3,1336,668,0,3923,3924,3,
		438,219,0,3924,3925,3,440,220,0,3925,3926,5,62,0,0,3926,3927,5,193,0,0,
		3927,3928,5,408,0,0,3928,3929,3,430,215,0,3929,3930,5,203,0,0,3930,3931,
		3,432,216,0,3931,3932,3,1346,673,0,3932,3933,5,2,0,0,3933,3934,3,434,217,
		0,3934,3935,5,3,0,0,3935,3937,1,0,0,0,3936,3898,1,0,0,0,3936,3915,1,0,
		0,0,3937,405,1,0,0,0,3938,3943,5,146,0,0,3939,3943,5,135,0,0,3940,3941,
		5,234,0,0,3941,3943,5,269,0,0,3942,3938,1,0,0,0,3942,3939,1,0,0,0,3942,
		3940,1,0,0,0,3943,407,1,0,0,0,3944,3949,3,410,205,0,3945,3946,5,82,0,0,
		3946,3948,3,410,205,0,3947,3945,1,0,0,0,3948,3951,1,0,0,0,3949,3947,1,
		0,0,0,3949,3950,1,0,0,0,3950,409,1,0,0,0,3951,3949,1,0,0,0,3952,3960,5,
		233,0,0,3953,3960,5,183,0,0,3954,3960,5,363,0,0,3955,3956,5,363,0,0,3956,
		3957,5,269,0,0,3957,3960,3,216,108,0,3958,3960,5,352,0,0,3959,3952,1,0,
		0,0,3959,3953,1,0,0,0,3959,3954,1,0,0,0,3959,3955,1,0,0,0,3959,3958,1,
		0,0,0,3960,411,1,0,0,0,3961,3962,5,448,0,0,3962,3965,3,414,207,0,3963,
		3965,1,0,0,0,3964,3961,1,0,0,0,3964,3963,1,0,0,0,3965,413,1,0,0,0,3966,
		3968,3,416,208,0,3967,3966,1,0,0,0,3968,3969,1,0,0,0,3969,3967,1,0,0,0,
		3969,3970,1,0,0,0,3970,415,1,0,0,0,3971,3972,3,418,209,0,3972,3973,3,420,
		210,0,3973,3974,3,834,417,0,3974,3975,3,422,211,0,3975,417,1,0,0,0,3976,
		3977,7,19,0,0,3977,419,1,0,0,0,3978,3979,7,20,0,0,3979,421,1,0,0,0,3980,
		3981,3,1372,686,0,3981,423,1,0,0,0,3982,3983,5,62,0,0,3983,3984,3,426,
		213,0,3984,3985,3,428,214,0,3985,3988,1,0,0,0,3986,3988,1,0,0,0,3987,3982,
		1,0,0,0,3987,3986,1,0,0,0,3988,425,1,0,0,0,3989,3992,5,193,0,0,3990,3992,
		1,0,0,0,3991,3989,1,0,0,0,3991,3990,1,0,0,0,3992,427,1,0,0,0,3993,3994,
		7,21,0,0,3994,429,1,0,0,0,3995,3996,5,102,0,0,3996,3997,5,2,0,0,3997,3998,
		3,1162,581,0,3998,3999,5,3,0,0,3999,4002,1,0,0,0,4000,4002,1,0,0,0,4001,
		3995,1,0,0,0,4001,4000,1,0,0,0,4002,431,1,0,0,0,4003,4004,7,22,0,0,4004,
		433,1,0,0,0,4005,4008,3,436,218,0,4006,4008,1,0,0,0,4007,4005,1,0,0,0,
		4007,4006,1,0,0,0,4008,4013,1,0,0,0,4009,4010,5,6,0,0,4010,4012,3,436,
		218,0,4011,4009,1,0,0,0,4012,4015,1,0,0,0,4013,4011,1,0,0,0,4013,4014,
		1,0,0,0,4014,435,1,0,0,0,4015,4013,1,0,0,0,4016,4021,3,1356,678,0,4017,
		4021,3,1354,677,0,4018,4021,3,1358,679,0,4019,4021,3,1380,690,0,4020,4016,
		1,0,0,0,4020,4017,1,0,0,0,4020,4018,1,0,0,0,4020,4019,1,0,0,0,4021,437,
		1,0,0,0,4022,4023,5,64,0,0,4023,4026,3,1336,668,0,4024,4026,1,0,0,0,4025,
		4022,1,0,0,0,4025,4024,1,0,0,0,4026,439,1,0,0,0,4027,4029,3,442,221,0,
		4028,4027,1,0,0,0,4029,4032,1,0,0,0,4030,4028,1,0,0,0,4030,4031,1,0,0,
		0,4031,441,1,0,0,0,4032,4030,1,0,0,0,4033,4034,5,77,0,0,4034,4045,5,54,
		0,0,4035,4045,5,54,0,0,4036,4037,5,69,0,0,4037,4045,5,222,0,0,4038,4039,
		5,69,0,0,4039,4045,5,181,0,0,4040,4041,5,77,0,0,4041,4045,5,365,0,0,4042,
		4043,5,263,0,0,4043,4045,5,229,0,0,4044,4033,1,0,0,0,4044,4035,1,0,0,0,
		4044,4036,1,0,0,0,4044,4038,1,0,0,0,4044,4040,1,0,0,0,4044,4042,1,0,0,
		0,4045,443,1,0,0,0,4046,4047,5,46,0,0,4047,4048,5,199,0,0,4048,4049,5,
		351,0,0,4049,4050,3,1340,670,0,4050,4051,5,80,0,0,4051,4052,3,1380,690,
		0,4052,4053,5,203,0,0,4053,4054,3,432,216,0,4054,4055,3,1346,673,0,4055,
		4056,5,2,0,0,4056,4057,5,3,0,0,4057,4073,1,0,0,0,4058,4059,5,46,0,0,4059,
		4060,5,199,0,0,4060,4061,5,351,0,0,4061,4062,3,1340,670,0,4062,4063,5,
		80,0,0,4063,4064,3,1380,690,0,4064,4065,5,102,0,0,4065,4066,3,446,223,
		0,4066,4067,5,203,0,0,4067,4068,3,432,216,0,4068,4069,3,1346,673,0,4069,
		4070,5,2,0,0,4070,4071,5,3,0,0,4071,4073,1,0,0,0,4072,4046,1,0,0,0,4072,
		4058,1,0,0,0,4073,445,1,0,0,0,4074,4079,3,448,224,0,4075,4076,5,33,0,0,
		4076,4078,3,448,224,0,4077,4075,1,0,0,0,4078,4081,1,0,0,0,4079,4077,1,
		0,0,0,4079,4080,1,0,0,0,4080,447,1,0,0,0,4081,4079,1,0,0,0,4082,4083,3,
		1372,686,0,4083,4084,5,68,0,0,4084,4085,5,2,0,0,4085,4086,3,450,225,0,
		4086,4087,5,3,0,0,4087,449,1,0,0,0,4088,4093,3,1358,679,0,4089,4090,5,
		6,0,0,4090,4092,3,1358,679,0,4091,4089,1,0,0,0,4092,4095,1,0,0,0,4093,
		4091,1,0,0,0,4093,4094,1,0,0,0,4094,451,1,0,0,0,4095,4093,1,0,0,0,4096,
		4097,5,138,0,0,4097,4098,5,199,0,0,4098,4099,5,351,0,0,4099,4100,3,1340,
		670,0,4100,4101,3,454,227,0,4101,453,1,0,0,0,4102,4109,5,194,0,0,4103,
		4104,5,194,0,0,4104,4109,5,306,0,0,4105,4106,5,194,0,0,4106,4109,5,139,
		0,0,4107,4109,5,187,0,0,4108,4102,1,0,0,0,4108,4103,1,0,0,0,4108,4105,
		1,0,0,0,4108,4107,1,0,0,0,4109,455,1,0,0,0,4110,4111,5,46,0,0,4111,4112,
		5,140,0,0,4112,4113,3,524,262,0,4113,4114,5,42,0,0,4114,4115,5,2,0,0,4115,
		4116,3,1162,581,0,4116,4117,5,3,0,0,4117,4118,3,440,220,0,4118,457,1,0,
		0,0,4119,4120,5,46,0,0,4120,4121,3,618,309,0,4121,4122,5,136,0,0,4122,
		4123,3,1346,673,0,4123,4124,3,646,323,0,4124,4125,3,460,230,0,4125,4226,
		1,0,0,0,4126,4127,5,46,0,0,4127,4128,3,618,309,0,4128,4129,5,136,0,0,4129,
		4130,3,1346,673,0,4130,4131,3,468,234,0,4131,4226,1,0,0,0,4132,4133,5,
		46,0,0,4133,4134,5,272,0,0,4134,4135,3,684,342,0,4135,4136,3,460,230,0,
		4136,4226,1,0,0,0,4137,4138,5,46,0,0,4138,4139,5,354,0,0,4139,4140,3,524,
		262,0,4140,4141,3,460,230,0,4141,4226,1,0,0,0,4142,4143,5,46,0,0,4143,
		4144,5,354,0,0,4144,4226,3,524,262,0,4145,4146,5,46,0,0,4146,4147,5,354,
		0,0,4147,4148,3,524,262,0,4148,4149,5,36,0,0,4149,4150,5,2,0,0,4150,4151,
		3,1098,549,0,4151,4152,5,3,0,0,4152,4226,1,0,0,0,4153,4154,5,46,0,0,4154,
		4155,5,354,0,0,4155,4156,3,524,262,0,4156,4157,5,36,0,0,4157,4158,5,197,
		0,0,4158,4159,5,2,0,0,4159,4160,3,474,237,0,4160,4161,5,3,0,0,4161,4226,
		1,0,0,0,4162,4163,5,46,0,0,4163,4164,5,354,0,0,4164,4165,3,524,262,0,4165,
		4166,5,36,0,0,4166,4167,5,293,0,0,4167,4168,3,460,230,0,4168,4226,1,0,
		0,0,4169,4170,5,46,0,0,4170,4171,5,349,0,0,4171,4172,5,319,0,0,4172,4173,
		5,277,0,0,4173,4174,3,524,262,0,4174,4175,3,460,230,0,4175,4226,1,0,0,
		0,4176,4177,5,46,0,0,4177,4178,5,349,0,0,4178,4179,5,319,0,0,4179,4180,
		5,186,0,0,4180,4181,3,524,262,0,4181,4182,3,460,230,0,4182,4226,1,0,0,
		0,4183,4184,5,46,0,0,4184,4185,5,349,0,0,4185,4186,5,319,0,0,4186,4187,
		5,347,0,0,4187,4188,3,524,262,0,4188,4189,3,460,230,0,4189,4226,1,0,0,
		0,4190,4191,5,46,0,0,4191,4192,5,349,0,0,4192,4193,5,319,0,0,4193,4194,
		5,164,0,0,4194,4195,3,524,262,0,4195,4196,3,460,230,0,4196,4226,1,0,0,
		0,4197,4198,5,46,0,0,4198,4199,5,108,0,0,4199,4200,3,524,262,0,4200,4201,
		3,460,230,0,4201,4226,1,0,0,0,4202,4203,5,46,0,0,4203,4204,5,108,0,0,4204,
		4205,5,221,0,0,4205,4206,5,77,0,0,4206,4207,5,390,0,0,4207,4208,3,524,
		262,0,4208,4209,3,460,230,0,4209,4226,1,0,0,0,4210,4211,5,46,0,0,4211,
		4212,5,108,0,0,4212,4213,3,524,262,0,4213,4214,5,64,0,0,4214,4215,3,524,
		262,0,4215,4226,1,0,0,0,4216,4217,5,46,0,0,4217,4218,5,108,0,0,4218,4219,
		5,221,0,0,4219,4220,5,77,0,0,4220,4221,5,390,0,0,4221,4222,3,524,262,0,
		4222,4223,5,64,0,0,4223,4224,3,524,262,0,4224,4226,1,0,0,0,4225,4119,1,
		0,0,0,4225,4126,1,0,0,0,4225,4132,1,0,0,0,4225,4137,1,0,0,0,4225,4142,
		1,0,0,0,4225,4145,1,0,0,0,4225,4153,1,0,0,0,4225,4162,1,0,0,0,4225,4169,
		1,0,0,0,4225,4176,1,0,0,0,4225,4183,1,0,0,0,4225,4190,1,0,0,0,4225,4197,
		1,0,0,0,4225,4202,1,0,0,0,4225,4210,1,0,0,0,4225,4216,1,0,0,0,4226,459,
		1,0,0,0,4227,4228,5,2,0,0,4228,4229,3,462,231,0,4229,4230,5,3,0,0,4230,
		461,1,0,0,0,4231,4236,3,464,232,0,4232,4233,5,6,0,0,4233,4235,3,464,232,
		0,4234,4232,1,0,0,0,4235,4238,1,0,0,0,4236,4234,1,0,0,0,4236,4237,1,0,
		0,0,4237,463,1,0,0,0,4238,4236,1,0,0,0,4239,4242,3,1380,690,0,4240,4241,
		5,10,0,0,4241,4243,3,466,233,0,4242,4240,1,0,0,0,4242,4243,1,0,0,0,4243,
		465,1,0,0,0,4244,4251,3,640,320,0,4245,4251,3,1392,696,0,4246,4251,3,1276,
		638,0,4247,4251,3,292,146,0,4248,4251,3,1358,679,0,4249,4251,5,401,0,0,
		4250,4244,1,0,0,0,4250,4245,1,0,0,0,4250,4246,1,0,0,0,4250,4247,1,0,0,
		0,4250,4248,1,0,0,0,4250,4249,1,0,0,0,4251,467,1,0,0,0,4252,4253,5,2,0,
		0,4253,4254,3,470,235,0,4254,4255,5,3,0,0,4255,469,1,0,0,0,4256,4261,3,
		472,236,0,4257,4258,5,6,0,0,4258,4260,3,472,236,0,4259,4257,1,0,0,0,4260,
		4263,1,0,0,0,4261,4259,1,0,0,0,4261,4262,1,0,0,0,4262,471,1,0,0,0,4263,
		4261,1,0,0,0,4264,4265,3,1382,691,0,4265,4266,5,10,0,0,4266,4267,3,466,
		233,0,4267,473,1,0,0,0,4268,4271,3,476,238,0,4269,4271,1,0,0,0,4270,4268,
		1,0,0,0,4270,4269,1,0,0,0,4271,475,1,0,0,0,4272,4277,3,1358,679,0,4273,
		4274,5,6,0,0,4274,4276,3,1358,679,0,4275,4273,1,0,0,0,4276,4279,1,0,0,
		0,4277,4275,1,0,0,0,4277,4278,1,0,0,0,4278,477,1,0,0,0,4279,4277,1,0,0,
		0,4280,4281,5,138,0,0,4281,4282,5,354,0,0,4282,4283,3,524,262,0,4283,4284,
		5,133,0,0,4284,4285,5,451,0,0,4285,4286,3,480,240,0,4286,4287,3,1358,679,
		0,4287,4318,1,0,0,0,4288,4289,5,138,0,0,4289,4290,5,354,0,0,4290,4291,
		3,524,262,0,4291,4292,5,133,0,0,4292,4293,5,451,0,0,4293,4294,3,480,240,
		0,4294,4295,3,1358,679,0,4295,4296,5,146,0,0,4296,4297,3,1358,679,0,4297,
		4318,1,0,0,0,4298,4299,5,138,0,0,4299,4300,5,354,0,0,4300,4301,3,524,262,
		0,4301,4302,5,133,0,0,4302,4303,5,451,0,0,4303,4304,3,480,240,0,4304,4305,
		3,1358,679,0,4305,4306,5,135,0,0,4306,4307,3,1358,679,0,4307,4318,1,0,
		0,0,4308,4309,5,138,0,0,4309,4310,5,354,0,0,4310,4311,3,524,262,0,4311,
		4312,5,303,0,0,4312,4313,5,451,0,0,4313,4314,3,1358,679,0,4314,4315,5,
		94,0,0,4315,4316,3,1358,679,0,4316,4318,1,0,0,0,4317,4280,1,0,0,0,4317,
		4288,1,0,0,0,4317,4298,1,0,0,0,4317,4308,1,0,0,0,4318,479,1,0,0,0,4319,
		4320,5,221,0,0,4320,4321,5,77,0,0,4321,4324,5,390,0,0,4322,4324,1,0,0,
		0,4323,4319,1,0,0,0,4323,4322,1,0,0,0,4324,481,1,0,0,0,4325,4326,5,46,
		0,0,4326,4327,5,272,0,0,4327,4328,5,157,0,0,4328,4329,3,524,262,0,4329,
		4330,3,488,244,0,4330,4331,5,62,0,0,4331,4332,5,354,0,0,4332,4333,3,1118,
		559,0,4333,4334,5,100,0,0,4334,4335,3,1340,670,0,4335,4336,3,490,245,0,
		4336,4337,5,36,0,0,4337,4338,3,484,242,0,4338,483,1,0,0,0,4339,4344,3,
		486,243,0,4340,4341,5,6,0,0,4341,4343,3,486,243,0,4342,4340,1,0,0,0,4343,
		4346,1,0,0,0,4344,4342,1,0,0,0,4344,4345,1,0,0,0,4345,485,1,0,0,0,4346,
		4344,1,0,0,0,4347,4348,5,272,0,0,4348,4349,3,1356,678,0,4349,4350,3,684,
		342,0,4350,4351,3,492,246,0,4351,4352,3,494,247,0,4352,4373,1,0,0,0,4353,
		4354,5,272,0,0,4354,4355,3,1356,678,0,4355,4356,3,688,344,0,4356,4357,
		3,492,246,0,4357,4358,3,494,247,0,4358,4373,1,0,0,0,4359,4360,5,212,0,
		0,4360,4361,3,1356,678,0,4361,4362,3,626,313,0,4362,4373,1,0,0,0,4363,
		4364,5,212,0,0,4364,4365,3,1356,678,0,4365,4366,5,2,0,0,4366,4367,3,1286,
		643,0,4367,4368,5,3,0,0,4368,4369,3,626,313,0,4369,4373,1,0,0,0,4370,4371,
		5,339,0,0,4371,4373,3,1118,559,0,4372,4347,1,0,0,0,4372,4353,1,0,0,0,4372,
		4359,1,0,0,0,4372,4363,1,0,0,0,4372,4370,1,0,0,0,4373,487,1,0,0,0,4374,
		4377,5,53,0,0,4375,4377,1,0,0,0,4376,4374,1,0,0,0,4376,4375,1,0,0,0,4377,
		489,1,0,0,0,4378,4379,5,207,0,0,4379,4382,3,524,262,0,4380,4382,1,0,0,
		0,4381,4378,1,0,0,0,4381,4380,1,0,0,0,4382,491,1,0,0,0,4383,4384,5,62,
		0,0,4384,4391,5,319,0,0,4385,4386,5,62,0,0,4386,4387,5,83,0,0,4387,4388,
		5,148,0,0,4388,4391,3,524,262,0,4389,4391,1,0,0,0,4390,4383,1,0,0,0,4390,
		4385,1,0,0,0,4390,4389,1,0,0,0,4391,493,1,0,0,0,4392,4395,5,296,0,0,4393,
		4395,1,0,0,0,4394,4392,1,0,0,0,4394,4393,1,0,0,0,4395,495,1,0,0,0,4396,
		4397,5,46,0,0,4397,4398,5,272,0,0,4398,4399,5,207,0,0,4399,4400,3,524,
		262,0,4400,4401,5,100,0,0,4401,4402,3,1340,670,0,4402,497,1,0,0,0,4403,
		4404,5,138,0,0,4404,4405,5,272,0,0,4405,4406,5,207,0,0,4406,4407,3,524,
		262,0,4407,4408,5,100,0,0,4408,4409,3,1340,670,0,4409,4410,5,133,0,0,4410,
		4411,3,484,242,0,4411,4422,1,0,0,0,4412,4413,5,138,0,0,4413,4414,5,272,
		0,0,4414,4415,5,207,0,0,4415,4416,3,524,262,0,4416,4417,5,100,0,0,4417,
		4418,3,1340,670,0,4418,4419,5,192,0,0,4419,4420,3,500,250,0,4420,4422,
		1,0,0,0,4421,4403,1,0,0,0,4421,4412,1,0,0,0,4422,499,1,0,0,0,4423,4428,
		3,502,251,0,4424,4425,5,6,0,0,4425,4427,3,502,251,0,4426,4424,1,0,0,0,
		4427,4430,1,0,0,0,4428,4426,1,0,0,0,4428,4429,1,0,0,0,4429,501,1,0,0,0,
		4430,4428,1,0,0,0,4431,4432,5,272,0,0,4432,4433,3,1356,678,0,4433,4434,
		5,2,0,0,4434,4435,3,1286,643,0,4435,4436,5,3,0,0,4436,4444,1,0,0,0,4437,
		4438,5,212,0,0,4438,4439,3,1356,678,0,4439,4440,5,2,0,0,4440,4441,3,1286,
		643,0,4441,4442,5,3,0,0,4442,4444,1,0,0,0,4443,4431,1,0,0,0,4443,4437,
		1,0,0,0,4444,503,1,0,0,0,4445,4446,5,192,0,0,4446,4447,5,272,0,0,4447,
		4448,5,157,0,0,4448,4449,3,524,262,0,4449,4450,5,100,0,0,4450,4451,3,1340,
		670,0,4451,4452,3,108,54,0,4452,4464,1,0,0,0,4453,4454,5,192,0,0,4454,
		4455,5,272,0,0,4455,4456,5,157,0,0,4456,4457,5,221,0,0,4457,4458,5,390,
		0,0,4458,4459,3,524,262,0,4459,4460,5,100,0,0,4460,4461,3,1340,670,0,4461,
		4462,3,108,54,0,4462,4464,1,0,0,0,4463,4445,1,0,0,0,4463,4453,1,0,0,0,
		4464,505,1,0,0,0,4465,4466,5,192,0,0,4466,4467,5,272,0,0,4467,4468,5,207,
		0,0,4468,4469,3,524,262,0,4469,4470,5,100,0,0,4470,4471,3,1340,670,0,4471,
		4472,3,108,54,0,4472,4484,1,0,0,0,4473,4474,5,192,0,0,4474,4475,5,272,
		0,0,4475,4476,5,207,0,0,4476,4477,5,221,0,0,4477,4478,5,390,0,0,4478,4479,
		3,524,262,0,4479,4480,5,100,0,0,4480,4481,3,1340,670,0,4481,4482,3,108,
		54,0,4482,4484,1,0,0,0,4483,4465,1,0,0,0,4483,4473,1,0,0,0,4484,507,1,
		0,0,0,4485,4486,5,192,0,0,4486,4487,5,275,0,0,4487,4488,5,148,0,0,4488,
		4489,3,1370,685,0,4489,4490,3,108,54,0,4490,509,1,0,0,0,4491,4492,5,295,
		0,0,4492,4493,5,275,0,0,4493,4494,5,148,0,0,4494,4495,3,1370,685,0,4495,
		4496,5,94,0,0,4496,4497,3,1368,684,0,4497,511,1,0,0,0,4498,4499,5,192,
		0,0,4499,4500,3,514,257,0,4500,4501,5,221,0,0,4501,4502,5,390,0,0,4502,
		4503,3,522,261,0,4503,4504,3,108,54,0,4504,4577,1,0,0,0,4505,4506,5,192,
		0,0,4506,4507,3,514,257,0,4507,4508,3,522,261,0,4508,4509,3,108,54,0,4509,
		4577,1,0,0,0,4510,4511,5,192,0,0,4511,4512,3,518,259,0,4512,4513,5,221,
		0,0,4513,4514,5,390,0,0,4514,4515,3,1338,669,0,4515,4516,3,108,54,0,4516,
		4577,1,0,0,0,4517,4518,5,192,0,0,4518,4519,3,518,259,0,4519,4520,3,1338,
		669,0,4520,4521,3,108,54,0,4521,4577,1,0,0,0,4522,4523,5,192,0,0,4523,
		4524,3,520,260,0,4524,4525,3,1340,670,0,4525,4526,5,80,0,0,4526,4527,3,
		524,262,0,4527,4528,3,108,54,0,4528,4577,1,0,0,0,4529,4530,5,192,0,0,4530,
		4531,3,520,260,0,4531,4532,5,221,0,0,4532,4533,5,390,0,0,4533,4534,3,1340,
		670,0,4534,4535,5,80,0,0,4535,4536,3,524,262,0,4536,4537,3,108,54,0,4537,
		4577,1,0,0,0,4538,4539,5,192,0,0,4539,4540,5,354,0,0,4540,4541,3,528,264,
		0,4541,4542,3,108,54,0,4542,4577,1,0,0,0,4543,4544,5,192,0,0,4544,4545,
		5,354,0,0,4545,4546,5,221,0,0,4546,4547,5,390,0,0,4547,4548,3,528,264,
		0,4548,4549,3,108,54,0,4549,4577,1,0,0,0,4550,4551,5,192,0,0,4551,4552,
		5,190,0,0,4552,4553,3,528,264,0,4553,4554,3,108,54,0,4554,4577,1,0,0,0,
		4555,4556,5,192,0,0,4556,4557,5,190,0,0,4557,4558,5,221,0,0,4558,4559,
		5,390,0,0,4559,4560,3,528,264,0,4560,4561,3,108,54,0,4561,4577,1,0,0,0,
		4562,4563,5,192,0,0,4563,4564,5,227,0,0,4564,4565,5,109,0,0,4565,4566,
		3,522,261,0,4566,4567,3,108,54,0,4567,4577,1,0,0,0,4568,4569,5,192,0,0,
		4569,4570,5,227,0,0,4570,4571,5,109,0,0,4571,4572,5,221,0,0,4572,4573,
		5,390,0,0,4573,4574,3,522,261,0,4574,4575,3,108,54,0,4575,4577,1,0,0,0,
		4576,4498,1,0,0,0,4576,4505,1,0,0,0,4576,4510,1,0,0,0,4576,4517,1,0,0,
		0,4576,4522,1,0,0,0,4576,4529,1,0,0,0,4576,4538,1,0,0,0,4576,4543,1,0,
		0,0,4576,4550,1,0,0,0,4576,4555,1,0,0,0,4576,4562,1,0,0,0,4576,4568,1,
		0,0,0,4577,513,1,0,0,0,4578,4602,5,92,0,0,4579,4602,5,322,0,0,4580,4602,
		5,370,0,0,4581,4582,5,252,0,0,4582,4602,5,370,0,0,4583,4602,5,227,0,0,
		4584,4585,5,63,0,0,4585,4602,5,92,0,0,4586,4602,5,108,0,0,4587,4602,5,
		169,0,0,4588,4602,5,336,0,0,4589,4590,5,349,0,0,4590,4591,5,319,0,0,4591,
		4602,5,277,0,0,4592,4593,5,349,0,0,4593,4594,5,319,0,0,4594,4602,5,186,
		0,0,4595,4596,5,349,0,0,4596,4597,5,319,0,0,4597,4602,5,347,0,0,4598,4599,
		5,349,0,0,4599,4600,5,319,0,0,4600,4602,5,164,0,0,4601,4578,1,0,0,0,4601,
		4579,1,0,0,0,4601,4580,1,0,0,0,4601,4581,1,0,0,0,4601,4583,1,0,0,0,4601,
		4584,1,0,0,0,4601,4586,1,0,0,0,4601,4587,1,0,0,0,4601,4588,1,0,0,0,4601,
		4589,1,0,0,0,4601,4592,1,0,0,0,4601,4595,1,0,0,0,4601,4598,1,0,0,0,4602,
		515,1,0,0,0,4603,4609,3,518,259,0,4604,4609,5,176,0,0,4605,4609,5,312,
		0,0,4606,4609,5,452,0,0,4607,4609,5,345,0,0,4608,4603,1,0,0,0,4608,4604,
		1,0,0,0,4608,4605,1,0,0,0,4608,4606,1,0,0,0,4608,4607,1,0,0,0,4609,517,
		1,0,0,0,4610,4611,5,131,0,0,4611,4625,5,447,0,0,4612,4613,5,199,0,0,4613,
		4625,5,351,0,0,4614,4625,5,205,0,0,4615,4616,5,63,0,0,4616,4617,5,175,
		0,0,4617,4625,5,375,0,0,4618,4619,3,308,154,0,4619,4620,5,239,0,0,4620,
		4625,1,0,0,0,4621,4625,5,453,0,0,4622,4625,5,317,0,0,4623,4625,5,325,0,
		0,4624,4610,1,0,0,0,4624,4612,1,0,0,0,4624,4614,1,0,0,0,4624,4615,1,0,
		0,0,4624,4618,1,0,0,0,4624,4621,1,0,0,0,4624,4622,1,0,0,0,4624,4623,1,
		0,0,0,4625,519,1,0,0,0,4626,4627,7,23,0,0,4627,521,1,0,0,0,4628,4633,3,
		524,262,0,4629,4630,5,6,0,0,4630,4632,3,524,262,0,4631,4629,1,0,0,0,4632,
		4635,1,0,0,0,4633,4631,1,0,0,0,4633,4634,1,0,0,0,4634,523,1,0,0,0,4635,
		4633,1,0,0,0,4636,4638,3,1372,686,0,4637,4639,3,526,263,0,4638,4637,1,
		0,0,0,4638,4639,1,0,0,0,4639,525,1,0,0,0,4640,4641,5,11,0,0,4641,4643,
		3,1342,671,0,4642,4640,1,0,0,0,4643,4644,1,0,0,0,4644,4642,1,0,0,0,4644,
		4645,1,0,0,0,4645,527,1,0,0,0,4646,4651,3,1118,559,0,4647,4648,5,6,0,0,
		4648,4650,3,1118,559,0,4649,4647,1,0,0,0,4650,4653,1,0,0,0,4651,4649,1,
		0,0,0,4651,4652,1,0,0,0,4652,529,1,0,0,0,4653,4651,1,0,0,0,4654,4655,5,
		352,0,0,4655,4656,3,988,494,0,4656,4657,3,1076,538,0,4657,4658,3,532,266,
		0,4658,4659,3,108,54,0,4659,531,1,0,0,0,4660,4661,5,168,0,0,4661,4666,
		5,220,0,0,4662,4663,5,308,0,0,4663,4666,5,220,0,0,4664,4666,1,0,0,0,4665,
		4660,1,0,0,0,4665,4662,1,0,0,0,4665,4664,1,0,0,0,4666,533,1,0,0,0,4667,
		4668,5,160,0,0,4668,4669,5,80,0,0,4669,4670,3,514,257,0,4670,4671,3,524,
		262,0,4671,4672,5,116,0,0,4672,4673,3,536,268,0,4673,4815,1,0,0,0,4674,
		4675,5,160,0,0,4675,4676,5,80,0,0,4676,4677,5,44,0,0,4677,4678,3,524,262,
		0,4678,4679,5,116,0,0,4679,4680,3,536,268,0,4680,4815,1,0,0,0,4681,4682,
		5,160,0,0,4682,4683,5,80,0,0,4683,4684,3,516,258,0,4684,4685,3,1340,670,
		0,4685,4686,5,116,0,0,4686,4687,3,536,268,0,4687,4815,1,0,0,0,4688,4689,
		5,160,0,0,4689,4690,5,80,0,0,4690,4691,5,354,0,0,4691,4692,3,1118,559,
		0,4692,4693,5,116,0,0,4693,4694,3,536,268,0,4694,4815,1,0,0,0,4695,4696,
		5,160,0,0,4696,4697,5,80,0,0,4697,4698,5,190,0,0,4698,4699,3,1118,559,
		0,4699,4700,5,116,0,0,4700,4701,3,536,268,0,4701,4815,1,0,0,0,4702,4703,
		5,160,0,0,4703,4704,5,80,0,0,4704,4705,5,136,0,0,4705,4706,3,650,325,0,
		4706,4707,5,116,0,0,4707,4708,3,536,268,0,4708,4815,1,0,0,0,4709,4710,
		5,160,0,0,4710,4711,5,80,0,0,4711,4712,5,212,0,0,4712,4713,3,626,313,0,
		4713,4714,5,116,0,0,4714,4715,3,536,268,0,4715,4815,1,0,0,0,4716,4717,
		5,160,0,0,4717,4718,5,80,0,0,4718,4719,5,272,0,0,4719,4720,3,688,344,0,
		4720,4721,5,116,0,0,4721,4722,3,536,268,0,4722,4815,1,0,0,0,4723,4724,
		5,160,0,0,4724,4725,5,80,0,0,4725,4726,5,45,0,0,4726,4727,3,1340,670,0,
		4727,4728,5,80,0,0,4728,4729,3,524,262,0,4729,4730,5,116,0,0,4730,4731,
		3,536,268,0,4731,4815,1,0,0,0,4732,4733,5,160,0,0,4733,4734,5,80,0,0,4734,
		4735,5,45,0,0,4735,4736,3,1340,670,0,4736,4737,5,80,0,0,4737,4738,5,190,
		0,0,4738,4739,3,524,262,0,4739,4740,5,116,0,0,4740,4741,3,536,268,0,4741,
		4815,1,0,0,0,4742,4743,5,160,0,0,4743,4744,5,80,0,0,4744,4745,3,520,260,
		0,4745,4746,3,1340,670,0,4746,4747,5,80,0,0,4747,4748,3,524,262,0,4748,
		4749,5,116,0,0,4749,4750,3,536,268,0,4750,4815,1,0,0,0,4751,4752,5,160,
		0,0,4752,4753,5,80,0,0,4753,4754,5,290,0,0,4754,4755,3,626,313,0,4755,
		4756,5,116,0,0,4756,4757,3,536,268,0,4757,4815,1,0,0,0,4758,4759,5,160,
		0,0,4759,4760,5,80,0,0,4760,4761,5,443,0,0,4761,4762,3,626,313,0,4762,
		4763,5,116,0,0,4763,4764,3,536,268,0,4764,4815,1,0,0,0,4765,4766,5,160,
		0,0,4766,4767,5,80,0,0,4767,4768,5,444,0,0,4768,4769,5,62,0,0,4769,4770,
		3,1118,559,0,4770,4771,5,239,0,0,4771,4772,3,1340,670,0,4772,4773,5,116,
		0,0,4773,4774,3,536,268,0,4774,4815,1,0,0,0,4775,4776,5,160,0,0,4776,4777,
		5,80,0,0,4777,4778,5,272,0,0,4778,4779,5,157,0,0,4779,4780,3,524,262,0,
		4780,4781,5,100,0,0,4781,4782,3,1340,670,0,4782,4783,5,116,0,0,4783,4784,
		3,536,268,0,4784,4815,1,0,0,0,4785,4786,5,160,0,0,4786,4787,5,80,0,0,4787,
		4788,5,272,0,0,4788,4789,5,207,0,0,4789,4790,3,524,262,0,4790,4791,5,100,
		0,0,4791,4792,3,1340,670,0,4792,4793,5,116,0,0,4793,4794,3,536,268,0,4794,
		4815,1,0,0,0,4795,4796,5,160,0,0,4796,4797,5,80,0,0,4797,4798,5,240,0,
		0,4798,4799,5,268,0,0,4799,4800,3,292,146,0,4800,4801,5,116,0,0,4801,4802,
		3,536,268,0,4802,4815,1,0,0,0,4803,4804,5,160,0,0,4804,4805,5,80,0,0,4805,
		4806,5,41,0,0,4806,4807,5,2,0,0,4807,4808,3,1118,559,0,4808,4809,5,36,
		0,0,4809,4810,3,1118,559,0,4810,4811,5,3,0,0,4811,4812,5,116,0,0,4812,
		4813,3,536,268,0,4813,4815,1,0,0,0,4814,4667,1,0,0,0,4814,4674,1,0,0,0,
		4814,4681,1,0,0,0,4814,4688,1,0,0,0,4814,4695,1,0,0,0,4814,4702,1,0,0,
		0,4814,4709,1,0,0,0,4814,4716,1,0,0,0,4814,4723,1,0,0,0,4814,4732,1,0,
		0,0,4814,4742,1,0,0,0,4814,4751,1,0,0,0,4814,4758,1,0,0,0,4814,4765,1,
		0,0,0,4814,4775,1,0,0,0,4814,4785,1,0,0,0,4814,4795,1,0,0,0,4814,4803,
		1,0,0,0,4815,535,1,0,0,0,4816,4819,3,1358,679,0,4817,4819,5,78,0,0,4818,
		4816,1,0,0,0,4818,4817,1,0,0,0,4819,537,1,0,0,0,4820,4821,5,321,0,0,4821,
		4822,5,238,0,0,4822,4823,3,540,270,0,4823,4824,5,80,0,0,4824,4825,3,514,
		257,0,4825,4826,3,524,262,0,4826,4827,5,116,0,0,4827,4828,3,542,271,0,
		4828,4912,1,0,0,0,4829,4830,5,321,0,0,4830,4831,5,238,0,0,4831,4832,3,
		540,270,0,4832,4833,5,80,0,0,4833,4834,5,44,0,0,4834,4835,3,524,262,0,
		4835,4836,5,116,0,0,4836,4837,3,542,271,0,4837,4912,1,0,0,0,4838,4839,
		5,321,0,0,4839,4840,5,238,0,0,4840,4841,3,540,270,0,4841,4842,5,80,0,0,
		4842,4843,3,516,258,0,4843,4844,3,1340,670,0,4844,4845,5,116,0,0,4845,
		4846,3,542,271,0,4846,4912,1,0,0,0,4847,4848,5,321,0,0,4848,4849,5,238,
		0,0,4849,4850,3,540,270,0,4850,4851,5,80,0,0,4851,4852,5,354,0,0,4852,
		4853,3,1118,559,0,4853,4854,5,116,0,0,4854,4855,3,542,271,0,4855,4912,
		1,0,0,0,4856,4857,5,321,0,0,4857,4858,5,238,0,0,4858,4859,3,540,270,0,
		4859,4860,5,80,0,0,4860,4861,5,190,0,0,4861,4862,3,1118,559,0,4862,4863,
		5,116,0,0,4863,4864,3,542,271,0,4864,4912,1,0,0,0,4865,4866,5,321,0,0,
		4866,4867,5,238,0,0,4867,4868,3,540,270,0,4868,4869,5,80,0,0,4869,4870,
		5,136,0,0,4870,4871,3,650,325,0,4871,4872,5,116,0,0,4872,4873,3,542,271,
		0,4873,4912,1,0,0,0,4874,4875,5,321,0,0,4875,4876,5,238,0,0,4876,4877,
		3,540,270,0,4877,4878,5,80,0,0,4878,4879,5,212,0,0,4879,4880,3,626,313,
		0,4880,4881,5,116,0,0,4881,4882,3,542,271,0,4882,4912,1,0,0,0,4883,4884,
		5,321,0,0,4884,4885,5,238,0,0,4885,4886,3,540,270,0,4886,4887,5,80,0,0,
		4887,4888,5,240,0,0,4888,4889,5,268,0,0,4889,4890,3,292,146,0,4890,4891,
		5,116,0,0,4891,4892,3,542,271,0,4892,4912,1,0,0,0,4893,4894,5,321,0,0,
		4894,4895,5,238,0,0,4895,4896,3,540,270,0,4896,4897,5,80,0,0,4897,4898,
		5,290,0,0,4898,4899,3,626,313,0,4899,4900,5,116,0,0,4900,4901,3,542,271,
		0,4901,4912,1,0,0,0,4902,4903,5,321,0,0,4903,4904,5,238,0,0,4904,4905,
		3,540,270,0,4905,4906,5,80,0,0,4906,4907,5,443,0,0,4907,4908,3,626,313,
		0,4908,4909,5,116,0,0,4909,4910,3,542,271,0,4910,4912,1,0,0,0,4911,4820,
		1,0,0,0,4911,4829,1,0,0,0,4911,4838,1,0,0,0,4911,4847,1,0,0,0,4911,4856,
		1,0,0,0,4911,4865,1,0,0,0,4911,4874,1,0,0,0,4911,4883,1,0,0,0,4911,4893,
		1,0,0,0,4911,4902,1,0,0,0,4912,539,1,0,0,0,4913,4914,5,62,0,0,4914,4917,
		3,72,36,0,4915,4917,1,0,0,0,4916,4913,1,0,0,0,4916,4915,1,0,0,0,4917,541,
		1,0,0,0,4918,4921,3,1358,679,0,4919,4921,5,78,0,0,4920,4918,1,0,0,0,4920,
		4919,1,0,0,0,4921,543,1,0,0,0,4922,4923,5,61,0,0,4923,4927,3,546,273,0,
		4924,4925,5,259,0,0,4925,4927,3,546,273,0,4926,4922,1,0,0,0,4926,4924,
		1,0,0,0,4927,545,1,0,0,0,4928,4995,3,954,477,0,4929,4930,3,548,274,0,4930,
		4931,3,954,477,0,4931,4995,1,0,0,0,4932,4933,5,262,0,0,4933,4934,3,550,
		275,0,4934,4935,3,954,477,0,4935,4995,1,0,0,0,4936,4937,5,287,0,0,4937,
		4938,3,550,275,0,4938,4939,3,954,477,0,4939,4995,1,0,0,0,4940,4941,5,208,
		0,0,4941,4942,3,550,275,0,4942,4943,3,954,477,0,4943,4995,1,0,0,0,4944,
		4945,5,241,0,0,4945,4946,3,550,275,0,4946,4947,3,954,477,0,4947,4995,1,
		0,0,0,4948,4949,5,130,0,0,4949,4950,3,1364,682,0,4950,4951,3,550,275,0,
		4951,4952,3,954,477,0,4952,4995,1,0,0,0,4953,4954,5,301,0,0,4954,4955,
		3,1364,682,0,4955,4956,3,550,275,0,4956,4957,3,954,477,0,4957,4995,1,0,
		0,0,4958,4959,3,1364,682,0,4959,4960,3,550,275,0,4960,4961,3,954,477,0,
		4961,4995,1,0,0,0,4962,4963,5,30,0,0,4963,4964,3,550,275,0,4964,4965,3,
		954,477,0,4965,4995,1,0,0,0,4966,4967,5,211,0,0,4967,4968,3,550,275,0,
		4968,4969,3,954,477,0,4969,4995,1,0,0,0,4970,4971,5,211,0,0,4971,4972,
		3,1364,682,0,4972,4973,3,550,275,0,4973,4974,3,954,477,0,4974,4995,1,0,
		0,0,4975,4976,5,211,0,0,4976,4977,5,30,0,0,4977,4978,3,550,275,0,4978,
		4979,3,954,477,0,4979,4995,1,0,0,0,4980,4981,5,145,0,0,4981,4982,3,550,
		275,0,4982,4983,3,954,477,0,4983,4995,1,0,0,0,4984,4985,5,145,0,0,4985,
		4986,3,1364,682,0,4986,4987,3,550,275,0,4987,4988,3,954,477,0,4988,4995,
		1,0,0,0,4989,4990,5,145,0,0,4990,4991,5,30,0,0,4991,4992,3,550,275,0,4992,
		4993,3,954,477,0,4993,4995,1,0,0,0,4994,4928,1,0,0,0,4994,4929,1,0,0,0,
		4994,4932,1,0,0,0,4994,4936,1,0,0,0,4994,4940,1,0,0,0,4994,4944,1,0,0,
		0,4994,4948,1,0,0,0,4994,4953,1,0,0,0,4994,4958,1,0,0,0,4994,4962,1,0,
		0,0,4994,4966,1,0,0,0,4994,4970,1,0,0,0,4994,4975,1,0,0,0,4994,4980,1,
		0,0,0,4994,4984,1,0,0,0,4994,4989,1,0,0,0,4995,547,1,0,0,0,4996,4997,7,
		24,0,0,4997,549,1,0,0,0,4998,5001,3,548,274,0,4999,5001,1,0,0,0,5000,4998,
		1,0,0,0,5000,4999,1,0,0,0,5001,551,1,0,0,0,5002,5003,5,65,0,0,5003,5004,
		3,556,278,0,5004,5005,5,80,0,0,5005,5006,3,562,281,0,5006,5007,5,94,0,
		0,5007,5008,3,564,282,0,5008,5009,3,568,284,0,5009,553,1,0,0,0,5010,5011,
		5,311,0,0,5011,5012,3,556,278,0,5012,5013,5,80,0,0,5013,5014,3,562,281,
		0,5014,5015,5,64,0,0,5015,5016,3,564,282,0,5016,5017,3,108,54,0,5017,5030,
		1,0,0,0,5018,5019,5,311,0,0,5019,5020,5,65,0,0,5020,5021,5,273,0,0,5021,
		5022,5,62,0,0,5022,5023,3,556,278,0,5023,5024,5,80,0,0,5024,5025,3,562,
		281,0,5025,5026,5,64,0,0,5026,5027,3,564,282,0,5027,5028,3,108,54,0,5028,
		5030,1,0,0,0,5029,5010,1,0,0,0,5029,5018,1,0,0,0,5030,555,1,0,0,0,5031,
		5047,3,558,279,0,5032,5047,5,30,0,0,5033,5034,5,30,0,0,5034,5047,5,288,
		0,0,5035,5036,5,30,0,0,5036,5037,5,2,0,0,5037,5038,3,216,108,0,5038,5039,
		5,3,0,0,5039,5047,1,0,0,0,5040,5041,5,30,0,0,5041,5042,5,288,0,0,5042,
		5043,5,2,0,0,5043,5044,3,216,108,0,5044,5045,5,3,0,0,5045,5047,1,0,0,0,
		5046,5031,1,0,0,0,5046,5032,1,0,0,0,5046,5033,1,0,0,0,5046,5035,1,0,0,
		0,5046,5040,1,0,0,0,5047,557,1,0,0,0,5048,5053,3,560,280,0,5049,5050,5,
		6,0,0,5050,5052,3,560,280,0,5051,5049,1,0,0,0,5052,5055,1,0,0,0,5053,5051,
		1,0,0,0,5053,5054,1,0,0,0,5054,559,1,0,0,0,5055,5053,1,0,0,0,5056,5057,
		5,88,0,0,5057,5066,3,214,107,0,5058,5059,5,86,0,0,5059,5066,3,214,107,
		0,5060,5061,5,46,0,0,5061,5066,3,214,107,0,5062,5063,3,1372,686,0,5063,
		5064,3,214,107,0,5064,5066,1,0,0,0,5065,5056,1,0,0,0,5065,5058,1,0,0,0,
		5065,5060,1,0,0,0,5065,5062,1,0,0,0,5066,561,1,0,0,0,5067,5126,3,1334,
		667,0,5068,5069,5,92,0,0,5069,5126,3,1334,667,0,5070,5071,5,322,0,0,5071,
		5126,3,1334,667,0,5072,5073,5,63,0,0,5073,5074,5,175,0,0,5074,5075,5,375,
		0,0,5075,5126,3,1338,669,0,5076,5077,5,63,0,0,5077,5078,5,325,0,0,5078,
		5126,3,1338,669,0,5079,5080,5,212,0,0,5080,5126,3,624,312,0,5081,5082,
		5,290,0,0,5082,5126,3,624,312,0,5083,5084,5,443,0,0,5084,5126,3,624,312,
		0,5085,5086,5,176,0,0,5086,5126,3,1338,669,0,5087,5088,5,190,0,0,5088,
		5126,3,522,261,0,5089,5090,5,239,0,0,5090,5126,3,1338,669,0,5091,5092,
		5,240,0,0,5092,5093,5,268,0,0,5093,5126,3,294,147,0,5094,5095,5,317,0,
		0,5095,5126,3,1338,669,0,5096,5097,5,345,0,0,5097,5126,3,1338,669,0,5098,
		5099,5,354,0,0,5099,5126,3,522,261,0,5100,5101,5,30,0,0,5101,5102,5,344,
		0,0,5102,5103,5,68,0,0,5103,5104,5,317,0,0,5104,5126,3,1338,669,0,5105,
		5106,5,30,0,0,5106,5107,5,323,0,0,5107,5108,5,68,0,0,5108,5109,5,317,0,
		0,5109,5126,3,1338,669,0,5110,5111,5,30,0,0,5111,5112,5,213,0,0,5112,5113,
		5,68,0,0,5113,5114,5,317,0,0,5114,5126,3,1338,669,0,5115,5116,5,30,0,0,
		5116,5117,5,458,0,0,5117,5118,5,68,0,0,5118,5119,5,317,0,0,5119,5126,3,
		1338,669,0,5120,5121,5,30,0,0,5121,5122,5,456,0,0,5122,5123,5,68,0,0,5123,
		5124,5,317,0,0,5124,5126,3,1338,669,0,5125,5067,1,0,0,0,5125,5068,1,0,
		0,0,5125,5070,1,0,0,0,5125,5072,1,0,0,0,5125,5076,1,0,0,0,5125,5079,1,
		0,0,0,5125,5081,1,0,0,0,5125,5083,1,0,0,0,5125,5085,1,0,0,0,5125,5087,
		1,0,0,0,5125,5089,1,0,0,0,5125,5091,1,0,0,0,5125,5094,1,0,0,0,5125,5096,
		1,0,0,0,5125,5098,1,0,0,0,5125,5100,1,0,0,0,5125,5105,1,0,0,0,5125,5110,
		1,0,0,0,5125,5115,1,0,0,0,5125,5120,1,0,0,0,5126,563,1,0,0,0,5127,5132,
		3,566,283,0,5128,5129,5,6,0,0,5129,5131,3,566,283,0,5130,5128,1,0,0,0,
		5131,5134,1,0,0,0,5132,5130,1,0,0,0,5132,5133,1,0,0,0,5133,565,1,0,0,0,
		5134,5132,1,0,0,0,5135,5139,3,1368,684,0,5136,5137,5,66,0,0,5137,5139,
		3,1368,684,0,5138,5135,1,0,0,0,5138,5136,1,0,0,0,5139,567,1,0,0,0,5140,
		5141,5,105,0,0,5141,5142,5,65,0,0,5142,5145,5,273,0,0,5143,5145,1,0,0,
		0,5144,5140,1,0,0,0,5144,5143,1,0,0,0,5145,569,1,0,0,0,5146,5147,5,65,
		0,0,5147,5148,3,558,279,0,5148,5149,5,94,0,0,5149,5150,3,1370,685,0,5150,
		5151,3,574,287,0,5151,5152,3,576,288,0,5152,571,1,0,0,0,5153,5154,5,311,
		0,0,5154,5155,3,558,279,0,5155,5156,5,64,0,0,5156,5157,3,1370,685,0,5157,
		5158,3,576,288,0,5158,5159,3,108,54,0,5159,5171,1,0,0,0,5160,5161,5,311,
		0,0,5161,5162,5,134,0,0,5162,5163,5,273,0,0,5163,5164,5,62,0,0,5164,5165,
		3,558,279,0,5165,5166,5,64,0,0,5166,5167,3,1370,685,0,5167,5168,3,576,
		288,0,5168,5169,3,108,54,0,5169,5171,1,0,0,0,5170,5153,1,0,0,0,5170,5160,
		1,0,0,0,5171,573,1,0,0,0,5172,5173,5,105,0,0,5173,5174,5,134,0,0,5174,
		5177,5,273,0,0,5175,5177,1,0,0,0,5176,5172,1,0,0,0,5176,5175,1,0,0,0,5177,
		575,1,0,0,0,5178,5179,5,215,0,0,5179,5180,5,148,0,0,5180,5183,3,1368,684,
		0,5181,5183,1,0,0,0,5182,5178,1,0,0,0,5182,5181,1,0,0,0,5183,577,1,0,0,
		0,5184,5185,5,138,0,0,5185,5186,5,53,0,0,5186,5187,5,288,0,0,5187,5188,
		3,580,290,0,5188,5189,3,584,292,0,5189,579,1,0,0,0,5190,5192,3,582,291,
		0,5191,5190,1,0,0,0,5192,5195,1,0,0,0,5193,5191,1,0,0,0,5193,5194,1,0,
		0,0,5194,581,1,0,0,0,5195,5193,1,0,0,0,5196,5197,5,68,0,0,5197,5198,5,
		317,0,0,5198,5206,3,1338,669,0,5199,5200,5,62,0,0,5200,5201,5,312,0,0,
		5201,5206,3,1370,685,0,5202,5203,5,62,0,0,5203,5204,5,99,0,0,5204,5206,
		3,1370,685,0,5205,5196,1,0,0,0,5205,5199,1,0,0,0,5205,5202,1,0,0,0,5206,
		583,1,0,0,0,5207,5208,5,65,0,0,5208,5209,3,556,278,0,5209,5210,5,80,0,
		0,5210,5211,3,586,293,0,5211,5212,5,94,0,0,5212,5213,3,564,282,0,5213,
		5214,3,568,284,0,5214,5235,1,0,0,0,5215,5216,5,311,0,0,5216,5217,3,556,
		278,0,5217,5218,5,80,0,0,5218,5219,3,586,293,0,5219,5220,5,64,0,0,5220,
		5221,3,564,282,0,5221,5222,3,108,54,0,5222,5235,1,0,0,0,5223,5224,5,311,
		0,0,5224,5225,5,65,0,0,5225,5226,5,273,0,0,5226,5227,5,62,0,0,5227,5228,
		3,556,278,0,5228,5229,5,80,0,0,5229,5230,3,586,293,0,5230,5231,5,64,0,
		0,5231,5232,3,564,282,0,5232,5233,3,108,54,0,5233,5235,1,0,0,0,5234,5207,
		1,0,0,0,5234,5215,1,0,0,0,5234,5223,1,0,0,0,5235,585,1,0,0,0,5236,5237,
		7,25,0,0,5237,587,1,0,0,0,5238,5239,5,46,0,0,5239,5240,3,590,295,0,5240,
		5241,5,227,0,0,5241,5242,3,592,296,0,5242,5243,3,594,297,0,5243,5244,5,
		80,0,0,5244,5245,3,1074,537,0,5245,5246,3,596,298,0,5246,5247,5,2,0,0,
		5247,5248,3,598,299,0,5248,5249,5,3,0,0,5249,5250,3,604,302,0,5250,5251,
		3,118,59,0,5251,5252,3,254,127,0,5252,5253,3,1094,547,0,5253,5274,1,0,
		0,0,5254,5255,5,46,0,0,5255,5256,3,590,295,0,5256,5257,5,227,0,0,5257,
		5258,3,592,296,0,5258,5259,5,221,0,0,5259,5260,5,77,0,0,5260,5261,5,390,
		0,0,5261,5262,3,1340,670,0,5262,5263,5,80,0,0,5263,5264,3,1074,537,0,5264,
		5265,3,596,298,0,5265,5266,5,2,0,0,5266,5267,3,598,299,0,5267,5268,5,3,
		0,0,5268,5269,3,604,302,0,5269,5270,3,118,59,0,5270,5271,3,254,127,0,5271,
		5272,3,1094,547,0,5272,5274,1,0,0,0,5273,5238,1,0,0,0,5273,5254,1,0,0,
		0,5274,589,1,0,0,0,5275,5278,5,98,0,0,5276,5278,1,0,0,0,5277,5275,1,0,
		0,0,5277,5276,1,0,0,0,5278,591,1,0,0,0,5279,5282,5,109,0,0,5280,5282,1,
		0,0,0,5281,5279,1,0,0,0,5281,5280,1,0,0,0,5282,593,1,0,0,0,5283,5286,3,
		1340,670,0,5284,5286,1,0,0,0,5285,5283,1,0,0,0,5285,5284,1,0,0,0,5286,
		595,1,0,0,0,5287,5288,5,100,0,0,5288,5291,3,1340,670,0,5289,5291,1,0,0,
		0,5290,5287,1,0,0,0,5290,5289,1,0,0,0,5291,597,1,0,0,0,5292,5297,3,602,
		301,0,5293,5294,5,6,0,0,5294,5296,3,602,301,0,5295,5293,1,0,0,0,5296,5299,
		1,0,0,0,5297,5295,1,0,0,0,5297,5298,1,0,0,0,5298,599,1,0,0,0,5299,5297,
		1,0,0,0,5300,5301,3,608,304,0,5301,5302,3,610,305,0,5302,5303,3,612,306,
		0,5303,5304,3,614,307,0,5304,5312,1,0,0,0,5305,5306,3,608,304,0,5306,5307,
		3,524,262,0,5307,5308,3,116,58,0,5308,5309,3,612,306,0,5309,5310,3,614,
		307,0,5310,5312,1,0,0,0,5311,5300,1,0,0,0,5311,5305,1,0,0,0,5312,601,1,
		0,0,0,5313,5314,3,1372,686,0,5314,5315,3,600,300,0,5315,5325,1,0,0,0,5316,
		5317,3,1214,607,0,5317,5318,3,600,300,0,5318,5325,1,0,0,0,5319,5320,5,
		2,0,0,5320,5321,3,1162,581,0,5321,5322,5,3,0,0,5322,5323,3,600,300,0,5323,
		5325,1,0,0,0,5324,5313,1,0,0,0,5324,5316,1,0,0,0,5324,5319,1,0,0,0,5325,
		603,1,0,0,0,5326,5327,5,442,0,0,5327,5328,5,2,0,0,5328,5329,3,606,303,
		0,5329,5330,5,3,0,0,5330,5333,1,0,0,0,5331,5333,1,0,0,0,5332,5326,1,0,
		0,0,5332,5331,1,0,0,0,5333,605,1,0,0,0,5334,5339,3,602,301,0,5335,5336,
		5,6,0,0,5336,5338,3,602,301,0,5337,5335,1,0,0,0,5338,5341,1,0,0,0,5339,
		5337,1,0,0,0,5339,5340,1,0,0,0,5340,607,1,0,0,0,5341,5339,1,0,0,0,5342,
		5343,5,43,0,0,5343,5346,3,524,262,0,5344,5346,1,0,0,0,5345,5342,1,0,0,
		0,5345,5344,1,0,0,0,5346,609,1,0,0,0,5347,5350,3,524,262,0,5348,5350,1,
		0,0,0,5349,5347,1,0,0,0,5349,5348,1,0,0,0,5350,611,1,0,0,0,5351,5355,5,
		37,0,0,5352,5355,5,55,0,0,5353,5355,1,0,0,0,5354,5351,1,0,0,0,5354,5352,
		1,0,0,0,5354,5353,1,0,0,0,5355,613,1,0,0,0,5356,5357,5,267,0,0,5357,5362,
		5,208,0,0,5358,5359,5,267,0,0,5359,5362,5,241,0,0,5360,5362,1,0,0,0,5361,
		5356,1,0,0,0,5361,5358,1,0,0,0,5361,5360,1,0,0,0,5362,615,1,0,0,0,5363,
		5364,5,46,0,0,5364,5365,3,618,309,0,5365,5366,7,22,0,0,5366,5367,3,1346,
		673,0,5367,5377,3,628,314,0,5368,5375,5,310,0,0,5369,5376,3,638,319,0,
		5370,5371,5,92,0,0,5371,5372,5,2,0,0,5372,5373,3,668,334,0,5373,5374,5,
		3,0,0,5374,5376,1,0,0,0,5375,5369,1,0,0,0,5375,5370,1,0,0,0,5376,5378,
		1,0,0,0,5377,5368,1,0,0,0,5377,5378,1,0,0,0,5378,5379,1,0,0,0,5379,5380,
		3,654,327,0,5380,617,1,0,0,0,5381,5382,5,82,0,0,5382,5385,5,305,0,0,5383,
		5385,1,0,0,0,5384,5381,1,0,0,0,5384,5383,1,0,0,0,5385,619,1,0,0,0,5386,
		5388,5,2,0,0,5387,5389,3,622,311,0,5388,5387,1,0,0,0,5388,5389,1,0,0,0,
		5389,5390,1,0,0,0,5390,5391,5,3,0,0,5391,621,1,0,0,0,5392,5397,3,632,316,
		0,5393,5394,5,6,0,0,5394,5396,3,632,316,0,5395,5393,1,0,0,0,5396,5399,
		1,0,0,0,5397,5395,1,0,0,0,5397,5398,1,0,0,0,5398,623,1,0,0,0,5399,5397,
		1,0,0,0,5400,5405,3,626,313,0,5401,5402,5,6,0,0,5402,5404,3,626,313,0,
		5403,5401,1,0,0,0,5404,5407,1,0,0,0,5405,5403,1,0,0,0,5405,5406,1,0,0,
		0,5406,625,1,0,0,0,5407,5405,1,0,0,0,5408,5409,3,1346,673,0,5409,5410,
		3,620,310,0,5410,5417,1,0,0,0,5411,5417,3,1390,695,0,5412,5414,3,1372,
		686,0,5413,5415,3,1324,662,0,5414,5413,1,0,0,0,5414,5415,1,0,0,0,5415,
		5417,1,0,0,0,5416,5408,1,0,0,0,5416,5411,1,0,0,0,5416,5412,1,0,0,0,5417,
		627,1,0,0,0,5418,5420,5,2,0,0,5419,5421,3,630,315,0,5420,5419,1,0,0,0,
		5420,5421,1,0,0,0,5421,5422,1,0,0,0,5422,5423,5,3,0,0,5423,629,1,0,0,0,
		5424,5429,3,642,321,0,5425,5426,5,6,0,0,5426,5428,3,642,321,0,5427,5425,
		1,0,0,0,5428,5431,1,0,0,0,5429,5427,1,0,0,0,5429,5430,1,0,0,0,5430,631,
		1,0,0,0,5431,5429,1,0,0,0,5432,5434,3,634,317,0,5433,5435,3,636,318,0,
		5434,5433,1,0,0,0,5434,5435,1,0,0,0,5435,5436,1,0,0,0,5436,5437,3,640,
		320,0,5437,5446,1,0,0,0,5438,5440,3,636,318,0,5439,5441,3,634,317,0,5440,
		5439,1,0,0,0,5440,5441,1,0,0,0,5441,5442,1,0,0,0,5442,5443,3,640,320,0,
		5443,5446,1,0,0,0,5444,5446,3,640,320,0,5445,5432,1,0,0,0,5445,5438,1,
		0,0,0,5445,5444,1,0,0,0,5446,633,1,0,0,0,5447,5449,5,68,0,0,5448,5450,
		5,454,0,0,5449,5448,1,0,0,0,5449,5450,1,0,0,0,5450,5455,1,0,0,0,5451,5455,
		5,454,0,0,5452,5455,5,394,0,0,5453,5455,5,101,0,0,5454,5447,1,0,0,0,5454,
		5451,1,0,0,0,5454,5452,1,0,0,0,5454,5453,1,0,0,0,5455,635,1,0,0,0,5456,
		5461,3,1376,688,0,5457,5461,3,1394,697,0,5458,5461,5,119,0,0,5459,5461,
		5,126,0,0,5460,5456,1,0,0,0,5460,5457,1,0,0,0,5460,5458,1,0,0,0,5460,5459,
		1,0,0,0,5461,637,1,0,0,0,5462,5463,3,640,320,0,5463,639,1,0,0,0,5464,5479,
		3,1118,559,0,5465,5467,5,409,0,0,5466,5465,1,0,0,0,5466,5467,1,0,0,0,5467,
		5472,1,0,0,0,5468,5473,3,1394,697,0,5469,5473,3,1376,688,0,5470,5473,5,
		119,0,0,5471,5473,5,126,0,0,5472,5468,1,0,0,0,5472,5469,1,0,0,0,5472,5470,
		1,0,0,0,5472,5471,1,0,0,0,5473,5474,1,0,0,0,5474,5475,3,526,263,0,5475,
		5476,5,27,0,0,5476,5477,5,354,0,0,5477,5479,1,0,0,0,5478,5464,1,0,0,0,
		5478,5466,1,0,0,0,5479,641,1,0,0,0,5480,5483,3,632,316,0,5481,5482,7,26,
		0,0,5482,5484,3,1162,581,0,5483,5481,1,0,0,0,5483,5484,1,0,0,0,5484,643,
		1,0,0,0,5485,5486,3,632,316,0,5486,645,1,0,0,0,5487,5498,5,2,0,0,5488,
		5499,5,9,0,0,5489,5499,3,648,324,0,5490,5491,5,83,0,0,5491,5492,5,148,
		0,0,5492,5499,3,648,324,0,5493,5494,3,648,324,0,5494,5495,5,83,0,0,5495,
		5496,5,148,0,0,5496,5497,3,648,324,0,5497,5499,1,0,0,0,5498,5488,1,0,0,
		0,5498,5489,1,0,0,0,5498,5490,1,0,0,0,5498,5493,1,0,0,0,5499,5500,1,0,
		0,0,5500,5501,5,3,0,0,5501,647,1,0,0,0,5502,5507,3,644,322,0,5503,5504,
		5,6,0,0,5504,5506,3,644,322,0,5505,5503,1,0,0,0,5506,5509,1,0,0,0,5507,
		5505,1,0,0,0,5507,5508,1,0,0,0,5508,649,1,0,0,0,5509,5507,1,0,0,0,5510,
		5511,3,1346,673,0,5511,5512,3,646,323,0,5512,651,1,0,0,0,5513,5518,3,650,
		325,0,5514,5515,5,6,0,0,5515,5517,3,650,325,0,5516,5514,1,0,0,0,5517,5520,
		1,0,0,0,5518,5516,1,0,0,0,5518,5519,1,0,0,0,5519,653,1,0,0,0,5520,5518,
		1,0,0,0,5521,5523,3,658,329,0,5522,5521,1,0,0,0,5523,5524,1,0,0,0,5524,
		5522,1,0,0,0,5524,5525,1,0,0,0,5525,5526,1,0,0,0,5526,5527,6,327,-1,0,
		5527,655,1,0,0,0,5528,5529,5,150,0,0,5529,5530,5,80,0,0,5530,5531,5,78,
		0,0,5531,5564,5,459,0,0,5532,5533,5,310,0,0,5533,5534,5,78,0,0,5534,5535,
		5,80,0,0,5535,5536,5,78,0,0,5536,5564,5,459,0,0,5537,5564,5,340,0,0,5538,
		5564,5,223,0,0,5539,5564,5,332,0,0,5540,5564,5,371,0,0,5541,5542,5,206,
		0,0,5542,5543,5,321,0,0,5543,5564,5,182,0,0,5544,5545,5,206,0,0,5545,5546,
		5,321,0,0,5546,5564,5,235,0,0,5547,5548,5,321,0,0,5548,5564,5,182,0,0,
		5549,5550,5,321,0,0,5550,5564,5,235,0,0,5551,5564,5,242,0,0,5552,5553,
		5,77,0,0,5553,5564,5,242,0,0,5554,5555,5,171,0,0,5555,5564,3,292,146,0,
		5556,5557,5,314,0,0,5557,5564,3,292,146,0,5558,5559,5,460,0,0,5559,5564,
		3,524,262,0,5560,5564,3,82,41,0,5561,5562,5,461,0,0,5562,5564,3,1372,686,
		0,5563,5528,1,0,0,0,5563,5532,1,0,0,0,5563,5537,1,0,0,0,5563,5538,1,0,
		0,0,5563,5539,1,0,0,0,5563,5540,1,0,0,0,5563,5541,1,0,0,0,5563,5544,1,
		0,0,0,5563,5547,1,0,0,0,5563,5549,1,0,0,0,5563,5551,1,0,0,0,5563,5552,
		1,0,0,0,5563,5554,1,0,0,0,5563,5556,1,0,0,0,5563,5558,1,0,0,0,5563,5560,
		1,0,0,0,5563,5561,1,0,0,0,5564,657,1,0,0,0,5565,5566,5,36,0,0,5566,5574,
		3,660,330,0,5567,5568,5,239,0,0,5568,5574,3,72,36,0,5569,5570,5,444,0,
		0,5570,5574,3,662,331,0,5571,5574,5,104,0,0,5572,5574,3,656,328,0,5573,
		5565,1,0,0,0,5573,5567,1,0,0,0,5573,5569,1,0,0,0,5573,5571,1,0,0,0,5573,
		5572,1,0,0,0,5574,659,1,0,0,0,5575,5581,3,1358,679,0,5576,5577,3,1358,
		679,0,5577,5578,5,6,0,0,5578,5579,3,1358,679,0,5579,5581,1,0,0,0,5580,
		5575,1,0,0,0,5580,5576,1,0,0,0,5581,661,1,0,0,0,5582,5583,5,62,0,0,5583,
		5584,5,354,0,0,5584,5591,3,1118,559,0,5585,5586,5,6,0,0,5586,5587,5,62,
		0,0,5587,5588,5,354,0,0,5588,5590,3,1118,559,0,5589,5585,1,0,0,0,5590,
		5593,1,0,0,0,5591,5589,1,0,0,0,5591,5592,1,0,0,0,5592,663,1,0,0,0,5593,
		5591,1,0,0,0,5594,5595,5,105,0,0,5595,5598,3,460,230,0,5596,5598,1,0,0,
		0,5597,5594,1,0,0,0,5597,5596,1,0,0,0,5598,665,1,0,0,0,5599,5600,3,636,
		318,0,5600,5601,3,640,320,0,5601,667,1,0,0,0,5602,5607,3,666,333,0,5603,
		5604,5,6,0,0,5604,5606,3,666,333,0,5605,5603,1,0,0,0,5606,5609,1,0,0,0,
		5607,5605,1,0,0,0,5607,5608,1,0,0,0,5608,669,1,0,0,0,5609,5607,1,0,0,0,
		5610,5611,5,138,0,0,5611,5612,7,27,0,0,5612,5613,3,626,313,0,5613,5614,
		3,672,336,0,5614,5615,3,674,337,0,5615,671,1,0,0,0,5616,5618,3,656,328,
		0,5617,5616,1,0,0,0,5618,5619,1,0,0,0,5619,5617,1,0,0,0,5619,5620,1,0,
		0,0,5620,673,1,0,0,0,5621,5624,5,309,0,0,5622,5624,1,0,0,0,5623,5621,1,
		0,0,0,5623,5622,1,0,0,0,5624,675,1,0,0,0,5625,5626,5,192,0,0,5626,5627,
		5,212,0,0,5627,5628,3,624,312,0,5628,5629,3,108,54,0,5629,5662,1,0,0,0,
		5630,5631,5,192,0,0,5631,5632,5,212,0,0,5632,5633,5,221,0,0,5633,5634,
		5,390,0,0,5634,5635,3,624,312,0,5635,5636,3,108,54,0,5636,5662,1,0,0,0,
		5637,5638,5,192,0,0,5638,5639,5,290,0,0,5639,5640,3,624,312,0,5640,5641,
		3,108,54,0,5641,5662,1,0,0,0,5642,5643,5,192,0,0,5643,5644,5,290,0,0,5644,
		5645,5,221,0,0,5645,5646,5,390,0,0,5646,5647,3,624,312,0,5647,5648,3,108,
		54,0,5648,5662,1,0,0,0,5649,5650,5,192,0,0,5650,5651,5,443,0,0,5651,5652,
		3,624,312,0,5652,5653,3,108,54,0,5653,5662,1,0,0,0,5654,5655,5,192,0,0,
		5655,5656,5,443,0,0,5656,5657,5,221,0,0,5657,5658,5,390,0,0,5658,5659,
		3,624,312,0,5659,5660,3,108,54,0,5660,5662,1,0,0,0,5661,5625,1,0,0,0,5661,
		5630,1,0,0,0,5661,5637,1,0,0,0,5661,5642,1,0,0,0,5661,5649,1,0,0,0,5661,
		5654,1,0,0,0,5662,677,1,0,0,0,5663,5664,5,192,0,0,5664,5665,5,136,0,0,
		5665,5666,3,652,326,0,5666,5667,3,108,54,0,5667,5676,1,0,0,0,5668,5669,
		5,192,0,0,5669,5670,5,136,0,0,5670,5671,5,221,0,0,5671,5672,5,390,0,0,
		5672,5673,3,652,326,0,5673,5674,3,108,54,0,5674,5676,1,0,0,0,5675,5663,
		1,0,0,0,5675,5668,1,0,0,0,5676,679,1,0,0,0,5677,5678,5,192,0,0,5678,5679,
		5,272,0,0,5679,5680,3,686,343,0,5680,5681,3,108,54,0,5681,5690,1,0,0,0,
		5682,5683,5,192,0,0,5683,5684,5,272,0,0,5684,5685,5,221,0,0,5685,5686,
		5,390,0,0,5686,5687,3,686,343,0,5687,5688,3,108,54,0,5688,5690,1,0,0,0,
		5689,5677,1,0,0,0,5689,5682,1,0,0,0,5690,681,1,0,0,0,5691,5692,5,2,0,0,
		5692,5693,3,1118,559,0,5693,5694,5,3,0,0,5694,5714,1,0,0,0,5695,5696,5,
		2,0,0,5696,5697,3,1118,559,0,5697,5698,5,6,0,0,5698,5699,3,1118,559,0,
		5699,5700,5,3,0,0,5700,5714,1,0,0,0,5701,5702,5,2,0,0,5702,5703,5,401,
		0,0,5703,5704,5,6,0,0,5704,5705,3,1118,559,0,5705,5706,5,3,0,0,5706,5714,
		1,0,0,0,5707,5708,5,2,0,0,5708,5709,3,1118,559,0,5709,5710,5,6,0,0,5710,
		5711,5,401,0,0,5711,5712,5,3,0,0,5712,5714,1,0,0,0,5713,5691,1,0,0,0,5713,
		5695,1,0,0,0,5713,5701,1,0,0,0,5713,5707,1,0,0,0,5714,683,1,0,0,0,5715,
		5716,3,1372,686,0,5716,5717,5,11,0,0,5717,5719,1,0,0,0,5718,5715,1,0,0,
		0,5719,5722,1,0,0,0,5720,5718,1,0,0,0,5720,5721,1,0,0,0,5721,5723,1,0,
		0,0,5722,5720,1,0,0,0,5723,5724,3,1270,635,0,5724,685,1,0,0,0,5725,5730,
		3,688,344,0,5726,5727,5,6,0,0,5727,5729,3,688,344,0,5728,5726,1,0,0,0,
		5729,5732,1,0,0,0,5730,5728,1,0,0,0,5730,5731,1,0,0,0,5731,687,1,0,0,0,
		5732,5730,1,0,0,0,5733,5734,3,684,342,0,5734,5735,3,682,341,0,5735,689,
		1,0,0,0,5736,5737,5,57,0,0,5737,5738,3,692,346,0,5738,691,1,0,0,0,5739,
		5741,3,694,347,0,5740,5739,1,0,0,0,5741,5742,1,0,0,0,5742,5740,1,0,0,0,
		5742,5743,1,0,0,0,5743,693,1,0,0,0,5744,5748,3,1358,679,0,5745,5746,5,
		239,0,0,5746,5748,3,72,36,0,5747,5744,1,0,0,0,5747,5745,1,0,0,0,5748,695,
		1,0,0,0,5749,5750,5,46,0,0,5750,5751,5,41,0,0,5751,5752,5,2,0,0,5752,5753,
		3,1118,559,0,5753,5754,5,36,0,0,5754,5755,3,1118,559,0,5755,5756,5,3,0,
		0,5756,5757,5,105,0,0,5757,5758,5,212,0,0,5758,5759,3,626,313,0,5759,5760,
		3,698,349,0,5760,5784,1,0,0,0,5761,5762,5,46,0,0,5762,5763,5,41,0,0,5763,
		5764,5,2,0,0,5764,5765,3,1118,559,0,5765,5766,5,36,0,0,5766,5767,3,1118,
		559,0,5767,5768,5,3,0,0,5768,5769,5,373,0,0,5769,5770,5,212,0,0,5770,5771,
		3,698,349,0,5771,5784,1,0,0,0,5772,5773,5,46,0,0,5773,5774,5,41,0,0,5774,
		5775,5,2,0,0,5775,5776,3,1118,559,0,5776,5777,5,36,0,0,5777,5778,3,1118,
		559,0,5778,5779,5,3,0,0,5779,5780,5,105,0,0,5780,5781,5,394,0,0,5781,5782,
		3,698,349,0,5782,5784,1,0,0,0,5783,5749,1,0,0,0,5783,5761,1,0,0,0,5783,
		5772,1,0,0,0,5784,697,1,0,0,0,5785,5786,5,36,0,0,5786,5791,5,224,0,0,5787,
		5788,5,36,0,0,5788,5791,5,141,0,0,5789,5791,1,0,0,0,5790,5785,1,0,0,0,
		5790,5787,1,0,0,0,5790,5789,1,0,0,0,5791,699,1,0,0,0,5792,5793,5,192,0,
		0,5793,5794,5,41,0,0,5794,5795,3,702,351,0,5795,5796,5,2,0,0,5796,5797,
		3,1118,559,0,5797,5798,5,36,0,0,5798,5799,3,1118,559,0,5799,5800,5,3,0,
		0,5800,5801,3,108,54,0,5801,701,1,0,0,0,5802,5803,5,221,0,0,5803,5806,
		5,390,0,0,5804,5806,1,0,0,0,5805,5802,1,0,0,0,5805,5804,1,0,0,0,5806,703,
		1,0,0,0,5807,5808,5,46,0,0,5808,5809,3,618,309,0,5809,5810,5,444,0,0,5810,
		5811,5,62,0,0,5811,5812,3,1118,559,0,5812,5813,5,239,0,0,5813,5814,3,1340,
		670,0,5814,5815,5,2,0,0,5815,5816,3,706,353,0,5816,5817,5,3,0,0,5817,705,
		1,0,0,0,5818,5819,5,64,0,0,5819,5820,5,462,0,0,5820,5821,5,105,0,0,5821,
		5822,5,212,0,0,5822,5823,3,626,313,0,5823,5824,5,6,0,0,5824,5825,5,94,
		0,0,5825,5826,5,462,0,0,5826,5827,5,105,0,0,5827,5828,5,212,0,0,5828,5829,
		3,626,313,0,5829,5853,1,0,0,0,5830,5831,5,94,0,0,5831,5832,5,462,0,0,5832,
		5833,5,105,0,0,5833,5834,5,212,0,0,5834,5835,3,626,313,0,5835,5836,5,6,
		0,0,5836,5837,5,64,0,0,5837,5838,5,462,0,0,5838,5839,5,105,0,0,5839,5840,
		5,212,0,0,5840,5841,3,626,313,0,5841,5853,1,0,0,0,5842,5843,5,64,0,0,5843,
		5844,5,462,0,0,5844,5845,5,105,0,0,5845,5846,5,212,0,0,5846,5853,3,626,
		313,0,5847,5848,5,94,0,0,5848,5849,5,462,0,0,5849,5850,5,105,0,0,5850,
		5851,5,212,0,0,5851,5853,3,626,313,0,5852,5818,1,0,0,0,5852,5830,1,0,0,
		0,5852,5842,1,0,0,0,5852,5847,1,0,0,0,5853,707,1,0,0,0,5854,5855,5,192,
		0,0,5855,5856,5,444,0,0,5856,5857,3,702,351,0,5857,5858,5,62,0,0,5858,
		5859,3,1118,559,0,5859,5860,5,239,0,0,5860,5861,3,1340,670,0,5861,5862,
		3,108,54,0,5862,709,1,0,0,0,5863,5864,5,300,0,0,5864,5865,3,712,356,0,
		5865,5866,3,592,296,0,5866,5867,3,1336,668,0,5867,5890,1,0,0,0,5868,5869,
		5,300,0,0,5869,5870,3,714,357,0,5870,5871,3,592,296,0,5871,5872,3,1340,
		670,0,5872,5890,1,0,0,0,5873,5874,5,300,0,0,5874,5875,5,2,0,0,5875,5876,
		3,716,358,0,5876,5877,5,3,0,0,5877,5878,3,712,356,0,5878,5879,3,592,296,
		0,5879,5880,3,1336,668,0,5880,5890,1,0,0,0,5881,5882,5,300,0,0,5882,5883,
		5,2,0,0,5883,5884,3,716,358,0,5884,5885,5,3,0,0,5885,5886,3,714,357,0,
		5886,5887,3,592,296,0,5887,5888,3,1340,670,0,5888,5890,1,0,0,0,5889,5863,
		1,0,0,0,5889,5868,1,0,0,0,5889,5873,1,0,0,0,5889,5881,1,0,0,0,5890,711,
		1,0,0,0,5891,5892,7,28,0,0,5892,713,1,0,0,0,5893,5894,7,29,0,0,5894,715,
		1,0,0,0,5895,5900,3,718,359,0,5896,5897,5,6,0,0,5897,5899,3,718,359,0,
		5898,5896,1,0,0,0,5899,5902,1,0,0,0,5900,5898,1,0,0,0,5900,5901,1,0,0,
		0,5901,717,1,0,0,0,5902,5900,1,0,0,0,5903,5904,7,30,0,0,5904,719,1,0,0,
		0,5905,5906,5,138,0,0,5906,5907,5,345,0,0,5907,5908,3,1340,670,0,5908,
		5909,5,327,0,0,5909,5910,3,116,58,0,5910,5918,1,0,0,0,5911,5912,5,138,
		0,0,5912,5913,5,345,0,0,5913,5914,3,1340,670,0,5914,5915,5,307,0,0,5915,
		5916,3,116,58,0,5916,5918,1,0,0,0,5917,5905,1,0,0,0,5917,5911,1,0,0,0,
		5918,721,1,0,0,0,5919,5920,5,138,0,0,5920,5921,5,136,0,0,5921,5922,3,650,
		325,0,5922,5923,5,303,0,0,5923,5924,5,94,0,0,5924,5925,3,1340,670,0,5925,
		6388,1,0,0,0,5926,5927,5,138,0,0,5927,5928,5,108,0,0,5928,5929,3,524,262,
		0,5929,5930,5,303,0,0,5930,5931,5,94,0,0,5931,5932,3,1340,670,0,5932,6388,
		1,0,0,0,5933,5934,5,138,0,0,5934,5935,5,169,0,0,5935,5936,3,524,262,0,
		5936,5937,5,303,0,0,5937,5938,5,94,0,0,5938,5939,3,1340,670,0,5939,6388,
		1,0,0,0,5940,5941,5,138,0,0,5941,5942,5,176,0,0,5942,5943,3,1340,670,0,
		5943,5944,5,303,0,0,5944,5945,5,94,0,0,5945,5946,3,1340,670,0,5946,6388,
		1,0,0,0,5947,5948,5,138,0,0,5948,5949,5,190,0,0,5949,5950,3,524,262,0,
		5950,5951,5,303,0,0,5951,5952,5,94,0,0,5952,5953,3,1340,670,0,5953,6388,
		1,0,0,0,5954,5955,5,138,0,0,5955,5956,5,190,0,0,5956,5957,3,524,262,0,
		5957,5958,5,303,0,0,5958,5959,5,45,0,0,5959,5960,3,1340,670,0,5960,5961,
		5,94,0,0,5961,5962,3,1340,670,0,5962,6388,1,0,0,0,5963,5964,5,138,0,0,
		5964,5965,5,63,0,0,5965,5966,5,175,0,0,5966,5967,5,375,0,0,5967,5968,3,
		1340,670,0,5968,5969,5,303,0,0,5969,5970,5,94,0,0,5970,5971,3,1340,670,
		0,5971,6388,1,0,0,0,5972,5973,5,138,0,0,5973,5974,5,212,0,0,5974,5975,
		3,626,313,0,5975,5976,5,303,0,0,5976,5977,5,94,0,0,5977,5978,3,1340,670,
		0,5978,6388,1,0,0,0,5979,5980,5,138,0,0,5980,5981,5,66,0,0,5981,5982,3,
		1366,683,0,5982,5983,5,303,0,0,5983,5984,5,94,0,0,5984,5985,3,1366,683,
		0,5985,6388,1,0,0,0,5986,5987,5,138,0,0,5987,5988,3,308,154,0,5988,5989,
		5,239,0,0,5989,5990,3,1340,670,0,5990,5991,5,303,0,0,5991,5992,5,94,0,
		0,5992,5993,3,1340,670,0,5993,6388,1,0,0,0,5994,5995,5,138,0,0,5995,5996,
		5,272,0,0,5996,5997,5,157,0,0,5997,5998,3,524,262,0,5998,5999,5,100,0,
		0,5999,6000,3,1340,670,0,6000,6001,5,303,0,0,6001,6002,5,94,0,0,6002,6003,
		3,1340,670,0,6003,6388,1,0,0,0,6004,6005,5,138,0,0,6005,6006,5,272,0,0,
		6006,6007,5,207,0,0,6007,6008,3,524,262,0,6008,6009,5,100,0,0,6009,6010,
		3,1340,670,0,6010,6011,5,303,0,0,6011,6012,5,94,0,0,6012,6013,3,1340,670,
		0,6013,6388,1,0,0,0,6014,6015,5,138,0,0,6015,6016,5,446,0,0,6016,6017,
		3,1340,670,0,6017,6018,5,80,0,0,6018,6019,3,1336,668,0,6019,6020,5,303,
		0,0,6020,6021,5,94,0,0,6021,6022,3,1340,670,0,6022,6388,1,0,0,0,6023,6024,
		5,138,0,0,6024,6025,5,446,0,0,6025,6026,5,221,0,0,6026,6027,5,390,0,0,
		6027,6028,3,1340,670,0,6028,6029,5,80,0,0,6029,6030,3,1336,668,0,6030,
		6031,5,303,0,0,6031,6032,5,94,0,0,6032,6033,3,1340,670,0,6033,6388,1,0,
		0,0,6034,6035,5,138,0,0,6035,6036,5,290,0,0,6036,6037,3,626,313,0,6037,
		6038,5,303,0,0,6038,6039,5,94,0,0,6039,6040,3,1340,670,0,6040,6388,1,0,
		0,0,6041,6042,5,138,0,0,6042,6043,5,453,0,0,6043,6044,3,1340,670,0,6044,
		6045,5,303,0,0,6045,6046,5,94,0,0,6046,6047,3,1340,670,0,6047,6388,1,0,
		0,0,6048,6049,5,138,0,0,6049,6050,5,443,0,0,6050,6051,3,626,313,0,6051,
		6052,5,303,0,0,6052,6053,5,94,0,0,6053,6054,3,1340,670,0,6054,6388,1,0,
		0,0,6055,6056,5,138,0,0,6056,6057,5,317,0,0,6057,6058,3,1340,670,0,6058,
		6059,5,303,0,0,6059,6060,5,94,0,0,6060,6061,3,1340,670,0,6061,6388,1,0,
		0,0,6062,6063,5,138,0,0,6063,6064,5,325,0,0,6064,6065,3,1340,670,0,6065,
		6066,5,303,0,0,6066,6067,5,94,0,0,6067,6068,3,1340,670,0,6068,6388,1,0,
		0,0,6069,6070,5,138,0,0,6070,6071,5,452,0,0,6071,6072,3,1340,670,0,6072,
		6073,5,303,0,0,6073,6074,5,94,0,0,6074,6075,3,1340,670,0,6075,6388,1,0,
		0,0,6076,6077,5,138,0,0,6077,6078,5,92,0,0,6078,6079,3,1074,537,0,6079,
		6080,5,303,0,0,6080,6081,5,94,0,0,6081,6082,3,1340,670,0,6082,6388,1,0,
		0,0,6083,6084,5,138,0,0,6084,6085,5,92,0,0,6085,6086,5,221,0,0,6086,6087,
		5,390,0,0,6087,6088,3,1074,537,0,6088,6089,5,303,0,0,6089,6090,5,94,0,
		0,6090,6091,3,1340,670,0,6091,6388,1,0,0,0,6092,6093,5,138,0,0,6093,6094,
		5,322,0,0,6094,6095,3,1336,668,0,6095,6096,5,303,0,0,6096,6097,5,94,0,
		0,6097,6098,3,1340,670,0,6098,6388,1,0,0,0,6099,6100,5,138,0,0,6100,6101,
		5,322,0,0,6101,6102,5,221,0,0,6102,6103,5,390,0,0,6103,6104,3,1336,668,
		0,6104,6105,5,303,0,0,6105,6106,5,94,0,0,6106,6107,3,1340,670,0,6107,6388,
		1,0,0,0,6108,6109,5,138,0,0,6109,6110,5,370,0,0,6110,6111,3,1336,668,0,
		6111,6112,5,303,0,0,6112,6113,5,94,0,0,6113,6114,3,1340,670,0,6114,6388,
		1,0,0,0,6115,6116,5,138,0,0,6116,6117,5,370,0,0,6117,6118,5,221,0,0,6118,
		6119,5,390,0,0,6119,6120,3,1336,668,0,6120,6121,5,303,0,0,6121,6122,5,
		94,0,0,6122,6123,3,1340,670,0,6123,6388,1,0,0,0,6124,6125,5,138,0,0,6125,
		6126,5,252,0,0,6126,6127,5,370,0,0,6127,6128,3,1336,668,0,6128,6129,5,
		303,0,0,6129,6130,5,94,0,0,6130,6131,3,1340,670,0,6131,6388,1,0,0,0,6132,
		6133,5,138,0,0,6133,6134,5,252,0,0,6134,6135,5,370,0,0,6135,6136,5,221,
		0,0,6136,6137,5,390,0,0,6137,6138,3,1336,668,0,6138,6139,5,303,0,0,6139,
		6140,5,94,0,0,6140,6141,3,1340,670,0,6141,6388,1,0,0,0,6142,6143,5,138,
		0,0,6143,6144,5,227,0,0,6144,6145,3,1336,668,0,6145,6146,5,303,0,0,6146,
		6147,5,94,0,0,6147,6148,3,1340,670,0,6148,6388,1,0,0,0,6149,6150,5,138,
		0,0,6150,6151,5,227,0,0,6151,6152,5,221,0,0,6152,6153,5,390,0,0,6153,6154,
		3,1336,668,0,6154,6155,5,303,0,0,6155,6156,5,94,0,0,6156,6157,3,1340,670,
		0,6157,6388,1,0,0,0,6158,6159,5,138,0,0,6159,6160,5,63,0,0,6160,6161,5,
		92,0,0,6161,6162,3,1074,537,0,6162,6163,5,303,0,0,6163,6164,5,94,0,0,6164,
		6165,3,1340,670,0,6165,6388,1,0,0,0,6166,6167,5,138,0,0,6167,6168,5,63,
		0,0,6168,6169,5,92,0,0,6169,6170,5,221,0,0,6170,6171,5,390,0,0,6171,6172,
		3,1074,537,0,6172,6173,5,303,0,0,6173,6174,5,94,0,0,6174,6175,3,1340,670,
		0,6175,6388,1,0,0,0,6176,6177,5,138,0,0,6177,6178,5,92,0,0,6178,6179,3,
		1074,537,0,6179,6180,5,303,0,0,6180,6181,3,724,362,0,6181,6182,3,1340,
		670,0,6182,6183,5,94,0,0,6183,6184,3,1340,670,0,6184,6388,1,0,0,0,6185,
		6186,5,138,0,0,6186,6187,5,92,0,0,6187,6188,5,221,0,0,6188,6189,5,390,
		0,0,6189,6190,3,1074,537,0,6190,6191,5,303,0,0,6191,6192,3,724,362,0,6192,
		6193,3,1340,670,0,6193,6194,5,94,0,0,6194,6195,3,1340,670,0,6195,6388,
		1,0,0,0,6196,6197,5,138,0,0,6197,6198,5,370,0,0,6198,6199,3,1336,668,0,
		6199,6200,5,303,0,0,6200,6201,3,724,362,0,6201,6202,3,1340,670,0,6202,
		6203,5,94,0,0,6203,6204,3,1340,670,0,6204,6388,1,0,0,0,6205,6206,5,138,
		0,0,6206,6207,5,370,0,0,6207,6208,5,221,0,0,6208,6209,5,390,0,0,6209,6210,
		3,1336,668,0,6210,6211,5,303,0,0,6211,6212,3,724,362,0,6212,6213,3,1340,
		670,0,6213,6214,5,94,0,0,6214,6215,3,1340,670,0,6215,6388,1,0,0,0,6216,
		6217,5,138,0,0,6217,6218,5,252,0,0,6218,6219,5,370,0,0,6219,6220,3,1336,
		668,0,6220,6221,5,303,0,0,6221,6222,3,724,362,0,6222,6223,3,1340,670,0,
		6223,6224,5,94,0,0,6224,6225,3,1340,670,0,6225,6388,1,0,0,0,6226,6227,
		5,138,0,0,6227,6228,5,252,0,0,6228,6229,5,370,0,0,6229,6230,5,221,0,0,
		6230,6231,5,390,0,0,6231,6232,3,1336,668,0,6232,6233,5,303,0,0,6233,6234,
		3,724,362,0,6234,6235,3,1340,670,0,6235,6236,5,94,0,0,6236,6237,3,1340,
		670,0,6237,6388,1,0,0,0,6238,6239,5,138,0,0,6239,6240,5,92,0,0,6240,6241,
		3,1074,537,0,6241,6242,5,303,0,0,6242,6243,5,45,0,0,6243,6244,3,1340,670,
		0,6244,6245,5,94,0,0,6245,6246,3,1340,670,0,6246,6388,1,0,0,0,6247,6248,
		5,138,0,0,6248,6249,5,92,0,0,6249,6250,5,221,0,0,6250,6251,5,390,0,0,6251,
		6252,3,1074,537,0,6252,6253,5,303,0,0,6253,6254,5,45,0,0,6254,6255,3,1340,
		670,0,6255,6256,5,94,0,0,6256,6257,3,1340,670,0,6257,6388,1,0,0,0,6258,
		6259,5,138,0,0,6259,6260,5,63,0,0,6260,6261,5,92,0,0,6261,6262,3,1074,
		537,0,6262,6263,5,303,0,0,6263,6264,3,724,362,0,6264,6265,3,1340,670,0,
		6265,6266,5,94,0,0,6266,6267,3,1340,670,0,6267,6388,1,0,0,0,6268,6269,
		5,138,0,0,6269,6270,5,63,0,0,6270,6271,5,92,0,0,6271,6272,5,221,0,0,6272,
		6273,5,390,0,0,6273,6274,3,1074,537,0,6274,6275,5,303,0,0,6275,6276,3,
		724,362,0,6276,6277,3,1340,670,0,6277,6278,5,94,0,0,6278,6279,3,1340,670,
		0,6279,6388,1,0,0,0,6280,6281,5,138,0,0,6281,6282,5,315,0,0,6282,6283,
		3,1340,670,0,6283,6284,5,80,0,0,6284,6285,3,1336,668,0,6285,6286,5,303,
		0,0,6286,6287,5,94,0,0,6287,6288,3,1340,670,0,6288,6388,1,0,0,0,6289,6290,
		5,138,0,0,6290,6291,5,351,0,0,6291,6292,3,1340,670,0,6292,6293,5,80,0,
		0,6293,6294,3,1336,668,0,6294,6295,5,303,0,0,6295,6296,5,94,0,0,6296,6297,
		3,1340,670,0,6297,6388,1,0,0,0,6298,6299,5,138,0,0,6299,6300,5,199,0,0,
		6300,6301,5,351,0,0,6301,6302,3,1340,670,0,6302,6303,5,303,0,0,6303,6304,
		5,94,0,0,6304,6305,3,1340,670,0,6305,6388,1,0,0,0,6306,6307,5,138,0,0,
		6307,6308,5,312,0,0,6308,6309,3,1366,683,0,6309,6310,5,303,0,0,6310,6311,
		5,94,0,0,6311,6312,3,1366,683,0,6312,6388,1,0,0,0,6313,6314,5,138,0,0,
		6314,6315,5,99,0,0,6315,6316,3,1366,683,0,6316,6317,5,303,0,0,6317,6318,
		5,94,0,0,6318,6319,3,1366,683,0,6319,6388,1,0,0,0,6320,6321,5,138,0,0,
		6321,6322,5,345,0,0,6322,6323,3,1340,670,0,6323,6324,5,303,0,0,6324,6325,
		5,94,0,0,6325,6326,3,1340,670,0,6326,6388,1,0,0,0,6327,6328,5,138,0,0,
		6328,6329,5,336,0,0,6329,6330,3,524,262,0,6330,6331,5,303,0,0,6331,6332,
		5,94,0,0,6332,6333,3,1340,670,0,6333,6388,1,0,0,0,6334,6335,5,138,0,0,
		6335,6336,5,349,0,0,6336,6337,5,319,0,0,6337,6338,5,277,0,0,6338,6339,
		3,524,262,0,6339,6340,5,303,0,0,6340,6341,5,94,0,0,6341,6342,3,1340,670,
		0,6342,6388,1,0,0,0,6343,6344,5,138,0,0,6344,6345,5,349,0,0,6345,6346,
		5,319,0,0,6346,6347,5,186,0,0,6347,6348,3,524,262,0,6348,6349,5,303,0,
		0,6349,6350,5,94,0,0,6350,6351,3,1340,670,0,6351,6388,1,0,0,0,6352,6353,
		5,138,0,0,6353,6354,5,349,0,0,6354,6355,5,319,0,0,6355,6356,5,347,0,0,
		6356,6357,3,524,262,0,6357,6358,5,303,0,0,6358,6359,5,94,0,0,6359,6360,
		3,1340,670,0,6360,6388,1,0,0,0,6361,6362,5,138,0,0,6362,6363,5,349,0,0,
		6363,6364,5,319,0,0,6364,6365,5,164,0,0,6365,6366,3,524,262,0,6366,6367,
		5,303,0,0,6367,6368,5,94,0,0,6368,6369,3,1340,670,0,6369,6388,1,0,0,0,
		6370,6371,5,138,0,0,6371,6372,5,354,0,0,6372,6373,3,524,262,0,6373,6374,
		5,303,0,0,6374,6375,5,94,0,0,6375,6376,3,1340,670,0,6376,6388,1,0,0,0,
		6377,6378,5,138,0,0,6378,6379,5,354,0,0,6379,6380,3,524,262,0,6380,6381,
		5,303,0,0,6381,6382,5,144,0,0,6382,6383,3,1340,670,0,6383,6384,5,94,0,
		0,6384,6385,3,1340,670,0,6385,6386,3,108,54,0,6386,6388,1,0,0,0,6387,5919,
		1,0,0,0,6387,5926,1,0,0,0,6387,5933,1,0,0,0,6387,5940,1,0,0,0,6387,5947,
		1,0,0,0,6387,5954,1,0,0,0,6387,5963,1,0,0,0,6387,5972,1,0,0,0,6387,5979,
		1,0,0,0,6387,5986,1,0,0,0,6387,5994,1,0,0,0,6387,6004,1,0,0,0,6387,6014,
		1,0,0,0,6387,6023,1,0,0,0,6387,6034,1,0,0,0,6387,6041,1,0,0,0,6387,6048,
		1,0,0,0,6387,6055,1,0,0,0,6387,6062,1,0,0,0,6387,6069,1,0,0,0,6387,6076,
		1,0,0,0,6387,6083,1,0,0,0,6387,6092,1,0,0,0,6387,6099,1,0,0,0,6387,6108,
		1,0,0,0,6387,6115,1,0,0,0,6387,6124,1,0,0,0,6387,6132,1,0,0,0,6387,6142,
		1,0,0,0,6387,6149,1,0,0,0,6387,6158,1,0,0,0,6387,6166,1,0,0,0,6387,6176,
		1,0,0,0,6387,6185,1,0,0,0,6387,6196,1,0,0,0,6387,6205,1,0,0,0,6387,6216,
		1,0,0,0,6387,6226,1,0,0,0,6387,6238,1,0,0,0,6387,6247,1,0,0,0,6387,6258,
		1,0,0,0,6387,6268,1,0,0,0,6387,6280,1,0,0,0,6387,6289,1,0,0,0,6387,6298,
		1,0,0,0,6387,6306,1,0,0,0,6387,6313,1,0,0,0,6387,6320,1,0,0,0,6387,6327,
		1,0,0,0,6387,6334,1,0,0,0,6387,6343,1,0,0,0,6387,6352,1,0,0,0,6387,6361,
		1,0,0,0,6387,6370,1,0,0,0,6387,6377,1,0,0,0,6388,723,1,0,0,0,6389,6392,
		5,44,0,0,6390,6392,1,0,0,0,6391,6389,1,0,0,0,6391,6390,1,0,0,0,6392,725,
		1,0,0,0,6393,6394,5,327,0,0,6394,6397,5,175,0,0,6395,6397,1,0,0,0,6396,
		6393,1,0,0,0,6396,6395,1,0,0,0,6397,727,1,0,0,0,6398,6399,5,138,0,0,6399,
		6400,5,212,0,0,6400,6401,3,626,313,0,6401,6402,3,730,365,0,6402,6403,5,
		463,0,0,6403,6404,5,80,0,0,6404,6405,5,205,0,0,6405,6406,3,1340,670,0,
		6406,6456,1,0,0,0,6407,6408,5,138,0,0,6408,6409,5,290,0,0,6409,6410,3,
		626,313,0,6410,6411,3,730,365,0,6411,6412,5,463,0,0,6412,6413,5,80,0,0,
		6413,6414,5,205,0,0,6414,6415,3,1340,670,0,6415,6456,1,0,0,0,6416,6417,
		5,138,0,0,6417,6418,5,443,0,0,6418,6419,3,626,313,0,6419,6420,3,730,365,
		0,6420,6421,5,463,0,0,6421,6422,5,80,0,0,6422,6423,5,205,0,0,6423,6424,
		3,1340,670,0,6424,6456,1,0,0,0,6425,6426,5,138,0,0,6426,6427,5,351,0,0,
		6427,6428,3,1340,670,0,6428,6429,5,80,0,0,6429,6430,3,1336,668,0,6430,
		6431,3,730,365,0,6431,6432,5,463,0,0,6432,6433,5,80,0,0,6433,6434,5,205,
		0,0,6434,6435,3,1340,670,0,6435,6456,1,0,0,0,6436,6437,5,138,0,0,6437,
		6438,5,252,0,0,6438,6439,5,370,0,0,6439,6440,3,1336,668,0,6440,6441,3,
		730,365,0,6441,6442,5,463,0,0,6442,6443,5,80,0,0,6443,6444,5,205,0,0,6444,
		6445,3,1340,670,0,6445,6456,1,0,0,0,6446,6447,5,138,0,0,6447,6448,5,227,
		0,0,6448,6449,3,1336,668,0,6449,6450,3,730,365,0,6450,6451,5,463,0,0,6451,
		6452,5,80,0,0,6452,6453,5,205,0,0,6453,6454,3,1340,670,0,6454,6456,1,0,
		0,0,6455,6398,1,0,0,0,6455,6407,1,0,0,0,6455,6416,1,0,0,0,6455,6425,1,
		0,0,0,6455,6436,1,0,0,0,6455,6446,1,0,0,0,6456,729,1,0,0,0,6457,6460,5,
		263,0,0,6458,6460,1,0,0,0,6459,6457,1,0,0,0,6459,6458,1,0,0,0,6460,731,
		1,0,0,0,6461,6462,5,138,0,0,6462,6463,5,136,0,0,6463,6464,3,650,325,0,
		6464,6465,5,327,0,0,6465,6466,5,317,0,0,6466,6467,3,1340,670,0,6467,6679,
		1,0,0,0,6468,6469,5,138,0,0,6469,6470,5,108,0,0,6470,6471,3,524,262,0,
		6471,6472,5,327,0,0,6472,6473,5,317,0,0,6473,6474,3,1340,670,0,6474,6679,
		1,0,0,0,6475,6476,5,138,0,0,6476,6477,5,169,0,0,6477,6478,3,524,262,0,
		6478,6479,5,327,0,0,6479,6480,5,317,0,0,6480,6481,3,1340,670,0,6481,6679,
		1,0,0,0,6482,6483,5,138,0,0,6483,6484,5,190,0,0,6484,6485,3,524,262,0,
		6485,6486,5,327,0,0,6486,6487,5,317,0,0,6487,6488,3,1340,670,0,6488,6679,
		1,0,0,0,6489,6490,5,138,0,0,6490,6491,5,205,0,0,6491,6492,3,1340,670,0,
		6492,6493,5,327,0,0,6493,6494,5,317,0,0,6494,6495,3,1340,670,0,6495,6679,
		1,0,0,0,6496,6497,5,138,0,0,6497,6498,5,212,0,0,6498,6499,3,626,313,0,
		6499,6500,5,327,0,0,6500,6501,5,317,0,0,6501,6502,3,1340,670,0,6502,6679,
		1,0,0,0,6503,6504,5,138,0,0,6504,6505,5,272,0,0,6505,6506,3,688,344,0,
		6506,6507,5,327,0,0,6507,6508,5,317,0,0,6508,6509,3,1340,670,0,6509,6679,
		1,0,0,0,6510,6511,5,138,0,0,6511,6512,5,272,0,0,6512,6513,5,157,0,0,6513,
		6514,3,524,262,0,6514,6515,5,100,0,0,6515,6516,3,1340,670,0,6516,6517,
		5,327,0,0,6517,6518,5,317,0,0,6518,6519,3,1340,670,0,6519,6679,1,0,0,0,
		6520,6521,5,138,0,0,6521,6522,5,272,0,0,6522,6523,5,207,0,0,6523,6524,
		3,524,262,0,6524,6525,5,100,0,0,6525,6526,3,1340,670,0,6526,6527,5,327,
		0,0,6527,6528,5,317,0,0,6528,6529,3,1340,670,0,6529,6679,1,0,0,0,6530,
		6531,5,138,0,0,6531,6532,5,290,0,0,6532,6533,3,626,313,0,6533,6534,5,327,
		0,0,6534,6535,5,317,0,0,6535,6536,3,1340,670,0,6536,6679,1,0,0,0,6537,
		6538,5,138,0,0,6538,6539,5,443,0,0,6539,6540,3,626,313,0,6540,6541,5,327,
		0,0,6541,6542,5,317,0,0,6542,6543,3,1340,670,0,6543,6679,1,0,0,0,6544,
		6545,5,138,0,0,6545,6546,5,92,0,0,6546,6547,3,1074,537,0,6547,6548,5,327,
		0,0,6548,6549,5,317,0,0,6549,6550,3,1340,670,0,6550,6679,1,0,0,0,6551,
		6552,5,138,0,0,6552,6553,5,92,0,0,6553,6554,5,221,0,0,6554,6555,5,390,
		0,0,6555,6556,3,1074,537,0,6556,6557,5,327,0,0,6557,6558,5,317,0,0,6558,
		6559,3,1340,670,0,6559,6679,1,0,0,0,6560,6561,5,138,0,0,6561,6562,5,336,
		0,0,6562,6563,3,524,262,0,6563,6564,5,327,0,0,6564,6565,5,317,0,0,6565,
		6566,3,1340,670,0,6566,6679,1,0,0,0,6567,6568,5,138,0,0,6568,6569,5,349,
		0,0,6569,6570,5,319,0,0,6570,6571,5,277,0,0,6571,6572,3,524,262,0,6572,
		6573,5,327,0,0,6573,6574,5,317,0,0,6574,6575,3,1340,670,0,6575,6679,1,
		0,0,0,6576,6577,5,138,0,0,6577,6578,5,349,0,0,6578,6579,5,319,0,0,6579,
		6580,5,186,0,0,6580,6581,3,524,262,0,6581,6582,5,327,0,0,6582,6583,5,317,
		0,0,6583,6584,3,1340,670,0,6584,6679,1,0,0,0,6585,6586,5,138,0,0,6586,
		6587,5,349,0,0,6587,6588,5,319,0,0,6588,6589,5,347,0,0,6589,6590,3,524,
		262,0,6590,6591,5,327,0,0,6591,6592,5,317,0,0,6592,6593,3,1340,670,0,6593,
		6679,1,0,0,0,6594,6595,5,138,0,0,6595,6596,5,349,0,0,6596,6597,5,319,0,
		0,6597,6598,5,164,0,0,6598,6599,3,524,262,0,6599,6600,5,327,0,0,6600,6601,
		5,317,0,0,6601,6602,3,1340,670,0,6602,6679,1,0,0,0,6603,6604,5,138,0,0,
		6604,6605,5,322,0,0,6605,6606,3,1336,668,0,6606,6607,5,327,0,0,6607,6608,
		5,317,0,0,6608,6609,3,1340,670,0,6609,6679,1,0,0,0,6610,6611,5,138,0,0,
		6611,6612,5,322,0,0,6612,6613,5,221,0,0,6613,6614,5,390,0,0,6614,6615,
		3,1336,668,0,6615,6616,5,327,0,0,6616,6617,5,317,0,0,6617,6618,3,1340,
		670,0,6618,6679,1,0,0,0,6619,6620,5,138,0,0,6620,6621,5,370,0,0,6621,6622,
		3,1336,668,0,6622,6623,5,327,0,0,6623,6624,5,317,0,0,6624,6625,3,1340,
		670,0,6625,6679,1,0,0,0,6626,6627,5,138,0,0,6627,6628,5,370,0,0,6628,6629,
		5,221,0,0,6629,6630,5,390,0,0,6630,6631,3,1336,668,0,6631,6632,5,327,0,
		0,6632,6633,5,317,0,0,6633,6634,3,1340,670,0,6634,6679,1,0,0,0,6635,6636,
		5,138,0,0,6636,6637,5,252,0,0,6637,6638,5,370,0,0,6638,6639,3,1336,668,
		0,6639,6640,5,327,0,0,6640,6641,5,317,0,0,6641,6642,3,1340,670,0,6642,
		6679,1,0,0,0,6643,6644,5,138,0,0,6644,6645,5,252,0,0,6645,6646,5,370,0,
		0,6646,6647,5,221,0,0,6647,6648,5,390,0,0,6648,6649,3,1336,668,0,6649,
		6650,5,327,0,0,6650,6651,5,317,0,0,6651,6652,3,1340,670,0,6652,6679,1,
		0,0,0,6653,6654,5,138,0,0,6654,6655,5,63,0,0,6655,6656,5,92,0,0,6656,6657,
		3,1074,537,0,6657,6658,5,327,0,0,6658,6659,5,317,0,0,6659,6660,3,1340,
		670,0,6660,6679,1,0,0,0,6661,6662,5,138,0,0,6662,6663,5,63,0,0,6663,6664,
		5,92,0,0,6664,6665,5,221,0,0,6665,6666,5,390,0,0,6666,6667,3,1074,537,
		0,6667,6668,5,327,0,0,6668,6669,5,317,0,0,6669,6670,3,1340,670,0,6670,
		6679,1,0,0,0,6671,6672,5,138,0,0,6672,6673,5,354,0,0,6673,6674,3,524,262,
		0,6674,6675,5,327,0,0,6675,6676,5,317,0,0,6676,6677,3,1340,670,0,6677,
		6679,1,0,0,0,6678,6461,1,0,0,0,6678,6468,1,0,0,0,6678,6475,1,0,0,0,6678,
		6482,1,0,0,0,6678,6489,1,0,0,0,6678,6496,1,0,0,0,6678,6503,1,0,0,0,6678,
		6510,1,0,0,0,6678,6520,1,0,0,0,6678,6530,1,0,0,0,6678,6537,1,0,0,0,6678,
		6544,1,0,0,0,6678,6551,1,0,0,0,6678,6560,1,0,0,0,6678,6567,1,0,0,0,6678,
		6576,1,0,0,0,6678,6585,1,0,0,0,6678,6594,1,0,0,0,6678,6603,1,0,0,0,6678,
		6610,1,0,0,0,6678,6619,1,0,0,0,6678,6626,1,0,0,0,6678,6635,1,0,0,0,6678,
		6643,1,0,0,0,6678,6653,1,0,0,0,6678,6661,1,0,0,0,6678,6671,1,0,0,0,6679,
		733,1,0,0,0,6680,6681,5,138,0,0,6681,6682,5,272,0,0,6682,6683,3,688,344,
		0,6683,6684,5,327,0,0,6684,6685,5,2,0,0,6685,6686,3,736,368,0,6686,6687,
		5,3,0,0,6687,735,1,0,0,0,6688,6693,3,738,369,0,6689,6690,5,6,0,0,6690,
		6692,3,738,369,0,6691,6689,1,0,0,0,6692,6695,1,0,0,0,6693,6691,1,0,0,0,
		6693,6694,1,0,0,0,6694,737,1,0,0,0,6695,6693,1,0,0,0,6696,6697,3,1380,
		690,0,6697,6698,5,10,0,0,6698,6699,5,401,0,0,6699,6705,1,0,0,0,6700,6701,
		3,1380,690,0,6701,6702,5,10,0,0,6702,6703,3,740,370,0,6703,6705,1,0,0,
		0,6704,6696,1,0,0,0,6704,6700,1,0,0,0,6705,739,1,0,0,0,6706,6712,3,640,
		320,0,6707,6712,3,1392,696,0,6708,6712,3,1276,638,0,6709,6712,3,292,146,
		0,6710,6712,3,1358,679,0,6711,6706,1,0,0,0,6711,6707,1,0,0,0,6711,6708,
		1,0,0,0,6711,6709,1,0,0,0,6711,6710,1,0,0,0,6712,741,1,0,0,0,6713,6714,
		5,138,0,0,6714,6715,5,354,0,0,6715,6716,3,524,262,0,6716,6717,5,327,0,
		0,6717,6718,5,2,0,0,6718,6719,3,736,368,0,6719,6720,5,3,0,0,6720,743,1,
		0,0,0,6721,6722,5,138,0,0,6722,6723,5,136,0,0,6723,6724,3,650,325,0,6724,
		6725,5,276,0,0,6725,6726,5,94,0,0,6726,6727,3,1368,684,0,6727,6905,1,0,
		0,0,6728,6729,5,138,0,0,6729,6730,5,108,0,0,6730,6731,3,524,262,0,6731,
		6732,5,276,0,0,6732,6733,5,94,0,0,6733,6734,3,1368,684,0,6734,6905,1,0,
		0,0,6735,6736,5,138,0,0,6736,6737,5,169,0,0,6737,6738,3,524,262,0,6738,
		6739,5,276,0,0,6739,6740,5,94,0,0,6740,6741,3,1368,684,0,6741,6905,1,0,
		0,0,6742,6743,5,138,0,0,6743,6744,5,176,0,0,6744,6745,3,1340,670,0,6745,
		6746,5,276,0,0,6746,6747,5,94,0,0,6747,6748,3,1368,684,0,6748,6905,1,0,
		0,0,6749,6750,5,138,0,0,6750,6751,5,190,0,0,6751,6752,3,524,262,0,6752,
		6753,5,276,0,0,6753,6754,5,94,0,0,6754,6755,3,1368,684,0,6755,6905,1,0,
		0,0,6756,6757,5,138,0,0,6757,6758,5,212,0,0,6758,6759,3,626,313,0,6759,
		6760,5,276,0,0,6760,6761,5,94,0,0,6761,6762,3,1368,684,0,6762,6905,1,0,
		0,0,6763,6764,5,138,0,0,6764,6765,3,308,154,0,6765,6766,5,239,0,0,6766,
		6767,3,1340,670,0,6767,6768,5,276,0,0,6768,6769,5,94,0,0,6769,6770,3,1368,
		684,0,6770,6905,1,0,0,0,6771,6772,5,138,0,0,6772,6773,5,240,0,0,6773,6774,
		5,268,0,0,6774,6775,3,292,146,0,6775,6776,5,276,0,0,6776,6777,5,94,0,0,
		6777,6778,3,1368,684,0,6778,6905,1,0,0,0,6779,6780,5,138,0,0,6780,6781,
		5,272,0,0,6781,6782,3,688,344,0,6782,6783,5,276,0,0,6783,6784,5,94,0,0,
		6784,6785,3,1368,684,0,6785,6905,1,0,0,0,6786,6787,5,138,0,0,6787,6788,
		5,272,0,0,6788,6789,5,157,0,0,6789,6790,3,524,262,0,6790,6791,5,100,0,
		0,6791,6792,3,1340,670,0,6792,6793,5,276,0,0,6793,6794,5,94,0,0,6794,6795,
		3,1368,684,0,6795,6905,1,0,0,0,6796,6797,5,138,0,0,6797,6798,5,272,0,0,
		6798,6799,5,207,0,0,6799,6800,3,524,262,0,6800,6801,5,100,0,0,6801,6802,
		3,1340,670,0,6802,6803,5,276,0,0,6803,6804,5,94,0,0,6804,6805,3,1368,684,
		0,6805,6905,1,0,0,0,6806,6807,5,138,0,0,6807,6808,5,290,0,0,6808,6809,
		3,626,313,0,6809,6810,5,276,0,0,6810,6811,5,94,0,0,6811,6812,3,1368,684,
		0,6812,6905,1,0,0,0,6813,6814,5,138,0,0,6814,6815,5,443,0,0,6815,6816,
		3,626,313,0,6816,6817,5,276,0,0,6817,6818,5,94,0,0,6818,6819,3,1368,684,
		0,6819,6905,1,0,0,0,6820,6821,5,138,0,0,6821,6822,5,317,0,0,6822,6823,
		3,1340,670,0,6823,6824,5,276,0,0,6824,6825,5,94,0,0,6825,6826,3,1368,684,
		0,6826,6905,1,0,0,0,6827,6828,5,138,0,0,6828,6829,5,354,0,0,6829,6830,
		3,524,262,0,6830,6831,5,276,0,0,6831,6832,5,94,0,0,6832,6833,3,1368,684,
		0,6833,6905,1,0,0,0,6834,6835,5,138,0,0,6835,6836,5,345,0,0,6836,6837,
		3,1340,670,0,6837,6838,5,276,0,0,6838,6839,5,94,0,0,6839,6840,3,1368,684,
		0,6840,6905,1,0,0,0,6841,6842,5,138,0,0,6842,6843,5,336,0,0,6843,6844,
		3,524,262,0,6844,6845,5,276,0,0,6845,6846,5,94,0,0,6846,6847,3,1368,684,
		0,6847,6905,1,0,0,0,6848,6849,5,138,0,0,6849,6850,5,349,0,0,6850,6851,
		5,319,0,0,6851,6852,5,186,0,0,6852,6853,3,524,262,0,6853,6854,5,276,0,
		0,6854,6855,5,94,0,0,6855,6856,3,1368,684,0,6856,6905,1,0,0,0,6857,6858,
		5,138,0,0,6858,6859,5,349,0,0,6859,6860,5,319,0,0,6860,6861,5,164,0,0,
		6861,6862,3,524,262,0,6862,6863,5,276,0,0,6863,6864,5,94,0,0,6864,6865,
		3,1368,684,0,6865,6905,1,0,0,0,6866,6867,5,138,0,0,6867,6868,5,63,0,0,
		6868,6869,5,175,0,0,6869,6870,5,375,0,0,6870,6871,3,1340,670,0,6871,6872,
		5,276,0,0,6872,6873,5,94,0,0,6873,6874,3,1368,684,0,6874,6905,1,0,0,0,
		6875,6876,5,138,0,0,6876,6877,5,325,0,0,6877,6878,3,1340,670,0,6878,6879,
		5,276,0,0,6879,6880,5,94,0,0,6880,6881,3,1368,684,0,6881,6905,1,0,0,0,
		6882,6883,5,138,0,0,6883,6884,5,199,0,0,6884,6885,5,351,0,0,6885,6886,
		3,1340,670,0,6886,6887,5,276,0,0,6887,6888,5,94,0,0,6888,6889,3,1368,684,
		0,6889,6905,1,0,0,0,6890,6891,5,138,0,0,6891,6892,5,453,0,0,6892,6893,
		3,1340,670,0,6893,6894,5,276,0,0,6894,6895,5,94,0,0,6895,6896,3,1368,684,
		0,6896,6905,1,0,0,0,6897,6898,5,138,0,0,6898,6899,5,452,0,0,6899,6900,
		3,1340,670,0,6900,6901,5,276,0,0,6901,6902,5,94,0,0,6902,6903,3,1368,684,
		0,6903,6905,1,0,0,0,6904,6721,1,0,0,0,6904,6728,1,0,0,0,6904,6735,1,0,
		0,0,6904,6742,1,0,0,0,6904,6749,1,0,0,0,6904,6756,1,0,0,0,6904,6763,1,
		0,0,0,6904,6771,1,0,0,0,6904,6779,1,0,0,0,6904,6786,1,0,0,0,6904,6796,
		1,0,0,0,6904,6806,1,0,0,0,6904,6813,1,0,0,0,6904,6820,1,0,0,0,6904,6827,
		1,0,0,0,6904,6834,1,0,0,0,6904,6841,1,0,0,0,6904,6848,1,0,0,0,6904,6857,
		1,0,0,0,6904,6866,1,0,0,0,6904,6875,1,0,0,0,6904,6882,1,0,0,0,6904,6890,
		1,0,0,0,6904,6897,1,0,0,0,6905,745,1,0,0,0,6906,6907,5,46,0,0,6907,6908,
		5,453,0,0,6908,6909,3,1340,670,0,6909,6910,3,748,374,0,6910,6911,3,664,
		332,0,6911,747,1,0,0,0,6912,6915,3,750,375,0,6913,6915,1,0,0,0,6914,6912,
		1,0,0,0,6914,6913,1,0,0,0,6915,749,1,0,0,0,6916,6917,5,62,0,0,6917,6918,
		5,92,0,0,6918,6923,3,1076,538,0,6919,6920,5,62,0,0,6920,6921,5,30,0,0,
		6921,6923,5,344,0,0,6922,6916,1,0,0,0,6922,6919,1,0,0,0,6923,751,1,0,0,
		0,6924,6925,5,138,0,0,6925,6926,5,453,0,0,6926,6927,3,1340,670,0,6927,
		6928,5,327,0,0,6928,6929,3,460,230,0,6929,6952,1,0,0,0,6930,6931,5,138,
		0,0,6931,6932,5,453,0,0,6932,6933,3,1340,670,0,6933,6934,5,133,0,0,6934,
		6935,5,92,0,0,6935,6936,3,1076,538,0,6936,6952,1,0,0,0,6937,6938,5,138,
		0,0,6938,6939,5,453,0,0,6939,6940,3,1340,670,0,6940,6941,5,327,0,0,6941,
		6942,5,92,0,0,6942,6943,3,1076,538,0,6943,6952,1,0,0,0,6944,6945,5,138,
		0,0,6945,6946,5,453,0,0,6946,6947,3,1340,670,0,6947,6948,5,192,0,0,6948,
		6949,5,92,0,0,6949,6950,3,1076,538,0,6950,6952,1,0,0,0,6951,6924,1,0,0,
		0,6951,6930,1,0,0,0,6951,6937,1,0,0,0,6951,6944,1,0,0,0,6952,753,1,0,0,
		0,6953,6954,5,46,0,0,6954,6955,5,452,0,0,6955,6956,3,1340,670,0,6956,6957,
		5,165,0,0,6957,6958,3,1358,679,0,6958,6959,5,453,0,0,6959,6960,3,756,378,
		0,6960,6961,3,664,332,0,6961,755,1,0,0,0,6962,6967,3,758,379,0,6963,6964,
		5,6,0,0,6964,6966,3,758,379,0,6965,6963,1,0,0,0,6966,6969,1,0,0,0,6967,
		6965,1,0,0,0,6967,6968,1,0,0,0,6968,757,1,0,0,0,6969,6967,1,0,0,0,6970,
		6971,3,1380,690,0,6971,759,1,0,0,0,6972,6973,5,138,0,0,6973,6974,5,452,
		0,0,6974,6975,3,1340,670,0,6975,6976,5,327,0,0,6976,6977,3,460,230,0,6977,
		7010,1,0,0,0,6978,6979,5,138,0,0,6979,6980,5,452,0,0,6980,6981,3,1340,
		670,0,6981,6982,5,165,0,0,6982,6983,3,1358,679,0,6983,7010,1,0,0,0,6984,
		6985,5,138,0,0,6985,6986,5,452,0,0,6986,6987,3,1340,670,0,6987,6988,5,
		299,0,0,6988,6989,5,453,0,0,6989,6990,3,664,332,0,6990,7010,1,0,0,0,6991,
		6992,5,138,0,0,6992,6993,5,452,0,0,6993,6994,3,1340,670,0,6994,6995,5,
		327,0,0,6995,6996,5,453,0,0,6996,6997,3,756,378,0,6997,6998,3,664,332,
		0,6998,7010,1,0,0,0,6999,7000,5,138,0,0,7000,7001,5,452,0,0,7001,7002,
		3,1340,670,0,7002,7003,5,194,0,0,7003,7010,1,0,0,0,7004,7005,5,138,0,0,
		7005,7006,5,452,0,0,7006,7007,3,1340,670,0,7007,7008,5,187,0,0,7008,7010,
		1,0,0,0,7009,6972,1,0,0,0,7009,6978,1,0,0,0,7009,6984,1,0,0,0,7009,6991,
		1,0,0,0,7009,6999,1,0,0,0,7009,7004,1,0,0,0,7010,761,1,0,0,0,7011,7012,
		5,192,0,0,7012,7013,5,452,0,0,7013,7014,3,1340,670,0,7014,7015,3,108,54,
		0,7015,7024,1,0,0,0,7016,7017,5,192,0,0,7017,7018,5,452,0,0,7018,7019,
		5,221,0,0,7019,7020,5,390,0,0,7020,7021,3,1340,670,0,7021,7022,3,108,54,
		0,7022,7024,1,0,0,0,7023,7011,1,0,0,0,7023,7016,1,0,0,0,7024,763,1,0,0,
		0,7025,7026,5,46,0,0,7026,7027,3,618,309,0,7027,7028,5,315,0,0,7028,7029,
		3,1340,670,0,7029,7030,5,36,0,0,7030,7031,5,80,0,0,7031,7032,3,774,387,
		0,7032,7033,5,94,0,0,7033,7034,3,1336,668,0,7034,7035,3,1094,547,0,7035,
		7036,5,57,0,0,7036,7037,3,776,388,0,7037,7038,3,766,383,0,7038,765,1,0,
		0,0,7039,7046,5,264,0,0,7040,7046,3,770,385,0,7041,7042,5,2,0,0,7042,7043,
		3,768,384,0,7043,7044,5,3,0,0,7044,7046,1,0,0,0,7045,7039,1,0,0,0,7045,
		7040,1,0,0,0,7045,7041,1,0,0,0,7046,767,1,0,0,0,7047,7052,3,772,386,0,
		7048,7049,5,7,0,0,7049,7051,3,772,386,0,7050,7048,1,0,0,0,7051,7054,1,
		0,0,0,7052,7050,1,0,0,0,7052,7053,1,0,0,0,7053,769,1,0,0,0,7054,7052,1,
		0,0,0,7055,7061,3,960,480,0,7056,7061,3,902,451,0,7057,7061,3,942,471,
		0,7058,7061,3,928,464,0,7059,7061,3,778,389,0,7060,7055,1,0,0,0,7060,7056,
		1,0,0,0,7060,7057,1,0,0,0,7060,7058,1,0,0,0,7060,7059,1,0,0,0,7061,771,
		1,0,0,0,7062,7065,3,770,385,0,7063,7065,1,0,0,0,7064,7062,1,0,0,0,7064,
		7063,1,0,0,0,7065,773,1,0,0,0,7066,7067,7,31,0,0,7067,775,1,0,0,0,7068,
		7072,5,234,0,0,7069,7072,5,137,0,0,7070,7072,1,0,0,0,7071,7068,1,0,0,0,
		7071,7069,1,0,0,0,7071,7070,1,0,0,0,7072,777,1,0,0,0,7073,7074,5,265,0,
		0,7074,7075,3,1372,686,0,7075,7076,3,780,390,0,7076,779,1,0,0,0,7077,7078,
		5,6,0,0,7078,7081,3,1358,679,0,7079,7081,1,0,0,0,7080,7077,1,0,0,0,7080,
		7079,1,0,0,0,7081,781,1,0,0,0,7082,7083,5,244,0,0,7083,7084,3,1372,686,
		0,7084,783,1,0,0,0,7085,7086,5,360,0,0,7086,7090,3,1372,686,0,7087,7088,
		5,360,0,0,7088,7090,5,9,0,0,7089,7085,1,0,0,0,7089,7087,1,0,0,0,7090,785,
		1,0,0,0,7091,7092,5,129,0,0,7092,7093,3,788,394,0,7093,7094,3,796,398,
		0,7094,7142,1,0,0,0,7095,7096,5,147,0,0,7096,7097,3,788,394,0,7097,7098,
		3,794,397,0,7098,7142,1,0,0,0,7099,7100,5,334,0,0,7100,7101,5,350,0,0,
		7101,7142,3,794,397,0,7102,7103,5,162,0,0,7103,7104,3,788,394,0,7104,7105,
		3,796,398,0,7105,7142,1,0,0,0,7106,7107,5,455,0,0,7107,7108,3,788,394,
		0,7108,7109,3,796,398,0,7109,7142,1,0,0,0,7110,7111,5,313,0,0,7111,7112,
		3,788,394,0,7112,7113,3,796,398,0,7113,7142,1,0,0,0,7114,7115,5,316,0,
		0,7115,7142,3,1372,686,0,7116,7117,5,302,0,0,7117,7118,5,316,0,0,7118,
		7142,3,1372,686,0,7119,7120,5,302,0,0,7120,7142,3,1372,686,0,7121,7122,
		5,313,0,0,7122,7123,3,788,394,0,7123,7124,5,94,0,0,7124,7125,5,316,0,0,
		7125,7126,3,1372,686,0,7126,7142,1,0,0,0,7127,7128,5,313,0,0,7128,7129,
		3,788,394,0,7129,7130,5,94,0,0,7130,7131,3,1372,686,0,7131,7142,1,0,0,
		0,7132,7133,5,284,0,0,7133,7134,5,350,0,0,7134,7142,3,1358,679,0,7135,
		7136,5,162,0,0,7136,7137,5,285,0,0,7137,7142,3,1358,679,0,7138,7139,5,
		313,0,0,7139,7140,5,285,0,0,7140,7142,3,1358,679,0,7141,7091,1,0,0,0,7141,
		7095,1,0,0,0,7141,7099,1,0,0,0,7141,7102,1,0,0,0,7141,7106,1,0,0,0,7141,
		7110,1,0,0,0,7141,7114,1,0,0,0,7141,7116,1,0,0,0,7141,7119,1,0,0,0,7141,
		7121,1,0,0,0,7141,7127,1,0,0,0,7141,7132,1,0,0,0,7141,7135,1,0,0,0,7141,
		7138,1,0,0,0,7142,787,1,0,0,0,7143,7148,5,374,0,0,7144,7148,5,350,0,0,
		7145,7148,5,143,0,0,7146,7148,1,0,0,0,7147,7143,1,0,0,0,7147,7144,1,0,
		0,0,7147,7145,1,0,0,0,7147,7146,1,0,0,0,7148,789,1,0,0,0,7149,7150,5,236,
		0,0,7150,7151,5,243,0,0,7151,7160,3,64,32,0,7152,7153,5,294,0,0,7153,7160,
		5,81,0,0,7154,7155,5,294,0,0,7155,7160,5,376,0,0,7156,7160,5,54,0,0,7157,
		7158,5,77,0,0,7158,7160,5,54,0,0,7159,7149,1,0,0,0,7159,7152,1,0,0,0,7159,
		7154,1,0,0,0,7159,7156,1,0,0,0,7159,7157,1,0,0,0,7160,791,1,0,0,0,7161,
		7168,3,790,395,0,7162,7164,5,6,0,0,7163,7162,1,0,0,0,7163,7164,1,0,0,0,
		7164,7165,1,0,0,0,7165,7167,3,790,395,0,7166,7163,1,0,0,0,7167,7170,1,
		0,0,0,7168,7166,1,0,0,0,7168,7169,1,0,0,0,7169,793,1,0,0,0,7170,7168,1,
		0,0,0,7171,7174,3,792,396,0,7172,7174,1,0,0,0,7173,7171,1,0,0,0,7173,7172,
		1,0,0,0,7174,795,1,0,0,0,7175,7177,5,33,0,0,7176,7178,5,263,0,0,7177,7176,
		1,0,0,0,7177,7178,1,0,0,0,7178,7179,1,0,0,0,7179,7182,5,154,0,0,7180,7182,
		1,0,0,0,7181,7175,1,0,0,0,7181,7180,1,0,0,0,7182,797,1,0,0,0,7183,7186,
		5,46,0,0,7184,7185,5,82,0,0,7185,7187,5,305,0,0,7186,7184,1,0,0,0,7186,
		7187,1,0,0,0,7187,7188,1,0,0,0,7188,7202,3,174,87,0,7189,7190,5,370,0,
		0,7190,7191,3,1336,668,0,7191,7192,3,214,107,0,7192,7193,3,118,59,0,7193,
		7203,1,0,0,0,7194,7195,5,297,0,0,7195,7196,5,370,0,0,7196,7197,3,1336,
		668,0,7197,7198,5,2,0,0,7198,7199,3,216,108,0,7199,7200,5,3,0,0,7200,7201,
		3,118,59,0,7201,7203,1,0,0,0,7202,7189,1,0,0,0,7202,7194,1,0,0,0,7203,
		7204,1,0,0,0,7204,7205,5,36,0,0,7205,7206,3,960,480,0,7206,7207,3,800,
		400,0,7207,799,1,0,0,0,7208,7210,5,105,0,0,7209,7211,7,32,0,0,7210,7209,
		1,0,0,0,7210,7211,1,0,0,0,7211,7212,1,0,0,0,7212,7213,5,42,0,0,7213,7216,
		5,273,0,0,7214,7216,1,0,0,0,7215,7208,1,0,0,0,7215,7214,1,0,0,0,7216,801,
		1,0,0,0,7217,7218,5,245,0,0,7218,7219,3,1344,672,0,7219,803,1,0,0,0,7220,
		7221,5,46,0,0,7221,7222,5,176,0,0,7222,7223,3,1340,670,0,7223,7224,3,16,
		8,0,7224,7225,3,806,403,0,7225,805,1,0,0,0,7226,7229,3,808,404,0,7227,
		7229,1,0,0,0,7228,7226,1,0,0,0,7228,7227,1,0,0,0,7229,807,1,0,0,0,7230,
		7232,3,810,405,0,7231,7230,1,0,0,0,7232,7233,1,0,0,0,7233,7231,1,0,0,0,
		7233,7234,1,0,0,0,7234,809,1,0,0,0,7235,7236,3,812,406,0,7236,7240,3,814,
		407,0,7237,7241,3,1364,682,0,7238,7241,3,66,33,0,7239,7241,5,53,0,0,7240,
		7237,1,0,0,0,7240,7238,1,0,0,0,7240,7239,1,0,0,0,7241,811,1,0,0,0,7242,
		7251,3,1382,691,0,7243,7244,5,165,0,0,7244,7251,5,74,0,0,7245,7251,5,195,
		0,0,7246,7251,5,247,0,0,7247,7251,5,276,0,0,7248,7251,5,345,0,0,7249,7251,
		5,347,0,0,7250,7242,1,0,0,0,7250,7243,1,0,0,0,7250,7245,1,0,0,0,7250,7246,
		1,0,0,0,7250,7247,1,0,0,0,7250,7248,1,0,0,0,7250,7249,1,0,0,0,7251,813,
		1,0,0,0,7252,7255,5,10,0,0,7253,7255,1,0,0,0,7254,7252,1,0,0,0,7254,7253,
		1,0,0,0,7255,815,1,0,0,0,7256,7257,5,138,0,0,7257,7258,5,176,0,0,7258,
		7265,3,1340,670,0,7259,7260,5,105,0,0,7260,7266,3,806,403,0,7261,7266,
		3,806,403,0,7262,7263,5,327,0,0,7263,7264,5,345,0,0,7264,7266,3,1340,670,
		0,7265,7259,1,0,0,0,7265,7261,1,0,0,0,7265,7262,1,0,0,0,7266,817,1,0,0,
		0,7267,7268,5,138,0,0,7268,7269,5,176,0,0,7269,7270,3,1340,670,0,7270,
		7271,3,80,40,0,7271,819,1,0,0,0,7272,7273,5,192,0,0,7273,7276,5,176,0,
		0,7274,7275,5,221,0,0,7275,7277,5,390,0,0,7276,7274,1,0,0,0,7276,7277,
		1,0,0,0,7277,7278,1,0,0,0,7278,7284,3,1340,670,0,7279,7280,3,16,8,0,7280,
		7281,5,2,0,0,7281,7282,3,822,411,0,7282,7283,5,3,0,0,7283,7285,1,0,0,0,
		7284,7279,1,0,0,0,7284,7285,1,0,0,0,7285,821,1,0,0,0,7286,7291,3,824,412,
		0,7287,7288,5,6,0,0,7288,7290,3,824,412,0,7289,7287,1,0,0,0,7290,7293,
		1,0,0,0,7291,7289,1,0,0,0,7291,7292,1,0,0,0,7292,823,1,0,0,0,7293,7291,
		1,0,0,0,7294,7295,5,210,0,0,7295,825,1,0,0,0,7296,7297,5,138,0,0,7297,
		7298,5,108,0,0,7298,7299,3,524,262,0,7299,7300,5,299,0,0,7300,7301,5,369,
		0,0,7301,827,1,0,0,0,7302,7303,5,138,0,0,7303,7304,5,343,0,0,7304,7305,
		7,33,0,0,7305,7306,3,54,27,0,7306,829,1,0,0,0,7307,7308,5,46,0,0,7308,
		7309,5,190,0,0,7309,7310,3,524,262,0,7310,7311,3,834,417,0,7311,7312,3,
		1118,559,0,7312,7313,3,192,96,0,7313,831,1,0,0,0,7314,7315,5,138,0,0,7315,
		7316,5,190,0,0,7316,7338,3,524,262,0,7317,7339,3,106,53,0,7318,7319,5,
		192,0,0,7319,7320,5,77,0,0,7320,7339,5,78,0,0,7321,7322,5,327,0,0,7322,
		7323,5,77,0,0,7323,7339,5,78,0,0,7324,7325,5,133,0,0,7325,7339,3,208,104,
		0,7326,7327,5,192,0,0,7327,7330,5,45,0,0,7328,7329,5,221,0,0,7329,7331,
		5,390,0,0,7330,7328,1,0,0,0,7330,7331,1,0,0,0,7331,7332,1,0,0,0,7332,7333,
		3,1340,670,0,7333,7334,3,108,54,0,7334,7339,1,0,0,0,7335,7336,5,366,0,
		0,7336,7337,5,45,0,0,7337,7339,3,1340,670,0,7338,7317,1,0,0,0,7338,7318,
		1,0,0,0,7338,7321,1,0,0,0,7338,7324,1,0,0,0,7338,7326,1,0,0,0,7338,7335,
		1,0,0,0,7339,833,1,0,0,0,7340,7343,5,36,0,0,7341,7343,1,0,0,0,7342,7340,
		1,0,0,0,7342,7341,1,0,0,0,7343,835,1,0,0,0,7344,7345,5,138,0,0,7345,7346,
		5,349,0,0,7346,7347,5,319,0,0,7347,7348,5,186,0,0,7348,7349,3,524,262,
		0,7349,7350,3,460,230,0,7350,837,1,0,0,0,7351,7352,5,138,0,0,7352,7353,
		5,349,0,0,7353,7354,5,319,0,0,7354,7355,5,164,0,0,7355,7356,3,524,262,
		0,7356,7357,5,133,0,0,7357,7358,5,249,0,0,7358,7359,5,62,0,0,7359,7360,
		3,1338,669,0,7360,7361,3,840,420,0,7361,7362,3,522,261,0,7362,7424,1,0,
		0,0,7363,7364,5,138,0,0,7364,7365,5,349,0,0,7365,7366,5,319,0,0,7366,7367,
		5,164,0,0,7367,7368,3,524,262,0,7368,7369,5,138,0,0,7369,7370,5,249,0,
		0,7370,7371,5,62,0,0,7371,7372,3,1338,669,0,7372,7373,3,840,420,0,7373,
		7374,3,522,261,0,7374,7424,1,0,0,0,7375,7376,5,138,0,0,7376,7377,5,349,
		0,0,7377,7378,5,319,0,0,7378,7379,5,164,0,0,7379,7380,3,524,262,0,7380,
		7381,5,138,0,0,7381,7382,5,249,0,0,7382,7383,5,305,0,0,7383,7384,3,524,
		262,0,7384,7385,3,840,420,0,7385,7386,3,524,262,0,7386,7424,1,0,0,0,7387,
		7388,5,138,0,0,7388,7389,5,349,0,0,7389,7390,5,319,0,0,7390,7391,5,164,
		0,0,7391,7392,3,524,262,0,7392,7393,5,138,0,0,7393,7394,5,249,0,0,7394,
		7395,5,62,0,0,7395,7396,3,1338,669,0,7396,7397,5,305,0,0,7397,7398,3,524,
		262,0,7398,7399,3,840,420,0,7399,7400,3,524,262,0,7400,7424,1,0,0,0,7401,
		7402,5,138,0,0,7402,7403,5,349,0,0,7403,7404,5,319,0,0,7404,7405,5,164,
		0,0,7405,7406,3,524,262,0,7406,7407,5,192,0,0,7407,7408,5,249,0,0,7408,
		7409,5,62,0,0,7409,7410,3,1338,669,0,7410,7424,1,0,0,0,7411,7412,5,138,
		0,0,7412,7413,5,349,0,0,7413,7414,5,319,0,0,7414,7415,5,164,0,0,7415,7416,
		3,524,262,0,7416,7417,5,192,0,0,7417,7418,5,249,0,0,7418,7419,5,221,0,
		0,7419,7420,5,390,0,0,7420,7421,5,62,0,0,7421,7422,3,1338,669,0,7422,7424,
		1,0,0,0,7423,7351,1,0,0,0,7423,7363,1,0,0,0,7423,7375,1,0,0,0,7423,7387,
		1,0,0,0,7423,7401,1,0,0,0,7423,7411,1,0,0,0,7424,839,1,0,0,0,7425,7426,
		5,105,0,0,7426,841,1,0,0,0,7427,7428,5,46,0,0,7428,7429,3,488,244,0,7429,
		7430,5,169,0,0,7430,7431,3,524,262,0,7431,7432,5,62,0,0,7432,7433,3,1358,
		679,0,7433,7434,5,94,0,0,7434,7435,3,1358,679,0,7435,7436,5,64,0,0,7436,
		7437,3,524,262,0,7437,843,1,0,0,0,7438,7439,5,159,0,0,7439,7440,3,864,
		432,0,7440,7441,3,1336,668,0,7441,7442,3,846,423,0,7442,7452,1,0,0,0,7443,
		7444,5,159,0,0,7444,7452,3,864,432,0,7445,7446,5,159,0,0,7446,7447,3,864,
		432,0,7447,7448,3,1340,670,0,7448,7449,5,80,0,0,7449,7450,3,1336,668,0,
		7450,7452,1,0,0,0,7451,7438,1,0,0,0,7451,7443,1,0,0,0,7451,7445,1,0,0,
		0,7452,845,1,0,0,0,7453,7454,5,100,0,0,7454,7457,3,1340,670,0,7455,7457,
		1,0,0,0,7456,7453,1,0,0,0,7456,7455,1,0,0,0,7457,847,1,0,0,0,7458,7459,
		5,364,0,0,7459,7460,3,866,433,0,7460,7461,3,868,434,0,7461,7462,3,864,
		432,0,7462,7463,3,862,431,0,7463,7464,3,876,438,0,7464,7472,1,0,0,0,7465,
		7466,5,364,0,0,7466,7467,5,2,0,0,7467,7468,3,852,426,0,7468,7469,5,3,0,
		0,7469,7470,3,876,438,0,7470,7472,1,0,0,0,7471,7458,1,0,0,0,7471,7465,
		1,0,0,0,7472,849,1,0,0,0,7473,7474,3,854,427,0,7474,7475,3,864,432,0,7475,
		7476,3,876,438,0,7476,7484,1,0,0,0,7477,7478,3,854,427,0,7478,7479,5,2,
		0,0,7479,7480,3,852,426,0,7480,7481,5,3,0,0,7481,7482,3,876,438,0,7482,
		7484,1,0,0,0,7483,7473,1,0,0,0,7483,7477,1,0,0,0,7484,851,1,0,0,0,7485,
		7490,3,856,428,0,7486,7487,5,6,0,0,7487,7489,3,856,428,0,7488,7486,1,0,
		0,0,7489,7492,1,0,0,0,7490,7488,1,0,0,0,7490,7491,1,0,0,0,7491,853,1,0,
		0,0,7492,7490,1,0,0,0,7493,7494,7,34,0,0,7494,855,1,0,0,0,7495,7496,3,
		858,429,0,7496,7497,3,860,430,0,7497,857,1,0,0,0,7498,7501,3,1378,689,
		0,7499,7501,3,854,427,0,7500,7498,1,0,0,0,7500,7499,1,0,0,0,7501,859,1,
		0,0,0,7502,7506,3,66,33,0,7503,7506,3,292,146,0,7504,7506,1,0,0,0,7505,
		7502,1,0,0,0,7505,7503,1,0,0,0,7505,7504,1,0,0,0,7506,861,1,0,0,0,7507,
		7510,3,854,427,0,7508,7510,1,0,0,0,7509,7507,1,0,0,0,7509,7508,1,0,0,0,
		7510,863,1,0,0,0,7511,7514,5,128,0,0,7512,7514,1,0,0,0,7513,7511,1,0,0,
		0,7513,7512,1,0,0,0,7514,865,1,0,0,0,7515,7518,5,113,0,0,7516,7518,1,0,
		0,0,7517,7515,1,0,0,0,7517,7516,1,0,0,0,7518,867,1,0,0,0,7519,7522,5,112,
		0,0,7520,7522,1,0,0,0,7521,7519,1,0,0,0,7521,7520,1,0,0,0,7522,869,1,0,
		0,0,7523,7524,5,2,0,0,7524,7525,3,1338,669,0,7525,7526,5,3,0,0,7526,7529,
		1,0,0,0,7527,7529,1,0,0,0,7528,7523,1,0,0,0,7528,7527,1,0,0,0,7529,871,
		1,0,0,0,7530,7531,3,1336,668,0,7531,7532,3,870,435,0,7532,873,1,0,0,0,
		7533,7538,3,872,436,0,7534,7535,5,6,0,0,7535,7537,3,872,436,0,7536,7534,
		1,0,0,0,7537,7540,1,0,0,0,7538,7536,1,0,0,0,7538,7539,1,0,0,0,7539,875,
		1,0,0,0,7540,7538,1,0,0,0,7541,7544,3,874,437,0,7542,7544,1,0,0,0,7543,
		7541,1,0,0,0,7543,7542,1,0,0,0,7544,877,1,0,0,0,7545,7546,5,204,0,0,7546,
		7562,3,880,440,0,7547,7548,5,204,0,0,7548,7549,3,854,427,0,7549,7550,3,
		864,432,0,7550,7551,3,880,440,0,7551,7562,1,0,0,0,7552,7553,5,204,0,0,
		7553,7554,5,128,0,0,7554,7562,3,880,440,0,7555,7556,5,204,0,0,7556,7557,
		5,2,0,0,7557,7558,3,882,441,0,7558,7559,5,3,0,0,7559,7560,3,880,440,0,
		7560,7562,1,0,0,0,7561,7545,1,0,0,0,7561,7547,1,0,0,0,7561,7552,1,0,0,
		0,7561,7555,1,0,0,0,7562,879,1,0,0,0,7563,7573,3,960,480,0,7564,7573,3,
		902,451,0,7565,7573,3,942,471,0,7566,7573,3,928,464,0,7567,7573,3,952,
		476,0,7568,7573,3,264,132,0,7569,7573,3,270,135,0,7570,7573,3,276,138,
		0,7571,7573,3,896,448,0,7572,7563,1,0,0,0,7572,7564,1,0,0,0,7572,7565,
		1,0,0,0,7572,7566,1,0,0,0,7572,7567,1,0,0,0,7572,7568,1,0,0,0,7572,7569,
		1,0,0,0,7572,7570,1,0,0,0,7572,7571,1,0,0,0,7573,881,1,0,0,0,7574,7579,
		3,884,442,0,7575,7576,5,6,0,0,7576,7578,3,884,442,0,7577,7575,1,0,0,0,
		7578,7581,1,0,0,0,7579,7577,1,0,0,0,7579,7580,1,0,0,0,7580,883,1,0,0,0,
		7581,7579,1,0,0,0,7582,7583,3,886,443,0,7583,7584,3,888,444,0,7584,885,
		1,0,0,0,7585,7588,3,1378,689,0,7586,7588,3,854,427,0,7587,7585,1,0,0,0,
		7587,7586,1,0,0,0,7588,887,1,0,0,0,7589,7593,3,66,33,0,7590,7593,3,292,
		146,0,7591,7593,1,0,0,0,7592,7589,1,0,0,0,7592,7590,1,0,0,0,7592,7591,
		1,0,0,0,7593,889,1,0,0,0,7594,7595,5,284,0,0,7595,7596,3,1340,670,0,7596,
		7597,3,892,446,0,7597,7598,5,36,0,0,7598,7599,3,894,447,0,7599,891,1,0,
		0,0,7600,7601,5,2,0,0,7601,7602,3,1286,643,0,7602,7603,5,3,0,0,7603,7606,
		1,0,0,0,7604,7606,1,0,0,0,7605,7600,1,0,0,0,7605,7604,1,0,0,0,7606,893,
		1,0,0,0,7607,7612,3,960,480,0,7608,7612,3,902,451,0,7609,7612,3,942,471,
		0,7610,7612,3,928,464,0,7611,7607,1,0,0,0,7611,7608,1,0,0,0,7611,7609,
		1,0,0,0,7611,7610,1,0,0,0,7612,895,1,0,0,0,7613,7614,5,203,0,0,7614,7615,
		3,1340,670,0,7615,7616,3,898,449,0,7616,7641,1,0,0,0,7617,7618,5,46,0,
		0,7618,7619,3,174,87,0,7619,7620,5,92,0,0,7620,7621,3,266,133,0,7621,7622,
		5,36,0,0,7622,7623,5,203,0,0,7623,7624,3,1340,670,0,7624,7625,3,898,449,
		0,7625,7626,3,268,134,0,7626,7641,1,0,0,0,7627,7628,5,46,0,0,7628,7629,
		3,174,87,0,7629,7630,5,92,0,0,7630,7631,5,221,0,0,7631,7632,5,77,0,0,7632,
		7633,5,390,0,0,7633,7634,3,266,133,0,7634,7635,5,36,0,0,7635,7636,5,203,
		0,0,7636,7637,3,1340,670,0,7637,7638,3,898,449,0,7638,7639,3,268,134,0,
		7639,7641,1,0,0,0,7640,7613,1,0,0,0,7640,7617,1,0,0,0,7640,7627,1,0,0,
		0,7641,897,1,0,0,0,7642,7643,5,2,0,0,7643,7644,3,1280,640,0,7644,7645,
		5,3,0,0,7645,7648,1,0,0,0,7646,7648,1,0,0,0,7647,7642,1,0,0,0,7647,7646,
		1,0,0,0,7648,899,1,0,0,0,7649,7650,5,178,0,0,7650,7660,3,1340,670,0,7651,
		7652,5,178,0,0,7652,7653,5,284,0,0,7653,7660,3,1340,670,0,7654,7655,5,
		178,0,0,7655,7660,5,30,0,0,7656,7657,5,178,0,0,7657,7658,5,284,0,0,7658,
		7660,5,30,0,0,7659,7649,1,0,0,0,7659,7651,1,0,0,0,7659,7654,1,0,0,0,7659,
		7656,1,0,0,0,7660,901,1,0,0,0,7661,7662,3,980,490,0,7662,7663,5,233,0,
		0,7663,7664,5,71,0,0,7664,7665,3,904,452,0,7665,7666,3,906,453,0,7666,
		7667,3,914,457,0,7667,7668,3,918,459,0,7668,903,1,0,0,0,7669,7672,3,1336,
		668,0,7670,7671,5,36,0,0,7671,7673,3,1372,686,0,7672,7670,1,0,0,0,7672,
		7673,1,0,0,0,7673,905,1,0,0,0,7674,7694,3,960,480,0,7675,7676,5,464,0,
		0,7676,7677,3,908,454,0,7677,7678,5,451,0,0,7678,7679,3,960,480,0,7679,
		7694,1,0,0,0,7680,7681,5,2,0,0,7681,7682,3,910,455,0,7682,7687,5,3,0,0,
		7683,7684,5,464,0,0,7684,7685,3,908,454,0,7685,7686,5,451,0,0,7686,7688,
		1,0,0,0,7687,7683,1,0,0,0,7687,7688,1,0,0,0,7688,7689,1,0,0,0,7689,7690,
		3,960,480,0,7690,7694,1,0,0,0,7691,7692,5,53,0,0,7692,7694,5,416,0,0,7693,
		7674,1,0,0,0,7693,7675,1,0,0,0,7693,7680,1,0,0,0,7693,7691,1,0,0,0,7694,
		907,1,0,0,0,7695,7696,7,35,0,0,7696,909,1,0,0,0,7697,7702,3,912,456,0,
		7698,7699,5,6,0,0,7699,7701,3,912,456,0,7700,7698,1,0,0,0,7701,7704,1,
		0,0,0,7702,7700,1,0,0,0,7702,7703,1,0,0,0,7703,911,1,0,0,0,7704,7702,1,
		0,0,0,7705,7706,3,1372,686,0,7706,7707,3,1326,663,0,7707,913,1,0,0,0,7708,
		7709,5,80,0,0,7709,7710,5,465,0,0,7710,7711,3,916,458,0,7711,7718,5,57,
		0,0,7712,7713,5,363,0,0,7713,7714,5,327,0,0,7714,7715,3,944,472,0,7715,
		7716,3,1094,547,0,7716,7719,1,0,0,0,7717,7719,5,264,0,0,7718,7712,1,0,
		0,0,7718,7717,1,0,0,0,7719,7722,1,0,0,0,7720,7722,1,0,0,0,7721,7708,1,
		0,0,0,7721,7720,1,0,0,0,7722,915,1,0,0,0,7723,7724,5,2,0,0,7724,7725,3,
		598,299,0,7725,7726,5,3,0,0,7726,7727,3,1094,547,0,7727,7733,1,0,0,0,7728,
		7729,5,80,0,0,7729,7730,5,45,0,0,7730,7733,3,1340,670,0,7731,7733,1,0,
		0,0,7732,7723,1,0,0,0,7732,7728,1,0,0,0,7732,7731,1,0,0,0,7733,917,1,0,
		0,0,7734,7735,5,87,0,0,7735,7738,3,1330,665,0,7736,7738,1,0,0,0,7737,7734,
		1,0,0,0,7737,7736,1,0,0,0,7738,919,1,0,0,0,7739,7741,5,254,0,0,7740,7742,
		5,71,0,0,7741,7740,1,0,0,0,7741,7742,1,0,0,0,7742,7743,1,0,0,0,7743,7745,
		3,1336,668,0,7744,7746,3,1062,531,0,7745,7744,1,0,0,0,7745,7746,1,0,0,
		0,7746,7747,1,0,0,0,7747,7750,5,100,0,0,7748,7751,3,962,481,0,7749,7751,
		3,1336,668,0,7750,7748,1,0,0,0,7750,7749,1,0,0,0,7751,7753,1,0,0,0,7752,
		7754,3,1062,531,0,7753,7752,1,0,0,0,7753,7754,1,0,0,0,7754,7755,1,0,0,
		0,7755,7756,5,80,0,0,7756,7765,3,1162,581,0,7757,7759,3,922,461,0,7758,
		7760,3,924,462,0,7759,7758,1,0,0,0,7759,7760,1,0,0,0,7760,7766,1,0,0,0,
		7761,7763,3,924,462,0,7762,7764,3,922,461,0,7763,7762,1,0,0,0,7763,7764,
		1,0,0,0,7764,7766,1,0,0,0,7765,7757,1,0,0,0,7765,7761,1,0,0,0,7766,7768,
		1,0,0,0,7767,7769,3,926,463,0,7768,7767,1,0,0,0,7768,7769,1,0,0,0,7769,
		921,1,0,0,0,7770,7771,5,102,0,0,7771,7772,5,77,0,0,7772,7775,5,251,0,0,
		7773,7774,5,33,0,0,7774,7776,3,1162,581,0,7775,7773,1,0,0,0,7775,7776,
		1,0,0,0,7776,7778,1,0,0,0,7777,7779,5,93,0,0,7778,7777,1,0,0,0,7778,7779,
		1,0,0,0,7779,7780,1,0,0,0,7780,7785,5,233,0,0,7781,7782,5,2,0,0,7782,7783,
		3,910,455,0,7783,7784,5,3,0,0,7784,7786,1,0,0,0,7785,7781,1,0,0,0,7785,
		7786,1,0,0,0,7786,7787,1,0,0,0,7787,7788,3,1052,526,0,7788,923,1,0,0,0,
		7789,7790,5,102,0,0,7790,7793,5,251,0,0,7791,7792,5,33,0,0,7792,7794,3,
		1162,581,0,7793,7791,1,0,0,0,7793,7794,1,0,0,0,7794,7796,1,0,0,0,7795,
		7797,5,93,0,0,7796,7795,1,0,0,0,7796,7797,1,0,0,0,7797,7798,1,0,0,0,7798,
		7799,5,363,0,0,7799,7800,5,327,0,0,7800,7801,3,944,472,0,7801,925,1,0,
		0,0,7802,7803,5,102,0,0,7803,7805,5,251,0,0,7804,7806,5,93,0,0,7805,7804,
		1,0,0,0,7805,7806,1,0,0,0,7806,7807,1,0,0,0,7807,7808,5,183,0,0,7808,927,
		1,0,0,0,7809,7810,3,980,490,0,7810,7811,5,183,0,0,7811,7812,5,64,0,0,7812,
		7813,3,1078,539,0,7813,7814,3,930,465,0,7814,7815,3,1096,548,0,7815,7816,
		3,918,459,0,7816,929,1,0,0,0,7817,7818,5,100,0,0,7818,7821,3,1056,528,
		0,7819,7821,1,0,0,0,7820,7817,1,0,0,0,7820,7819,1,0,0,0,7821,931,1,0,0,
		0,7822,7823,5,248,0,0,7823,7824,3,988,494,0,7824,7825,3,1076,538,0,7825,
		7826,3,934,467,0,7826,7827,3,938,469,0,7827,933,1,0,0,0,7828,7829,5,68,
		0,0,7829,7830,3,936,468,0,7830,7831,5,257,0,0,7831,7834,1,0,0,0,7832,7834,
		1,0,0,0,7833,7828,1,0,0,0,7833,7832,1,0,0,0,7834,935,1,0,0,0,7835,7836,
		5,131,0,0,7836,7848,7,36,0,0,7837,7838,5,408,0,0,7838,7848,7,36,0,0,7839,
		7844,5,328,0,0,7840,7841,5,363,0,0,7841,7845,5,202,0,0,7842,7843,5,408,
		0,0,7843,7845,5,202,0,0,7844,7840,1,0,0,0,7844,7842,1,0,0,0,7844,7845,
		1,0,0,0,7845,7848,1,0,0,0,7846,7848,5,202,0,0,7847,7835,1,0,0,0,7847,7837,
		1,0,0,0,7847,7839,1,0,0,0,7847,7846,1,0,0,0,7848,937,1,0,0,0,7849,7852,
		5,266,0,0,7850,7852,1,0,0,0,7851,7849,1,0,0,0,7851,7850,1,0,0,0,7852,939,
		1,0,0,0,7853,7858,5,266,0,0,7854,7855,5,466,0,0,7855,7858,5,467,0,0,7856,
		7858,1,0,0,0,7857,7853,1,0,0,0,7857,7854,1,0,0,0,7857,7856,1,0,0,0,7858,
		941,1,0,0,0,7859,7860,3,980,490,0,7860,7861,5,363,0,0,7861,7862,3,1078,
		539,0,7862,7863,5,327,0,0,7863,7864,3,944,472,0,7864,7865,3,1054,527,0,
		7865,7866,3,1096,548,0,7866,7867,3,918,459,0,7867,943,1,0,0,0,7868,7873,
		3,946,473,0,7869,7870,5,6,0,0,7870,7872,3,946,473,0,7871,7869,1,0,0,0,
		7872,7875,1,0,0,0,7873,7871,1,0,0,0,7873,7874,1,0,0,0,7874,945,1,0,0,0,
		7875,7873,1,0,0,0,7876,7877,3,948,474,0,7877,7878,5,10,0,0,7878,7879,3,
		1162,581,0,7879,7887,1,0,0,0,7880,7881,5,2,0,0,7881,7882,3,950,475,0,7882,
		7883,5,3,0,0,7883,7884,5,10,0,0,7884,7885,3,1162,581,0,7885,7887,1,0,0,
		0,7886,7876,1,0,0,0,7886,7880,1,0,0,0,7887,947,1,0,0,0,7888,7889,3,1372,
		686,0,7889,7890,3,1326,663,0,7890,949,1,0,0,0,7891,7896,3,948,474,0,7892,
		7893,5,6,0,0,7893,7895,3,948,474,0,7894,7892,1,0,0,0,7895,7898,1,0,0,0,
		7896,7894,1,0,0,0,7896,7897,1,0,0,0,7897,951,1,0,0,0,7898,7896,1,0,0,0,
		7899,7900,5,179,0,0,7900,7901,3,954,477,0,7901,7902,3,956,478,0,7902,7903,
		5,173,0,0,7903,7904,3,958,479,0,7904,7905,5,62,0,0,7905,7906,3,960,480,
		0,7906,953,1,0,0,0,7907,7908,3,1340,670,0,7908,955,1,0,0,0,7909,7910,5,
		263,0,0,7910,7915,5,318,0,0,7911,7915,5,318,0,0,7912,7915,5,107,0,0,7913,
		7915,5,232,0,0,7914,7909,1,0,0,0,7914,7911,1,0,0,0,7914,7912,1,0,0,0,7914,
		7913,1,0,0,0,7915,7918,1,0,0,0,7916,7914,1,0,0,0,7916,7917,1,0,0,0,7917,
		957,1,0,0,0,7918,7916,1,0,0,0,7919,7925,1,0,0,0,7920,7921,5,105,0,0,7921,
		7925,5,218,0,0,7922,7923,5,373,0,0,7923,7925,5,218,0,0,7924,7919,1,0,0,
		0,7924,7920,1,0,0,0,7924,7922,1,0,0,0,7925,959,1,0,0,0,7926,7929,3,964,
		482,0,7927,7929,3,962,481,0,7928,7926,1,0,0,0,7928,7927,1,0,0,0,7929,961,
		1,0,0,0,7930,7931,5,2,0,0,7931,7932,3,964,482,0,7932,7933,5,3,0,0,7933,
		7939,1,0,0,0,7934,7935,5,2,0,0,7935,7936,3,962,481,0,7936,7937,5,3,0,0,
		7937,7939,1,0,0,0,7938,7930,1,0,0,0,7938,7934,1,0,0,0,7939,963,1,0,0,0,
		7940,7941,3,966,483,0,7941,7948,3,996,498,0,7942,7943,3,1040,520,0,7943,
		7944,3,1006,503,0,7944,7949,1,0,0,0,7945,7946,3,1004,502,0,7946,7947,3,
		1042,521,0,7947,7949,1,0,0,0,7948,7942,1,0,0,0,7948,7945,1,0,0,0,7948,
		7949,1,0,0,0,7949,7962,1,0,0,0,7950,7951,3,972,486,0,7951,7952,3,966,483,
		0,7952,7959,3,996,498,0,7953,7954,3,1040,520,0,7954,7955,3,1006,503,0,
		7955,7960,1,0,0,0,7956,7957,3,1004,502,0,7957,7958,3,1042,521,0,7958,7960,
		1,0,0,0,7959,7953,1,0,0,0,7959,7956,1,0,0,0,7959,7960,1,0,0,0,7960,7962,
		1,0,0,0,7961,7940,1,0,0,0,7961,7950,1,0,0,0,7962,965,1,0,0,0,7963,7970,
		3,968,484,0,7964,7965,7,37,0,0,7965,7966,3,990,495,0,7966,7967,3,968,484,
		0,7967,7969,1,0,0,0,7968,7964,1,0,0,0,7969,7972,1,0,0,0,7970,7968,1,0,
		0,0,7970,7971,1,0,0,0,7971,967,1,0,0,0,7972,7970,1,0,0,0,7973,7980,3,970,
		485,0,7974,7975,5,70,0,0,7975,7976,3,990,495,0,7976,7977,3,970,485,0,7977,
		7979,1,0,0,0,7978,7974,1,0,0,0,7979,7982,1,0,0,0,7980,7978,1,0,0,0,7980,
		7981,1,0,0,0,7981,969,1,0,0,0,7982,7980,1,0,0,0,7983,7991,5,88,0,0,7984,
		7985,3,994,497,0,7985,7986,3,982,491,0,7986,7987,3,1328,664,0,7987,7992,
		1,0,0,0,7988,7989,3,992,496,0,7989,7990,3,1330,665,0,7990,7992,1,0,0,0,
		7991,7984,1,0,0,0,7991,7988,1,0,0,0,7992,7993,1,0,0,0,7993,7994,3,982,
		491,0,7994,7995,3,1054,527,0,7995,7996,3,1094,547,0,7996,7997,3,1024,512,
		0,7997,7998,3,1038,519,0,7998,7999,3,1240,620,0,7999,8005,1,0,0,0,8000,
		8005,3,1052,526,0,8001,8002,5,92,0,0,8002,8005,3,1074,537,0,8003,8005,
		3,962,481,0,8004,7983,1,0,0,0,8004,8000,1,0,0,0,8004,8001,1,0,0,0,8004,
		8003,1,0,0,0,8005,971,1,0,0,0,8006,8008,5,105,0,0,8007,8009,5,297,0,0,
		8008,8007,1,0,0,0,8008,8009,1,0,0,0,8009,8010,1,0,0,0,8010,8011,3,974,
		487,0,8011,973,1,0,0,0,8012,8017,3,976,488,0,8013,8014,5,6,0,0,8014,8016,
		3,976,488,0,8015,8013,1,0,0,0,8016,8019,1,0,0,0,8017,8015,1,0,0,0,8017,
		8018,1,0,0,0,8018,975,1,0,0,0,8019,8017,1,0,0,0,8020,8021,3,1340,670,0,
		8021,8022,3,870,435,0,8022,8023,5,36,0,0,8023,8024,3,978,489,0,8024,8025,
		5,2,0,0,8025,8026,3,894,447,0,8026,8027,5,3,0,0,8027,977,1,0,0,0,8028,
		8033,5,252,0,0,8029,8030,5,77,0,0,8030,8033,5,252,0,0,8031,8033,1,0,0,
		0,8032,8028,1,0,0,0,8032,8029,1,0,0,0,8032,8031,1,0,0,0,8033,979,1,0,0,
		0,8034,8037,3,972,486,0,8035,8037,1,0,0,0,8036,8034,1,0,0,0,8036,8035,
		1,0,0,0,8037,981,1,0,0,0,8038,8043,5,71,0,0,8039,8040,3,984,492,0,8040,
		8041,3,986,493,0,8041,8044,1,0,0,0,8042,8044,3,1566,783,0,8043,8039,1,
		0,0,0,8043,8042,1,0,0,0,8044,8047,1,0,0,0,8045,8047,1,0,0,0,8046,8038,
		1,0,0,0,8046,8045,1,0,0,0,8047,983,1,0,0,0,8048,8051,1,0,0,0,8049,8051,
		5,340,0,0,8050,8048,1,0,0,0,8050,8049,1,0,0,0,8051,985,1,0,0,0,8052,8054,
		7,38,0,0,8053,8052,1,0,0,0,8053,8054,1,0,0,0,8054,8055,1,0,0,0,8055,8056,
		7,11,0,0,8056,8057,3,988,494,0,8057,8058,3,1336,668,0,8058,8067,1,0,0,
		0,8059,8060,5,361,0,0,8060,8061,3,988,494,0,8061,8062,3,1336,668,0,8062,
		8067,1,0,0,0,8063,8064,5,92,0,0,8064,8067,3,1336,668,0,8065,8067,3,1336,
		668,0,8066,8053,1,0,0,0,8066,8059,1,0,0,0,8066,8063,1,0,0,0,8066,8065,
		1,0,0,0,8067,987,1,0,0,0,8068,8071,5,92,0,0,8069,8071,1,0,0,0,8070,8068,
		1,0,0,0,8070,8069,1,0,0,0,8071,989,1,0,0,0,8072,8076,5,30,0,0,8073,8076,
		5,56,0,0,8074,8076,1,0,0,0,8075,8072,1,0,0,0,8075,8073,1,0,0,0,8075,8074,
		1,0,0,0,8076,991,1,0,0,0,8077,8083,5,56,0,0,8078,8079,5,80,0,0,8079,8080,
		5,2,0,0,8080,8081,3,1280,640,0,8081,8082,5,3,0,0,8082,8084,1,0,0,0,8083,
		8078,1,0,0,0,8083,8084,1,0,0,0,8084,993,1,0,0,0,8085,8088,5,30,0,0,8086,
		8088,1,0,0,0,8087,8085,1,0,0,0,8087,8086,1,0,0,0,8088,995,1,0,0,0,8089,
		8092,3,998,499,0,8090,8092,1,0,0,0,8091,8089,1,0,0,0,8091,8090,1,0,0,0,
		8092,997,1,0,0,0,8093,8094,5,83,0,0,8094,8095,5,148,0,0,8095,8096,3,1000,
		500,0,8096,999,1,0,0,0,8097,8102,3,1002,501,0,8098,8099,5,6,0,0,8099,8101,
		3,1002,501,0,8100,8098,1,0,0,0,8101,8104,1,0,0,0,8102,8100,1,0,0,0,8102,
		8103,1,0,0,0,8103,1001,1,0,0,0,8104,8102,1,0,0,0,8105,8109,3,1162,581,
		0,8106,8107,5,100,0,0,8107,8110,3,1276,638,0,8108,8110,3,612,306,0,8109,
		8106,1,0,0,0,8109,8108,1,0,0,0,8110,8111,1,0,0,0,8111,8112,3,614,307,0,
		8112,1003,1,0,0,0,8113,8115,3,1008,504,0,8114,8116,3,1010,505,0,8115,8114,
		1,0,0,0,8115,8116,1,0,0,0,8116,8122,1,0,0,0,8117,8119,3,1010,505,0,8118,
		8120,3,1008,504,0,8119,8118,1,0,0,0,8119,8120,1,0,0,0,8120,8122,1,0,0,
		0,8121,8113,1,0,0,0,8121,8117,1,0,0,0,8122,1005,1,0,0,0,8123,8126,3,1004,
		502,0,8124,8126,1,0,0,0,8125,8123,1,0,0,0,8125,8124,1,0,0,0,8126,1007,
		1,0,0,0,8127,8128,5,74,0,0,8128,8131,3,1012,506,0,8129,8130,5,6,0,0,8130,
		8132,3,1014,507,0,8131,8129,1,0,0,0,8131,8132,1,0,0,0,8132,8151,1,0,0,
		0,8133,8134,5,61,0,0,8134,8148,3,1022,511,0,8135,8136,3,1016,508,0,8136,
		8140,3,1020,510,0,8137,8141,5,81,0,0,8138,8139,5,105,0,0,8139,8141,5,468,
		0,0,8140,8137,1,0,0,0,8140,8138,1,0,0,0,8141,8149,1,0,0,0,8142,8146,3,
		1020,510,0,8143,8147,5,81,0,0,8144,8145,5,105,0,0,8145,8147,5,468,0,0,
		8146,8143,1,0,0,0,8146,8144,1,0,0,0,8147,8149,1,0,0,0,8148,8135,1,0,0,
		0,8148,8142,1,0,0,0,8149,8151,1,0,0,0,8150,8127,1,0,0,0,8150,8133,1,0,
		0,0,8151,1009,1,0,0,0,8152,8157,5,79,0,0,8153,8158,3,1014,507,0,8154,8155,
		3,1016,508,0,8155,8156,3,1020,510,0,8156,8158,1,0,0,0,8157,8153,1,0,0,
		0,8157,8154,1,0,0,0,8158,1011,1,0,0,0,8159,8162,3,1162,581,0,8160,8162,
		5,30,0,0,8161,8159,1,0,0,0,8161,8160,1,0,0,0,8162,1013,1,0,0,0,8163,8164,
		3,1162,581,0,8164,1015,1,0,0,0,8165,8171,3,1206,603,0,8166,8167,5,12,0,
		0,8167,8171,3,1018,509,0,8168,8169,5,13,0,0,8169,8171,3,1018,509,0,8170,
		8165,1,0,0,0,8170,8166,1,0,0,0,8170,8168,1,0,0,0,8171,1017,1,0,0,0,8172,
		8175,3,1356,678,0,8173,8175,3,1354,677,0,8174,8172,1,0,0,0,8174,8173,1,
		0,0,0,8175,1019,1,0,0,0,8176,8177,7,39,0,0,8177,1021,1,0,0,0,8178,8179,
		7,40,0,0,8179,1023,1,0,0,0,8180,8181,5,66,0,0,8181,8182,5,148,0,0,8182,
		8185,3,1026,513,0,8183,8185,1,0,0,0,8184,8180,1,0,0,0,8184,8183,1,0,0,
		0,8185,1025,1,0,0,0,8186,8191,3,1028,514,0,8187,8188,5,6,0,0,8188,8190,
		3,1028,514,0,8189,8187,1,0,0,0,8190,8193,1,0,0,0,8191,8189,1,0,0,0,8191,
		8192,1,0,0,0,8192,1027,1,0,0,0,8193,8191,1,0,0,0,8194,8200,3,1162,581,
		0,8195,8200,3,1030,515,0,8196,8200,3,1034,517,0,8197,8200,3,1032,516,0,
		8198,8200,3,1036,518,0,8199,8194,1,0,0,0,8199,8195,1,0,0,0,8199,8196,1,
		0,0,0,8199,8197,1,0,0,0,8199,8198,1,0,0,0,8200,1029,1,0,0,0,8201,8202,
		5,2,0,0,8202,8203,5,3,0,0,8203,1031,1,0,0,0,8204,8205,5,469,0,0,8205,8206,
		5,2,0,0,8206,8207,3,1280,640,0,8207,8208,5,3,0,0,8208,1033,1,0,0,0,8209,
		8210,5,470,0,0,8210,8211,5,2,0,0,8211,8212,3,1280,640,0,8212,8213,5,3,
		0,0,8213,1035,1,0,0,0,8214,8215,5,471,0,0,8215,8216,5,472,0,0,8216,8217,
		5,2,0,0,8217,8218,3,1026,513,0,8218,8219,5,3,0,0,8219,1037,1,0,0,0,8220,
		8221,5,67,0,0,8221,8224,3,1162,581,0,8222,8224,1,0,0,0,8223,8220,1,0,0,
		0,8223,8222,1,0,0,0,8224,1039,1,0,0,0,8225,8230,3,1044,522,0,8226,8227,
		5,62,0,0,8227,8228,5,294,0,0,8228,8230,5,81,0,0,8229,8225,1,0,0,0,8229,
		8226,1,0,0,0,8230,1041,1,0,0,0,8231,8234,3,1040,520,0,8232,8234,1,0,0,
		0,8233,8231,1,0,0,0,8233,8232,1,0,0,0,8234,1043,1,0,0,0,8235,8237,3,1046,
		523,0,8236,8235,1,0,0,0,8237,8238,1,0,0,0,8238,8236,1,0,0,0,8238,8239,
		1,0,0,0,8239,1045,1,0,0,0,8240,8241,3,1048,524,0,8241,8242,3,1050,525,
		0,8242,8243,3,940,470,0,8243,1047,1,0,0,0,8244,8254,5,62,0,0,8245,8246,
		5,263,0,0,8246,8248,5,237,0,0,8247,8245,1,0,0,0,8247,8248,1,0,0,0,8248,
		8249,1,0,0,0,8249,8255,5,363,0,0,8250,8252,5,237,0,0,8251,8250,1,0,0,0,
		8251,8252,1,0,0,0,8252,8253,1,0,0,0,8253,8255,5,328,0,0,8254,8247,1,0,
		0,0,8254,8251,1,0,0,0,8255,1049,1,0,0,0,8256,8257,5,269,0,0,8257,8260,
		3,1334,667,0,8258,8260,1,0,0,0,8259,8256,1,0,0,0,8259,8258,1,0,0,0,8260,
		1051,1,0,0,0,8261,8262,5,416,0,0,8262,8263,5,2,0,0,8263,8264,3,1280,640,
		0,8264,8272,5,3,0,0,8265,8266,5,6,0,0,8266,8267,5,2,0,0,8267,8268,3,1280,
		640,0,8268,8269,5,3,0,0,8269,8271,1,0,0,0,8270,8265,1,0,0,0,8271,8274,
		1,0,0,0,8272,8270,1,0,0,0,8272,8273,1,0,0,0,8273,1053,1,0,0,0,8274,8272,
		1,0,0,0,8275,8276,5,64,0,0,8276,8279,3,1056,528,0,8277,8279,1,0,0,0,8278,
		8275,1,0,0,0,8278,8277,1,0,0,0,8279,1055,1,0,0,0,8280,8290,3,1058,529,
		0,8281,8286,3,1060,530,0,8282,8283,5,6,0,0,8283,8285,3,1060,530,0,8284,
		8282,1,0,0,0,8285,8288,1,0,0,0,8286,8284,1,0,0,0,8286,8287,1,0,0,0,8287,
		8290,1,0,0,0,8288,8286,1,0,0,0,8289,8280,1,0,0,0,8289,8281,1,0,0,0,8290,
		1057,1,0,0,0,8291,8294,3,1060,530,0,8292,8293,5,6,0,0,8293,8295,3,1060,
		530,0,8294,8292,1,0,0,0,8295,8296,1,0,0,0,8296,8294,1,0,0,0,8296,8297,
		1,0,0,0,8297,1059,1,0,0,0,8298,8299,3,1074,537,0,8299,8301,3,1064,532,
		0,8300,8302,3,1080,540,0,8301,8300,1,0,0,0,8301,8302,1,0,0,0,8302,8348,
		1,0,0,0,8303,8304,3,1084,542,0,8304,8305,3,1068,534,0,8305,8348,1,0,0,
		0,8306,8307,3,1104,552,0,8307,8308,3,1064,532,0,8308,8348,1,0,0,0,8309,
		8310,3,962,481,0,8310,8311,3,1064,532,0,8311,8348,1,0,0,0,8312,8322,5,
		72,0,0,8313,8314,3,1104,552,0,8314,8315,3,1064,532,0,8315,8323,1,0,0,0,
		8316,8317,3,1084,542,0,8317,8318,3,1068,534,0,8318,8323,1,0,0,0,8319,8320,
		3,962,481,0,8320,8321,3,1064,532,0,8321,8323,1,0,0,0,8322,8313,1,0,0,0,
		8322,8316,1,0,0,0,8322,8319,1,0,0,0,8323,8348,1,0,0,0,8324,8325,5,2,0,
		0,8325,8342,3,1060,530,0,8326,8327,5,110,0,0,8327,8328,5,118,0,0,8328,
		8343,3,1060,530,0,8329,8331,5,121,0,0,8330,8332,3,1070,535,0,8331,8330,
		1,0,0,0,8331,8332,1,0,0,0,8332,8333,1,0,0,0,8333,8334,5,118,0,0,8334,8343,
		3,1060,530,0,8335,8337,3,1070,535,0,8336,8335,1,0,0,0,8336,8337,1,0,0,
		0,8337,8338,1,0,0,0,8338,8339,5,118,0,0,8339,8340,3,1060,530,0,8340,8341,
		3,1072,536,0,8341,8343,1,0,0,0,8342,8326,1,0,0,0,8342,8329,1,0,0,0,8342,
		8336,1,0,0,0,8342,8343,1,0,0,0,8343,8344,1,0,0,0,8344,8345,5,3,0,0,8345,
		8346,3,1064,532,0,8346,8348,1,0,0,0,8347,8298,1,0,0,0,8347,8303,1,0,0,
		0,8347,8306,1,0,0,0,8347,8309,1,0,0,0,8347,8312,1,0,0,0,8347,8324,1,0,
		0,0,8348,8367,1,0,0,0,8349,8350,5,110,0,0,8350,8351,5,118,0,0,8351,8366,
		3,1060,530,0,8352,8354,5,121,0,0,8353,8355,3,1070,535,0,8354,8353,1,0,
		0,0,8354,8355,1,0,0,0,8355,8356,1,0,0,0,8356,8357,5,118,0,0,8357,8366,
		3,1060,530,0,8358,8360,3,1070,535,0,8359,8358,1,0,0,0,8359,8360,1,0,0,
		0,8360,8361,1,0,0,0,8361,8362,5,118,0,0,8362,8363,3,1060,530,0,8363,8364,
		3,1072,536,0,8364,8366,1,0,0,0,8365,8349,1,0,0,0,8365,8352,1,0,0,0,8365,
		8359,1,0,0,0,8366,8369,1,0,0,0,8367,8365,1,0,0,0,8367,8368,1,0,0,0,8368,
		1061,1,0,0,0,8369,8367,1,0,0,0,8370,8372,5,36,0,0,8371,8370,1,0,0,0,8371,
		8372,1,0,0,0,8372,8373,1,0,0,0,8373,8378,3,1372,686,0,8374,8375,5,2,0,
		0,8375,8376,3,1338,669,0,8376,8377,5,3,0,0,8377,8379,1,0,0,0,8378,8374,
		1,0,0,0,8378,8379,1,0,0,0,8379,1063,1,0,0,0,8380,8383,3,1066,533,0,8381,
		8383,1,0,0,0,8382,8380,1,0,0,0,8382,8381,1,0,0,0,8383,1065,1,0,0,0,8384,
		8386,5,36,0,0,8385,8384,1,0,0,0,8385,8386,1,0,0,0,8386,8387,1,0,0,0,8387,
		8392,3,1374,687,0,8388,8389,5,2,0,0,8389,8390,3,1338,669,0,8390,8391,5,
		3,0,0,8391,8393,1,0,0,0,8392,8388,1,0,0,0,8392,8393,1,0,0,0,8393,1067,
		1,0,0,0,8394,8408,3,1062,531,0,8395,8397,5,36,0,0,8396,8398,3,1372,686,
		0,8397,8396,1,0,0,0,8397,8398,1,0,0,0,8398,8401,1,0,0,0,8399,8401,3,1372,
		686,0,8400,8395,1,0,0,0,8400,8399,1,0,0,0,8401,8402,1,0,0,0,8402,8403,
		5,2,0,0,8403,8404,3,1100,550,0,8404,8405,5,3,0,0,8405,8408,1,0,0,0,8406,
		8408,1,0,0,0,8407,8394,1,0,0,0,8407,8400,1,0,0,0,8407,8406,1,0,0,0,8408,
		1069,1,0,0,0,8409,8411,7,41,0,0,8410,8412,5,123,0,0,8411,8410,1,0,0,0,
		8411,8412,1,0,0,0,8412,1071,1,0,0,0,8413,8414,5,100,0,0,8414,8415,5,2,
		0,0,8415,8416,3,1338,669,0,8416,8417,5,3,0,0,8417,8421,1,0,0,0,8418,8419,
		5,80,0,0,8419,8421,3,1162,581,0,8420,8413,1,0,0,0,8420,8418,1,0,0,0,8421,
		1073,1,0,0,0,8422,8424,3,1336,668,0,8423,8425,5,9,0,0,8424,8423,1,0,0,
		0,8424,8425,1,0,0,0,8425,8435,1,0,0,0,8426,8432,5,81,0,0,8427,8433,3,1336,
		668,0,8428,8429,5,2,0,0,8429,8430,3,1336,668,0,8430,8431,5,3,0,0,8431,
		8433,1,0,0,0,8432,8427,1,0,0,0,8432,8428,1,0,0,0,8433,8435,1,0,0,0,8434,
		8422,1,0,0,0,8434,8426,1,0,0,0,8435,1075,1,0,0,0,8436,8441,3,1074,537,
		0,8437,8438,5,6,0,0,8438,8440,3,1074,537,0,8439,8437,1,0,0,0,8440,8443,
		1,0,0,0,8441,8439,1,0,0,0,8441,8442,1,0,0,0,8442,1077,1,0,0,0,8443,8441,
		1,0,0,0,8444,8449,3,1074,537,0,8445,8447,5,36,0,0,8446,8445,1,0,0,0,8446,
		8447,1,0,0,0,8447,8448,1,0,0,0,8448,8450,3,1372,686,0,8449,8446,1,0,0,
		0,8449,8450,1,0,0,0,8450,1079,1,0,0,0,8451,8452,5,473,0,0,8452,8453,3,
		1346,673,0,8453,8454,5,2,0,0,8454,8455,3,1280,640,0,8455,8456,5,3,0,0,
		8456,8457,3,1082,541,0,8457,1081,1,0,0,0,8458,8459,5,304,0,0,8459,8460,
		5,2,0,0,8460,8461,3,1162,581,0,8461,8462,5,3,0,0,8462,8465,1,0,0,0,8463,
		8465,1,0,0,0,8464,8458,1,0,0,0,8464,8463,1,0,0,0,8465,1083,1,0,0,0,8466,
		8467,3,1214,607,0,8467,8468,3,1092,546,0,8468,8477,1,0,0,0,8469,8470,5,
		314,0,0,8470,8471,5,64,0,0,8471,8472,5,2,0,0,8472,8473,3,1088,544,0,8473,
		8474,5,3,0,0,8474,8475,3,1092,546,0,8475,8477,1,0,0,0,8476,8466,1,0,0,
		0,8476,8469,1,0,0,0,8477,1085,1,0,0,0,8478,8479,3,1214,607,0,8479,8480,
		3,1090,545,0,8480,1087,1,0,0,0,8481,8486,3,1086,543,0,8482,8483,5,6,0,
		0,8483,8485,3,1086,543,0,8484,8482,1,0,0,0,8485,8488,1,0,0,0,8486,8484,
		1,0,0,0,8486,8487,1,0,0,0,8487,1089,1,0,0,0,8488,8486,1,0,0,0,8489,8490,
		5,36,0,0,8490,8491,5,2,0,0,8491,8492,3,1100,550,0,8492,8493,5,3,0,0,8493,
		8496,1,0,0,0,8494,8496,1,0,0,0,8495,8489,1,0,0,0,8495,8494,1,0,0,0,8496,
		1091,1,0,0,0,8497,8498,5,105,0,0,8498,8501,5,474,0,0,8499,8501,1,0,0,0,
		8500,8497,1,0,0,0,8500,8499,1,0,0,0,8501,1093,1,0,0,0,8502,8503,5,103,
		0,0,8503,8506,3,1162,581,0,8504,8506,1,0,0,0,8505,8502,1,0,0,0,8505,8504,
		1,0,0,0,8506,1095,1,0,0,0,8507,8512,5,103,0,0,8508,8509,5,435,0,0,8509,
		8510,5,269,0,0,8510,8513,3,954,477,0,8511,8513,3,1162,581,0,8512,8508,
		1,0,0,0,8512,8511,1,0,0,0,8513,8516,1,0,0,0,8514,8516,1,0,0,0,8515,8507,
		1,0,0,0,8515,8514,1,0,0,0,8516,1097,1,0,0,0,8517,8520,3,1100,550,0,8518,
		8520,1,0,0,0,8519,8517,1,0,0,0,8519,8518,1,0,0,0,8520,1099,1,0,0,0,8521,
		8526,3,1102,551,0,8522,8523,5,6,0,0,8523,8525,3,1102,551,0,8524,8522,1,
		0,0,0,8525,8528,1,0,0,0,8526,8524,1,0,0,0,8526,8527,1,0,0,0,8527,1101,
		1,0,0,0,8528,8526,1,0,0,0,8529,8530,3,1372,686,0,8530,8531,3,1118,559,
		0,8531,8532,3,110,55,0,8532,1103,1,0,0,0,8533,8534,5,475,0,0,8534,8550,
		5,2,0,0,8535,8536,3,1206,603,0,8536,8537,3,1232,616,0,8537,8538,5,476,
		0,0,8538,8539,3,1106,553,0,8539,8551,1,0,0,0,8540,8541,5,477,0,0,8541,
		8542,5,2,0,0,8542,8543,3,1114,557,0,8543,8544,5,3,0,0,8544,8545,5,6,0,
		0,8545,8546,3,1206,603,0,8546,8547,3,1232,616,0,8547,8548,5,476,0,0,8548,
		8549,3,1106,553,0,8549,8551,1,0,0,0,8550,8535,1,0,0,0,8550,8540,1,0,0,
		0,8551,8552,1,0,0,0,8552,8553,5,3,0,0,8553,1105,1,0,0,0,8554,8559,3,1108,
		554,0,8555,8556,5,6,0,0,8556,8558,3,1108,554,0,8557,8555,1,0,0,0,8558,
		8561,1,0,0,0,8559,8557,1,0,0,0,8559,8560,1,0,0,0,8560,1107,1,0,0,0,8561,
		8559,1,0,0,0,8562,8569,3,1372,686,0,8563,8565,3,1118,559,0,8564,8566,3,
		1110,555,0,8565,8564,1,0,0,0,8565,8566,1,0,0,0,8566,8570,1,0,0,0,8567,
		8568,5,62,0,0,8568,8570,5,474,0,0,8569,8563,1,0,0,0,8569,8567,1,0,0,0,
		8570,1109,1,0,0,0,8571,8573,3,1112,556,0,8572,8571,1,0,0,0,8573,8574,1,
		0,0,0,8574,8572,1,0,0,0,8574,8575,1,0,0,0,8575,1111,1,0,0,0,8576,8577,
		5,53,0,0,8577,8585,3,1162,581,0,8578,8579,3,1382,691,0,8579,8580,3,1162,
		581,0,8580,8585,1,0,0,0,8581,8582,5,77,0,0,8582,8585,5,78,0,0,8583,8585,
		5,78,0,0,8584,8576,1,0,0,0,8584,8578,1,0,0,0,8584,8581,1,0,0,0,8584,8583,
		1,0,0,0,8585,1113,1,0,0,0,8586,8591,3,1116,558,0,8587,8588,5,6,0,0,8588,
		8590,3,1116,558,0,8589,8587,1,0,0,0,8590,8593,1,0,0,0,8591,8589,1,0,0,
		0,8591,8592,1,0,0,0,8592,1115,1,0,0,0,8593,8591,1,0,0,0,8594,8595,3,1204,
		602,0,8595,8596,5,36,0,0,8596,8597,3,1380,690,0,8597,8601,1,0,0,0,8598,
		8599,5,53,0,0,8599,8601,3,1204,602,0,8600,8594,1,0,0,0,8600,8598,1,0,0,
		0,8601,1117,1,0,0,0,8602,8604,5,409,0,0,8603,8602,1,0,0,0,8603,8604,1,
		0,0,0,8604,8605,1,0,0,0,8605,8614,3,1122,561,0,8606,8615,3,1120,560,0,
		8607,8612,5,35,0,0,8608,8609,5,4,0,0,8609,8610,3,1356,678,0,8610,8611,
		5,5,0,0,8611,8613,1,0,0,0,8612,8608,1,0,0,0,8612,8613,1,0,0,0,8613,8615,
		1,0,0,0,8614,8606,1,0,0,0,8614,8607,1,0,0,0,8615,8621,1,0,0,0,8616,8617,
		3,1336,668,0,8617,8618,5,27,0,0,8618,8619,7,42,0,0,8619,8621,1,0,0,0,8620,
		8603,1,0,0,0,8620,8616,1,0,0,0,8621,1119,1,0,0,0,8622,8624,5,4,0,0,8623,
		8625,3,1356,678,0,8624,8623,1,0,0,0,8624,8625,1,0,0,0,8625,8626,1,0,0,
		0,8626,8628,5,5,0,0,8627,8622,1,0,0,0,8628,8631,1,0,0,0,8629,8627,1,0,
		0,0,8629,8630,1,0,0,0,8630,1121,1,0,0,0,8631,8629,1,0,0,0,8632,8646,3,
		1126,563,0,8633,8646,3,1130,565,0,8634,8646,3,1134,567,0,8635,8646,3,1142,
		571,0,8636,8646,3,1150,575,0,8637,8643,3,1152,576,0,8638,8644,3,1156,578,
		0,8639,8640,5,2,0,0,8640,8641,3,1356,678,0,8641,8642,5,3,0,0,8642,8644,
		1,0,0,0,8643,8638,1,0,0,0,8643,8639,1,0,0,0,8644,8646,1,0,0,0,8645,8632,
		1,0,0,0,8645,8633,1,0,0,0,8645,8634,1,0,0,0,8645,8635,1,0,0,0,8645,8636,
		1,0,0,0,8645,8637,1,0,0,0,8646,1123,1,0,0,0,8647,8652,3,1130,565,0,8648,
		8652,3,1136,568,0,8649,8652,3,1144,572,0,8650,8652,3,1150,575,0,8651,8647,
		1,0,0,0,8651,8648,1,0,0,0,8651,8649,1,0,0,0,8651,8650,1,0,0,0,8652,1125,
		1,0,0,0,8653,8658,3,1394,697,0,8654,8658,3,1376,688,0,8655,8658,5,119,
		0,0,8656,8658,5,126,0,0,8657,8653,1,0,0,0,8657,8654,1,0,0,0,8657,8655,
		1,0,0,0,8657,8656,1,0,0,0,8658,8660,1,0,0,0,8659,8661,3,526,263,0,8660,
		8659,1,0,0,0,8660,8661,1,0,0,0,8661,8662,1,0,0,0,8662,8663,3,1128,564,
		0,8663,1127,1,0,0,0,8664,8665,5,2,0,0,8665,8666,3,1280,640,0,8666,8667,
		5,3,0,0,8667,8670,1,0,0,0,8668,8670,1,0,0,0,8669,8664,1,0,0,0,8669,8668,
		1,0,0,0,8670,1129,1,0,0,0,8671,8688,5,395,0,0,8672,8688,5,396,0,0,8673,
		8688,5,410,0,0,8674,8688,5,382,0,0,8675,8688,5,407,0,0,8676,8677,5,392,
		0,0,8677,8688,3,1132,566,0,8678,8679,5,191,0,0,8679,8688,5,406,0,0,8680,
		8681,5,389,0,0,8681,8688,3,1128,564,0,8682,8683,5,388,0,0,8683,8688,3,
		1128,564,0,8684,8685,5,403,0,0,8685,8688,3,1128,564,0,8686,8688,5,384,
		0,0,8687,8671,1,0,0,0,8687,8672,1,0,0,0,8687,8673,1,0,0,0,8687,8674,1,
		0,0,0,8687,8675,1,0,0,0,8687,8676,1,0,0,0,8687,8678,1,0,0,0,8687,8680,
		1,0,0,0,8687,8682,1,0,0,0,8687,8684,1,0,0,0,8687,8686,1,0,0,0,8688,1131,
		1,0,0,0,8689,8690,5,2,0,0,8690,8691,3,1356,678,0,8691,8692,5,3,0,0,8692,
		8695,1,0,0,0,8693,8695,1,0,0,0,8694,8689,1,0,0,0,8694,8693,1,0,0,0,8695,
		1133,1,0,0,0,8696,8699,3,1138,569,0,8697,8699,3,1140,570,0,8698,8696,1,
		0,0,0,8698,8697,1,0,0,0,8699,1135,1,0,0,0,8700,8703,3,1138,569,0,8701,
		8703,3,1140,570,0,8702,8700,1,0,0,0,8702,8701,1,0,0,0,8703,1137,1,0,0,
		0,8704,8705,5,383,0,0,8705,8706,3,1148,574,0,8706,8707,5,2,0,0,8707,8708,
		3,1280,640,0,8708,8709,5,3,0,0,8709,1139,1,0,0,0,8710,8711,5,383,0,0,8711,
		8712,3,1148,574,0,8712,1141,1,0,0,0,8713,8718,3,1146,573,0,8714,8715,5,
		2,0,0,8715,8716,3,1356,678,0,8716,8717,5,3,0,0,8717,8719,1,0,0,0,8718,
		8714,1,0,0,0,8718,8719,1,0,0,0,8719,1143,1,0,0,0,8720,8725,3,1146,573,
		0,8721,8722,5,2,0,0,8722,8723,3,1356,678,0,8723,8724,5,3,0,0,8724,8726,
		1,0,0,0,8725,8721,1,0,0,0,8725,8726,1,0,0,0,8726,1145,1,0,0,0,8727,8728,
		7,43,0,0,8728,8734,3,1148,574,0,8729,8734,5,417,0,0,8730,8731,5,399,0,
		0,8731,8732,7,44,0,0,8732,8734,3,1148,574,0,8733,8727,1,0,0,0,8733,8729,
		1,0,0,0,8733,8730,1,0,0,0,8734,1147,1,0,0,0,8735,8738,5,368,0,0,8736,8738,
		1,0,0,0,8737,8735,1,0,0,0,8737,8736,1,0,0,0,8738,1149,1,0,0,0,8739,8744,
		7,45,0,0,8740,8741,5,2,0,0,8741,8742,3,1356,678,0,8742,8743,5,3,0,0,8743,
		8745,1,0,0,0,8744,8740,1,0,0,0,8744,8745,1,0,0,0,8745,8746,1,0,0,0,8746,
		8747,3,1154,577,0,8747,1151,1,0,0,0,8748,8749,5,397,0,0,8749,1153,1,0,
		0,0,8750,8751,5,105,0,0,8751,8752,5,412,0,0,8752,8758,5,380,0,0,8753,8754,
		5,373,0,0,8754,8755,5,412,0,0,8755,8758,5,380,0,0,8756,8758,1,0,0,0,8757,
		8750,1,0,0,0,8757,8753,1,0,0,0,8757,8756,1,0,0,0,8758,1155,1,0,0,0,8759,
		8786,5,378,0,0,8760,8786,5,258,0,0,8761,8786,5,177,0,0,8762,8786,5,219,
		0,0,8763,8786,5,255,0,0,8764,8786,3,1158,579,0,8765,8766,5,378,0,0,8766,
		8767,5,94,0,0,8767,8786,5,258,0,0,8768,8769,5,177,0,0,8769,8773,5,94,0,
		0,8770,8774,5,219,0,0,8771,8774,5,255,0,0,8772,8774,3,1158,579,0,8773,
		8770,1,0,0,0,8773,8771,1,0,0,0,8773,8772,1,0,0,0,8774,8786,1,0,0,0,8775,
		8776,5,219,0,0,8776,8779,5,94,0,0,8777,8780,5,255,0,0,8778,8780,3,1158,
		579,0,8779,8777,1,0,0,0,8779,8778,1,0,0,0,8780,8786,1,0,0,0,8781,8782,
		5,255,0,0,8782,8783,5,94,0,0,8783,8786,3,1158,579,0,8784,8786,1,0,0,0,
		8785,8759,1,0,0,0,8785,8760,1,0,0,0,8785,8761,1,0,0,0,8785,8762,1,0,0,
		0,8785,8763,1,0,0,0,8785,8764,1,0,0,0,8785,8765,1,0,0,0,8785,8768,1,0,
		0,0,8785,8775,1,0,0,0,8785,8781,1,0,0,0,8785,8784,1,0,0,0,8786,1157,1,
		0,0,0,8787,8792,5,320,0,0,8788,8789,5,2,0,0,8789,8790,3,1356,678,0,8790,
		8791,5,3,0,0,8791,8793,1,0,0,0,8792,8788,1,0,0,0,8792,8793,1,0,0,0,8793,
		1159,1,0,0,0,8794,8795,5,198,0,0,8795,8798,3,1162,581,0,8796,8798,1,0,
		0,0,8797,8794,1,0,0,0,8797,8796,1,0,0,0,8798,1161,1,0,0,0,8799,8800,3,
		1164,582,0,8800,1163,1,0,0,0,8801,8803,3,1166,583,0,8802,8804,3,1274,637,
		0,8803,8802,1,0,0,0,8803,8804,1,0,0,0,8804,1165,1,0,0,0,8805,8810,3,1168,
		584,0,8806,8807,7,46,0,0,8807,8809,3,1168,584,0,8808,8806,1,0,0,0,8809,
		8812,1,0,0,0,8810,8808,1,0,0,0,8810,8811,1,0,0,0,8811,1167,1,0,0,0,8812,
		8810,1,0,0,0,8813,8818,3,1170,585,0,8814,8815,5,82,0,0,8815,8817,3,1170,
		585,0,8816,8814,1,0,0,0,8817,8820,1,0,0,0,8818,8816,1,0,0,0,8818,8819,
		1,0,0,0,8819,1169,1,0,0,0,8820,8818,1,0,0,0,8821,8826,3,1172,586,0,8822,
		8823,5,33,0,0,8823,8825,3,1172,586,0,8824,8822,1,0,0,0,8825,8828,1,0,0,
		0,8826,8824,1,0,0,0,8826,8827,1,0,0,0,8827,1171,1,0,0,0,8828,8826,1,0,
		0,0,8829,8841,3,1174,587,0,8830,8832,5,77,0,0,8831,8830,1,0,0,0,8831,8832,
		1,0,0,0,8832,8833,1,0,0,0,8833,8835,5,381,0,0,8834,8836,5,91,0,0,8835,
		8834,1,0,0,0,8835,8836,1,0,0,0,8836,8837,1,0,0,0,8837,8838,3,1174,587,
		0,8838,8839,5,33,0,0,8839,8840,3,1174,587,0,8840,8842,1,0,0,0,8841,8831,
		1,0,0,0,8841,8842,1,0,0,0,8842,1173,1,0,0,0,8843,8849,3,1176,588,0,8844,
		8846,5,77,0,0,8845,8844,1,0,0,0,8845,8846,1,0,0,0,8846,8847,1,0,0,0,8847,
		8848,5,68,0,0,8848,8850,3,1306,653,0,8849,8845,1,0,0,0,8849,8850,1,0,0,
		0,8850,1175,1,0,0,0,8851,8853,5,77,0,0,8852,8851,1,0,0,0,8852,8853,1,0,
		0,0,8853,8854,1,0,0,0,8854,8855,3,1178,589,0,8855,1177,1,0,0,0,8856,8858,
		3,1180,590,0,8857,8859,7,47,0,0,8858,8857,1,0,0,0,8858,8859,1,0,0,0,8859,
		1179,1,0,0,0,8860,8884,3,1182,591,0,8861,8863,5,116,0,0,8862,8864,5,77,
		0,0,8863,8862,1,0,0,0,8863,8864,1,0,0,0,8864,8882,1,0,0,0,8865,8883,5,
		78,0,0,8866,8883,5,96,0,0,8867,8883,5,60,0,0,8868,8883,5,359,0,0,8869,
		8870,5,56,0,0,8870,8871,5,64,0,0,8871,8883,3,1162,581,0,8872,8873,5,269,
		0,0,8873,8874,5,2,0,0,8874,8875,3,1286,643,0,8875,8876,5,3,0,0,8876,8883,
		1,0,0,0,8877,8883,5,189,0,0,8878,8880,3,1296,648,0,8879,8878,1,0,0,0,8879,
		8880,1,0,0,0,8880,8881,1,0,0,0,8881,8883,5,479,0,0,8882,8865,1,0,0,0,8882,
		8866,1,0,0,0,8882,8867,1,0,0,0,8882,8868,1,0,0,0,8882,8869,1,0,0,0,8882,
		8872,1,0,0,0,8882,8877,1,0,0,0,8882,8879,1,0,0,0,8883,8885,1,0,0,0,8884,
		8861,1,0,0,0,8884,8885,1,0,0,0,8885,1181,1,0,0,0,8886,8898,3,1184,592,
		0,8887,8888,7,48,0,0,8888,8899,3,1184,592,0,8889,8890,3,1278,639,0,8890,
		8896,3,1268,634,0,8891,8897,3,962,481,0,8892,8893,5,2,0,0,8893,8894,3,
		1162,581,0,8894,8895,5,3,0,0,8895,8897,1,0,0,0,8896,8891,1,0,0,0,8896,
		8892,1,0,0,0,8897,8899,1,0,0,0,8898,8887,1,0,0,0,8898,8889,1,0,0,0,8898,
		8899,1,0,0,0,8899,1183,1,0,0,0,8900,8913,3,1186,593,0,8901,8903,5,77,0,
		0,8902,8901,1,0,0,0,8902,8903,1,0,0,0,8903,8908,1,0,0,0,8904,8909,5,120,
		0,0,8905,8909,5,114,0,0,8906,8907,5,127,0,0,8907,8909,5,94,0,0,8908,8904,
		1,0,0,0,8908,8905,1,0,0,0,8908,8906,1,0,0,0,8909,8910,1,0,0,0,8910,8911,
		3,1186,593,0,8911,8912,3,1160,580,0,8912,8914,1,0,0,0,8913,8902,1,0,0,
		0,8913,8914,1,0,0,0,8914,1185,1,0,0,0,8915,8921,3,1188,594,0,8916,8917,
		3,1274,637,0,8917,8918,3,1188,594,0,8918,8920,1,0,0,0,8919,8916,1,0,0,
		0,8920,8923,1,0,0,0,8921,8919,1,0,0,0,8921,8922,1,0,0,0,8922,1187,1,0,
		0,0,8923,8921,1,0,0,0,8924,8926,3,1274,637,0,8925,8924,1,0,0,0,8925,8926,
		1,0,0,0,8926,8927,1,0,0,0,8927,8928,3,1190,595,0,8928,1189,1,0,0,0,8929,
		8934,3,1192,596,0,8930,8931,7,49,0,0,8931,8933,3,1192,596,0,8932,8930,
		1,0,0,0,8933,8936,1,0,0,0,8934,8932,1,0,0,0,8934,8935,1,0,0,0,8935,1191,
		1,0,0,0,8936,8934,1,0,0,0,8937,8942,3,1194,597,0,8938,8939,7,50,0,0,8939,
		8941,3,1194,597,0,8940,8938,1,0,0,0,8941,8944,1,0,0,0,8942,8940,1,0,0,
		0,8942,8943,1,0,0,0,8943,1193,1,0,0,0,8944,8942,1,0,0,0,8945,8948,3,1196,
		598,0,8946,8947,5,15,0,0,8947,8949,3,1162,581,0,8948,8946,1,0,0,0,8948,
		8949,1,0,0,0,8949,1195,1,0,0,0,8950,8952,7,49,0,0,8951,8950,1,0,0,0,8951,
		8952,1,0,0,0,8952,8953,1,0,0,0,8953,8954,3,1198,599,0,8954,1197,1,0,0,
		0,8955,8960,3,1200,600,0,8956,8957,5,142,0,0,8957,8958,5,412,0,0,8958,
		8959,5,380,0,0,8959,8961,3,1162,581,0,8960,8956,1,0,0,0,8960,8961,1,0,
		0,0,8961,1199,1,0,0,0,8962,8965,3,1202,601,0,8963,8964,5,43,0,0,8964,8966,
		3,524,262,0,8965,8963,1,0,0,0,8965,8966,1,0,0,0,8966,1201,1,0,0,0,8967,
		8972,3,1206,603,0,8968,8969,5,26,0,0,8969,8971,3,1118,559,0,8970,8968,
		1,0,0,0,8971,8974,1,0,0,0,8972,8970,1,0,0,0,8972,8973,1,0,0,0,8973,1203,
		1,0,0,0,8974,8972,1,0,0,0,8975,8976,6,602,-1,0,8976,8983,3,1206,603,0,
		8977,8978,7,49,0,0,8978,8983,3,1204,602,9,8979,8980,3,1274,637,0,8980,
		8981,3,1204,602,3,8981,8983,1,0,0,0,8982,8975,1,0,0,0,8982,8977,1,0,0,
		0,8982,8979,1,0,0,0,8983,9023,1,0,0,0,8984,8985,10,8,0,0,8985,8986,5,15,
		0,0,8986,9022,3,1204,602,9,8987,8988,10,7,0,0,8988,8989,7,50,0,0,8989,
		9022,3,1204,602,8,8990,8991,10,6,0,0,8991,8992,7,49,0,0,8992,9022,3,1204,
		602,7,8993,8994,10,5,0,0,8994,8995,3,1274,637,0,8995,8996,3,1204,602,6,
		8996,9022,1,0,0,0,8997,8998,10,4,0,0,8998,8999,7,48,0,0,8999,9022,3,1204,
		602,5,9000,9001,10,10,0,0,9001,9002,5,26,0,0,9002,9022,3,1118,559,0,9003,
		9004,10,2,0,0,9004,9022,3,1274,637,0,9005,9006,10,1,0,0,9006,9008,5,116,
		0,0,9007,9009,5,77,0,0,9008,9007,1,0,0,0,9008,9009,1,0,0,0,9009,9019,1,
		0,0,0,9010,9011,5,56,0,0,9011,9012,5,64,0,0,9012,9020,3,1204,602,0,9013,
		9014,5,269,0,0,9014,9015,5,2,0,0,9015,9016,3,1286,643,0,9016,9017,5,3,
		0,0,9017,9020,1,0,0,0,9018,9020,5,189,0,0,9019,9010,1,0,0,0,9019,9013,
		1,0,0,0,9019,9018,1,0,0,0,9020,9022,1,0,0,0,9021,8984,1,0,0,0,9021,8987,
		1,0,0,0,9021,8990,1,0,0,0,9021,8993,1,0,0,0,9021,8997,1,0,0,0,9021,9000,
		1,0,0,0,9021,9003,1,0,0,0,9021,9005,1,0,0,0,9022,9025,1,0,0,0,9023,9021,
		1,0,0,0,9023,9024,1,0,0,0,9024,1205,1,0,0,0,9025,9023,1,0,0,0,9026,9027,
		5,390,0,0,9027,9063,3,962,481,0,9028,9031,5,35,0,0,9029,9032,3,962,481,
		0,9030,9032,3,1288,644,0,9031,9029,1,0,0,0,9031,9030,1,0,0,0,9032,9063,
		1,0,0,0,9033,9034,5,28,0,0,9034,9063,3,1326,663,0,9035,9036,5,471,0,0,
		9036,9037,5,2,0,0,9037,9038,3,1280,640,0,9038,9039,5,3,0,0,9039,9063,1,
		0,0,0,9040,9041,5,98,0,0,9041,9063,3,962,481,0,9042,9063,3,1318,659,0,
		9043,9063,3,1348,674,0,9044,9063,3,1208,604,0,9045,9046,5,2,0,0,9046,9047,
		3,1162,581,0,9047,9048,5,3,0,0,9048,9049,3,1326,663,0,9049,9063,1,0,0,
		0,9050,9063,3,1308,654,0,9051,9063,3,1212,606,0,9052,9054,3,962,481,0,
		9053,9055,3,1324,662,0,9054,9053,1,0,0,0,9054,9055,1,0,0,0,9055,9063,1,
		0,0,0,9056,9063,3,1264,632,0,9057,9063,3,1266,633,0,9058,9059,3,1262,631,
		0,9059,9060,5,125,0,0,9060,9061,3,1262,631,0,9061,9063,1,0,0,0,9062,9026,
		1,0,0,0,9062,9028,1,0,0,0,9062,9033,1,0,0,0,9062,9035,1,0,0,0,9062,9040,
		1,0,0,0,9062,9042,1,0,0,0,9062,9043,1,0,0,0,9062,9044,1,0,0,0,9062,9045,
		1,0,0,0,9062,9050,1,0,0,0,9062,9051,1,0,0,0,9062,9052,1,0,0,0,9062,9056,
		1,0,0,0,9062,9057,1,0,0,0,9062,9058,1,0,0,0,9063,1207,1,0,0,0,9064,9065,
		5,662,0,0,9065,1209,1,0,0,0,9066,9067,3,1346,673,0,9067,9086,5,2,0,0,9068,
		9072,3,1282,641,0,9069,9070,5,6,0,0,9070,9071,5,101,0,0,9071,9073,3,1284,
		642,0,9072,9069,1,0,0,0,9072,9073,1,0,0,0,9073,9074,1,0,0,0,9074,9075,
		3,996,498,0,9075,9087,1,0,0,0,9076,9077,5,101,0,0,9077,9078,3,1284,642,
		0,9078,9079,3,996,498,0,9079,9087,1,0,0,0,9080,9081,7,51,0,0,9081,9082,
		3,1282,641,0,9082,9083,3,996,498,0,9083,9087,1,0,0,0,9084,9087,5,9,0,0,
		9085,9087,1,0,0,0,9086,9068,1,0,0,0,9086,9076,1,0,0,0,9086,9080,1,0,0,
		0,9086,9084,1,0,0,0,9086,9085,1,0,0,0,9087,9088,1,0,0,0,9088,9089,5,3,
		0,0,9089,1211,1,0,0,0,9090,9091,3,1210,605,0,9091,9092,3,1236,618,0,9092,
		9093,3,1238,619,0,9093,9094,3,1246,623,0,9094,9097,1,0,0,0,9095,9097,3,
		1216,608,0,9096,9090,1,0,0,0,9096,9095,1,0,0,0,9097,1213,1,0,0,0,9098,
		9101,3,1210,605,0,9099,9101,3,1216,608,0,9100,9098,1,0,0,0,9100,9099,1,
		0,0,0,9101,1215,1,0,0,0,9102,9103,5,108,0,0,9103,9104,5,62,0,0,9104,9105,
		5,2,0,0,9105,9106,3,1162,581,0,9106,9107,5,3,0,0,9107,9280,1,0,0,0,9108,
		9280,5,48,0,0,9109,9114,5,50,0,0,9110,9111,5,2,0,0,9111,9112,3,1356,678,
		0,9112,9113,5,3,0,0,9113,9115,1,0,0,0,9114,9110,1,0,0,0,9114,9115,1,0,
		0,0,9115,9280,1,0,0,0,9116,9121,5,51,0,0,9117,9118,5,2,0,0,9118,9119,3,
		1356,678,0,9119,9120,5,3,0,0,9120,9122,1,0,0,0,9121,9117,1,0,0,0,9121,
		9122,1,0,0,0,9122,9280,1,0,0,0,9123,9128,5,75,0,0,9124,9125,5,2,0,0,9125,
		9126,3,1356,678,0,9126,9127,5,3,0,0,9127,9129,1,0,0,0,9128,9124,1,0,0,
		0,9128,9129,1,0,0,0,9129,9280,1,0,0,0,9130,9135,5,76,0,0,9131,9132,5,2,
		0,0,9132,9133,3,1356,678,0,9133,9134,5,3,0,0,9134,9136,1,0,0,0,9135,9131,
		1,0,0,0,9135,9136,1,0,0,0,9136,9280,1,0,0,0,9137,9280,5,49,0,0,9138,9280,
		5,52,0,0,9139,9280,5,89,0,0,9140,9280,5,99,0,0,9141,9280,5,47,0,0,9142,
		9280,5,111,0,0,9143,9144,5,41,0,0,9144,9145,5,2,0,0,9145,9146,3,1162,581,
		0,9146,9147,5,36,0,0,9147,9148,3,1118,559,0,9148,9149,5,3,0,0,9149,9280,
		1,0,0,0,9150,9151,5,391,0,0,9151,9152,5,2,0,0,9152,9153,3,1292,646,0,9153,
		9154,5,3,0,0,9154,9280,1,0,0,0,9155,9156,5,490,0,0,9156,9157,5,2,0,0,9157,
		9160,3,1162,581,0,9158,9159,5,6,0,0,9159,9161,3,1296,648,0,9160,9158,1,
		0,0,0,9160,9161,1,0,0,0,9161,9162,1,0,0,0,9162,9163,5,3,0,0,9163,9280,
		1,0,0,0,9164,9165,5,404,0,0,9165,9166,5,2,0,0,9166,9167,3,1298,649,0,9167,
		9168,5,3,0,0,9168,9280,1,0,0,0,9169,9170,5,405,0,0,9170,9171,5,2,0,0,9171,
		9172,3,1300,650,0,9172,9173,5,3,0,0,9173,9280,1,0,0,0,9174,9175,5,411,
		0,0,9175,9176,5,2,0,0,9176,9177,3,1302,651,0,9177,9178,5,3,0,0,9178,9280,
		1,0,0,0,9179,9180,5,414,0,0,9180,9181,5,2,0,0,9181,9182,3,1162,581,0,9182,
		9183,5,36,0,0,9183,9184,3,1118,559,0,9184,9185,5,3,0,0,9185,9280,1,0,0,
		0,9186,9187,5,415,0,0,9187,9189,5,2,0,0,9188,9190,7,52,0,0,9189,9188,1,
		0,0,0,9189,9190,1,0,0,0,9190,9191,1,0,0,0,9191,9192,3,1304,652,0,9192,
		9193,5,3,0,0,9193,9280,1,0,0,0,9194,9195,5,402,0,0,9195,9196,5,2,0,0,9196,
		9197,3,1162,581,0,9197,9198,5,6,0,0,9198,9199,3,1162,581,0,9199,9200,5,
		3,0,0,9200,9280,1,0,0,0,9201,9202,5,387,0,0,9202,9203,5,2,0,0,9203,9204,
		3,1280,640,0,9204,9205,5,3,0,0,9205,9280,1,0,0,0,9206,9207,5,393,0,0,9207,
		9208,5,2,0,0,9208,9209,3,1280,640,0,9209,9210,5,3,0,0,9210,9280,1,0,0,
		0,9211,9212,5,398,0,0,9212,9213,5,2,0,0,9213,9214,3,1280,640,0,9214,9215,
		5,3,0,0,9215,9280,1,0,0,0,9216,9217,5,426,0,0,9217,9218,5,2,0,0,9218,9219,
		3,1280,640,0,9219,9220,5,3,0,0,9220,9280,1,0,0,0,9221,9222,5,427,0,0,9222,
		9223,5,2,0,0,9223,9224,5,260,0,0,9224,9230,3,1380,690,0,9225,9228,5,6,
		0,0,9226,9229,3,1222,611,0,9227,9229,3,1280,640,0,9228,9226,1,0,0,0,9228,
		9227,1,0,0,0,9229,9231,1,0,0,0,9230,9225,1,0,0,0,9230,9231,1,0,0,0,9231,
		9232,1,0,0,0,9232,9233,5,3,0,0,9233,9280,1,0,0,0,9234,9235,5,428,0,0,9235,
		9236,5,2,0,0,9236,9237,3,1206,603,0,9237,9238,3,1232,616,0,9238,9239,5,
		3,0,0,9239,9280,1,0,0,0,9240,9241,5,429,0,0,9241,9242,5,2,0,0,9242,9243,
		3,1224,612,0,9243,9244,5,3,0,0,9244,9280,1,0,0,0,9245,9246,5,430,0,0,9246,
		9247,5,2,0,0,9247,9248,3,1228,614,0,9248,9249,3,1162,581,0,9249,9250,3,
		1230,615,0,9250,9251,5,3,0,0,9251,9280,1,0,0,0,9252,9253,5,431,0,0,9253,
		9254,5,2,0,0,9254,9255,5,260,0,0,9255,9258,3,1380,690,0,9256,9257,5,6,
		0,0,9257,9259,3,1162,581,0,9258,9256,1,0,0,0,9258,9259,1,0,0,0,9259,9260,
		1,0,0,0,9260,9261,5,3,0,0,9261,9280,1,0,0,0,9262,9263,5,432,0,0,9263,9264,
		5,2,0,0,9264,9265,5,377,0,0,9265,9266,3,1162,581,0,9266,9267,5,6,0,0,9267,
		9268,3,1218,609,0,9268,9269,3,1220,610,0,9269,9270,5,3,0,0,9270,9280,1,
		0,0,0,9271,9272,5,433,0,0,9272,9273,5,2,0,0,9273,9274,3,1228,614,0,9274,
		9275,3,1162,581,0,9275,9276,5,36,0,0,9276,9277,3,1122,561,0,9277,9278,
		5,3,0,0,9278,9280,1,0,0,0,9279,9102,1,0,0,0,9279,9108,1,0,0,0,9279,9109,
		1,0,0,0,9279,9116,1,0,0,0,9279,9123,1,0,0,0,9279,9130,1,0,0,0,9279,9137,
		1,0,0,0,9279,9138,1,0,0,0,9279,9139,1,0,0,0,9279,9140,1,0,0,0,9279,9141,
		1,0,0,0,9279,9142,1,0,0,0,9279,9143,1,0,0,0,9279,9150,1,0,0,0,9279,9155,
		1,0,0,0,9279,9164,1,0,0,0,9279,9169,1,0,0,0,9279,9174,1,0,0,0,9279,9179,
		1,0,0,0,9279,9186,1,0,0,0,9279,9194,1,0,0,0,9279,9201,1,0,0,0,9279,9206,
		1,0,0,0,9279,9211,1,0,0,0,9279,9216,1,0,0,0,9279,9221,1,0,0,0,9279,9234,
		1,0,0,0,9279,9240,1,0,0,0,9279,9245,1,0,0,0,9279,9252,1,0,0,0,9279,9262,
		1,0,0,0,9279,9271,1,0,0,0,9280,1217,1,0,0,0,9281,9282,5,369,0,0,9282,9287,
		3,1162,581,0,9283,9284,5,369,0,0,9284,9285,5,263,0,0,9285,9287,5,451,0,
		0,9286,9281,1,0,0,0,9286,9283,1,0,0,0,9287,1219,1,0,0,0,9288,9289,5,6,
		0,0,9289,9290,5,333,0,0,9290,9300,5,379,0,0,9291,9292,5,6,0,0,9292,9293,
		5,333,0,0,9293,9300,5,263,0,0,9294,9295,5,6,0,0,9295,9296,5,333,0,0,9296,
		9297,5,263,0,0,9297,9300,5,451,0,0,9298,9300,1,0,0,0,9299,9288,1,0,0,0,
		9299,9291,1,0,0,0,9299,9294,1,0,0,0,9299,9298,1,0,0,0,9300,1221,1,0,0,
		0,9301,9302,5,418,0,0,9302,9303,5,2,0,0,9303,9304,3,1224,612,0,9304,9305,
		5,3,0,0,9305,1223,1,0,0,0,9306,9311,3,1226,613,0,9307,9308,5,6,0,0,9308,
		9310,3,1226,613,0,9309,9307,1,0,0,0,9310,9313,1,0,0,0,9311,9309,1,0,0,
		0,9311,9312,1,0,0,0,9312,1225,1,0,0,0,9313,9311,1,0,0,0,9314,9317,3,1162,
		581,0,9315,9316,5,36,0,0,9316,9318,3,1380,690,0,9317,9315,1,0,0,0,9317,
		9318,1,0,0,0,9318,1227,1,0,0,0,9319,9320,7,53,0,0,9320,1229,1,0,0,0,9321,
		9322,5,286,0,0,9322,9327,5,372,0,0,9323,9324,5,341,0,0,9324,9327,5,372,
		0,0,9325,9327,1,0,0,0,9326,9321,1,0,0,0,9326,9323,1,0,0,0,9326,9325,1,
		0,0,0,9327,1231,1,0,0,0,9328,9329,5,280,0,0,9329,9344,3,1206,603,0,9330,
		9331,5,280,0,0,9331,9332,3,1206,603,0,9332,9333,3,1234,617,0,9333,9344,
		1,0,0,0,9334,9335,5,280,0,0,9335,9336,3,1234,617,0,9336,9337,3,1206,603,
		0,9337,9344,1,0,0,0,9338,9339,5,280,0,0,9339,9340,3,1234,617,0,9340,9341,
		3,1206,603,0,9341,9342,3,1234,617,0,9342,9344,1,0,0,0,9343,9328,1,0,0,
		0,9343,9330,1,0,0,0,9343,9334,1,0,0,0,9343,9338,1,0,0,0,9344,1233,1,0,
		0,0,9345,9346,5,148,0,0,9346,9347,7,54,0,0,9347,1235,1,0,0,0,9348,9349,
		5,480,0,0,9349,9350,5,66,0,0,9350,9351,5,2,0,0,9351,9352,3,998,499,0,9352,
		9353,5,3,0,0,9353,9356,1,0,0,0,9354,9356,1,0,0,0,9355,9348,1,0,0,0,9355,
		9354,1,0,0,0,9356,1237,1,0,0,0,9357,9358,5,481,0,0,9358,9359,5,2,0,0,9359,
		9360,5,103,0,0,9360,9361,3,1162,581,0,9361,9362,5,3,0,0,9362,9365,1,0,
		0,0,9363,9365,1,0,0,0,9364,9357,1,0,0,0,9364,9363,1,0,0,0,9365,1239,1,
		0,0,0,9366,9367,5,104,0,0,9367,9370,3,1242,621,0,9368,9370,1,0,0,0,9369,
		9366,1,0,0,0,9369,9368,1,0,0,0,9370,1241,1,0,0,0,9371,9376,3,1244,622,
		0,9372,9373,5,6,0,0,9373,9375,3,1244,622,0,9374,9372,1,0,0,0,9375,9378,
		1,0,0,0,9376,9374,1,0,0,0,9376,9377,1,0,0,0,9377,1243,1,0,0,0,9378,9376,
		1,0,0,0,9379,9380,3,1372,686,0,9380,9381,5,36,0,0,9381,9382,3,1248,624,
		0,9382,1245,1,0,0,0,9383,9386,5,124,0,0,9384,9387,3,1248,624,0,9385,9387,
		3,1372,686,0,9386,9384,1,0,0,0,9386,9385,1,0,0,0,9387,9390,1,0,0,0,9388,
		9390,1,0,0,0,9389,9383,1,0,0,0,9389,9388,1,0,0,0,9390,1247,1,0,0,0,9391,
		9392,5,2,0,0,9392,9393,3,1250,625,0,9393,9394,3,1252,626,0,9394,9395,3,
		996,498,0,9395,9396,3,1254,627,0,9396,9397,5,3,0,0,9397,1249,1,0,0,0,9398,
		9401,3,1372,686,0,9399,9401,1,0,0,0,9400,9398,1,0,0,0,9400,9399,1,0,0,
		0,9401,1251,1,0,0,0,9402,9403,5,279,0,0,9403,9404,5,148,0,0,9404,9407,
		3,1280,640,0,9405,9407,1,0,0,0,9406,9402,1,0,0,0,9406,9405,1,0,0,0,9407,
		1253,1,0,0,0,9408,9409,5,293,0,0,9409,9410,3,1256,628,0,9410,9411,3,1260,
		630,0,9411,9422,1,0,0,0,9412,9413,5,314,0,0,9413,9414,3,1256,628,0,9414,
		9415,3,1260,630,0,9415,9422,1,0,0,0,9416,9417,5,482,0,0,9417,9418,3,1256,
		628,0,9418,9419,3,1260,630,0,9419,9422,1,0,0,0,9420,9422,1,0,0,0,9421,
		9408,1,0,0,0,9421,9412,1,0,0,0,9421,9416,1,0,0,0,9421,9420,1,0,0,0,9422,
		1255,1,0,0,0,9423,9430,3,1258,629,0,9424,9425,5,381,0,0,9425,9426,3,1258,
		629,0,9426,9427,5,33,0,0,9427,9428,3,1258,629,0,9428,9430,1,0,0,0,9429,
		9423,1,0,0,0,9429,9424,1,0,0,0,9430,1257,1,0,0,0,9431,9432,5,356,0,0,9432,
		9439,7,55,0,0,9433,9434,5,435,0,0,9434,9439,5,408,0,0,9435,9436,3,1162,
		581,0,9436,9437,7,55,0,0,9437,9439,1,0,0,0,9438,9431,1,0,0,0,9438,9433,
		1,0,0,0,9438,9435,1,0,0,0,9439,1259,1,0,0,0,9440,9447,5,200,0,0,9441,9442,
		5,435,0,0,9442,9448,5,408,0,0,9443,9448,5,66,0,0,9444,9448,5,468,0,0,9445,
		9446,5,263,0,0,9446,9448,5,483,0,0,9447,9441,1,0,0,0,9447,9443,1,0,0,0,
		9447,9444,1,0,0,0,9447,9445,1,0,0,0,9448,9451,1,0,0,0,9449,9451,1,0,0,
		0,9450,9440,1,0,0,0,9450,9449,1,0,0,0,9451,1261,1,0,0,0,9452,9453,5,408,
		0,0,9453,9455,5,2,0,0,9454,9456,3,1280,640,0,9455,9454,1,0,0,0,9455,9456,
		1,0,0,0,9456,9457,1,0,0,0,9457,9465,5,3,0,0,9458,9459,5,2,0,0,9459,9460,
		3,1280,640,0,9460,9461,5,6,0,0,9461,9462,3,1162,581,0,9462,9463,5,3,0,
		0,9463,9465,1,0,0,0,9464,9452,1,0,0,0,9464,9458,1,0,0,0,9465,1263,1,0,
		0,0,9466,9467,5,408,0,0,9467,9469,5,2,0,0,9468,9470,3,1280,640,0,9469,
		9468,1,0,0,0,9469,9470,1,0,0,0,9470,9471,1,0,0,0,9471,9472,5,3,0,0,9472,
		1265,1,0,0,0,9473,9474,5,2,0,0,9474,9475,3,1280,640,0,9475,9476,5,6,0,
		0,9476,9477,3,1162,581,0,9477,9478,5,3,0,0,9478,1267,1,0,0,0,9479,9480,
		7,56,0,0,9480,1269,1,0,0,0,9481,9484,5,29,0,0,9482,9484,3,1272,636,0,9483,
		9481,1,0,0,0,9483,9482,1,0,0,0,9484,1271,1,0,0,0,9485,9486,7,57,0,0,9486,
		1273,1,0,0,0,9487,9494,5,29,0,0,9488,9489,5,272,0,0,9489,9490,5,2,0,0,
		9490,9491,3,684,342,0,9491,9492,5,3,0,0,9492,9494,1,0,0,0,9493,9487,1,
		0,0,0,9493,9488,1,0,0,0,9494,1275,1,0,0,0,9495,9502,3,1270,635,0,9496,
		9497,5,272,0,0,9497,9498,5,2,0,0,9498,9499,3,684,342,0,9499,9500,5,3,0,
		0,9500,9502,1,0,0,0,9501,9495,1,0,0,0,9501,9496,1,0,0,0,9502,1277,1,0,
		0,0,9503,9516,3,1270,635,0,9504,9505,5,272,0,0,9505,9506,5,2,0,0,9506,
		9507,3,684,342,0,9507,9508,5,3,0,0,9508,9516,1,0,0,0,9509,9516,5,120,0,
		0,9510,9511,5,77,0,0,9511,9516,5,120,0,0,9512,9516,5,114,0,0,9513,9514,
		5,77,0,0,9514,9516,5,114,0,0,9515,9503,1,0,0,0,9515,9504,1,0,0,0,9515,
		9509,1,0,0,0,9515,9510,1,0,0,0,9515,9512,1,0,0,0,9515,9513,1,0,0,0,9516,
		1279,1,0,0,0,9517,9522,3,1162,581,0,9518,9519,5,6,0,0,9519,9521,3,1162,
		581,0,9520,9518,1,0,0,0,9521,9524,1,0,0,0,9522,9520,1,0,0,0,9522,9523,
		1,0,0,0,9523,1281,1,0,0,0,9524,9522,1,0,0,0,9525,9530,3,1284,642,0,9526,
		9527,5,6,0,0,9527,9529,3,1284,642,0,9528,9526,1,0,0,0,9529,9532,1,0,0,
		0,9530,9528,1,0,0,0,9530,9531,1,0,0,0,9531,1283,1,0,0,0,9532,9530,1,0,
		0,0,9533,9539,3,1162,581,0,9534,9535,3,636,318,0,9535,9536,7,58,0,0,9536,
		9537,3,1162,581,0,9537,9539,1,0,0,0,9538,9533,1,0,0,0,9538,9534,1,0,0,
		0,9539,1285,1,0,0,0,9540,9545,3,1118,559,0,9541,9542,5,6,0,0,9542,9544,
		3,1118,559,0,9543,9541,1,0,0,0,9544,9547,1,0,0,0,9545,9543,1,0,0,0,9545,
		9546,1,0,0,0,9546,1287,1,0,0,0,9547,9545,1,0,0,0,9548,9551,5,4,0,0,9549,
		9552,3,1280,640,0,9550,9552,3,1290,645,0,9551,9549,1,0,0,0,9551,9550,1,
		0,0,0,9551,9552,1,0,0,0,9552,9553,1,0,0,0,9553,9554,5,5,0,0,9554,1289,
		1,0,0,0,9555,9560,3,1288,644,0,9556,9557,5,6,0,0,9557,9559,3,1288,644,
		0,9558,9556,1,0,0,0,9559,9562,1,0,0,0,9560,9558,1,0,0,0,9560,9561,1,0,
		0,0,9561,1291,1,0,0,0,9562,9560,1,0,0,0,9563,9564,3,1294,647,0,9564,9565,
		5,64,0,0,9565,9566,3,1162,581,0,9566,9569,1,0,0,0,9567,9569,1,0,0,0,9568,
		9563,1,0,0,0,9568,9567,1,0,0,0,9569,1293,1,0,0,0,9570,9579,3,1382,691,
		0,9571,9579,5,378,0,0,9572,9579,5,258,0,0,9573,9579,5,177,0,0,9574,9579,
		5,219,0,0,9575,9579,5,255,0,0,9576,9579,5,320,0,0,9577,9579,3,1358,679,
		0,9578,9570,1,0,0,0,9578,9571,1,0,0,0,9578,9572,1,0,0,0,9578,9573,1,0,
		0,0,9578,9574,1,0,0,0,9578,9575,1,0,0,0,9578,9576,1,0,0,0,9578,9577,1,
		0,0,0,9579,1295,1,0,0,0,9580,9581,7,59,0,0,9581,1297,1,0,0,0,9582,9583,
		3,1162,581,0,9583,9584,5,84,0,0,9584,9585,3,1162,581,0,9585,9586,5,64,
		0,0,9586,9589,3,1162,581,0,9587,9588,5,62,0,0,9588,9590,3,1162,581,0,9589,
		9587,1,0,0,0,9589,9590,1,0,0,0,9590,1299,1,0,0,0,9591,9592,3,1204,602,
		0,9592,9593,5,68,0,0,9593,9594,3,1204,602,0,9594,9597,1,0,0,0,9595,9597,
		1,0,0,0,9596,9591,1,0,0,0,9596,9595,1,0,0,0,9597,1301,1,0,0,0,9598,9599,
		3,1162,581,0,9599,9600,5,64,0,0,9600,9601,3,1162,581,0,9601,9602,5,62,
		0,0,9602,9603,3,1162,581,0,9603,9626,1,0,0,0,9604,9605,3,1162,581,0,9605,
		9606,5,62,0,0,9606,9607,3,1162,581,0,9607,9608,5,64,0,0,9608,9609,3,1162,
		581,0,9609,9626,1,0,0,0,9610,9611,3,1162,581,0,9611,9612,5,64,0,0,9612,
		9613,3,1162,581,0,9613,9626,1,0,0,0,9614,9615,3,1162,581,0,9615,9616,5,
		62,0,0,9616,9617,3,1162,581,0,9617,9626,1,0,0,0,9618,9619,3,1162,581,0,
		9619,9620,5,127,0,0,9620,9621,3,1162,581,0,9621,9622,5,198,0,0,9622,9623,
		3,1162,581,0,9623,9626,1,0,0,0,9624,9626,3,1280,640,0,9625,9598,1,0,0,
		0,9625,9604,1,0,0,0,9625,9610,1,0,0,0,9625,9614,1,0,0,0,9625,9618,1,0,
		0,0,9625,9624,1,0,0,0,9626,1303,1,0,0,0,9627,9628,3,1162,581,0,9628,9629,
		5,64,0,0,9629,9630,3,1280,640,0,9630,9635,1,0,0,0,9631,9632,5,64,0,0,9632,
		9635,3,1280,640,0,9633,9635,3,1280,640,0,9634,9627,1,0,0,0,9634,9631,1,
		0,0,0,9634,9633,1,0,0,0,9635,1305,1,0,0,0,9636,9642,3,962,481,0,9637,9638,
		5,2,0,0,9638,9639,3,1280,640,0,9639,9640,5,3,0,0,9640,9642,1,0,0,0,9641,
		9636,1,0,0,0,9641,9637,1,0,0,0,9642,1307,1,0,0,0,9643,9644,5,40,0,0,9644,
		9645,3,1316,658,0,9645,9646,3,1310,655,0,9646,9647,3,1314,657,0,9647,9648,
		5,455,0,0,9648,1309,1,0,0,0,9649,9651,3,1312,656,0,9650,9649,1,0,0,0,9651,
		9652,1,0,0,0,9652,9650,1,0,0,0,9652,9653,1,0,0,0,9653,1311,1,0,0,0,9654,
		9655,5,102,0,0,9655,9656,3,1162,581,0,9656,9657,5,93,0,0,9657,9658,3,1162,
		581,0,9658,1313,1,0,0,0,9659,9660,5,58,0,0,9660,9663,3,1162,581,0,9661,
		9663,1,0,0,0,9662,9659,1,0,0,0,9662,9661,1,0,0,0,9663,1315,1,0,0,0,9664,
		9667,3,1162,581,0,9665,9667,1,0,0,0,9666,9664,1,0,0,0,9666,9665,1,0,0,
		0,9667,1317,1,0,0,0,9668,9670,3,1372,686,0,9669,9671,3,1324,662,0,9670,
		9669,1,0,0,0,9670,9671,1,0,0,0,9671,1319,1,0,0,0,9672,9675,5,11,0,0,9673,
		9676,3,1342,671,0,9674,9676,5,9,0,0,9675,9673,1,0,0,0,9675,9674,1,0,0,
		0,9676,9688,1,0,0,0,9677,9683,5,4,0,0,9678,9684,3,1162,581,0,9679,9680,
		3,1322,661,0,9680,9681,5,8,0,0,9681,9682,3,1322,661,0,9682,9684,1,0,0,
		0,9683,9678,1,0,0,0,9683,9679,1,0,0,0,9684,9685,1,0,0,0,9685,9686,5,5,
		0,0,9686,9688,1,0,0,0,9687,9672,1,0,0,0,9687,9677,1,0,0,0,9688,1321,1,
		0,0,0,9689,9692,3,1162,581,0,9690,9692,1,0,0,0,9691,9689,1,0,0,0,9691,
		9690,1,0,0,0,9692,1323,1,0,0,0,9693,9695,3,1320,660,0,9694,9693,1,0,0,
		0,9695,9696,1,0,0,0,9696,9694,1,0,0,0,9696,9697,1,0,0,0,9697,1325,1,0,
		0,0,9698,9700,3,1320,660,0,9699,9698,1,0,0,0,9700,9703,1,0,0,0,9701,9699,
		1,0,0,0,9701,9702,1,0,0,0,9702,1327,1,0,0,0,9703,9701,1,0,0,0,9704,9707,
		3,1330,665,0,9705,9707,1,0,0,0,9706,9704,1,0,0,0,9706,9705,1,0,0,0,9707,
		1329,1,0,0,0,9708,9713,3,1332,666,0,9709,9710,5,6,0,0,9710,9712,3,1332,
		666,0,9711,9709,1,0,0,0,9712,9715,1,0,0,0,9713,9711,1,0,0,0,9713,9714,
		1,0,0,0,9714,1331,1,0,0,0,9715,9713,1,0,0,0,9716,9721,3,1162,581,0,9717,
		9718,5,36,0,0,9718,9722,3,1380,690,0,9719,9722,3,1382,691,0,9720,9722,
		1,0,0,0,9721,9717,1,0,0,0,9721,9719,1,0,0,0,9721,9720,1,0,0,0,9722,9725,
		1,0,0,0,9723,9725,5,9,0,0,9724,9716,1,0,0,0,9724,9723,1,0,0,0,9725,1333,
		1,0,0,0,9726,9731,3,1336,668,0,9727,9728,5,6,0,0,9728,9730,3,1336,668,
		0,9729,9727,1,0,0,0,9730,9733,1,0,0,0,9731,9729,1,0,0,0,9731,9732,1,0,
		0,0,9732,1335,1,0,0,0,9733,9731,1,0,0,0,9734,9736,3,1372,686,0,9735,9737,
		3,1324,662,0,9736,9735,1,0,0,0,9736,9737,1,0,0,0,9737,1337,1,0,0,0,9738,
		9743,3,1340,670,0,9739,9740,5,6,0,0,9740,9742,3,1340,670,0,9741,9739,1,
		0,0,0,9742,9745,1,0,0,0,9743,9741,1,0,0,0,9743,9744,1,0,0,0,9744,1339,
		1,0,0,0,9745,9743,1,0,0,0,9746,9747,3,1372,686,0,9747,1341,1,0,0,0,9748,
		9749,3,1380,690,0,9749,1343,1,0,0,0,9750,9751,3,1358,679,0,9751,1345,1,
		0,0,0,9752,9760,3,1394,697,0,9753,9760,3,1376,688,0,9754,9755,3,1372,686,
		0,9755,9756,3,1324,662,0,9756,9760,1,0,0,0,9757,9760,5,119,0,0,9758,9760,
		5,126,0,0,9759,9752,1,0,0,0,9759,9753,1,0,0,0,9759,9754,1,0,0,0,9759,9757,
		1,0,0,0,9759,9758,1,0,0,0,9760,1347,1,0,0,0,9761,9794,3,1356,678,0,9762,
		9794,3,1354,677,0,9763,9794,3,1358,679,0,9764,9794,3,1352,676,0,9765,9794,
		3,1350,675,0,9766,9774,3,1346,673,0,9767,9775,3,1358,679,0,9768,9769,5,
		2,0,0,9769,9770,3,1282,641,0,9770,9771,3,996,498,0,9771,9772,5,3,0,0,9772,
		9773,3,1358,679,0,9773,9775,1,0,0,0,9774,9767,1,0,0,0,9774,9768,1,0,0,
		0,9775,9794,1,0,0,0,9776,9777,3,1124,562,0,9777,9778,3,1358,679,0,9778,
		9794,1,0,0,0,9779,9788,3,1152,576,0,9780,9781,3,1358,679,0,9781,9782,3,
		1156,578,0,9782,9789,1,0,0,0,9783,9784,5,2,0,0,9784,9785,3,1356,678,0,
		9785,9786,5,3,0,0,9786,9787,3,1358,679,0,9787,9789,1,0,0,0,9788,9780,1,
		0,0,0,9788,9783,1,0,0,0,9789,9794,1,0,0,0,9790,9794,5,96,0,0,9791,9794,
		5,60,0,0,9792,9794,5,78,0,0,9793,9761,1,0,0,0,9793,9762,1,0,0,0,9793,9763,
		1,0,0,0,9793,9764,1,0,0,0,9793,9765,1,0,0,0,9793,9766,1,0,0,0,9793,9776,
		1,0,0,0,9793,9779,1,0,0,0,9793,9790,1,0,0,0,9793,9791,1,0,0,0,9793,9792,
		1,0,0,0,9794,1349,1,0,0,0,9795,9796,5,655,0,0,9796,1351,1,0,0,0,9797,9798,
		5,651,0,0,9798,1353,1,0,0,0,9799,9800,5,661,0,0,9800,1355,1,0,0,0,9801,
		9802,5,659,0,0,9802,1357,1,0,0,0,9803,9804,3,1360,680,0,9804,9805,3,1362,
		681,0,9805,1359,1,0,0,0,9806,9818,5,646,0,0,9807,9818,5,648,0,0,9808,9812,
		5,650,0,0,9809,9811,5,678,0,0,9810,9809,1,0,0,0,9811,9814,1,0,0,0,9812,
		9810,1,0,0,0,9812,9813,1,0,0,0,9813,9815,1,0,0,0,9814,9812,1,0,0,0,9815,
		9818,5,679,0,0,9816,9818,5,672,0,0,9817,9806,1,0,0,0,9817,9807,1,0,0,0,
		9817,9808,1,0,0,0,9817,9816,1,0,0,0,9818,1361,1,0,0,0,9819,9820,5,488,
		0,0,9820,9823,3,1360,680,0,9821,9823,1,0,0,0,9822,9819,1,0,0,0,9822,9821,
		1,0,0,0,9823,1363,1,0,0,0,9824,9830,3,1356,678,0,9825,9826,5,12,0,0,9826,
		9830,3,1356,678,0,9827,9828,5,13,0,0,9828,9830,3,1356,678,0,9829,9824,
		1,0,0,0,9829,9825,1,0,0,0,9829,9827,1,0,0,0,9830,1365,1,0,0,0,9831,9832,
		3,1368,684,0,9832,1367,1,0,0,0,9833,9837,3,1378,689,0,9834,9837,5,52,0,
		0,9835,9837,5,89,0,0,9836,9833,1,0,0,0,9836,9834,1,0,0,0,9836,9835,1,0,
		0,0,9837,1369,1,0,0,0,9838,9843,3,1368,684,0,9839,9840,5,6,0,0,9840,9842,
		3,1368,684,0,9841,9839,1,0,0,0,9842,9845,1,0,0,0,9843,9841,1,0,0,0,9843,
		9844,1,0,0,0,9844,1371,1,0,0,0,9845,9843,1,0,0,0,9846,9853,3,1382,691,
		0,9847,9853,3,1386,693,0,9848,9853,3,1388,694,0,9849,9853,3,1608,804,0,
		9850,9853,5,119,0,0,9851,9853,5,126,0,0,9852,9846,1,0,0,0,9852,9847,1,
		0,0,0,9852,9848,1,0,0,0,9852,9849,1,0,0,0,9852,9850,1,0,0,0,9852,9851,
		1,0,0,0,9853,1373,1,0,0,0,9854,9859,3,1382,691,0,9855,9859,3,1386,693,
		0,9856,9859,3,1388,694,0,9857,9859,3,1608,804,0,9858,9854,1,0,0,0,9858,
		9855,1,0,0,0,9858,9856,1,0,0,0,9858,9857,1,0,0,0,9859,1375,1,0,0,0,9860,
		9865,3,1382,691,0,9861,9865,3,1386,693,0,9862,9865,3,1608,804,0,9863,9865,
		3,1390,695,0,9864,9860,1,0,0,0,9864,9861,1,0,0,0,9864,9862,1,0,0,0,9864,
		9863,1,0,0,0,9865,1377,1,0,0,0,9866,9871,3,1382,691,0,9867,9871,3,1386,
		693,0,9868,9871,3,1388,694,0,9869,9871,3,1390,695,0,9870,9866,1,0,0,0,
		9870,9867,1,0,0,0,9870,9868,1,0,0,0,9870,9869,1,0,0,0,9871,1379,1,0,0,
		0,9872,9879,3,1382,691,0,9873,9879,3,1608,804,0,9874,9879,3,1386,693,0,
		9875,9879,3,1388,694,0,9876,9879,3,1390,695,0,9877,9879,3,1392,696,0,9878,
		9872,1,0,0,0,9878,9873,1,0,0,0,9878,9874,1,0,0,0,9878,9875,1,0,0,0,9878,
		9876,1,0,0,0,9878,9877,1,0,0,0,9879,1381,1,0,0,0,9880,9881,5,637,0,0,9881,
		9888,3,1362,681,0,9882,9888,5,638,0,0,9883,9888,5,642,0,0,9884,9888,3,
		1208,604,0,9885,9888,3,1384,692,0,9886,9888,3,1608,804,0,9887,9880,1,0,
		0,0,9887,9882,1,0,0,0,9887,9883,1,0,0,0,9887,9884,1,0,0,0,9887,9885,1,
		0,0,0,9887,9886,1,0,0,0,9888,1383,1,0,0,0,9889,9890,5,663,0,0,9890,1385,
		1,0,0,0,9891,9892,7,60,0,0,9892,1387,1,0,0,0,9893,9946,5,381,0,0,9894,
		9946,5,382,0,0,9895,9946,3,1134,567,0,9896,9946,5,384,0,0,9897,9946,5,
		385,0,0,9898,9946,3,1142,571,0,9899,9946,5,387,0,0,9900,9946,5,388,0,0,
		9901,9946,5,389,0,0,9902,9946,5,390,0,0,9903,9946,5,391,0,0,9904,9946,
		5,392,0,0,9905,9946,5,393,0,0,9906,9946,5,471,0,0,9907,9946,5,394,0,0,
		9908,9946,5,395,0,0,9909,9946,5,396,0,0,9910,9946,5,397,0,0,9911,9946,
		5,398,0,0,9912,9946,5,399,0,0,9913,9946,5,400,0,0,9914,9946,5,401,0,0,
		9915,9946,5,490,0,0,9916,9946,5,402,0,0,9917,9946,3,1130,565,0,9918,9946,
		5,454,0,0,9919,9946,5,404,0,0,9920,9946,5,405,0,0,9921,9946,5,406,0,0,
		9922,9946,5,407,0,0,9923,9946,5,408,0,0,9924,9946,5,409,0,0,9925,9946,
		5,410,0,0,9926,9946,5,411,0,0,9927,9946,5,412,0,0,9928,9946,5,413,0,0,
		9929,9946,5,414,0,0,9930,9946,5,415,0,0,9931,9946,5,416,0,0,9932,9946,
		5,417,0,0,9933,9946,5,418,0,0,9934,9946,5,426,0,0,9935,9946,5,427,0,0,
		9936,9946,5,428,0,0,9937,9946,5,429,0,0,9938,9946,5,477,0,0,9939,9946,
		5,430,0,0,9940,9946,5,431,0,0,9941,9946,5,432,0,0,9942,9946,5,433,0,0,
		9943,9946,5,475,0,0,9944,9946,3,1394,697,0,9945,9893,1,0,0,0,9945,9894,
		1,0,0,0,9945,9895,1,0,0,0,9945,9896,1,0,0,0,9945,9897,1,0,0,0,9945,9898,
		1,0,0,0,9945,9899,1,0,0,0,9945,9900,1,0,0,0,9945,9901,1,0,0,0,9945,9902,
		1,0,0,0,9945,9903,1,0,0,0,9945,9904,1,0,0,0,9945,9905,1,0,0,0,9945,9906,
		1,0,0,0,9945,9907,1,0,0,0,9945,9908,1,0,0,0,9945,9909,1,0,0,0,9945,9910,
		1,0,0,0,9945,9911,1,0,0,0,9945,9912,1,0,0,0,9945,9913,1,0,0,0,9945,9914,
		1,0,0,0,9945,9915,1,0,0,0,9945,9916,1,0,0,0,9945,9917,1,0,0,0,9945,9918,
		1,0,0,0,9945,9919,1,0,0,0,9945,9920,1,0,0,0,9945,9921,1,0,0,0,9945,9922,
		1,0,0,0,9945,9923,1,0,0,0,9945,9924,1,0,0,0,9945,9925,1,0,0,0,9945,9926,
		1,0,0,0,9945,9927,1,0,0,0,9945,9928,1,0,0,0,9945,9929,1,0,0,0,9945,9930,
		1,0,0,0,9945,9931,1,0,0,0,9945,9932,1,0,0,0,9945,9933,1,0,0,0,9945,9934,
		1,0,0,0,9945,9935,1,0,0,0,9945,9936,1,0,0,0,9945,9937,1,0,0,0,9945,9938,
		1,0,0,0,9945,9939,1,0,0,0,9945,9940,1,0,0,0,9945,9941,1,0,0,0,9945,9942,
		1,0,0,0,9945,9943,1,0,0,0,9945,9944,1,0,0,0,9946,1389,1,0,0,0,9947,9948,
		7,61,0,0,9948,1391,1,0,0,0,9949,9950,7,62,0,0,9950,1393,1,0,0,0,9951,9952,
		7,63,0,0,9952,1395,1,0,0,0,9953,9954,3,1398,699,0,9954,9955,3,1408,704,
		0,9955,9956,3,1406,703,0,9956,1397,1,0,0,0,9957,9959,3,1400,700,0,9958,
		9957,1,0,0,0,9959,9962,1,0,0,0,9960,9958,1,0,0,0,9960,9961,1,0,0,0,9961,
		1399,1,0,0,0,9962,9960,1,0,0,0,9963,9964,3,1402,701,0,9964,9965,5,273,
		0,0,9965,9966,5,491,0,0,9966,9984,1,0,0,0,9967,9968,3,1402,701,0,9968,
		9969,5,492,0,0,9969,9970,3,1404,702,0,9970,9984,1,0,0,0,9971,9972,3,1402,
		701,0,9972,9973,5,493,0,0,9973,9974,5,494,0,0,9974,9984,1,0,0,0,9975,9976,
		3,1402,701,0,9976,9977,5,493,0,0,9977,9978,5,495,0,0,9978,9984,1,0,0,0,
		9979,9980,3,1402,701,0,9980,9981,5,493,0,0,9981,9982,5,496,0,0,9982,9984,
		1,0,0,0,9983,9963,1,0,0,0,9983,9967,1,0,0,0,9983,9971,1,0,0,0,9983,9975,
		1,0,0,0,9983,9979,1,0,0,0,9984,1401,1,0,0,0,9985,9986,5,29,0,0,9986,1403,
		1,0,0,0,9987,9992,3,1358,679,0,9988,9992,3,1392,696,0,9989,9992,3,1608,
		804,0,9990,9992,3,1386,693,0,9991,9987,1,0,0,0,9991,9988,1,0,0,0,9991,
		9989,1,0,0,0,9991,9990,1,0,0,0,9992,1405,1,0,0,0,9993,9996,1,0,0,0,9994,
		9996,5,7,0,0,9995,9993,1,0,0,0,9995,9994,1,0,0,0,9996,1407,1,0,0,0,9997,
		9998,3,1410,705,0,9998,9999,5,147,0,0,9999,10000,3,1452,726,0,10000,10001,
		3,1588,794,0,10001,10002,5,455,0,0,10002,10003,3,1602,801,0,10003,1409,
		1,0,0,0,10004,10009,3,1598,799,0,10005,10007,3,1412,706,0,10006,10008,
		3,1414,707,0,10007,10006,1,0,0,0,10007,10008,1,0,0,0,10008,10010,1,0,0,
		0,10009,10005,1,0,0,0,10009,10010,1,0,0,0,10010,1411,1,0,0,0,10011,10012,
		5,179,0,0,10012,1413,1,0,0,0,10013,10015,3,1418,709,0,10014,10013,1,0,
		0,0,10015,10016,1,0,0,0,10016,10014,1,0,0,0,10016,10017,1,0,0,0,10017,
		1415,1,0,0,0,10018,10019,5,18,0,0,10019,10020,3,1606,803,0,10020,10021,
		5,19,0,0,10021,1417,1,0,0,0,10022,10026,3,1420,710,0,10023,10026,5,179,
		0,0,10024,10026,3,1416,708,0,10025,10022,1,0,0,0,10025,10023,1,0,0,0,10025,
		10024,1,0,0,0,10026,1419,1,0,0,0,10027,10043,3,1436,718,0,10028,10029,
		5,497,0,0,10029,10030,5,62,0,0,10030,10044,3,1434,717,0,10031,10032,3,
		1438,719,0,10032,10033,3,1440,720,0,10033,10034,3,1442,721,0,10034,10035,
		3,1444,722,0,10035,10036,3,1446,723,0,10036,10044,1,0,0,0,10037,10038,
		3,1422,711,0,10038,10039,5,173,0,0,10039,10040,3,1426,713,0,10040,10041,
		3,1432,716,0,10041,10042,3,1424,712,0,10042,10044,1,0,0,0,10043,10028,
		1,0,0,0,10043,10031,1,0,0,0,10043,10037,1,0,0,0,10044,10045,1,0,0,0,10045,
		10046,5,7,0,0,10046,1421,1,0,0,0,10047,10052,1,0,0,0,10048,10049,5,263,
		0,0,10049,10052,5,318,0,0,10050,10052,5,318,0,0,10051,10047,1,0,0,0,10051,
		10048,1,0,0,0,10051,10050,1,0,0,0,10052,1423,1,0,0,0,10053,10054,3,960,
		480,0,10054,1425,1,0,0,0,10055,10061,1,0,0,0,10056,10057,5,2,0,0,10057,
		10058,3,1428,714,0,10058,10059,5,3,0,0,10059,10061,1,0,0,0,10060,10055,
		1,0,0,0,10060,10056,1,0,0,0,10061,1427,1,0,0,0,10062,10067,3,1430,715,
		0,10063,10064,5,6,0,0,10064,10066,3,1430,715,0,10065,10063,1,0,0,0,10066,
		10069,1,0,0,0,10067,10065,1,0,0,0,10067,10068,1,0,0,0,10068,1429,1,0,0,
		0,10069,10067,1,0,0,0,10070,10071,3,1436,718,0,10071,10072,3,1440,720,
		0,10072,1431,1,0,0,0,10073,10074,7,64,0,0,10074,1433,1,0,0,0,10075,10078,
		5,28,0,0,10076,10078,3,1372,686,0,10077,10075,1,0,0,0,10077,10076,1,0,
		0,0,10078,1435,1,0,0,0,10079,10080,3,1606,803,0,10080,1437,1,0,0,0,10081,
		10084,1,0,0,0,10082,10084,5,498,0,0,10083,10081,1,0,0,0,10083,10082,1,
		0,0,0,10084,1439,1,0,0,0,10085,10086,3,1118,559,0,10086,1441,1,0,0,0,10087,
		10091,1,0,0,0,10088,10089,5,43,0,0,10089,10091,3,524,262,0,10090,10087,
		1,0,0,0,10090,10088,1,0,0,0,10091,1443,1,0,0,0,10092,10096,1,0,0,0,10093,
		10094,5,77,0,0,10094,10096,5,78,0,0,10095,10092,1,0,0,0,10095,10093,1,
		0,0,0,10096,1445,1,0,0,0,10097,10102,1,0,0,0,10098,10099,3,1448,724,0,
		10099,10100,3,1610,805,0,10100,10102,1,0,0,0,10101,10097,1,0,0,0,10101,
		10098,1,0,0,0,10102,1447,1,0,0,0,10103,10106,3,1450,725,0,10104,10106,
		5,53,0,0,10105,10103,1,0,0,0,10105,10104,1,0,0,0,10106,1449,1,0,0,0,10107,
		10108,7,65,0,0,10108,1451,1,0,0,0,10109,10111,3,1454,727,0,10110,10109,
		1,0,0,0,10111,10114,1,0,0,0,10112,10110,1,0,0,0,10112,10113,1,0,0,0,10113,
		1453,1,0,0,0,10114,10112,1,0,0,0,10115,10116,3,1408,704,0,10116,10117,
		5,7,0,0,10117,10143,1,0,0,0,10118,10143,3,1520,760,0,10119,10143,3,1524,
		762,0,10120,10143,3,1462,731,0,10121,10143,3,1478,739,0,10122,10143,3,
		1484,742,0,10123,10143,3,1494,747,0,10124,10143,3,1496,748,0,10125,10143,
		3,1498,749,0,10126,10143,3,1512,756,0,10127,10143,3,1516,758,0,10128,10143,
		3,1536,768,0,10129,10143,3,1542,771,0,10130,10143,3,1544,772,0,10131,10143,
		3,1456,728,0,10132,10143,3,1458,729,0,10133,10143,3,1464,732,0,10134,10143,
		3,1552,776,0,10135,10143,3,1564,782,0,10136,10143,3,1572,786,0,10137,10143,
		3,1574,787,0,10138,10143,3,1576,788,0,10139,10143,3,1578,789,0,10140,10143,
		3,1580,790,0,10141,10143,3,1584,792,0,10142,10115,1,0,0,0,10142,10118,
		1,0,0,0,10142,10119,1,0,0,0,10142,10120,1,0,0,0,10142,10121,1,0,0,0,10142,
		10122,1,0,0,0,10142,10123,1,0,0,0,10142,10124,1,0,0,0,10142,10125,1,0,
		0,0,10142,10126,1,0,0,0,10142,10127,1,0,0,0,10142,10128,1,0,0,0,10142,
		10129,1,0,0,0,10142,10130,1,0,0,0,10142,10131,1,0,0,0,10142,10132,1,0,
		0,0,10142,10133,1,0,0,0,10142,10134,1,0,0,0,10142,10135,1,0,0,0,10142,
		10136,1,0,0,0,10142,10137,1,0,0,0,10142,10138,1,0,0,0,10142,10139,1,0,
		0,0,10142,10140,1,0,0,0,10142,10141,1,0,0,0,10143,1455,1,0,0,0,10144,10145,
		5,499,0,0,10145,10146,3,1614,807,0,10146,10147,5,7,0,0,10147,1457,1,0,
		0,0,10148,10149,5,434,0,0,10149,10150,3,1606,803,0,10150,10151,5,2,0,0,
		10151,10152,3,1460,730,0,10152,10153,5,3,0,0,10153,10154,5,7,0,0,10154,
		10163,1,0,0,0,10155,10156,5,57,0,0,10156,10157,3,1606,803,0,10157,10158,
		5,2,0,0,10158,10159,3,1460,730,0,10159,10160,5,3,0,0,10160,10161,5,7,0,
		0,10161,10163,1,0,0,0,10162,10148,1,0,0,0,10162,10155,1,0,0,0,10163,1459,
		1,0,0,0,10164,10167,1,0,0,0,10165,10167,3,1280,640,0,10166,10164,1,0,0,
		0,10166,10165,1,0,0,0,10167,1461,1,0,0,0,10168,10169,3,1476,738,0,10169,
		10170,3,1450,725,0,10170,10171,3,1610,805,0,10171,10172,5,7,0,0,10172,
		1463,1,0,0,0,10173,10174,5,500,0,0,10174,10175,3,1466,733,0,10175,10176,
		5,501,0,0,10176,10177,3,1468,734,0,10177,10178,5,7,0,0,10178,1465,1,0,
		0,0,10179,10183,1,0,0,0,10180,10183,5,435,0,0,10181,10183,5,502,0,0,10182,
		10179,1,0,0,0,10182,10180,1,0,0,0,10182,10181,1,0,0,0,10183,1467,1,0,0,
		0,10184,10189,3,1470,735,0,10185,10186,5,6,0,0,10186,10188,3,1470,735,
		0,10187,10185,1,0,0,0,10188,10191,1,0,0,0,10189,10187,1,0,0,0,10189,10190,
		1,0,0,0,10190,1469,1,0,0,0,10191,10189,1,0,0,0,10192,10193,3,1474,737,
		0,10193,10194,3,1450,725,0,10194,10195,3,1472,736,0,10195,1471,1,0,0,0,
		10196,10197,3,1372,686,0,10197,1473,1,0,0,0,10198,10199,3,1476,738,0,10199,
		1475,1,0,0,0,10200,10203,3,524,262,0,10201,10203,5,28,0,0,10202,10200,
		1,0,0,0,10202,10201,1,0,0,0,10203,10210,1,0,0,0,10204,10205,5,4,0,0,10205,
		10206,3,1616,808,0,10206,10207,5,5,0,0,10207,10209,1,0,0,0,10208,10204,
		1,0,0,0,10209,10212,1,0,0,0,10210,10208,1,0,0,0,10210,10211,1,0,0,0,10211,
		1477,1,0,0,0,10212,10210,1,0,0,0,10213,10214,5,221,0,0,10214,10215,3,1612,
		806,0,10215,10216,5,93,0,0,10216,10217,3,1452,726,0,10217,10218,3,1480,
		740,0,10218,10219,3,1482,741,0,10219,10220,5,455,0,0,10220,10221,5,221,
		0,0,10221,10222,5,7,0,0,10222,1479,1,0,0,0,10223,10224,5,503,0,0,10224,
		10225,3,1162,581,0,10225,10226,5,93,0,0,10226,10227,3,1452,726,0,10227,
		10229,1,0,0,0,10228,10223,1,0,0,0,10229,10232,1,0,0,0,10230,10228,1,0,
		0,0,10230,10231,1,0,0,0,10231,1481,1,0,0,0,10232,10230,1,0,0,0,10233,10237,
		1,0,0,0,10234,10235,5,58,0,0,10235,10237,3,1452,726,0,10236,10233,1,0,
		0,0,10236,10234,1,0,0,0,10237,1483,1,0,0,0,10238,10239,5,40,0,0,10239,
		10240,3,1486,743,0,10240,10241,3,1488,744,0,10241,10242,3,1492,746,0,10242,
		10243,5,455,0,0,10243,10244,5,40,0,0,10244,10245,5,7,0,0,10245,1485,1,
		0,0,0,10246,10249,1,0,0,0,10247,10249,3,1610,805,0,10248,10246,1,0,0,0,
		10248,10247,1,0,0,0,10249,1487,1,0,0,0,10250,10252,3,1490,745,0,10251,
		10250,1,0,0,0,10252,10253,1,0,0,0,10253,10251,1,0,0,0,10253,10254,1,0,
		0,0,10254,1489,1,0,0,0,10255,10256,5,102,0,0,10256,10257,3,1280,640,0,
		10257,10258,5,93,0,0,10258,10259,3,1452,726,0,10259,1491,1,0,0,0,10260,
		10264,1,0,0,0,10261,10262,5,58,0,0,10262,10264,3,1452,726,0,10263,10260,
		1,0,0,0,10263,10261,1,0,0,0,10264,1493,1,0,0,0,10265,10266,3,1600,800,
		0,10266,10267,3,1540,770,0,10267,1495,1,0,0,0,10268,10269,3,1600,800,0,
		10269,10270,5,504,0,0,10270,10271,3,1618,809,0,10271,10272,3,1540,770,
		0,10272,1497,1,0,0,0,10273,10274,3,1600,800,0,10274,10275,5,62,0,0,10275,
		10276,3,1500,750,0,10276,10277,3,1540,770,0,10277,1499,1,0,0,0,10278,10279,
		3,1510,755,0,10279,10295,5,68,0,0,10280,10281,3,954,477,0,10281,10282,
		3,1504,752,0,10282,10296,1,0,0,0,10283,10296,3,960,480,0,10284,10296,3,
		878,439,0,10285,10286,5,203,0,0,10286,10287,3,1162,581,0,10287,10288,3,
		1502,751,0,10288,10296,1,0,0,0,10289,10290,3,1506,753,0,10290,10291,3,
		1162,581,0,10291,10292,5,24,0,0,10292,10293,3,1162,581,0,10293,10294,3,
		1508,754,0,10294,10296,1,0,0,0,10295,10280,1,0,0,0,10295,10283,1,0,0,0,
		10295,10284,1,0,0,0,10295,10285,1,0,0,0,10295,10289,1,0,0,0,10296,1501,
		1,0,0,0,10297,10301,1,0,0,0,10298,10299,5,100,0,0,10299,10301,3,1280,640,
		0,10300,10297,1,0,0,0,10300,10298,1,0,0,0,10301,1503,1,0,0,0,10302,10315,
		1,0,0,0,10303,10304,5,2,0,0,10304,10309,3,1162,581,0,10305,10306,5,6,0,
		0,10306,10308,3,1162,581,0,10307,10305,1,0,0,0,10308,10311,1,0,0,0,10309,
		10307,1,0,0,0,10309,10310,1,0,0,0,10310,10312,1,0,0,0,10311,10309,1,0,
		0,0,10312,10313,5,3,0,0,10313,10315,1,0,0,0,10314,10302,1,0,0,0,10314,
		10303,1,0,0,0,10315,1505,1,0,0,0,10316,10319,1,0,0,0,10317,10319,5,505,
		0,0,10318,10316,1,0,0,0,10318,10317,1,0,0,0,10319,1507,1,0,0,0,10320,10324,
		1,0,0,0,10321,10322,5,148,0,0,10322,10324,3,1162,581,0,10323,10320,1,0,
		0,0,10323,10321,1,0,0,0,10324,1509,1,0,0,0,10325,10326,3,522,261,0,10326,
		1511,1,0,0,0,10327,10328,3,1600,800,0,10328,10329,5,506,0,0,10329,10330,
		3,1510,755,0,10330,10331,3,1514,757,0,10331,10332,5,68,0,0,10332,10333,
		5,35,0,0,10333,10334,3,1162,581,0,10334,10335,3,1540,770,0,10335,1513,
		1,0,0,0,10336,10340,1,0,0,0,10337,10338,5,507,0,0,10338,10340,3,1356,678,
		0,10339,10336,1,0,0,0,10339,10337,1,0,0,0,10340,1515,1,0,0,0,10341,10342,
		3,1518,759,0,10342,10343,3,1602,801,0,10343,10344,3,1604,802,0,10344,10345,
		5,7,0,0,10345,1517,1,0,0,0,10346,10347,7,66,0,0,10347,1519,1,0,0,0,10348,
		10360,5,509,0,0,10349,10350,5,262,0,0,10350,10361,3,1610,805,0,10351,10357,
		5,510,0,0,10352,10353,5,203,0,0,10353,10354,3,1162,581,0,10354,10355,3,
		1502,751,0,10355,10358,1,0,0,0,10356,10358,3,960,480,0,10357,10352,1,0,
		0,0,10357,10356,1,0,0,0,10358,10361,1,0,0,0,10359,10361,3,1522,761,0,10360,
		10349,1,0,0,0,10360,10351,1,0,0,0,10360,10359,1,0,0,0,10361,10362,1,0,
		0,0,10362,10363,5,7,0,0,10363,1521,1,0,0,0,10364,10367,1,0,0,0,10365,10367,
		3,1610,805,0,10366,10364,1,0,0,0,10366,10365,1,0,0,0,10367,1523,1,0,0,
		0,10368,10369,5,511,0,0,10369,10370,3,1526,763,0,10370,10371,3,1358,679,
		0,10371,10372,3,1528,764,0,10372,10373,3,1530,765,0,10373,10374,5,7,0,
		0,10374,10395,1,0,0,0,10375,10376,5,511,0,0,10376,10377,3,1526,763,0,10377,
		10378,3,1382,691,0,10378,10379,3,1530,765,0,10379,10380,5,7,0,0,10380,
		10395,1,0,0,0,10381,10382,5,511,0,0,10382,10383,3,1526,763,0,10383,10384,
		5,512,0,0,10384,10385,3,1358,679,0,10385,10386,3,1530,765,0,10386,10387,
		5,7,0,0,10387,10395,1,0,0,0,10388,10389,5,511,0,0,10389,10390,3,1526,763,
		0,10390,10391,3,1530,765,0,10391,10392,5,7,0,0,10392,10395,1,0,0,0,10393,
		10395,5,511,0,0,10394,10368,1,0,0,0,10394,10375,1,0,0,0,10394,10381,1,
		0,0,0,10394,10388,1,0,0,0,10394,10393,1,0,0,0,10395,1525,1,0,0,0,10396,
		10405,1,0,0,0,10397,10405,1,0,0,0,10398,10405,5,513,0,0,10399,10405,5,
		514,0,0,10400,10405,5,515,0,0,10401,10405,5,516,0,0,10402,10405,5,517,
		0,0,10403,10405,5,518,0,0,10404,10396,1,0,0,0,10404,10397,1,0,0,0,10404,
		10398,1,0,0,0,10404,10399,1,0,0,0,10404,10400,1,0,0,0,10404,10401,1,0,
		0,0,10404,10402,1,0,0,0,10404,10403,1,0,0,0,10405,1527,1,0,0,0,10406,10414,
		1,0,0,0,10407,10408,5,6,0,0,10408,10410,3,1162,581,0,10409,10407,1,0,0,
		0,10410,10411,1,0,0,0,10411,10409,1,0,0,0,10411,10412,1,0,0,0,10412,10414,
		1,0,0,0,10413,10406,1,0,0,0,10413,10409,1,0,0,0,10414,1529,1,0,0,0,10415,
		10419,1,0,0,0,10416,10417,5,100,0,0,10417,10419,3,1534,767,0,10418,10415,
		1,0,0,0,10418,10416,1,0,0,0,10419,1531,1,0,0,0,10420,10421,3,1382,691,
		0,10421,10422,5,10,0,0,10422,10423,3,1162,581,0,10423,1533,1,0,0,0,10424,
		10429,3,1532,766,0,10425,10426,5,6,0,0,10426,10428,3,1532,766,0,10427,
		10425,1,0,0,0,10428,10431,1,0,0,0,10429,10427,1,0,0,0,10429,10430,1,0,
		0,0,10430,1535,1,0,0,0,10431,10429,1,0,0,0,10432,10433,5,519,0,0,10433,
		10434,3,1610,805,0,10434,10435,3,1538,769,0,10435,10436,5,7,0,0,10436,
		1537,1,0,0,0,10437,10441,1,0,0,0,10438,10439,5,6,0,0,10439,10441,3,1610,
		805,0,10440,10437,1,0,0,0,10440,10438,1,0,0,0,10441,1539,1,0,0,0,10442,
		10443,5,520,0,0,10443,10444,3,1452,726,0,10444,10445,5,455,0,0,10445,10446,
		5,520,0,0,10446,10447,3,1602,801,0,10447,10448,5,7,0,0,10448,1541,1,0,
		0,0,10449,10450,3,1620,810,0,10450,10451,5,7,0,0,10451,1543,1,0,0,0,10452,
		10453,5,203,0,0,10453,10461,3,1162,581,0,10454,10455,3,1550,775,0,10455,
		10456,3,1546,773,0,10456,10462,1,0,0,0,10457,10458,3,1546,773,0,10458,
		10459,3,1550,775,0,10459,10462,1,0,0,0,10460,10462,1,0,0,0,10461,10454,
		1,0,0,0,10461,10457,1,0,0,0,10461,10460,1,0,0,0,10462,10463,1,0,0,0,10463,
		10464,5,7,0,0,10464,1545,1,0,0,0,10465,10469,1,0,0,0,10466,10467,5,100,
		0,0,10467,10469,3,1548,774,0,10468,10465,1,0,0,0,10468,10466,1,0,0,0,10469,
		1547,1,0,0,0,10470,10475,3,1162,581,0,10471,10472,5,6,0,0,10472,10474,
		3,1162,581,0,10473,10471,1,0,0,0,10474,10477,1,0,0,0,10475,10473,1,0,0,
		0,10475,10476,1,0,0,0,10476,1549,1,0,0,0,10477,10475,1,0,0,0,10478,10485,
		1,0,0,0,10479,10481,5,71,0,0,10480,10482,5,340,0,0,10481,10480,1,0,0,0,
		10481,10482,1,0,0,0,10482,10483,1,0,0,0,10483,10485,3,1566,783,0,10484,
		10478,1,0,0,0,10484,10479,1,0,0,0,10485,1551,1,0,0,0,10486,10504,5,521,
		0,0,10487,10488,3,1586,793,0,10488,10489,3,1560,780,0,10489,10495,5,62,
		0,0,10490,10496,3,960,480,0,10491,10492,5,203,0,0,10492,10493,3,1610,805,
		0,10493,10494,3,1558,779,0,10494,10496,1,0,0,0,10495,10490,1,0,0,0,10495,
		10491,1,0,0,0,10496,10505,1,0,0,0,10497,10502,3,1372,686,0,10498,10499,
		5,2,0,0,10499,10500,3,1556,778,0,10500,10501,5,3,0,0,10501,10503,1,0,0,
		0,10502,10498,1,0,0,0,10502,10503,1,0,0,0,10503,10505,1,0,0,0,10504,10487,
		1,0,0,0,10504,10497,1,0,0,0,10505,10506,1,0,0,0,10506,10507,5,7,0,0,10507,
		1553,1,0,0,0,10508,10509,3,1372,686,0,10509,10510,5,20,0,0,10510,10511,
		3,1162,581,0,10511,10514,1,0,0,0,10512,10514,3,1162,581,0,10513,10508,
		1,0,0,0,10513,10512,1,0,0,0,10514,1555,1,0,0,0,10515,10520,3,1554,777,
		0,10516,10517,5,6,0,0,10517,10519,3,1554,777,0,10518,10516,1,0,0,0,10519,
		10522,1,0,0,0,10520,10518,1,0,0,0,10520,10521,1,0,0,0,10521,1557,1,0,0,
		0,10522,10520,1,0,0,0,10523,10527,1,0,0,0,10524,10525,5,100,0,0,10525,
		10527,3,1280,640,0,10526,10523,1,0,0,0,10526,10524,1,0,0,0,10527,1559,
		1,0,0,0,10528,10533,1,0,0,0,10529,10530,3,1562,781,0,10530,10531,5,318,
		0,0,10531,10533,1,0,0,0,10532,10528,1,0,0,0,10532,10529,1,0,0,0,10533,
		1561,1,0,0,0,10534,10537,1,0,0,0,10535,10537,5,263,0,0,10536,10534,1,0,
		0,0,10536,10535,1,0,0,0,10537,1563,1,0,0,0,10538,10539,5,61,0,0,10539,
		10540,3,1570,785,0,10540,10541,3,1568,784,0,10541,10542,3,1586,793,0,10542,
		10543,5,71,0,0,10543,10544,3,1566,783,0,10544,10545,5,7,0,0,10545,1565,
		1,0,0,0,10546,10547,3,1280,640,0,10547,1567,1,0,0,0,10548,10552,1,0,0,
		0,10549,10552,5,64,0,0,10550,10552,5,68,0,0,10551,10548,1,0,0,0,10551,
		10549,1,0,0,0,10551,10550,1,0,0,0,10552,1569,1,0,0,0,10553,10571,1,0,0,
		0,10554,10571,1,0,0,0,10555,10571,5,262,0,0,10556,10571,5,287,0,0,10557,
		10571,5,208,0,0,10558,10571,5,241,0,0,10559,10560,5,130,0,0,10560,10571,
		3,1162,581,0,10561,10562,5,301,0,0,10562,10571,3,1162,581,0,10563,10571,
		3,1162,581,0,10564,10571,5,30,0,0,10565,10568,7,67,0,0,10566,10569,3,1162,
		581,0,10567,10569,5,30,0,0,10568,10566,1,0,0,0,10568,10567,1,0,0,0,10568,
		10569,1,0,0,0,10569,10571,1,0,0,0,10570,10553,1,0,0,0,10570,10554,1,0,
		0,0,10570,10555,1,0,0,0,10570,10556,1,0,0,0,10570,10557,1,0,0,0,10570,
		10558,1,0,0,0,10570,10559,1,0,0,0,10570,10561,1,0,0,0,10570,10563,1,0,
		0,0,10570,10564,1,0,0,0,10570,10565,1,0,0,0,10571,1571,1,0,0,0,10572,10573,
		5,259,0,0,10573,10574,3,1570,785,0,10574,10575,3,1586,793,0,10575,10576,
		5,7,0,0,10576,1573,1,0,0,0,10577,10578,5,158,0,0,10578,10579,3,1586,793,
		0,10579,10580,5,7,0,0,10580,1575,1,0,0,0,10581,10582,5,78,0,0,10582,10583,
		5,7,0,0,10583,1577,1,0,0,0,10584,10585,5,162,0,0,10585,10586,3,1582,791,
		0,10586,10587,5,7,0,0,10587,1579,1,0,0,0,10588,10589,5,313,0,0,10589,10590,
		3,1582,791,0,10590,10591,5,7,0,0,10591,1581,1,0,0,0,10592,10594,5,33,0,
		0,10593,10595,5,263,0,0,10594,10593,1,0,0,0,10594,10595,1,0,0,0,10595,
		10596,1,0,0,0,10596,10599,5,154,0,0,10597,10599,1,0,0,0,10598,10592,1,
		0,0,0,10598,10597,1,0,0,0,10599,1583,1,0,0,0,10600,10601,5,327,0,0,10601,
		10602,3,524,262,0,10602,10603,5,94,0,0,10603,10604,5,53,0,0,10604,10605,
		5,7,0,0,10605,10613,1,0,0,0,10606,10609,5,307,0,0,10607,10610,3,524,262,
		0,10608,10610,5,30,0,0,10609,10607,1,0,0,0,10609,10608,1,0,0,0,10610,10611,
		1,0,0,0,10611,10613,5,7,0,0,10612,10600,1,0,0,0,10612,10606,1,0,0,0,10613,
		1585,1,0,0,0,10614,10617,3,1372,686,0,10615,10617,5,28,0,0,10616,10614,
		1,0,0,0,10616,10615,1,0,0,0,10617,1587,1,0,0,0,10618,10622,1,0,0,0,10619,
		10620,5,518,0,0,10620,10622,3,1590,795,0,10621,10618,1,0,0,0,10621,10619,
		1,0,0,0,10622,1589,1,0,0,0,10623,10625,3,1592,796,0,10624,10623,1,0,0,
		0,10625,10626,1,0,0,0,10626,10624,1,0,0,0,10626,10627,1,0,0,0,10627,1591,
		1,0,0,0,10628,10629,5,102,0,0,10629,10630,3,1594,797,0,10630,10631,5,93,
		0,0,10631,10632,3,1452,726,0,10632,1593,1,0,0,0,10633,10638,3,1596,798,
		0,10634,10635,5,82,0,0,10635,10637,3,1596,798,0,10636,10634,1,0,0,0,10637,
		10640,1,0,0,0,10638,10636,1,0,0,0,10638,10639,1,0,0,0,10639,1595,1,0,0,
		0,10640,10638,1,0,0,0,10641,10645,3,1606,803,0,10642,10643,5,512,0,0,10643,
		10645,3,1358,679,0,10644,10641,1,0,0,0,10644,10642,1,0,0,0,10645,1597,
		1,0,0,0,10646,10649,1,0,0,0,10647,10649,3,1416,708,0,10648,10646,1,0,0,
		0,10648,10647,1,0,0,0,10649,1599,1,0,0,0,10650,10653,1,0,0,0,10651,10653,
		3,1416,708,0,10652,10650,1,0,0,0,10652,10651,1,0,0,0,10653,1601,1,0,0,
		0,10654,10657,1,0,0,0,10655,10657,3,1606,803,0,10656,10654,1,0,0,0,10656,
		10655,1,0,0,0,10657,1603,1,0,0,0,10658,10659,5,102,0,0,10659,10662,3,1614,
		807,0,10660,10662,1,0,0,0,10661,10658,1,0,0,0,10661,10660,1,0,0,0,10662,
		1605,1,0,0,0,10663,10666,3,1372,686,0,10664,10666,3,1608,804,0,10665,10663,
		1,0,0,0,10665,10664,1,0,0,0,10666,1607,1,0,0,0,10667,10668,7,68,0,0,10668,
		1609,1,0,0,0,10669,10670,3,1328,664,0,10670,10671,3,982,491,0,10671,10672,
		3,1054,527,0,10672,10673,3,1094,547,0,10673,10674,3,1024,512,0,10674,10675,
		3,1038,519,0,10675,10676,3,1240,620,0,10676,1611,1,0,0,0,10677,10678,3,
		1610,805,0,10678,1613,1,0,0,0,10679,10680,3,1610,805,0,10680,1615,1,0,
		0,0,10681,10682,3,1162,581,0,10682,1617,1,0,0,0,10683,10684,3,1162,581,
		0,10684,1619,1,0,0,0,10685,10686,3,8,4,0,10686,10687,3,1622,811,0,10687,
		1621,1,0,0,0,10688,10689,5,71,0,0,10689,10690,3,984,492,0,10690,10691,
		3,1566,783,0,10691,10694,1,0,0,0,10692,10694,1,0,0,0,10693,10688,1,0,0,
		0,10693,10692,1,0,0,0,10694,1623,1,0,0,0,744,1633,1637,1765,1769,1782,
		1787,1793,1799,1814,1826,1844,1849,1859,1883,1890,1896,1901,1910,1914,
		1926,1957,1964,1972,1977,1984,1990,2007,2012,2016,2029,2033,2038,2043,
		2055,2064,2077,2082,2093,2104,2109,2120,2131,2140,2150,2165,2177,2182,
		2189,2200,2458,2465,2470,2475,2480,2488,2497,2504,2514,2516,2521,2527,
		2533,2535,2563,2573,2586,2598,2612,2617,2641,2647,2652,2659,2664,2702,
		2706,2713,2717,2724,2738,2745,2756,2789,2799,2803,2810,2817,2825,2831,
		2835,2845,2852,2863,2895,2903,2908,2915,2925,2935,2955,2970,2995,3000,
		3007,3014,3025,3030,3037,3048,3056,3067,3083,3091,3095,3109,3126,3131,
		3138,3147,3150,3155,3162,3173,3186,3199,3217,3220,3229,3244,3259,3268,
		3275,3282,3287,3317,3319,3323,3331,3338,3352,3356,3360,3365,3371,3375,
		3379,3392,3398,3407,3416,3426,3437,3547,3565,3570,3574,3591,3599,3606,
		3619,3629,3663,3668,3673,3677,3685,3687,3745,3762,3770,3793,3797,3817,
		3854,3863,3868,3873,3878,3883,3936,3942,3949,3959,3964,3969,3987,3991,
		4001,4007,4013,4020,4025,4030,4044,4072,4079,4093,4108,4225,4236,4242,
		4250,4261,4270,4277,4317,4323,4344,4372,4376,4381,4390,4394,4421,4428,
		4443,4463,4483,4576,4601,4608,4624,4633,4638,4644,4651,4665,4814,4818,
		4911,4916,4920,4926,4994,5000,5029,5046,5053,5065,5125,5132,5138,5144,
		5170,5176,5182,5193,5205,5234,5273,5277,5281,5285,5290,5297,5311,5324,
		5332,5339,5345,5349,5354,5361,5375,5377,5384,5388,5397,5405,5414,5416,
		5420,5429,5434,5440,5445,5449,5454,5460,5466,5472,5478,5483,5498,5507,
		5518,5524,5563,5573,5580,5591,5597,5607,5619,5623,5661,5675,5689,5713,
		5720,5730,5742,5747,5783,5790,5805,5852,5889,5900,5917,6387,6391,6396,
		6455,6459,6678,6693,6704,6711,6904,6914,6922,6951,6967,7009,7023,7045,
		7052,7060,7064,7071,7080,7089,7141,7147,7159,7163,7168,7173,7177,7181,
		7186,7202,7210,7215,7228,7233,7240,7250,7254,7265,7276,7284,7291,7330,
		7338,7342,7423,7451,7456,7471,7483,7490,7500,7505,7509,7513,7517,7521,
		7528,7538,7543,7561,7572,7579,7587,7592,7605,7611,7640,7647,7659,7672,
		7687,7693,7702,7718,7721,7732,7737,7741,7745,7750,7753,7759,7763,7765,
		7768,7775,7778,7785,7793,7796,7805,7820,7833,7844,7847,7851,7857,7873,
		7886,7896,7914,7916,7924,7928,7938,7948,7959,7961,7970,7980,7991,8004,
		8008,8017,8032,8036,8043,8046,8050,8053,8066,8070,8075,8083,8087,8091,
		8102,8109,8115,8119,8121,8125,8131,8140,8146,8148,8150,8157,8161,8170,
		8174,8184,8191,8199,8223,8229,8233,8238,8247,8251,8254,8259,8272,8278,
		8286,8289,8296,8301,8322,8331,8336,8342,8347,8354,8359,8365,8367,8371,
		8378,8382,8385,8392,8397,8400,8407,8411,8420,8424,8432,8434,8441,8446,
		8449,8464,8476,8486,8495,8500,8505,8512,8515,8519,8526,8550,8559,8565,
		8569,8574,8584,8591,8600,8603,8612,8614,8620,8624,8629,8643,8645,8651,
		8657,8660,8669,8687,8694,8698,8702,8718,8725,8733,8737,8744,8757,8773,
		8779,8785,8792,8797,8803,8810,8818,8826,8831,8835,8841,8845,8849,8852,
		8858,8863,8879,8882,8884,8896,8898,8902,8908,8913,8921,8925,8934,8942,
		8948,8951,8960,8965,8972,8982,9008,9019,9021,9023,9031,9054,9062,9072,
		9086,9096,9100,9114,9121,9128,9135,9160,9189,9228,9230,9258,9279,9286,
		9299,9311,9317,9326,9343,9355,9364,9369,9376,9386,9389,9400,9406,9421,
		9429,9438,9447,9450,9455,9464,9469,9483,9493,9501,9515,9522,9530,9538,
		9545,9551,9560,9568,9578,9589,9596,9625,9634,9641,9652,9662,9666,9670,
		9675,9683,9687,9691,9696,9701,9706,9713,9721,9724,9731,9736,9743,9759,
		9774,9788,9793,9812,9817,9822,9829,9836,9843,9852,9858,9864,9870,9878,
		9887,9945,9960,9983,9991,9995,10007,10009,10016,10025,10043,10051,10060,
		10067,10077,10083,10090,10095,10101,10105,10112,10142,10162,10166,10182,
		10189,10202,10210,10230,10236,10248,10253,10263,10295,10300,10309,10314,
		10318,10323,10339,10357,10360,10366,10394,10404,10411,10413,10418,10429,
		10440,10461,10468,10475,10481,10484,10495,10502,10504,10513,10520,10526,
		10532,10536,10551,10568,10570,10594,10598,10609,10612,10616,10621,10626,
		10638,10644,10648,10652,10656,10661,10665,10693
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
